;; Convert an XSchema to an RDFS schema, by a transformation of the
;; .xsd file.
;;
;; The stylesheet generally makes the correct guesses about property
;; types and ranges, but in some cases it needs hints.  To give these,
;; use elements in the x2s="http://ns.eurovotech.org/registry-metadata"
;; namespace.  These are expected to be children of an <xs:appinfo>
;; element within the element/attribute declaration to which they refer.
;;
;;     <x2s:propertyName>[name]</x2s:propertyName>
;;         Indicates that the property name generated for this
;;         element/attribute should be the given <name>, and not
;;         simply the same as the element/attribute name: this is
;;         for the case where there are multiple element/attributes
;;         with the same name but different meanings.  If the given
;;         property name has no prefix, it is taken to be in the
;;         current namespace; if it has a prefix, it must be within
;;         the scope of a namespace declaration for that prefix.  In
;;         fact, I think this might be redundant, since the meaning
;;         of the property will always be deducible from context
;;         (ie, the domain of the property).
;;
;;         This is used for validationLevel elements, which are
;;         modelled by multiple subclasses of the property
;;         listed here.
;;
;;     <x2s:superclass>[name]</x2s:superclass>
;;         Appears within an appinfo annotation for an XSD <extension> element.
;;         Indicates that the superclass for the RDFS class (which
;;         we're currently generating) should be the named class and
;;         namespace, rather than the one corresponding to the class
;;         in the extension element.  For example, the
;;         TabularDB-v0.3.xsd schema extends the VODataService-v0.5
;;         XSchema, but we want to have its generated classes refer to
;;         the VODataService-v1.0 RDF Schema instead.
;;
;;     <x2s:multipleDomains/>
;;         If present on an element/attribute, then the element/attribute
;;         will have multiple domains, and therefore be declared more than
;;         once in the generated RDFS.  Thus it should not be declared
;;         using rdf:ID.  Any content is ignored, but is useful for
;;         noting where the other domain is.
;;
;;         If this has the same name as a property in another schema,
;;         then we need to declare this using an attribute of the form
;;         equivalentProperty='vr:rights', declaring the namespace
;;         prefix if necessary.  The properties had better be
;;         equivalent, too.  This isn't ideal, but is caused by the
;;         problem of having elementFormDefault=unqualified, so we
;;         can't distinguish elements by namespace, and distinguishing
;;         them by context (which type/element they're found within)
;;         is too complicated in the presence of substantial
;;         cross-schema subclassing.
;;
;;     <x2s:propertyRange>[type]</x2s:propertyRange>
;;         The range of the corresponding type should be the given
;;         type, and not the type which would be derived from the
;;         @type attribute.  This is for a few cases where we decide
;;         to model an element in a substantially different way from
;;         the default; these will have to be special-cased in the 
;;         conversion scripts (which means in practice special-casing
;;         them within rdf-VOResource-1.0.lx).  See for example
;;         sia:SIACapRestriction/@validationLevel.
;;         ;This can also be used to force the range
;;         ;of a property derived from an xs:attribute, which would
;;         ;otherwise be presumed to be a datatype property rather than
;;         ;(as might well be the case) an enumeration.
;;
;;     <x2s:objectRange/>
;;         If present, the associated property should be regarded as
;;         having an object range of the same type as is declared in
;;         the XSchema.  This is necessary in a few cases where an
;;         _attribute_'s range has been modelled as an object rather
;;         than a datatype.  The same effect could be achieved by
;;         using <x2s:propertyRange> and repeating the XSD type, but
;;         this seems to document the intent more clearly.
;;
;;     <x2s:datatypeRange/>
;;         If present, this is to be regarded as an XSchema datatype property.
;;         That means that we should declare the range of the property
;;         to be an XSCD reference.  The discussion of how to do this
;;         is at <http://www.w3.org/TR/swbp-xsch-datatypes/>, but the
;;         examples it gives are in the context of instances rather
;;         than schemas.  So use both the XSCD reference and the
;;         rdfs:Datatype as the range.  We'll have to do other things
;;         when and if I start generating OWL here.
;;
;;
;; This script is coupled to the script ../code/xschema2xslt.lx, which
;; generates an XSLT script which converts an instance of the schema
;; to a model of the RDFS schema generated by this script (that
;; clear?).  The points [tag] below should correspond.
;;
;;
;;
;; THE PLAN
;;
;; Simple types
;; ------------
;;
;; We can have simpleTypes or complexTypes.
;;
;; simpleTypes are strings, possibly from an enumerated list (we
;; don't find lists in the RM schemas, so don't handle them here).
;;
;; A simpleType is either an enumeration, in which case we generate
;; a ValuePartition pattern, or it's not, in which case we generate
;; a type consisting of an XSCD reference
;; <http://www.w3.org/TR/xmlschema-ref/> to the simpleType in the
;; input .xsd file.  This type is a subclass of Datatype, which is a
;; subclass of a Literal property.
;;
;; There are no attributes for a simple type.
;;
;; Complex types
;; -------------
;;
;; A *complexType* can have *simpleContent*, which means, basically, a
;; string, with attributes; this is modelled by creating a property
;; for each attribute, plus a property <classname>Value whose domain
;; is the class of the simple content.
;;
;; Alternatively, a *complexType* can have a *sequence* of other
;; elements as content.  Or it can have *complexContent* (possibly/probably
;; containing a sequence).  In either case, we model it as an RDF type,
;; with each of the XSchema type's elements and attributes modelled as
;; properties of that type, with the same name as the element or
;; attribute, but in a slightly different namespace.  Some elements
;; have only a @ref attribute, rather than @name and @type; model this
;; here by declaring the relevant type as an extra domain of that
;; property.  Extensions or restrictions within the complexContent are
;; modelled as subClassOf relations.


(lx:let ((namespace (#f   "http://www.w3.org/1999/XSL/Transform")
                    (xs "http://www.w3.org/2001/XMLSchema")
                    (x2s "http://ns.eurovotech.org/registry-metadata#")
                    (rdf  "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
                    (rdfs "http://www.w3.org/2000/01/rdf-schema#")
                    (owl  "http://www.w3.org/2002/07/owl#"))
         (feature "http://ns.nxg.me.uk/lx/attributes-in-no-namespace")
         (dtd (template (match #t) mode)
              (element (name #t))
              (attribute (name #t))
              (value-of (select #t))
              (when (test #t))
              (if (test #t))
              (with-param (name #t) select)))

(stylesheet version: 1.0 exclude-result-prefixes: "x2s"
  (output method: xml
          version: 1.0
          indent: yes)

  (key name: classes
       match: "xs:simpleType|xs:complexType"
       use: @name)

  (template /
    (apply-templates select: xs:schema))

  (template xs:schema
      (rdf:RDF
       ;; The base attribute here specifies the namespace of the resulting
       ;; RDFSchema -- this must match the ontology name as listed
       ;; in ../code/handler-registry.xml [targetns]
       (attribute name: xml:base (value-of @targetNamespace))
       (owl:Ontology (attribute rdf:about (value-of @targetNamespace))
                     (if @version
                         (owl:versionInfo (value-of @version)))
                     (rdfs:comment "Generated from XSchema by xschema2rdfs.lx")
                     (apply-templates select: xs:annotation)
                     (apply-templates select: xs:import))
       (apply-templates select: "xs:complexType|xs:simpleType")
       ;; we don't have to process x2s:datatypeRange here.
       ))

  ;; [import]
  (template xs:import
      (owl:imports
       (attribute rdf:resource (value-of @namespace))))

  ;; [complextype]
  (template xs:complexType
      (choose
       (when descendant::xs:complexType
         (x2s:ERROR "complexType " (value-of @name)
                    " contains anonymous complexType"))
       (when descendant::xs:simpleType
         (x2s:ERROR "complexType " (value-of @name)
                    " contains anonymous simpleType"))
       (when xs:simpleContent
         (apply-templates select: xs:simpleContent))
       (when "xs:complexContent or xs:sequence"
        (rdfs:Class (attribute rdf:ID (value-of @name))
                    (apply-templates select: xs:annotation)
                    (apply-templates select: "xs:complexContent/xs:extension|xs:complexContent/xs:restriction"
                                     mode: complex-content))
        (apply-templates select: .//xs:element)
        (apply-templates select: .//xs:attribute))
       (otherwise
        (x2s:ERROR "complexType " (value-of @name)
                   " contains unrecognised structure"))))

  (template xs:simpleType
      (choose
       (when .//xs:enumeration          ;OK [simpleenum]
         (rdfs:Class (attribute rdf:ID (value-of @name))
                     (apply-templates select: xs:annotation)
                     (rdfs:comment "Enumeration"))
         ;; If and when I decide to generate OWL here, then produce
         ;; something like the following:
         ;;   <owl:Class rdf:ID="ResourceType">
         ;;     <owl:equivalentClass>
         ;;       <owl:Class>
         ;;         <owl:unionOf rdf:parseType="Collection">
         ;;           <owl:Class rdf:ID="EPOResourceType"/>
         ;; ...but that has implications for the OWL language level, I think.
         (apply-templates select: .//xs:enumeration))
       (when "xs:restriction|xs:extension"           ;OK [simplerestriction]
         (rdfs:Class
          (attribute rdf:about
                     "#xscd(/type::" (value-of @name) ")")
          (rdfs:subClassOf
           (attribute rdf:resource
                      "http://www.w3.org/2000/01/rdf-schema#Datatype"))
          (rdfs:comment
           "Literal XSchema datatype property: see http://www.w3.org/TR/swbp-xsch-datatypes/")
          (apply-templates select: xs:annotation)
          (apply-templates select: "xs:restriction|xs:extension"
                           mode: simple-content)))
       (otherwise
        (x2s:ERROR "simpleType " (value-of @name)
                      " contains no xs:restriction or xs:extension"))))

  (template xs:simpleContent            ;[simplecontent]
      (variable name: n select: ../@name)
    (rdfs:Class (attribute rdf:ID (value-of ../@name))
                (apply-templates select: xs:annotation))
    (rdf:Property (attribute rdf:ID
                             (value-of "translate(substring($n,1,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')")
                             (value-of "substring($n,2)")
                             "Value")
                  (rdfs:domain
                   (attribute rdf:resource "#" (value-of ../@name)))
                  (rdfs:range
                   ;; be vague about the exact type, for the moment
                   (attribute rdf:resource
                              "http://www.w3.org/2000/01/rdf-schema#Datatype"))
                  (apply-templates select: "xs:extension|xs:restriction"
                                   mode: simple-content))
    (apply-templates select: .//xs:attribute))   ;only attributes below

  (template "xs:extension|xs:restriction" ;[complexrestriction]
    mode: complex-content
    (rdfs:subClassOf
     (attribute
      rdf:resource
      (call-template name: create-type-reference;expand-namespace
                     (with-param name: type
                                 (choose
                                  (when ".//x2s:superclass"
                                    (apply-templates select: ".//x2s:superclass"))
                                  (otherwise
                                   (value-of @base))))))))

  (template "xs:extension" mode: simple-content
      (rdfs:comment "Extension of " (value-of @base)))
  (template "xs:restriction" mode: simple-content
      (rdfs:comment "Restriction of " (value-of @base)
                    (if xs:pattern
                        ", pattern " (value-of xs:pattern/@value))))

  (template xs:enumeration              ;[enumeration]
      ;; Implement an enumeration using the ValuePartition pattern.
      (rdfs:Class (attribute rdf:ID
                             (apply-templates select: . mode: generate-name))
                  (rdfs:subClassOf
                   (attribute rdf:resource
                              "#"
                              (value-of ancestor::xs:simpleType/@name)))
                  (for-each select: "preceding-sibling::*|following-sibling::*"
                            (owl:disjointWith
                             (attribute rdf:resource
                                        "#"
                                        (apply-templates select: .
                                                         mode: generate-name))))
                  (apply-templates select: xs:annotation)))
  (template xs:enumeration mode: generate-name
            ;; Create an enumeration class name from the parent type plus
            ;; the @value, with the first letter uppercased.
            (variable name: v select: @value)
            (value-of ancestor::xs:simpleType/@name)
            (value-of "translate(substring($v,1,1),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')")
            (value-of "substring($v,2)"))

  (template "xs:element|xs:attribute"
      (choose

       (when @ref                  ;[elementref] declare this type as
                                   ;an additional domain of the named property
         (rdf:Property
          (attribute rdf:about
                     (call-template name: create-type-reference;expand-namespace
                                    (with-param type
                                                (value-of @ref))))
          (choose
           (when ancestor::xs:complexType/@name
             (rdfs:domain
              (attribute rdf:resource
                         "#"
                         (value-of ancestor::xs:complexType/@name))))
           (otherwise
            (x2s:ERROR "ref=" (value-of @ref) " not in complexType!")))))

       (when @type                      ;[elementtype]
         (rdf:Property
          (choose
           (when xs:annotation/xs:appinfo/x2s:multipleDomains
             (attribute rdf:about
                        (choose         ;[propertyname]
                         (when xs:annotation/xs:appinfo/x2s:propertyName
                           (if "not(contains(.//x2s:propertyName,':'))"
                               "#")
                           (value-of xs:annotation/xs:appinfo/x2s:propertyName))
                         (otherwise
                          "#" (value-of @name)))))
           (otherwise
            (attribute rdf:ID
                       (choose
                        (when xs:annotation/xs:appinfo/x2s:propertyName
                          (value-of xs:annotation/xs:appinfo/x2s:propertyName))
                        (otherwise
                         (value-of @name))))))
          (choose
           (when ancestor::xs:complexType/@name
             (rdfs:domain
              (attribute rdf:resource
                         "#"
                         (value-of ancestor::xs:complexType/@name))))
           (otherwise
            (x2s:ERROR
             "type=" (value-of @type) " not within complexType")))
          (rdfs:range                   ;[propertyrange]
           (attribute rdf:resource
                      (choose
                       (when xs:annotation/xs:appinfo/x2s:datatypeRange
                         ;; forced to be a datatype range, in a context
                         ;; where we'd guess otherwise
                         (call-template
                          name: create-type-reference
                          (with-param name: type
                                      (value-of @type))))
                       (when xs:annotation/xs:appinfo/x2s:objectRange
                         ;; forced to be an object range, in a context
                         ;; where we'd guess otherwise
                         (call-template
                          name: create-type-reference
                          (with-param type
                                      (value-of @type))))
                       (when xs:annotation/xs:appinfo/x2s:propertyRange
                         (call-template
                          name: create-type-reference
                          (with-param type
                                      (value-of xs:annotation/xs:appinfo/x2s:propertyRange))))
                       (when self::xs:attribute
                         ;; this can only be a datatype range, or an enumeration
                         (variable name: typenode
                                   select: "key('classes',@type)")
                         (choose
                          (when "$typenode//xs:enumeration"
                            (call-template name: create-type-reference
                                           (with-param type
                                                       (value-of @type))))
                          (otherwise
                           ;; datatype range
                           (call-template name: create-type-reference
                                          (with-param type
                                                      (value-of @type))))))
                       (otherwise
                        (call-template
                         name: create-type-reference
                         (with-param name: type
                                     (value-of @type)))))))
          (apply-templates select: xs:annotation))
         (if xs:annotation/xs:appinfo/x2s:multipleDomains/@equivalentProperty
             ;; declare the equivalence of this property to the other one
             (variable name: e-pfx
                       (value-of "substring-before(xs:annotation/xs:appinfo/x2s:multipleDomains/@equivalentProperty,':')"))
           (variable name: e-ln
                     (value-of "substring-after(xs:annotation/xs:appinfo/x2s:multipleDomains/@equivalentProperty,':')"))
           (variable name: e-ns
                     (value-of "namespace::*[name()=$e-pfx]"))
           (rdf:Description rdf:about: "#{@name}"
                            (rdfs:subPropertyOf
                             rdf:resource: "{$e-ns}#{$e-ln}")
                            ;; use owl:equivalentProperty.  We actually mean
                            ;; owl:sameAs, since we want to declare that the
                            ;; two properties have the same semantics,
                            ;; rather than just the same extension,
                            ;; but owl:sameAs implies OWL-Full.
                            (owl:equivalentProperty
                             rdf:resource: "{$e-ns}#{$e-ln}"))
           (rdf:Description rdf:about: "{$e-ns}#{$e-ln}"
                            (rdfs:subPropertyOf rdf:resource: "#{@name}"))))

       (otherwise
        (x2s:ERROR
         "Element " (value-of @name) " declared without type or ref"))))

  (template xs:annotation
      ;; Skip xs:appinfo for now, though there's been some experimentation
      ;; with vm:dcterm, so that might be worth tying in in the future.
      (rdfs:comment (apply-templates select: xs:documentation)))

  (template xs:documentation
    (value-of "normalize-space(.)")
    (text "\n\n"))

  ;; I don't think the following is necessary, since the relevant types will
  ;; be declared in the .rdfs files generated from the target .xsd file,
  ;; (see handling of xs:attribute above).
  (template x2s:datatypeRange mode: declare-datatypes
      (rdfs:Class
       (attribute rdf:about
                  (call-template name: create-type-reference
                                 (with-param name: type
                                             (value-of "ancestor::xs:element/@type|ancestor::xs:attribute/@type"))))
       (rdfs:subClassOf
        (attribute rdf:resource
                   "http://www.w3.org/2000/01/rdf-schema#Datatype"))
       (rdfs:comment
        "Literal XSchema datatype property: see http://www.w3.org/TR/swbp-xsch-datatypes/")))

  ;; Named templates
  (lx:dtd ((template (name #t)))
    (template create-type-reference
      (param name: type)
      ;; Determine the namespace and local name of this type.
      ;; This handles both the expansion of namespaces, and the generation
      ;; of XSCD namespaces.
      (variable name: prefix select: "substring-before($type,':')")
      (variable name: ns
                (if "$prefix != ''"
                    (value-of "namespace::*[name()=$prefix]")))
      (variable name: localname
                (choose
                 (when "$prefix=''"
                   (value-of $type))
                 (when "$ns = /xs:schema/@targetNamespace"
                  (value-of "substring-after($type,':')"))))
      ;; If the localname is one of the classes in this XSchema document,
      ;; then find the node declaring the type.  We should do this only
      ;; if the namespace is the same as @targetNamespace, but that check is
      ;; hard in this context, since we have no conditions within expressions
      ;; in XSLT1, and we don't in fact have types with the same local
      ;; name but different namespaces, so it's unlikely to be a
      ;; problem (famous last words).
      (variable name: typenode
                select: "key('classes',$localname)")
      (choose
       (when "$ns = 'http://www.w3.org/2001/XMLSchema'"
         ;; special-case the xsd: namespace
         "http://www.w3.org/2001/XMLSchema"
         (value-of select: "substring-after($type,':')"))
       (when "local-name($typenode) = 'simpleType' and not($typenode//xs:enumeration)" ;simpleType, but not an enumeration
         (value-of select: "$ns")
         "#xscd(/type::"
         (choose
          (when "$prefix != ''"
            (value-of select: "substring-after($type,':')"))
          (otherwise
           (value-of select: "$type")))
         ")")
       (otherwise                       ;complexType or simpleType+enumeration
        (value-of select: "$ns")
        "#"
        (choose
         (when "$prefix=''"
           (value-of select: "$type"))
         (otherwise
          (value-of select: "substring-after($type,':')"))))))

    ) ;; end of named templates
  

))
