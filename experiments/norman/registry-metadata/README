* Overview
I was initially rather indecisive about this, and unable to decide whether to
stick to RDFS for the RM ontology, or to go with OWL.  Presumably the
former would give me more flexibility as regards reasoners.  I suppose
I could switch between them later, with probably equal difficulty, so
I ended up going with OWL, since that's what I'm marginally more familiar
with.

In each case there's no natural way of specifying XSchema datatype
restrictions on classes, but there are notes about this at:

  W3C WG note: XML Schema Datatypes in RDF and OWL
    http://www.w3.org/TR/swbp-xsch-datatypes/

  User-Defined Datatypes in Protege-OWL
    http://protege.stanford.edu/plugins/owl/xsp.html

See also the OWL and RDFS ontologies for Atom <http://atomowl.org/ontologies>




I've ended up largely ignoring the XSchema structure for the main
VOResource schema, and instead re-modelling the semantics from
scratch, based on the XSchema, and the specification at
<http://www.ivoa.net/internal/IVOA/VOResourceV10/WD-VOResource-v1.html>,
with discussion on the wiki at
<http://www.ivoa.net/twiki/bin/view/IVOA/VOResourceV10>.

However, for the simpler XSchemas, it seems reasonable to do this
mechanically, and that's done in xschemas/Makefile



There are plenty of frustrations arising from my use of XSLT to do
this.  There's a useful description of prefix->namespace mapping in
XSL at
<http://www.biglist.com/lists/xsl-list/archives/200412/msg00043.html>,
and the messages following it.




* Modifications to the VOResource-1.0.xsd schema.

References to the XSchema are rmt:typename

These have been fairly substantial, in the second or third go I had at
creating the Ontology.  I've generally been permissive, so that Actor,
for example, now has a logo, rather than just rmt:Contact

Generally, I haven't included cardinality constraints.

** Actor

This has no counterpart in the .xsd schema, but I've used it to group
Creator, Contact and Resource.  I've also used it to replace
rmt:ResourceName.  The logo property has Actor as its domain, so that
it's not only Creators which can have logos.  Actors also now have
email addresses and telephone numbers, because I don't see why they shouldn't!

** Resource

Includes Organisation and Service, which are both described in the RM
WD as being `resources', and both of which have IVOIDs.  They're also
both now types of Actor.

** ResourceName

This has become a subclass of AnnotatedValue, so that it has a 'value'
and an ivo-id (???yes) property.  This is for resources which are
only _potentially_ registered, and that's why it's distinct from
Actor.  Hmmm.

** Resource and Contentlevel types

Substantial hierarchical structure added.

** Capability

Following is FALSE (I think, unless I'm missing something)
# I've just removed this, and added standardID property to the Service
# class.  The .xsd comment says `this type is usually extended and added
# as a child of the specific Service subclass', so I might as well
# support that directly.  The v1.0 VOResource spec has more to say on
# capabilities and Service in Section 2.2.2, so I should examine that
# carefully.  I've made the 'standardID' property have a domain of
# FullAccessURL, rather than be a AnyURI datatype property.

** Identifier

These are formal identifiers.  Holds the AuthorityID and the various
URIs.  The 1.0 spec defines ResourceKey.

** URIs

This holds IdentifierURI and the various AccessURL subtypes.  The
rmt:AccessURL 'use' attribute is discarded in favour of a number of
AccessURL subtypes.

I've modelled various xs:anyURI attributes as object properties, with
AccessURL as their domain.

** ContentDescription

referenceURL's range is here FullAccessURL (rather than being a
xs:anyURI datatype property)

** Relationship

This is modelled by a property relatedResource, with multiple
subproperties mirrorOf, serviceFor, servedBy and derivedFrom.  The
rmt:related-to relationship is therefore redundant, as the parent
'relatedResource' property encapsulates that.

** validationLevel

This is also modelled by a set of subproperties.  The specific
subproperty gives the level, and the object is the validatedBy
Organisation.  Note that this effectively makes the validatedBy
attribute required; I should define a dummy/unknown value for the case
where it's not known.

** Mild renamings

Content -> ContentDescription
Curation -> CurationDescription
Date -> DateTime
ivo-id -> identifier

Date:role property -> Date:dateRole
Interface:role property -> Interface:interfaceRole
The two have identical ranges, but come from separate controlled
vocabularies.  A similar thing could be done with the 'version'
property, but in that case the two properties have closer semantics.


** Value partitions

ContentLevel, Status and ResourceType are value
partitions, rather than constrained strings.

** PaddedString and PaddedURI

Replaced by simple string and URI -- there's no need for this parsing-specific
extension in the ontology.

** Simple types

These are not defined in this ontology, but refer to the types in the
XSchema, as suggested in the swbp-xsch-datatypes reference above.  These
references are currently illegitimate, since the XSchema doesn't use the
id attribute on its simple types.

In fact, Protégé 3.1 doesn't allow you to specify user datatypes in
its interface, so these are generally just string literals.  However
these should ultimately be changed to:

created rmt:UTCDateTime
datetime rmt:UTCDateTime
IdentifierURI restrict uri to rmt:IdentifierURI
updated rmt:UTCDateTime
shortname rmt:ShortName
uri xs:anyURI
authorityID rmt:AuthorityID
resourceKey rmt:ResourceKey

These types could be best handled with XSCD types, perhaps by
making the appropriate declarations in a separate short file.


The simple types defined in VOResource-v1.0.xsd are:
    PaddedString, PaddedURI, ShortName: ignored -- modelled as just strings
    UTCDateTime: see Date
    ValidationLevel: replaced with a partition of properties
    AuthorityID, ResourceKey and IdentifierURI: these are modelled
        with IdentifierURI being a subclass of URI, and authorityID
        and resourceKey being properties of that.
    Type, ContentLevel, Rights: modelled as value partitions

Complex types with simple content:
    Validation: modelled with ValidationLevel partition properties
    ResourceName, Date, Source: subclasses of AnnotatedValue
    AccessURL: modelled as a number of subclasses of AccessURL, with
        the subclass representing the 'use' XSchema attribute



* Generation of Schemas from XSchemas

I think this will work for the simpler schemas, with a few
qualifications.  Eyeball complains about references to classes which
aren't imported.

SIA-0.7: seems OK

VODataService-v0.5: seems broadly OK, though eyeball notices that the
Coverage type is referenced in this schema but not used.  I think this
is an error in the .xsd file, as it should be referring to te
VODataServiceCoverage schema, which has now been merged in to VODataService

When I combine together all of 'SIA-v1.0.rdfs VODataService-v1.0.rdfs
VORegistry-v1.0.rdfs' with cwm, and ./eyeball the result:

% cwm -pipe -rdf SIA-v1.0.rdfs VODataService-v1.0.rdfs VORegistry-v1.0.rdfs >all.rdf
% ../eyeball.sh -check all.rdf -assume owl 

the only things it objects to are references to the VOResource
schema.  If I additionally '-assume ../rdfschemas/VOResource-1.0.owl',
then it objects to fewer things, but these are things I've
renamed in the VOResource schema: ResourceName has changed; the range
of SIA/v1.0#validationLevel is no longer VOResource/v1.0#Validation;
and I seem to have removed AuthorityID.  So I'll need to rethink those.
* Journal
** August 06
    Some progress.  More on the VOResource-v1.0 conversion, trying to
    sort out ways of handling bloody xsi:type.  I think the best thing
    is indeed to preprocess this so that these turn into normal
    element names; or perhaps I should after all use the complicated
    namespace pattern thing indicated by
    <http://www.biglist.com/lists/xsl-list/archives/200412/msg00043.html>.

Mon 21 August

    Progress.  I decided that the first thing to do was to create an
    XSLT script to generate .rdfs from .xsd, working with the SIA
    XSchema in particular.  I've made decent progress.  Things to do
    tomorrow: pass namespaces through to the output (makes Protégé
    happier), annotate the .xsd file to specify property names for
    selected element/attribute names, since there are two lat/long
    elements defined with different ranges.

Wed 23 August

    I thought I just needed to tidy things up here, but no.  The
    conversion script has grown and grown, and got more and more
    sophisticated.  Anyway, I've got myself back to the place where I
    was yesterday, when I thought there was just tidying-up left to
    do, inasmuch as all of the problems reported by eyeball when it
    looks at the merger of SIA-v1.0.rdfs, VORegistry-v1.0.rdfs and
    VODataService-v1.0.rdfs, are to do with reference to the
    VOResource-v1.0 ontology (do 'make all-schemas.eyeballed').  The
    difference is that today I've sorted out the existence and
    handling of the various datatype properties.  Committed as of
    today, 23:00.

Thu 24 August

    I got the xschema stuff sorted out, so it's all working, as far as
    all-schemas.eyeballed is concerned.  So now for the actual
    conversion script...!

    Oddly enough, the ~/Projects/utype-reasoning/usnob_psc.rdf file
    was rejected as ill-formed, though I can't see anything wrong with
    it (but it's very late).

Fri 25 August

    Started on, and made headway with, the conversions to RDF.  Wrote
    votech/registry-metadata/code/ExtractNamespaces.java, though I'm
    now having second thoughts about whether it's actually needed.

Sat 26 August

    Good progress: got the SIAP test case converted, and set up a test
    harness in .../test.

Sun 27 August

    More progress, I think.  I've started on the VODataService-v0.5
    transformer and made respectable progress.  In particular, I think
    I've sorted out a suitable framework for handling xsi:type
    attributes reasonably sanely, though I'd better document it before
    its exoticism becomes too much and I forget how it works.  The
    VODataService stuff looks complicated, however, because it and
    VODataServiceCoverage have merged, and the VODataService-v1.0 now
    seems to refer to STC.

    The siap-results.xml file now mostly converts, though Eyeballing
    it shows there are still a few errors.

Mon 28 August

    Some progress on the conversions.  Most things work, but I'm a bit
    stalled because TabularSkyService and SkyService have been removed
    from SIA between 0.7 and 1.0, and I don't have the .xsd file
    they've been moved to, if indeed they haven't just been deleted.
    And I don't have a network connection.
