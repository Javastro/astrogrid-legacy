#! /opt/local/bin/scsh \
-e main -s
!#

;; Reads in a file in Ntriples format, and normalises it.  That means
;; imposing a consistent ordering on it (by predicate, then subject,
;; then object, with blank nodes being ordered after everything), and
;; then renumbering the blank nodes.
;;
;; 1. The set of triples is ordered in a way which is independent of the 
;;    blank nodes' ID (by subject, then predicate, then object, with
;;    blank nodes ordering after everything, but dependent on the nodes' values).
;;
;; 2. We work through this list in order, replacing all the blank
;;    nodes with new ones with prettier names.
;;
;; 3. Then, just for the sake of readability, we sort the list again,
;;    using a comparator which still orders blank nodes after
;;    everything, but which now also pays attention to the blank node
;;    IDs.
;;
;; The only way this fails to be completely independent of the input
;; is when we get a subject-predicate-blank triple, or
;; blank-predicate-object triple, where the non-blank slots are the
;; same.  In that desperate situation, we can give the
;; --suppress-blank-nodes option.
;;
;; This has got more and more complicated, and I'm still not convinced
;; that it's actually independent of the input triple's bnode names....

(define (main args)
  (let ((reduced-args (reduce-options (cdr args))))
    (let ((triples (sort-triples-using-bnode-values
                    (if (< (length reduced-args) 1)
                        (read-triples (current-input-port))
                        (call-with-input-file (car reduced-args)
                          read-triples)))))
      (for-each (lambda (t)
                  (let ((subj (car t))
                        (pred (cadr t))
                        (obj  (caddr t)))
                    (format #t "~a	~a	~a	.~%" subj pred obj)))
                (sort-triples-using-bnode-names (replace-bnodes triples))))))

;; GET-NEW-BLANK-NODE symbol -> symbol
;; Given a symbol, return a new blank-node string (ie, "_:nnn") for
;; it; but if we've seen this symbol before, return the same string as before.
;;
;; If (option-suppress-bn) is true, however, then always return exactly
;; the same _:? symbol
(define get-new-blank-node
  (let ((known-nodes '()))
    (lambda (bnode-name)
      (if (option-suppress-bn)
          '_:?
          (cond ((assoc bnode-name known-nodes)
                 => cdr)
                (else
                 (let ((new-node-name
                        (string->symbol
                         ;; make pretty/short names which order nicely
                         (let ((l (length known-nodes)))
                           (cond ((< l 10)
                                  (format #f "_:~a" l))
                                 (else
                                  (format #f "_:~a~a"
                                          (ascii->char (+ 96 (quotient l 10)))
                                          (remainder l 10))))))))
                   (set! known-nodes (cons (cons bnode-name new-node-name)
                                           known-nodes))
                   new-node-name)))))))

;; REPLACE-BNODES : list of lists -> list of lists
;; Replace each symbol in the list with a new one from GET-NEW-BLANK-NODE
(define (replace-bnodes l)
  (cond ((null? l)
         '())
        ((list? (car l))
         (cons (replace-bnodes (car l))
               (replace-bnodes (cdr l))))
        ((symbol? (car l))
         (cons (get-new-blank-node (car l))
               (replace-bnodes (cdr l))))
        (else
         (cons (car l)
               (replace-bnodes (cdr l))))))

;; READ-TRIPLES port -> list
;; Read triples from a port, parsing them to three-element lists, with
;; all blank nodes represented by symbols.
(define (read-triples port)
  (define (parse-line line triples)
    (cond ((regexp-search? (rx (: bos
                                  (* whitespace)
                                  (? #\# (* any))
                                  eos))
                           line)
           triples)
          ((regexp-search (rx (: (submatch (or (: #\< (* (~ #\>)) #\>)
                                               (: #\_ #\: (* alphanumeric))))
                                 (+ whitespace)
                                 (submatch (: #\< (* (~ #\>)) #\>))
                                 (+ whitespace)
                                 (submatch (or (: #\< (* (~ #\>)) #\>)
                                               (: #\_ #\: (* alphanumeric))
                                               (: #\" (* (~ #\")) #\")))))
                          line)
           => (lambda (m)
                (let ((subj (compress-file-urls (match:substring m 1)))
                      (obj  (compress-file-urls (match:substring m 3))))
                  (cons (new-triple subj (match:substring m 2) obj)
                        triples))))
          (else
           (format (current-error-port) "Unmatched line: ~a~%" line)
           triples)))
  (port-fold port read-line parse-line '()))

;; Strip any directory (specifically $PWD) from file URLs
(define (compress-file-urls f)
  (cond ((regexp-search (rx (: bos
                               "<file:"
                               (* any)
                               #\/
                               (submatch (+ (~ #\/)))
                               #\>
                               eos))
                        f)
         => (lambda (m)
              (string-append "<file:" (match:substring m 1) ">")))
        (else
         f)))

(define bnode? symbol?)
(define (new-triple s p o)
  (let ((subj (if (char=? (string-ref s 0) #\_) (string->symbol s) s))
        (obj  (if (char=? (string-ref o 0) #\_) (string->symbol o) o)))
    (list subj p obj)))

;; Use cmp
(define-syntax <=3?
  (syntax-rules ()
    ((_ cmp v1 v2 next)
     (case (cmp v1 v2)
       ((-1) #t)
       ((+1) #f)
       (else
        next)))))

(define (sort-triples-using-bnode-values triples)
  ;; create a sort string for each bnode, using only the strings associated
  ;; with it in the set TRIPLES
  (define get-bnode-sort-string
    (let ((bnode-cache '()))
      (define (filter pred l)
        (cond ((null? l)
               '())
              ((pred (car l))
               (cons (car l) (filter pred (cdr l))))
              (else
               (filter pred (cdr l)))))
      (lambda (b)
        (if (not (bnode? b))
            (error (format #f "get-bnode-sort-string: not bnode: ~s" b)))
        (cond ((assq b bnode-cache)
               => cdr)
              (else
               (let ((ss (apply string-append
                                (filter string?
                                        (apply append
                                               (filter (lambda (t)
                                                         (eq? (car t) b))
                                                       triples))))))
                 (set! bnode-cache `((,b . ,ss) . ,bnode-cache))
                 ss))))))
  ;; CMP-STRING-OR-BNODE: return -1/0/+1 if a </=/> b.
  ;; Order bnodes later than all strings, and equal to each other.
  (define (cmp-string-or-bnode a b)
    (cond ((and (bnode? a) (bnode? b))
           (let ((sa (get-bnode-sort-string a))
                 (sb (get-bnode-sort-string b)))
             (cond ((string<? sa sb)
                    -1)
                   ((string=? sa sb)
                    0)
                   (else
                    +1))))
          ((bnode? a)
           +1)
          ((bnode? b)
           -1)
          ((string<? a b)
           -1)
          ((string=? a b)
           0)
          (else
           +1)))
  (define (triple<=?-no-bnodes a b)
    (<=3? cmp-string-or-bnode
          (car a) (car b)
          (<=3? cmp-string-or-bnode
                (cadr a) (cadr b)
                (<=3? cmp-string-or-bnode
                      (caddr a) (caddr b)
                      #t
                      ;; or is this an error?
;;                       (error (format #f
;;                                      "two completely identical triples: ~s ~s"
;;                                      a b))
                      ))))
  (sort-list triples triple<=?-no-bnodes))

;; sort the triples, including the (new) bnode names
(define (sort-triples-using-bnode-names triples)
  ;; CMP-STRINGS
  ;; Order bnodes later than all strings, but including an order for them
  (define (cmp-strings a b)
    (cond ((and (bnode? a) (bnode? b))
           (let ((sa (symbol->string a))
                 (sb (symbol->string b)))
             (cond ((string<? sa sb)
                    -1)
                   ((string=? sa sb)
                    0)
                   (else
                    +1))))
          ((bnode? a)
           +1)
          ((bnode? b)
           -1)
          ((string<? a b)
           -1)
          ((string=? a b)
           0)
          (else
           +1)))
  (define (triple<=?-with-bnodes a b)
    (<=3? cmp-strings
          (car a) (car b)
          (<=3? cmp-strings
                (cadr a) (cadr b)
                (<=3? cmp-strings
                      (caddr a) (caddr b)
                      #t))))

  (sort-list triples triple<=?-with-bnodes))

;; (define new-triple #f)
;; (define get-bnode-sort-string #f)
;; (let ((triples '())
;;       (triples-sorts '()))
;;   (define (filter pred l)
;;     (cond ((null? l)
;;            '())
;;           ((pred (car l))
;;            (cons (car l) (filter pred (cdr l))))
;;           (else
;;            (filter pred (cdr l)))))
;;   (define (*new-triple s p o)
;;     (let ((subj (if (char=? (string-ref s 0) #\_) (string->symbol s) s))
;;           (obj  (if (char=? (string-ref o 0) #\_) (string->symbol o) o)))
;;       (if (symbol? subj)
;;         (cond ((assq subj triples)
;;                => (lambda (triplist)
;;                     (set-cdr! triplist
;;                               (cons (list p obj)
;;                                     (cdr triplist)))))
;;               (else
;;                (set! triples
;;                      (cons `(,subj (,p ,obj))
;;                            triples)))))
;;       (list subj p obj)))
;;   (define (*get-bnode-sort-string b)
;;     ;; we can make the following more sophisticated if necessary
;;     ;; by recursing on any symbols we find in the list of pairs associated
;;     ;; with a particular b
;;     (if (not (bnode? b))
;;         (error "get-bnode-sort-string: not bnode: ~s" b))
;;     (cond ((assq b triples-sorts)
;;            => (lambda (p)
;;                 (let ((s (cdr p)))
;;                   (if (not s)
;;                       (error "get-bnode-sort-string: loop detected!"))
;;                   s)))
;;           ((assq b triples)
;;            => (lambda (p)
;;                 ;;(set! triples-sorts `((,b . #f) . ,triples-sorts)) ; loop guard
;;                 (let ((ss (apply string-append
;;                                  (filter string?
;;                                          (apply append (cdr p))))))
;;                   (set! triples-sorts `((,b . ,ss) . ,triples-sorts))
;;                   ss)))
;;           (else
;;            (error "get-bnode-sort-string: requested string for unknown ~s" b))))

;;   (set! new-triple *new-triple)
;;   (set! get-bnode-sort-string *get-bnode-sort-string))








;; TRIPLE-BY-SUBJECT<=? triple triple -> boolean
;; Given two triples, return #t if the first is <= the second.  The
;; ordering is by subject, then predicate, then object, with a symbol
;; in any position ordering after all strings.
;; (define (triple-by-subject<=? a b)
;;   (<=3? cmp-strings
;;         (car a) (car b)                 ;subject
;;         (<=3? cmp-strings
;;               (cadr a) (cadr b)         ;predicate
;;               (<=3? cmp-strings
;;                     (caddr a) (caddr b) ;object
;;                     #t))))
                                        ;equal

;; TRIPLE-BY-PREDICATE<=? triple triple -> boolean
;; The same, but predicate-subject-object
;; (define (triple-by-predicate<=? a b)
;;   (<=3? cmp-strings
;;         (cadr a) (cadr b)
;;         (<=3? cmp-string-or-symbol
;;               (car a) (car b)
;;               (<=3? cmp-string-or-symbol
;;                     (caddr a) (caddr b)
;;                     #f))))

(define (sort-list l <=)
  (define (merge-lists ina inb)
    (let loop ((res '())
               (a ina)
               (b inb))
      (cond
       ((null? a)
        (append (reverse res) b))
       ((null? b)
        (append (reverse res) a))
       (else
        (if (<= (car a) (car b))
            (loop (cons (car a) res)
                  (cdr a)
                  b)
            (loop (cons (car b) res)
                  a
                  (cdr b)))))))

  (define (partition-list pe inl)
    (let loop ((pa '())
               (pb '())
               (l inl))
      (if (null? l)
          (values pa pb)
          (if (<= (car l) pe)
              (loop (cons (car l) pa) pb (cdr l))
              (loop pa (cons (car l) pb) (cdr l))))))

  (case (length l)
    ((0 1) l)
    ((2) (if (<= (car l) (cadr l))
             l
             (list (cadr l) (car l))))
    (else
     (let ((pe (car l)))
       (call-with-values
           (lambda () (partition-list pe (cdr l)))
         (lambda (left right)
           (merge-lists (sort-list left <=) (cons pe (sort-list right <=)))))))))

(define (make-option default)
  (let ((v default))
    (lambda a
      (if (null? a)
          v
          (set! v (car a))))))
(define option-suppress-bn (make-option #f))
;;(define option-order-predicate (make-option triple-by-predicate<=?))
(define (reduce-options option-list)
  (cond ((null? option-list)
         option-list)
        ((regexp-search (rx (: bos #\- #\-
                               (submatch (* any))))
                        (car option-list))
         => (lambda (m)
              (case (string->symbol (match:substring m 1))
                ((suppress-blank-nodes)
                 (option-suppress-bn #t))
;;                 ((order-by-subject)
;;                  (option-order-predicate triple-by-subject<=?))
                (else
                 (error "Unrecognised option ~s" (car option-list))))
              (reduce-options (cdr option-list))))
        (else
         option-list)))
