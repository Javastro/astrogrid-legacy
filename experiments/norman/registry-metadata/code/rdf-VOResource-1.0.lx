;; Convert an instance of VOResource-1.0 to RDF statements (as
;; striped RDF/XML) using the
;; http://ns.eurovotech.org/VOResource-1.0.owl#" ontology.

(lx:let ((namespace (#f   "http://www.w3.org/1999/XSL/Transform")
                    (x2s  "http://ns.eurovotech.org/registry-metadata#")
                    (ri   "http://www.ivoa.net/xml/RegistryInterface/v1.0")
                    (vor  "http://www.ivoa.net/xml/VOResource/v1.0")
                    ;("rmo" "http://ns.eurovotech.org/VOResource-1.0.owl#")
                    (voro "http://www.ivoa.net/xml/VOResource/v1.0#")
                    (vorego  "http://www.ivoa.net/xml/VORegistry/v1.0#")

                    ;(vs "http://www.ivoa.net/xml/VODataService/v0.5")
                    (xsi "http://www.w3.org/2001/XMLSchema-instance")

                    (rdf  "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
                    (rdfs "http://www.w3.org/2000/01/rdf-schema#"))
         (feature "http://ns.nxg.me.uk/lx/attributes-in-no-namespace")
         (dtd (template (match #t) mode name priority)
              (element (name #t))
              (attribute (name #t))
              (value-of (select #t))
              (when (test #t))
              (if (test #t))
              (for-each (select #t))
              (with-param (name #t) select)))

(stylesheet version: 1.0 exclude-result-prefixes: "ri vor xsi"
  (output method: xml
          version: 1.0
          indent: yes)

  ;; the namespace bound to prefix voro, as a string
  (variable name: vor-ns http://www.ivoa.net/xml/VOResource/v1.0#)

  (template "ri:Resource"
    (element name: "voro:Resource"
             (choose
              (when vor:identifier
                (attribute rdf:about
                           (apply-templates select: "vor:identifier/text()")))
              (when identifier
                (attribute rdf:about
                           (apply-templates select: "identifier/text()"))))
             (choose
              (when @xsi:type
                (call-template name: resolve-xsitype))
              (otherwise
               (call-template name: vor:Resource)))))

  ;; name this template a vor:Resource, even though the template
  ;; matches ri:Resource.  This is because it's handled here, in the
  ;; VOResource handler, and because it better matches what one expects.
  (template name: vor:Resource
    (if @created
        (voro:created (value-of @created)))
    (if @updated
        (voro:updated (value-of @created)))
    (if @status
        (voro:status
         (choose
          (when "@status = 'active'"
            (voro:ActiveStatus))
          (when "@status = 'inactive'"
            (voro:InactiveStatus))
          (when "@status = 'deleted'"
            (voro:DeletedStatus))
          (otherwise
           (x2s:UNKNOWN)))))
    (apply-templates))

  ;; elements with simple content -- easy to handle
  (template "date|description|logo|shortName|subject|version"
      (element name: "voro:{local-name()}"
               (apply-templates)))
  ;; elements with normalised simple content
  (template "address|email|telephone|title"
    (element name: "voro:{local-name()}"
             (value-of "normalize-space()")))

  ;; elements with 'simple' complex content -- no attributes, and nothing
  ;; funky needing done with the content.  These just need parseType=Resource.
  ;; (only one such element in this schema)
  (template curation
    (element "voro:{local-name()}"
             (attribute name: rdf:parseType Resource)
             (apply-templates)))

  (template identifier
    ;; handled here as well as in rdf:about attribute on containing element
    (call-template name: make-identifier-uri
                   (with-param id (apply-templates))))

  ;; various things which map to Actor
  (template "contributor|facility|instrument|name|publisher"
    (element "voro:{local-name()}"
             (call-template name: voro:resource-name)))

  ;; Creator and contact have similar but not identical contents in the
  ;; XSchema, but identical allowed properties in the Ontology.
  ;; Handle them the same way.
  (template creator
      (voro:creator
       (voro:Creator
        (apply-templates))))

  ;; Contact
  (template contact
      (voro:contact
       (voro:Contact
        (apply-templates))))

  (template capability
    (voro:capability rdf:parseType: Resource
       (choose
        (when @xsi:type
          (call-template name: resolve-xsitype))
        (otherwise
         (call-template name: vor:Capability)))
       ;; (apply-templates)
       ))

  ;; Content
  (template content
      (voro:content
       (element voro:ContentDescription
                (apply-templates))))

  (template source
      (voro:source rdf:parseType: Resource
       (if @format
           (voro:format (value-of @format)))
       (voro:value (apply-templates))))

  (template referenceURL
      (voro:referenceURL
       (voro:FullAccessURL
        (attribute voro:uri (apply-templates)))))

  (template accessURL
    (voro:accessURL
     (call-template name: vor:AccessURL)))

  (template wsdlURL
    (voro:wsdlURL
     (voro:FullAccessURL
      (attribute voro:uri (apply-templates)))))

  (template rights
    (voro:rights
     (call-template name: vor:Rights)))

  (template type
    ;; do mild normalisation on the given string
    (variable name: type
              (value-of "translate(text(),
                                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ ',
                                   'abcdefghijklmnopqrstuvwxyz')"))
    ;;(attribute rdf:type
    (variable name: propertyname
              (choose
               ;; this list of types is taken from the document
               ;; Resource Metadata for the Virtual Observatory,
               ;; v1.1, WD 2005 June 21
               (when "$type = 'archive'"	voro:ArchiveType)
               (when "$type = 'bibliography'"	voro:BibliographyType)
               (when "$type = 'catalog'"	voro:CatalogType)
               (when "$type = 'journal'"	voro:JournalType)
               (when "$type = 'library'"	voro:LibraryType)
               (when "$type = 'simulation'"	voro:SimulationType)
               (when "$type = 'survey'"		voro:SurveyType)
               (when "$type = 'education'"	voro:EducationType)
               (when "$type = 'outreach'"	voro:OutreachType)
               (when "$type = 'eporesource'"	voro:EPOResourceType)
               (when "$type = 'animation'"	voro:AnimationType)
               (when "$type = 'artwork'"	voro:ArtworkType)
               (when "$type = 'background'"	voro:BackgroundType)
               (when "$type = 'basicdata'"	voro:BasicDataType)
               (when "$type = 'historical'"	voro:HistoricalType)
               (when "$type = 'photographic'"	voro:PhotographicType)
               (when "$type = 'press'"		voro:PressType)
               (when "$type = 'organisation'"	voro:OrganisationType)
               (when "$type = 'project'"	voro:ProjectType)
               (when "$type = 'registry'"	voro:RegistryType)
               (otherwise ;; including matching type 'other'
                voro:OtherType))
              )
    (voro:type
     (element {$propertyname})))

  (template contentLevel
      ;; do mild normalisation on the given string
      (variable name: cl
                (value-of "translate(text(),
                                               'ABCDEFGHIJKLMNOPQRSTUVWXYZ ',
                                               'abcdefghijklmnopqrstuvwxyz')"))
    (variable name: cltype
              (choose
               (when "$cl = 'general'"
                 voro:GeneralContentLevel)
               (when "$cl = 'elementaryeducation'"
                 voro:ElementaryEducationContentLevel)
               (when "$cl = 'middleschooleducation'"
                 voro:MiddleSchoolEducationContentLevel)
               (when "$cl = 'secondaryeducation'"
                 voro:SecondaryEducationContentLevel)
               (when "$cl = 'communitycollege'"
                 voro:CommunityCollegeContentLevel)
               (when "$cl = 'university'"
                 voro:UniversityContentLevel)
               (when "$cl = 'research'"
                 voro:ResearchContentLevel)
               (when "$cl = 'amateur'"
                 voro:AmateurContentLevel)
               (when "$cl = 'informaleducation'"
                 voro:InformalEducationContentLevel)
               ;; simply ignore this element if its value is not one of the
               ;; recognised ones
               ))
    (voro:contentLevel
     (element "{$cltype}")))

  ;; There is no 'template relationshipType', since this is handled
  ;; internally to 'relationship'
  (template relationship
      (variable name: type
                (value-of "translate(relationshipType,
                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ- ',
                                     'abcdefghijklmnopqrstuvwxyz')"))
    (apply-templates select: relatedResource
                     (with-param
                      rel
                      (choose
                       (when "$type = 'mirrorof'"    voro:mirrorOf)
                       (when "$type = 'servicefor'"  voro:serviceFor)
                       (when "$type = 'servedby'"    voro:servedBy)
                       (when "$type = 'derivedfrom'" voro:derivedFrom)
                       (otherwise voro:relatedResource)))))

  (template relatedResource
      (param name: rel voro:relatedResource)
    (element {$rel}
             (element voro:Actor
                      (if @ivo-id
                          (call-template name: make-identifier-uri
                                         (with-param id
                                                     (value-of @ivo-id))))
                      (voro:name (value-of "normalize-space()")))))

  ;; If interface is present here, then we're actually processing
  ;; a subtype of Resource.  Since interface is `abstract' in XSchema terms,
  ;; there should be an xsi:type attribute.
  ;; Since this is a type which is extended, it must have a 'name' which
  ;; matches the element name.
  (template interface
    (voro:interface
     (voro:Interface
      (choose
       (when @xsi:type
         (call-template name: resolve-xsitype))
       (otherwise
        (call-template name: vor:Interface))))))

  (template securityMethod
      (voro:securityMethod rdf:parseType: Resource
                           (voro:standardID (apply-templates))))

  (template validationLevel
    (call-template name: vor:Validation))

  ;; Named templates
  (lx:dtd ((template (name #t))
           (element (name #t) namespace))

    ;; Handle ResourceName elements, which map to Actor or one of its
    ;; subtypes, optionally given in the 'type' parameter.
    ;; If the namespace of the 'type' element name is not voro, then the
    ;; appropriate namespace should be given as the 'ns' parameter.  In this
    ;; case, the 'type' name may, but need not, have a prefix.
    (template voro:resource-name
      (param name: type voro:Actor)
      (param name: ns (value-of $vor-ns))
      (variable name: content (value-of "normalize-space()"))
      (element "{$type}" namespace: {$ns}
                  (if "string-length($content) > 0"
                      (element voro:name (value-of $content)))
                  (if @ivo-id
                      (call-template name: make-identifier-uri
                                     (with-param id (value-of @ivo-id))))))
  
    (template vor:Validation
      (variable name: level select: "normalize-space()") ;content is an integer
      (element "voro:{concat('validationLevel',$level)}"
               (attribute name: rdf:parseType Resource)
               (choose
                (when @validatedBy
                  (call-template name: make-identifier-uri
                                 (with-param id (value-of @validatedBy))))
                (otherwise
                 (call-template name: make-identifier-uri ;FIXME bad default
                                (with-param id "ivo://ERROR/unknown"))))))

    ;; Here are `base types'
    (template vor:Interface
      (if @role
          (voro:interfaceRole (value-of @role)))
      (if @version
          (voro:version (value-of @version)))
      (apply-templates))

    (template vor:Capability
      (choose
       (when "@standardID and starts-with(@standardID,'ivo://')"
         (call-template name: make-identifier-uri
                        (with-param id (value-of @standardID))
                        (with-param propname voro:standardID)))
       (when "@standardID"
         (voro:standardID (value-of @standardID))))
      (apply-templates))

    ;; the following aren't extended, but the template is referred to
    ;; by other stylesheets (this isn't a complete list of types defined
    ;; in this XSchema -- ought it to be?)
    (template vor:AuthorityID
      ;; model this as an IdentifierURI with no resource key
      (variable name: authid (apply-templates))
      (voro:authorityID (value-of $authid))
      (voro:uri "ivo://" (value-of $authid)))

    (template vor:Rights
      (variable name: rights-type
                (value-of "normalize-space()"))
      (variable name: propertyname
                (choose
                 (when "$rights-type = 'public'"	PublicRights)
                 (when "$rights-type = 'proprietary'"	ProperietaryRights)
                 (when "$rights-type = 'secure'"	SecureRights)
                 (otherwise
                  ERROR-RIGHTS)))
      (rdf:type rdf:resource: "{$vor-ns}{$propertyname}"))

    (template vor:AccessURL
      (variable name: access-url-type
                (choose
                 (when "@use = 'base'"
                   BaseAccessURL)
                 (when "@use = 'full'"
                   FullAccessURL)
                 (when "@use = 'dir'"
                   DirectoryAccessURL)
                 (otherwise ;; eh?
                  AccessURL)))
      (rdf:type rdf:resource: "{$vor-ns}{$access-url-type}")
      (element voro:uri (apply-templates)))

    ;; The following can be both `base types' and extended ones
    (template vor:Service
      (rdf:type rdf:resource: {$vor-ns}Service)
      (call-template name: vor:Resource))

    (template vor:WebService
      (rdf:type rdf:resource: {$vor-ns}WebService)
      (call-template name: vor:Interface))

    (template vor:WebBrowser
      (rdf:type rdf:resource: {$vor-ns}WebBrowser)
      (call-template name: vor:Interface))

    (template vor:Organisation
      (rdf:type rdf:resource: {$vor-ns}Organisation)
      (call-template name: vor:Resource))

    ;; This handler's magic resolve-xsitype template
    (template vor:resolve-xsitype
      (param name: type)
      (choose
       (when "$type='WebService'"
         (call-template name: vor:WebService))
       (when "$type='WebBrowser'"
         (call-template name: vor:WebBrowser))
       (when "$type='Organisation'"
         (call-template name: vor:Organisation))))

    ;; Given an 'id' (and IVOID), create an identifier resource with range
    ;; IdentifierURI, containing the broken-down components of the 'id'.
    (template make-identifier-uri
      (param name: id)
      (param name: propname voro:identifier)
      ;;(param name: ns "http://www.ivoa.net/xml/VOResource/v1.0#")
;      (element "{name(namespace::*[.=$ns])}{$propname}"
      (element "{$propname}"
       (attribute rdf:parseType Resource)
       (call-template name: make-identifier-uri-body
                      (with-param id (value-of $id)))))
    (template make-identifier-uri-body
      (param name: id)
      (voro:uri (value-of $id))
      (variable name: id-and-key select: "substring-after($id,'ivo://')")
      (choose
       (when "contains($id-and-key,'/')"
         (voro:authorityID (value-of "substring-before($id-and-key,'/')"))
         (voro:resourceKey (value-of "substring-after($id-and-key,'/')")))
       (otherwise
        (voro:authorityID (value-of $id-and-key)))))

    )

  ))
