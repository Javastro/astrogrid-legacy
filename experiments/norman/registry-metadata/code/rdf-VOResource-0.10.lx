;; Convert an instance of VOResource-0.10 to RDF statements (as
;; striped RDF/XML) using the
;; http://ns.eurovotech.org/VOResource-1.0.owl#" ontology.

(lx:let ((namespace (#f   "http://www.w3.org/1999/XSL/Transform")
                    (ri   "http://www.ivoa.net/xml/RegistryInterface/v0.1")
                    (vor  "http://www.ivoa.net/xml/VOResource/v0.10")
                    ;("rmo" "http://ns.eurovotech.org/VOResource-1.0.owl#")
                    (voro "http://www.ivoa.net/xml/VOResource/v1.0#")

                    (vs "http://www.ivoa.net/xml/VODataService/v0.5")
                    (xsi "http://www.w3.org/2001/XMLSchema-instance")

                    (rdf  "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
                    (rdfs "http://www.w3.org/2000/01/rdf-schema#"))
         (feature "http://ns.nxg.me.uk/lx/attributes-in-no-namespace")
         (dtd (template (match #t) mode name)
              (element (name #t))
              (attribute (name #t))
              (value-of (select #t))
              (when (test #t))
              (if (test #t))
              (for-each (select #t))
              (with-param (name #t) select)))

(stylesheet version: 1.0 exclude-result-prefixes: "ri vor vs xsi"
  (output method: xml
          version: 1.0
          indent: yes)

;;   (variable name: voro-namespace
;;             "http://www.ivoa.net/xml/VOResource/v1.0#")

;;   (template /
;;       (rdf:RDF
;;        (apply-templates select: "//ri:Resource")))

  (template "ri:Resource" name: ri:Resource
      ;; we're making this a voro:Resource, though if the element contains,
      ;; for example, an <interface> element (because some xsi:type attribute
      ;; has sneakily declared it as a subtype of ri:Resource), then
      ;; when we handle that by putting in the corresponding property,
      ;; this will in fact be (in this example) a voro:Service object.
      ;; I think this is OK -- any reasoner will be happy with that, won't it?
      (element name: "voro:Resource"
               (attribute rdf:about
                          (apply-templates select: "vor:identifier/text()"))
               ;;(attribute rdf:type "voro:Resource")
;;                (call-template name: emit-rdf-type
;;                               (with-param name: type
;;                                           voro:Resource))

;;                (if @xsi:type
;;                    (call-template name: process-xsi-type))
;;                (if @xsi:type
;;                    (call-template name: emit-rdf-type
;;                                   (with-param name: type
;;                                               select: @xsi:type)))
               (if @created
                   (voro:created (value-of @created)))
               (if @updated
                   (voro:updated (value-of @created)))
               (if @status
                   (voro:status
                    (element (choose
                                         (when "@status = 'active'"
                                           voro:ActiveStatus)
                                         (when "@status = 'inactive'"
                                           voro:InactiveStatus)
                                         (when "@status = 'deleted'"
                                           voro:DeletedStatus))
;; rdf:Description
;;                              (attribute rdf:type
;;                                         )
                             )))
               (apply-templates)
               ))

  ;; elements for which we can use the default template:
  ;; vor:title
  ;; vor:date
  ;; vor:version
  ;; Creator and contact have similar but not identical contents in the
  ;; XSchema, but identical allowed properties in the Ontology.
  ;; Handle them the same way.
  ;; vor:logo
  ;; vor:address
  ;; vor:telephone
  ;; vor:subject
  ;; vor:description
  (template vor:*
      (element name: "voro:{local-name()}"
               (apply-templates)))

  (template vor:shortName
      (voro:shortname (apply-templates)))

  (template vor:identifier
      ;; no content -- handled in rdf:about attribute on containing element
      )

  ;; various things which map to Actor
  (template vor:publisher
      (voro:publisher
       (call-template name: resource-name)))

  (template vor:contributor
      (voro:contributor
       (call-template name: resource-name)))

  ;; Creator and contact have similar but not identical contents in the
  ;; XSchema, but identical allowed properties in the Ontology.
  ;; Handle them the same way.
  (template vor:creator
      (voro:creator
       (voro:Creator
        (apply-templates))))

  ;; Contact
  (template vor:contact
      (voro:contact
       (voro:Contact
        (apply-templates))))

  (template vor:curation
      (voro:curation rdf:parseType: Resource
        (apply-templates)))

  (template vor:name
      (voro:name (apply-templates))
    (if @ivo-id
        (voro:identifier (value-of @ivo-id))))

  ;; Content
  (template vor:content
      (voro:content
       (element voro:ContentDescription
                (apply-templates))))

  (template vor:source
      (element voro:Source
               (if @format
                   (voro:format @format))
               (voro:value (apply-templates))))

  (template vor:referenceURL
      (element voro:referenceURL
               (voro:FullAccessURL
                (attribute voro:uri (apply-templates)))))

  (template vor:accessURL
      (variable name: access-url-type
                (choose
                 (when "@use = 'base'"
                   voro:BaseAccessURL)
                 (when "@use = 'full'"
                   voro:FullAccessURL)
                 (when "@use = 'dir'"
                   voro:DirectoryAccessURL)
                 (otherwise ;; eh?
                  voro:AccessURL)))
      (voro:accessURL
       (element "{$access-url-type}"
                (attribute voro:uri (apply-templates)))))

  (template vor:type
                ;; do mild normalisation on the given string
                (variable name: type
                          (value-of "translate(text(),
                                               'ABCDEFGHIJKLMNOPQRSTUVWXYZ ',
                                               'abcdefghijklmnopqrstuvwxyz')"))
                ;;(attribute rdf:type
                (variable name: propertyname
                           (choose
                            ;; this list of types is taken from the document
                            ;; Resource Metadata for the Virtual Observatory,
                            ;; v1.1, WD 2005 June 21
                            (when "$type = 'archive'"
                              voro:ArchiveType)
                            (when "$type = 'bibliography'"
                              voro:BibliographyType)
                            (when "$type = 'catalog'"
                              voro:CatalogType)
                            (when "$type = 'journal'"
                              voro:JournalType)
                            (when "$type = 'library'"
                              voro:LibraryType)
                            (when "$type = 'simulation'"
                              voro:SimulationType)
                            (when "$type = 'survey'"
                              voro:SurveyType)
                            (when "$type = 'education'"
                              voro:EducationType)
                            (when "$type = 'outreach'"
                              voro:OutreachType)
                            (when "$type = 'eporesource'"
                              voro:EPOResourceType)
                            (when "$type = 'animation'"
                              voro:AnimationType)
                            (when "$type = 'artwork'"
                              voro:ArtworkType)
                            (when "$type = 'background'"
                              voro:BackgroundType)
                            (when "$type = 'basicdata'"
                              voro:BasicDataType)
                            (when "$type = 'historical'"
                              voro:HistoricalType)
                            (when "$type = 'photographic'"
                              voro:PhotographicType)
                            (when "$type = 'press'"
                              voro:PressType)
                            (when "$type = 'organisation'"
                              voro:OrganisationType)
                            (when "$type = 'project'"
                              voro:ProjectType)
                            (when "$type = 'registry'"
                              voro:RegistryType)
                            (otherwise ;; including matching type 'other'
                             voro:OtherType))
                           )
       (voro:type
               (element "{$propertyname}")))

  (template vor:contentLevel
      ;; do mild normalisation on the given string
      (variable name: cl
                (value-of "translate(text(),
                                               'ABCDEFGHIJKLMNOPQRSTUVWXYZ ',
                                               'abcdefghijklmnopqrstuvwxyz')"))
    (variable name: cltype
              (choose
               (when "$cl = 'general'"
                 voro:GeneralContentLevel)
               (when "$cl = 'elementaryeducation'"
                 voro:ElementaryEducationContentLevel)
               (when "$cl = 'middleschooleducation'"
                 voro:MiddleSchoolEducationContentLevel)
               (when "$cl = 'secondaryeducation'"
                 voro:SecondaryEducationContentLevel)
               (when "$cl = 'communitycollege'"
                 voro:CommunityCollegeContentLevel)
               (when "$cl = 'university'"
                 voro:UniversityContentLevel)
               (when "$cl = 'research'"
                 voro:ResearchContentLevel)
               (when "$cl = 'amateur'"
                 voro:AmateurContentLevel)
               (when "$cl = 'informaleducation'"
                 voro:InformalEducationContentLevel)
               ;; simply ignore this element if its value is not one of the
               ;; recognised ones
               ))
    (voro:contentLevel
     (element "{$cltype}")))

  (template vor:relationship
      (variable name: type
                (value-of "translate(vor:relationshipType,
                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ- ',
                                     'abcdefghijklmnopqrstuvwxyz')"))
    (apply-templates select: vor:relatedResource
                     (with-param rel
                                 (choose
                                  (when "$type = 'mirrorof'"    voro:mirrorOf)
                                  (when "$type = 'servicefor'"  voro:serviceFor)
                                  (when "$type = 'servedby'"    voro:servedBy)
                                  (when "$type = 'derivedfrom'" voro:derivedFrom)
                                  (otherwise voro:relatedResource))))
    ;;     (choose
    ;;      (when "$type = 'mirrorof'"
    ;;        (apply-templates vor:relatedResource
    ;;                         (with-param rel voro:mirrorOf)))
    ;;      (when "$type = 'servicefor'"
    ;;        (apply-templates vor:relatedResource
    ;;                         (with-param rel voro:serviceFor)))
    ;;      (when "$type = 'servedby'"
    ;;        (apply-templates vor:relatedResource
    ;;                         (with-param rel voro:servedBy)))
    ;;      (when "$type = 'derivedfrom'"
    ;;        (apply-templates vor:relatedResource
    ;;                         (with-param rel voro:derivedFrom)))
    ;;      (otherwise
    ;;       (apply-templates vor:relatedResource)))
    )

  (template vor:relatedResource
      (param name: rel voro:relatedResource)
    (element {$rel}
             (element voro:Actor
                      (if @ivo-id
                          (voro:identifier (value-of @ivo-id)))
                      (voro:name (apply-templates)))))

  ;; If vor:interface is present here, then we're actually processing
  ;; a subtype of vor:Resource.  Since interface is `abstract' in XSchema terms,
  ;; there should be an xsi:type attribute.
;;   (template vor:interface
  (template vor:interface
      ;; empty, for the moment
      )
;;       (voro:interface
;;        (rdf:Description
;;         (if @xsi:type
;;             (call-template name: process-xsi-type))
;;         (for-each "@*[not(namespace-uri())]"
;;                   XXX)))
;;     (apply-templates))

  ;; Named templates
  (lx:dtd ((template (name #t)))
    ;; Handle ResourceName elements, which map to Actor or one of its subtypes,
    ;; optionally given in the 'type' parameter.
    (template resource-name
      (param name: type voro:Actor)
      (element "{$type}"
               (element voro:name
                        (apply-templates))
               ;(attribute voro:name (apply-templates))
               (if @ivo-id
                   (element voro:identifier
                            (attribute voro:uri (value-of @ivo-id))))))

;;     (template emit-rdf-type
;;         (param name: type)
;;       (variable name: prefix select: "substring-before($type,':')")
;;       (rdf:type
;;        (attribute name: prefix (value-of $prefix))
;;        (attribute name: rdf:resource
;;                   (value-of select: "namespace::*[name()=$prefix]")
;;                   "#"
;;                   (value-of select: "substring-after($type,':')"))))
;;     (template process-xsi-type
;;         (call-template name: emit-rdf-type
;;                        (with-param name: type
;;                                    select: @xsi:type)))

;;     (template process-xsi-type
;;       (variable name: prefix select: "substring-before(@xsi:type, ':')")
;;       (rdf:type
;;        (attribute name: rdf:resource
;;                   (value-of select: "namespace::*[name()=$prefix]")
;;                   "#"
;;                   (value-of select: "substring-after(@xsi:type,':')"))))
    )

  ))
