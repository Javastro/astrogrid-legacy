;; Convert an instance of SIA-1.0 to RDF statements
;; (as striped RDF/XML) using the ontology
;; http://www.ivoa.net/xml/SIA-v1.0.rdfs

(lx:let ((namespace (#f   "http://www.w3.org/1999/XSL/Transform")

                    (sia "http://www.ivoa.net/xml/SIA/v1.0")
                    (siao "http://www.ivoa.net/xml/SIA/v1.0#")

                    (ds "http://www.ivoa.net/xml/VODataService/v0.5")
                    (vor  "http://www.ivoa.net/xml/VOResource/v0.10")
                    (voro "http://www.ivoa.net/xml/VOResource/v1.0#")
                    (x2s "http://ns.eurovotech.org/registry-metadata#")

                    (xsi "http://www.w3.org/2001/XMLSchema-instance")

                    (rdf  "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
                    ;(rdfs "http://www.w3.org/2000/01/rdf-schema#")
                    )
         (feature "http://ns.nxg.me.uk/lx/attributes-in-no-namespace")
         (dtd (template (match #t) mode name)
              (element (name #t))
              (attribute (name #t))
              (value-of (select #t))
              (when (test #t))
              (if (test #t))
              (for-each (select #t))
              (call-template (name #t))
              (with-param (name #t) select)))

(stylesheet version: 1.0 exclude-result-prefixes: "sia xsi"
  (output method: xml
          version: 1.0
          indent: yes)

  (variable name: sia-ns http://www.ivoa.net/xml/SIA/v1.0#)

  ;; validationLevel is handled in rdf-VOResource-1.0.lx

  (template "description|maxFileSize|maxRecords|verb|extras"
    (element name: "siao:{local-name()}"
             (apply-templates)))

  ;; elements with 'simple' complex content -- no attributes, and nothing
  ;; funky needing done with the content.  These just need parseType=Resource.
  (template "interface|testQuery"
    (element "siao:{local-name()}"
             (attribute name: rdf:parseType Resource)
             (apply-templates)))

  ;; default template
;;   (template *
;;       (element name: "siao:{local-name()}"
;;                (apply-templates)))

  (template imageServiceType
    (variable name: ist (apply-templates))
    (variable name: type
              (choose
               (when "$ist='Cutout'"  siao:ImageServiceTypeCutout)
               (when "$ist='Mosaic'"  siao:ImageServiceTypeMosaic)
               (when "$ist='Atlas'"   siao:ImageServiceTypeAtlas)
               (when "$ist='Pointed'" siao:ImageServiceTypePointed)
               (otherwise x2s:UNKNOWN)))
    (siao:imageServiceType
     (element {$type})))

  ;; elements lat and long are not processed using templates,
  ;; but instead directly by their parents.
  
  (template "maxImageExtent|maxImageSize|maxQueryRegionSize|pos|size"
    (element name: "siao:{local-name()}"
             (attribute name: siao:lat (value-of "lat/text()"))
             (attribute name: siao:long (value-of "long/text()"))))

;;   (template maxImageSize
;;     ;; RDFS properties are not the same as the XSD element names
;;     (siao:maxImageSize siao:pixelLatitude: "{lat/text()}"
;;                        siao:pixelLongitude: "{long/text()}"))

;;   (template maxQueryRegionSize
;;     (siao:maxQueryRegionSize siao:lat: "{lat/text()}"
;;                              siao:long: "{long/text()}"))

  ;; Named templates
  (lx:dtd ((template (name #t)))

    (template sia:SIACapRestriction
      (rdf:type rdf:resource: {$sia-ns}SIACapRestriction)
      (call-template name: make-identifier-uri
                     (with-param id "ivo://ivoa.net/std/SIA") ;fixed value
                     (with-param propname siao:standardID))
      (call-template vor:Capability))

    (template sia:SimpleImageAccess
      (rdf:type rdf:resource: {$sia-ns}SimpleImageAccess)
      (call-template sia:SIACapRestriction))

    (template sia:resolve-xsitype
      (param name: type)
      (choose
       (when "$type='SIACapRestriction'"
         (call-template sia:SIACapRestriction))
       (when "$type='SimpleImageAccess'"
         (call-template sia:SimpleImageAccess)))))
))
