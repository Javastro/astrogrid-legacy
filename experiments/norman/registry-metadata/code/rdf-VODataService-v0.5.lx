;; Convert an instance of VODataService-v0.5 to RDF statements
;; (as striped RDF/XML) using the ontology
;; http://www.ivoa.net/xml/VODataService/v1.0

(lx:let ((namespace (#f   "http://www.w3.org/1999/XSL/Transform")
                    ;(ri   "http://www.ivoa.net/xml/RegistryInterface/v0.1")
                    (ds   "http://www.ivoa.net/xml/VODataService/v0.5")
                    (dso  "http://www.ivoa.net/xml/VODataService/v1.0#")

                    (vor  "http://www.ivoa.net/xml/VOResource/v0.10")
                    (voro "http://www.ivoa.net/xml/VOResource/v1.0#")

                    (xsi "http://www.w3.org/2001/XMLSchema-instance")

                    (rdf  "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
                    ;(rdfs "http://www.w3.org/2000/01/rdf-schema#")
                    )
         (feature "http://ns.nxg.me.uk/lx/attributes-in-no-namespace")
         (dtd (template (match #t) mode name)
              (element (name #t))
              (attribute (name #t))
              (value-of (select #t))
              (when (test #t))
              (if (test #t))
              (for-each (select #t))
              (call-template (name #t))
              (with-param (name #t) select)))

(stylesheet version: 1.0 exclude-result-prefixes: "ds xsi"
  (output method: xml
          version: 1.0
          indent: yes)

  (variable name: dso-ns http://www.ivoa.net/xml/VODataService/v1.0#)

  ;; default template
  ;; Apply to...
  ;; resultType
  ;; rights
  (template ds:*
      (element name: "dso:{local-name()}"
               (apply-templates)))

  (template ds:accessURL
      (variable name: access-url-type
                (choose
                 (when "@use = 'base'"
                   voro:BaseAccessURL)
                 (when "@use = 'full'"
                   voro:FullAccessURL)
                 (when "@use = 'dir'"
                   voro:DirectoryAccessURL)
                 (otherwise ;; eh?
                  voro:AccessURL)))
      (dso:accessURL
       (element "{$access-url-type}"
                (attribute voro:uri (apply-templates)))))

  (template ds:column
    (dso:column rdf:parseType: Resource
                (apply-templates)))

;;   (template ds:coverage
;;     (dso:coverage rdf:parseType: Resource
;;                   (apply-templates)))

  (template ds:dataType name: ds:dataType
    (variable name: name (apply-templates))
    (variable name: rdf-type
              (choose
               ;; these target types are those in VODataService-v1.0.rdfs
               (when "$name='boolean'" dso:VOTScalarDataTypeBoolean)
               (when "$name='bit'" dso:VOTScalarDataTypeBit)
               (when "$name='unsignedByte'" dso:VOTScalarDataTypeUnsignedByte)
               (when "$name='short'" dso:VOTScalarDataTypeShort)
               (when "$name='int'" dso:VOTScalarDataTypeInt)
               (when "$name='long'" dso:VOTScalarDataTypeLong)
               (when "$name='char'" dso:VOTScalarDataTypeChar)
               (when "$name='unicodeChar'" dso:VOTScalarDataTypeUnicodeChar)
               (when "$name='float'" dso:VOTScalarDataTypeFloat)
               (when "$name='double'" dso:VOTScalarDataTypeDouble)
               (when "$name='floatComplex'" dso:VOTScalarDataTypeFloatComplex)
               (when "$name='doubleComplex'" dso:VOTScalarDataTypeDoubleComplex)
               ))
    (dso:dataType
     (element {$rdf-type}
              (dso:arraysize
               (choose
                (when @arraysize (value-of @arraysize))
                (otherwise 1))))))

  ;; this type doesn't exist, but it's present, presumably as a misspelling
  ;; in at least some ROE Registry entries.
  (template ds:datatype
    (call-template name: ds:dataType))

  (template ds:facility
      (dso:facility
       (call-template voro:resource-name)))

  (template ds:format
    (dso:format rdf:parseType: Resource
                (dso:formatValue (apply-templates))
                (if @isMIMEType
                    (dso:isMIMEType (apply-templates select: @isMIMEType)))))

  (template ds:instrument
    (dso:instrument
     (call-template voro:resource-name)))

  (template ds:param
    (dso:param rdf:parseType: Resource
               (apply-templates)))

  ;; Type ds:Rights removed in VODataService-v1.0, refers to VOResource:Rights
  (template ds:rights
    (variable name: r (apply-templates))
    (variable name: type
              (choose
               (when "$r='public'" voro:PublicRights)
               (when "$r='secure'" voro:SecureRights)
               (when "$r='proprietary'" voro:ProprietaryRights)))
    (dso:rights
     (element {$type})))

  ;; Coverage is going to be a bit of a nightmare, as it seems to have 
  ;; changed substantially between VODataService-v0.5 and 1.0, including
  ;; the disappearance of VODataServiceCoverage, and the appearance of STC.
  (template ds:coverage
    (apply-templates select: ds:spectral/ds:waveband))

  (template ds:table
    (dso:table rdf:parseType: Resource
               (apply-templates)))

  (template ds:waveband
    (variable name: wb (apply-templates))
    (variable name: type
              (choose
               (when "$wb='Radio'" WavebandRadio)
               (when "$wb='Millimeter'" WavebandMillimeter)
               (when "$wb='Infrared'" WavebandInfrared)
               (when "$wb='Optical'" WavebandOptical)
               (when "$wb='UV'" WavebandUV)
               (when "$wb='EUV'" WavebandEUV)
               (when "$wb='X-ray'" WavebandX-ray)
               (when "$wb='Gamma-ray'" WavebandGamma-ray)
               ))
    (element name: dso:waveband
             (rdf:Description rdf:type: "{$dso-ns}{$type}")))



  ;; Named templates
  (lx:dtd ((template (name #t)))

    (template ds:DataCollection
      ;; need to output the dso namespace literally in rdf:resource attribute
      (rdf:type rdf:resource: {$dso-ns}DataCollection)
      (call-template vor:Resource))

    (template ds:GLUService
      (rdf:type rdf:resource: {$dso-ns}GLUService)
      (call-template vor:Interface))

    (template ds:ParamHTTP
      (rdf:type rdf:resource: {$dso-ns}ParamHTTP)
      (if @qtype
          (dso:queryType
           (variable name: qtype
                     (choose
                      (when "@qtype='GET'" dso:HTTPQueryTypeGET)
                      (when "@qtype='POST'" dso:HTTPQueryTypePOST)))
           (element {$qtype})))
      (call-template vor:Interface))

    (template ds:SkyService
      ;; SkyService replaced by DataService in VODataService-v1.0
      (rdf:type rdf:resource: {$dso-ns}DataService)
      (call-template vor:Service))

    (template ds:TabularSkyService
      ;; TabularSkyService replaced by CatalogService in VODataService-v1.0
      (rdf:type rdf:resource: {$dso-ns}CatalogService)
      (call-template ds:SkyService))

    (template ds:WebService
      (rdf:type rdf:resource: {$dso-ns}WebService)
      (call-template vor:Interface))

    (template ds:resolve-xsitype
      (param name: type)
      (choose
       (when "$type='DataCollection'"
         (call-template ds:DataCollection))
       (when "$type='GLUService'"
         (call-template ds:GLUService))
       (when "$type='ParamHTTP'"
         (call-template ds:ParamHTTP))
       (when "$type='SkyService'"
         (call-template ds:SkyService))
       (when "$type='TabularSkyService'"
         (call-template ds:TabularSkyService))
       (when "$type='WebService'"
         (call-template ds:WebService))
       ))

    ;; Handle ResourceName elements, which map to Actor or one of its subtypes,
    ;; optionally given in the 'type' parameter.
    ;; resource-name now handled in VOResource-1.0.lx
;;     (template resource-name
;;       (param name: type voro:Actor)
;;       (element "{$type}"
;;                (element voro:name
;;                         (apply-templates))
;;                (if @ivo-id
;;                    (element voro:identifier
;;                             (attribute voro:uri (value-of @ivo-id))))))
    )

))
