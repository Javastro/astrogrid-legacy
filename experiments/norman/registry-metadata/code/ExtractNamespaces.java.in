/*
 * Thrown-together program to extract all the namespaces declared in a
 * given XML file.  It includes a --generate-xslt option which
 * spits out XSLT which should be able to process the input file.
 */

import java.io.File;
import java.util.Set;


public class ExtractNamespaces {
    private static final int EXTRACT_NAMESPACES = 111;
    private static final int GENERATE_XSLT = 222;

    private static final int VERBOSITY_SILENT = 0;
    private static final int VERBOSITY_NORMAL = 1;
    private static final int VERBOSITY_CHATTER = 2;
    private static int verbosity = VERBOSITY_NORMAL;

    private static java.util.Map<String,NSInfo> nsinfo;
    static {
        nsinfo = new java.util.HashMap<String,NSInfo>();
        // Add dummy namespaces, so they're not logged as `unknown'
        nsinfo.put("http://www.w3.org/2001/XMLSchema-instance", new NSInfo());
        nsinfo.put("http://www.w3.org/1999/xlink", new NSInfo());
        // @ExtractNamespaces.content@ -- insert generated content
    }

    public static void main(String[] args) {
        if (args.length < 1)
            Usage();

        File infile = null;
        int action = EXTRACT_NAMESPACES;
        boolean indentOutput = false;

        for (int i=0; i<args.length; i++) {
            String a = args[i];
            if (a.equals("--extract"))
                action = EXTRACT_NAMESPACES;
            else if (a.equals("--generate-xslt"))
                action = GENERATE_XSLT;
            else if (a.equals("--indent"))
                indentOutput = true;
            else if (a.equals("--verbose"))
                verbosity = VERBOSITY_CHATTER;
            else if (a.equals("--quiet"))
                verbosity = VERBOSITY_SILENT;
            else if (infile != null)
                Usage();
            else
                infile = new File(a);
        }

        assert infile != null;

        int exitstatus = 1;     // failure, unless reset

        try {
            // Extract the list of namespaces
            javax.xml.parsers.SAXParser saxparser
                    = javax.xml.parsers.SAXParserFactory
                    .newInstance()
                    .newSAXParser();
            saxparser.setProperty
                    ("http://xml.org/sax/features/namespaces", true);
            saxparser.setProperty
                    ("http://xml.org/sax/features/namespace-prefixes", true);

            NamespaceHandler nsh = new NamespaceHandler();
            saxparser.parse(infile, nsh);

            if (action == EXTRACT_NAMESPACES) {
                for (String s : nsh.getNamespaces())
                    System.out.println(s);
            } else {
                assert action == GENERATE_XSLT;
                generateXSLT(nsh.getNamespaces(), System.out, indentOutput);
            }

            // all OK
            exitstatus = 0;

        } catch (org.xml.sax.SAXException e) {
            System.err.println("Error parsing XML: " + e);
        } catch (javax.xml.parsers.ParserConfigurationException e) {
            System.err.println("Error setting up parser: " + e);
        } catch (java.io.FileNotFoundException e) {
            System.err.println("Can't find file to read: " + e);
        } catch (java.io.IOException e) {
            System.err.println("Unable to generate XSLT: " + e);
        }
        System.exit(exitstatus);
    }

    private static void generateXSLT(Set<String> namespaces,
                                     java.io.PrintStream stream,
                                     boolean indented)
            throws java.io.IOException {
        XMLBuilder.Doc xb = new XMLBuilder()
                .setIndent(indented)
                .newDocument("stylesheet");
        xb.addAttribute("version", "1.0")
                .addAttribute("xmlns", "http://www.w3.org/1999/XSL/Transform")
                .addAttribute("xmlns:rdf",
                              "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
                .addAttribute("xmlns:rdfs",
                              "http://www.w3.org/2000/01/rdf-schema#")
                .addAttribute("xmlns:xsi",
                              "http://www.w3.org/2001/XMLSchema-instance")
                .addAttribute("xmlns:x2s",
                              "http://ns.eurovotech.org/registry-metadata");

        xb.newChild("import")
                .addAttribute("href", "fallback.xslt");

        XMLBuilder.Node namespaceChoose = xb.newNodeSet();
        XMLBuilder.Node rdfnodeset = xb.newNodeSet();
        XMLBuilder.Node rdfnode = rdfnodeset.newChild("rdf:RDF");
        rdfnode.addAttribute("xmlns:ri",
                              "http://www.ivoa.net/xml/RegistryInterface/v1.0");
        rdfnode.newChild("apply-templates")
                .addAttribute("select", "//ri:Resource");

        for (String s : namespaces) {
            NSInfo h = nsinfo.get(s);
            if (h == null && verbosity >= VERBOSITY_NORMAL)
                System.err.println("Unmatched namespace: " + s);
            if (h != null && !h.ignoredNamespace()) {
                xb.newChild("import")
                        .addAttribute("href", h.getHandler());
                // declare namespaces here, so they'll appear on
                // the RDF element in the output
                xb.addAttribute("xmlns:" + h.getPrefix(), s);
                rdfnode.addAttribute("xmlns:" + h.getOntologyPrefix(),
                                     h.getOntologyURI());

                namespaceChoose.newChild("when")
                        .addAttribute("test",
                                      "$n='" + s + "'")
                        .newChild("call-template")
                        .addAttribute("name",
                                      h.getPrefix() + ":resolve-xsitype")
                        .newChild("with-param")
                        .addAttribute("name", "type")
                        .newChild("value-of")
                        .addAttribute("select", "$l");
            }
        }
        namespaceChoose
                .newChild("otherwise")
                .newChild("x2s:UNKNOWN")
                .newChild("text", "rdf-all.xslt: Unable to resolve xsi:type=")
                .newSibling("value-of").addAttribute("select", "$n")
                .newSibling("text", "#")
                .newSibling("value-of").addAttribute("select", "$l");


        xb.newChild("template", rdfnodeset).addAttribute("match", "/");

        XMLBuilder.Node templateChoose = xb.newNodeSet();
        templateChoose        
                .newChild("when")
                .addAttribute("test", "contains(@xsi:type,':')")
                .newChild("value-of")
                .addAttribute("select", "substring-after(@xsi:type,':')");
        templateChoose
                .newChild("otherwise")
                .newChild("value-of")
                .addAttribute("select", "@xsi:type");

        
        /*
         * This template is basically <call-template name='@xsi:type'/>,
         * but the name attribute there can only be a QName, hence this mess.
         * Yuk.
         */
        xb.newComment("This template is basically <call-template name='@xsi:type'/>,")
                .newComment("but the name attribute there can only be a QName, hence this mess.")
                .newComment("Yuk.");

        XMLBuilder.Node xsiTemplate = xb.newChild("template")
                .addAttribute("name", "resolve-xsitype");

        xsiTemplate
                .newChild("variable")
                .addAttribute("name", "l")
                .newChild("choose", templateChoose);
        xsiTemplate
                .newChild("variable")
                .addAttribute("name", "p")
                .addAttribute("select", "substring-before(@xsi:type,':')");
        xsiTemplate
                .newChild("variable")
                .addAttribute("name", "n")
                .addAttribute("select", "namespace::*[name()=$p]");

        xsiTemplate
                .newChild("choose", namespaceChoose);

        xb.serialise(stream);
    }

    private static void Usage() {
        String[] doc = new String[] {
            "Usage: ExtractNamespaces [options] registry-entry.xml",
            "Options:",
            "  --extract           extract the list of namespaces",
            "  --generate-xslt     generate an xslt script",
            "  --indent            indent the output (when generating scripts)"
            "  --verbose/--quiet   regulate chatter",
        };
        for (int i=0; i<doc.length; i++)
            System.err.println(doc[i]);
        System.exit(1);
    }

    private static class NamespaceHandler
            extends org.xml.sax.helpers.DefaultHandler {

        Set<String> namespaces;

        public NamespaceHandler() {
            namespaces = new java.util.TreeSet<String>();
        }

        public Set<String> getNamespaces() {
            return namespaces;
        }

        public void startPrefixMapping(String prefix, String uri) {
            if (verbosity > VERBOSITY_NORMAL)
                System.err.println("Mapping " + prefix + " -> " + uri);
            namespaces.add(uri);
        }
    }

    private static class NSInfo {
        String handler;
        String xsdprefix;
        String ontologyprefix;
        String ontologyURI;
        boolean isDummy;

        public NSInfo() {
            isDummy = true;
        }
        
        public NSInfo(String xsdprefix,
                      String ontologyprefix,
                      String ontologyURI,
                      String handler) {
            this.handler = handler;
            this.xsdprefix = xsdprefix;
            this.ontologyprefix = ontologyprefix;
            this.ontologyURI = ontologyURI;
            isDummy = false;
        }
        public boolean ignoredNamespace() {
            return isDummy;
        }
        public String getHandler() {
            if (isDummy)
                throw new IllegalStateException("bad call to getHandler");
            return handler;
        }
        public String getPrefix() {
            if (isDummy)
                throw new IllegalStateException("bad call to getPrefix");
            return xsdprefix;
        }
        public String getOntologyPrefix() {
            if (isDummy)
                throw new IllegalStateException("bad call to getOntologyPrefix");
            return ontologyprefix;
        }
        public String getOntologyURI() {
            if (isDummy)
                throw new IllegalStateException("bad call to getOntologyURI");
            return ontologyURI;
        }
    }
}
