
Quaestor: a generic SPARQL endpoint.

To build, it requires Tomcat, Jena, SISC, Jetty and JUnit.  If you want to
set up a triple store with the Jena SDB back-end, then you will need
that distribution, too, along with a JDBC jar file for the database
you want SDB to sit on top of (this SDB support is supposed to be
optional, but I'm not positive that it is so in fact).

It works with both Java 1.4 and 1.5, and with Tomcat 5.0.x and 5.5.x.

I've tried it with Jena 2.3 and 2.5.5 -- other versions may or may not
work.  See <http://jena.sourceforge.net>.  SDB is available at
<http://jena.sourceforge.net/SDB/>; the system works with SDB-1.0

SISC is available from <http://sisc.sourceforge.net>.  Quaestor works
with sisc-1.16.x at least, and probably later versions also.  It
requires a little bit of post-installation configuration.  Download
sisc-1.16.x, and:

  % cd .../sisc-x.y.z # installation directory
  % ./install-srfi22.sh $PWD
  % chmod +x srfi-22.sh
  % PATH=.:$PATH scheme-src/build-heapjar.scm

Jetty is available at <http://www.mortbay.org>.  Quaestor works with
Jetty 6.1.7 at least.

JUnit is at <http://junit.sourceforge.net/>  I've been using JUnit 3.8.1.

The first Quaestor version which was released to anyone else was 0.3.  I'll
follow the common practice and have even-numbered versions as beta
releases, and odd-numbered ones as rather stable (-ish).

Building Quaestor
-----------------

Copy build.properties.template to build.properties and fill in the
templated properties:

  catalina.home : the directory which should be assigned to the
  environment variable CATALINA_HOME, that is, the directory
  containing bin/, webapps and so on.

  jena.lib : Jena library directory.  This is the directory which
  contains the jena.jar file and friends. 

  sisc.bin : the binary directory is the one which contains the sisc
  program.

  sisc.lib : the directory which contains sisc{,-opt,-lib}.jar and
  sisc.shp (in the SISC binary distributions, this is usually the same
  directory as sisc.bin).

Then 'ant && ant dist' to make the .war file.  'ant install' installs
it in a local Tomcat.  'ant jetty' builds the Jetty version of Quaestor.

Products
--------

ant dist: makes the .war file, plus a quaestor-client-<version>.zip.
The latter contains API documentation plus a
quaestor-client-<version>.jar, which acts as a REPL for the server, if
it's been configured (in either
document('war/WEB-INF/web.xml')/web-app/servlet[servlet-name="codemanager"]
or war/WEB-INF/SchemeJettyServer.properties, as appropriate) to allow that.

ant jetty: makes quaestor-jetty-<version>.zip, which contains a
start-jetty.sh script

Testing
-------

To run the full regression tests, you'll have to either install the
application in a Tomcat server or run up the standalone Jetty server.

Make the .war file ('ant dist'), or install it locally with 'ant
install', after making sure that manager.url has the correct value in
the build.xml file (or in build.properties).  Make the Jetty server
with 'ant jetty', and start it up with build/start-jetty.sh

  * 'ant scm-tests' tests the scheme support within the application,
    and is the real code self-test

  * 'ant junit-tests' tests the server RESTful interface, and so is
    the protocol test.  This can also be used to test a remote
    service, or a local service running at a non-default port,
    by setting the property quaestor.url to the appropriate target:
    % ant -Dquaestor.url=<foo> junit-tests

  * 'ant test' invokes both tests, with the default Quaestor URL,
    though that can be overridden the same way.
