
Quaestor: a generic SPARQL endpoint.

Installation
------------

See the file web/install.html for installation notes.

Building from source
--------------------

To build, it requires Tomcat, SISC, Jetty and JUnit.  If you
want to set up a triple store with the Jena SDB back-end, then you
will need that distribution, too, along with a JDBC jar file for the
database you want SDB to sit on top of.  If you want to use TDB for
persistence (and you probably should, since it's easier than TDB to
set up, even though it's still more experimental), you'll need that
distribution.  If you don't want persistence, you need to download the
plain Jena distribution (both SDB and TDB contain a copy of this,
compatible with the SDB/TDB version).

Quaestor without TDB works with Java 1.5 and 1.6 (possibly 1.4, though
that's not tested), and works with Tomcat 5.0.x and 5.5.x.

It works with Jena 2.5.6 (it might work with 2.5.x).  See
<http://jena.sourceforge.net>.

SDB is available at <http://jena.sourceforge.net/SDB/>; the system
works with SDB-1.0.

TDB is available from <http://jena.sourceforge.net/TDB/>; I've used
TDB-0.5.  TDB requires Java 1.6.

As noted in the build.properties.template file, you choose between
these possibilities -- SDB, TDB or neither -- by configuring as the
value of the jena.lib property the .../lib directory in the SDB, TDB
or Jena distribution.

SISC is available from <http://sisc.sourceforge.net>.  Quaestor works
with sisc-1.16.x at least, and probably later versions also.  It
requires a little bit of post-installation configuration.  Download
sisc-1.16.x, and:

  % cd .../sisc-x.y.z # installation directory
  % ./install-srfi22.sh $PWD
  % chmod +x srfi-22.sh
  % PATH=.:$PATH scheme-src/build-heapjar.scm

Jetty is available at <http://www.mortbay.org>.  Quaestor works with
Jetty 6.1.7 at least.

JUnit is at <http://junit.sourceforge.net/>  I've been using JUnit 3.8.1.

The first Quaestor version which was released to anyone else was 0.3.


Building Quaestor
-----------------

Copy build.properties.template to build.properties and fill in the
property values as described in the comments there.

Note that, if you use SDB or TDB, it is best (and indeed it may be
necessary) to use the Jena jars within the SDB or TDB distribution.

Then 'ant && ant dist' to make the .war file.  'ant install' installs
it in a local Tomcat.  'ant jetty' builds the Jetty version of Quaestor.


Products
--------

ant dist: makes the .war file, plus a quaestor-client-<version>.zip.
The latter contains API documentation plus a
quaestor-client-<version>.jar, which acts as a REPL for the server, if
the latter has been configured (in either
document('war/WEB-INF/web.xml')/web-app/servlet[servlet-name="codemanager"]
or war/WEB-INF/SchemeJettyServer.properties, as appropriate) to allow that.

ant jetty: makes quaestor-jetty-<version>.zip, which contains a
quaestor-standalone.sh script


Testing
-------

To run the full regression tests, you'll have to either install the
application in a Tomcat server or run up the standalone Jetty server.

Make the .war file ('ant dist'), or install it locally with 'ant
install', after making sure that tomcat.hostport has the correct value
in the build.xml file (or in build.properties, or on the ant command
line).  Alternatively, make the Jetty server with 'ant jetty', and
start it up with 'java -jar quaestor-standalone-x.x.jar'

  * 'ant scm-tests' tests the scheme support within the application,
    and is the real code self-test

  * 'ant protocol-tests' tests the server RESTful interface, and so is
    the protocol test.  This can also be used to test a remote
    service, or a local service running at a non-default port,
    by setting the property quaestor.url to the appropriate target:
    % ant -Dquaestor.url=<foo> protocol-tests

  * 'ant test' invokes both tests, with the default Quaestor URL,
    though that can be overridden the same way.

Using TDB
---------

This is pretty simple.  See the storage.html file for notes on setting
this up on the client side.

On the server side, you will need to edit web.xml to change the
'persistence-directory' init-param to a useful value (the default is
in /tmp, which ... isn't very persistent; the analogous Jetty variable
is set in JettySchemeServer.properties).  If this parameter isn't
present, the server will not persist models.

Using SDB
---------

This is currently underdocumented (ie, this note is all the
documentation there currently is...).  To use a database as the
triple-store persistence, you need to install Jena SDB, hook it up to
the RDBMS you want to use, and populate it with RDF, as described in
the SDB docs.  To link this to Quaestor, create a knowledgebase by
POSTing to it a description such as the following.

% cat quaestor-metadata.ttl
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix quaestor: <http://ns.eurovotech.org/quaestor#>.

<> dc:description "Registry metadata knowledgebase";
    dc:creator "Norman";
    quaestor:requiredReasoner [
        quaestor:level "none"
    ].
% cat rm-sdb.ttl 
@prefix rdfs:	   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf:      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix ja:       <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix sdb:      <http://jena.hpl.hp.com/2007/sdb#> .

[] rdf:type sdb:Store;
#        sdb:layout      "layout2/hash";
        sdb:layout      "layout2/index"; # ...if the SDB was created with an 'index' layout
        sdb:connection  _:c.

_:c rdf:type sdb:SDBConnection;
        sdb:sdbType     "postgresql";
        sdb:sdbHost     "localhost";
        sdb:sdbName     "sdb1"; # ...matching the DB name selected when setting up SDB
	sdb:sdbUser     "postgres";
        sdb:driver      "org.postgresql.Driver".
% cat load-rm-knowledgebase.sh 
#! /bin/sh -

#BASEURL=http://thor.roe.ac.uk/quaestor
BASEURL=${1-http://localhost:8090/quaestor}

echo "Quaestor at $BASEURL"

cd `dirname $0`

# create the knowledgebase -- PUT the ttl file
curl --header Content-Type:application/x-turtle \
     --upload-file quaestor-metadata.ttl \
     $BASEURL/kb/rm

# ...now the submodel
curl --header Content-Type:application/x-turtle \
     --upload-file rm-sdb.ttl \
     "$BASEURL/kb/rm/3store?abox"
% ./load-rm-knowledgebase.sh
