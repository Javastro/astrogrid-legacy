#! /usr/bin/env scsh \
-o srfi-37 -e main -s
!#

(define (main args)
  (let ((inputs (args-fold (cdr args)
                           (option-list)
                           unrecognised-option
                           operand-processor
                           '())))

    ;; all sane?
    (if (< (length inputs) 1)
        (Usage #t))

    (let ((command (string->symbol (car inputs)))
          (rest-of-args (cdr inputs)))

      (cond ((assq command command-handlers)
             => (lambda (spec) ; spec=('command nargs handler-procedure)
                  (let ((nargs (cadr spec))
                        (handler (caddr spec)))
                    (if (and nargs
                             (not (= (length rest-of-args) nargs)))
                        (error (format #f "command ~a requires ~a args, got ~s"
                                       command
                                       nargs
                                       rest-of-args)))
                    (apply handler rest-of-args))))

            (else
             (error (format #f "Unrecognised command ~a: allowed are ~a"
                            command
                            (map car command-handlers))))))))


(define (get-handler kb-name . submodel-name)
  (define (verbose-option) (if (chatter)
                               '("--verbose" ;include chatter in request
                                 "--include") ;include HTTP headers in response
                               '()))
  (let ((full-url (cond ((null? submodel-name)
                         (format #f "~a/kb/~a" (base-url) kb-name))
                        ((= (length submodel-name) 1)
                         (format #f "~a/kb/~a/~a"
                                 (base-url) kb-name (car submodel-name)))
                        (else
                         (error "Bad call to get: too many arguments")))))
    (chatter "GET ~a" full-url)
    (exec-epf
     (curl ,@(verbose-option)
           ,@(make-header "Accept"
                          (or (acceptable-mime-types)
                              (preferred-language)))
           ,full-url))))

(define (new-kb-handler kb-name metadata-file)
  (define (verbose-option) (if (chatter) '("--verbose") '()))
  (let ((full-url (format #f "~a/kb/~a" (base-url) kb-name)))
    (check-file-exists metadata-file)
    (chatter "PUT file ~a to URL ~a" metadata-file full-url)
    (exec-epf (curl ,@(verbose-option)
                    --upload-file ,metadata-file
                    ,full-url))))

;; Generate a curl header option, representing the given HEADER and VALUE.
;; Return either a list of two elements, or an empty list, if value is #f.
(define (make-header header value)
  (if value
      `("--header" ,(format #f "~a: ~a" header value))
      '()))

(define (add-submodel-handler model-name submodel-name submodel-file)
  (define (verbose-option) (if (chatter) '("--verbose") '()))
  (let ((full-url (format #f "~a/kb/~a/~a~a"
                          (base-url) model-name submodel-name
                          (if (model-is-tbox?) "?tbox" "?abox"))))
    (check-file-exists submodel-file)
    (chatter "PUT file ~a to URL ~a" submodel-file full-url)
    (exec-epf
     (curl ,@(verbose-option)
           --upload-file ,submodel-file
           ,@(make-header "Content-Type"
                          (or (get-language-from-extension submodel-file)
                              (preferred-language)
                              #f))
           ,full-url))))

(define (delete-handler kb-name)
  (define (verbose-option) (if (chatter) '("--verbose") '()))
  (let ((full-url (format #f "~a/kb/~a" (base-url) kb-name)))
    (format #t "Delete is not handled by this client.~%You'll have to send the request 'DELETE ~a' to a HTTP server yourself~%" full-url)))

;; Upload code to the server.  The CODE-FILE names a file, or may be '-'
;; to indicate stdin
(define (code-handler code-file)
  (define (verbose-option) (if (chatter) '("--verbose") '()))
  (let ((full-url (format #f "~a/code" (base-url))))
    (check-file-exists code-file)
    (chatter "PUT code in ~a to URL ~a" code-file full-url)
    (exec-epf
     (curl ,@(verbose-option)
           --upload-file ,code-file
           ,full-url))))

;; POST the contents of the given file (which may be '-') to the
;; given model
(define (query-handler kb-name query-file)
  (define (verbose-option) (if (chatter) '("--verbose") '()))
  (let ((full-url (format #f "~a/kb/~a" (base-url) kb-name)))
    (check-file-exists query-file)
    (chatter "POST query in ~a to URL ~a" query-file full-url)
    (exec-epf
     (curl ,@(verbose-option)
           ,@(make-header "Accept" 
                          (or (acceptable-mime-types)
                              (preferred-language)))
           ;; proposed but non-standard MIME type
           ;; see http://www.w3.org/TR/rdf-sparql-query/#mediaType
           ,@(make-header "Content-Type" "application/sparql-query")
           --data-binary ,(string-append "@" query-file)
           ,full-url))))

;; As with query-handler, but using the GET interface
(define (query-get-handler kb-name query-file)
  (define (verbose-option) (if (chatter) '("--verbose") '()))
  (check-file-exists query-file)
  (let ((full-url (format #f "~a/kb/~a?sparql=~a"
                          (base-url)
                          kb-name
                          (url-encode (read-file-into-string query-file)))))
    (chatter "GET query in ~a to URL ~a" query-file full-url)
    (exec-epf
     (curl ,@(verbose-option)
           ,@(make-header "Accept" 
                          (or (acceptable-mime-types)
                              (preferred-language)))
           ,full-url))))

(define (xmlrpc-handler method . args)
  (define (make-xmlrpc-param s)
    `(param (value (string ,s))))
  (define (verbose-option) (if (chatter) '("--verbose") '()))
  (let ((full-url (format #f "~a/xmlrpc" (base-url)))
        (xmlrpc-request
         `(methodCall
           (methodName ,method)
           (params
            ,@(map make-xmlrpc-param args)))))
    (exec-epf
     (curl ,@(verbose-option)
           ,@(make-header "Content-Type" "text/xml")
           --data ,(sexp->xml xmlrpc-request)
           ,full-url))))

(define (Usage . args)
  (format #t "Usage: quaestor-client command [args and options]~%Allowed commands are:~%")
  (for-each (lambda (cmd-spec)
              (format #t "  ~a~%    ~a~%"
                      (car cmd-spec)
                      (cadddr cmd-spec)))
            command-handlers)
  (format #t "Options:~%")
  (for-each (lambda (optdoc)
              (format #t "  --~a~a : ~a~%"
                      (car optdoc)
                      (if (cadr optdoc) "=arg" "")
                      (caddr optdoc)))
            (option-docs))
  (if (and (not (null? args))
           (car args))
      (error "Bad call")))

;; List of command handlers.  
;; Each element is a ('command number-of-args handler doc-string)
;; NUMBER-OF-ARGS may be #f to have any number of args
(define command-handlers
  `((add-submodel
     3
     ,add-submodel-handler
     "add-submodel kb model-name rdf-file: Add a new submodel")
    (code
     1
     ,code-handler
     "code scm-code-file: Upload code to running server; file may be '-'")
    (delete
     1
     ,delete-handler
     "delete kb: delete the knowledgebase from the server")
    (help
     0
     ,Usage
     "Show help")
    (get
     #f
     ,get-handler
     "get kb / get kb submodel: Get model or specific submodel")
    (new-kb
     2
     ,new-kb-handler
     "new-kb name metadata-file: Create a new knowledgebase")
    (query
     2
     ,query-handler
     "query kb query-file: make a SPARQL query of the given model")
    (query-get
     2
     ,query-get-handler
     "query-get kb query-file: as with 'query', but using the GET interface")
    (xmlrpc
     #f
     ,xmlrpc-handler
     "xmlrpc method args...: send the method and args to the XML-RPC interface")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Utilities

;; Given a FILENAME, return a MIME type for an RDF language.
;; If none can be deduced, return #f.
(define (get-language-from-extension filename)
  (let ((ext (file-name-extension filename))
        (ext-map '((".n3"  . "text/rdf+n3")
                   (".rdf" . "application/rdf+xml")
                   (".owl" . "application/rdf+xml"))))
    (if (assoc ext ext-map)
        (cdr (assoc ext ext-map))
        #f)))

;; Call error with implicit formatting
(define (formatted-error . fmt-and-args)
  (error (apply format (cons #f fmt-and-args))))

;; Given a file name FN, check that it is either "-", or that the file exists.
;; If the file does not exist, then exit with an error.
(define (check-file-exists fn)
  (if (and (not (string=? fn "-"))
           (file-not-readable? fn))
      (formatted-error "Can't find file ~a" fn)))

;; Given a filename or "-", read the corresponding file into a single string
(define (read-file-into-string fn)
  (define (gobble-port p)
    (let ((r (read-string/partial 8192 p)))
      (if r
          (string-append r (gobble-port p))
          "")))
  (if (string=? fn "-")
      (gobble-port (current-input-port))
      (call-with-input-file fn
        gobble-port)))

;; Given a string U, return the string URL-encoded.
;; Cf the javadocs for java.net.URLEncoder.
(define (url-encode u)
  (define (escape-char c) ; why is this so hard...?
    (let ((ci (char->ascii c))
          (v '#(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7
                #\8 #\9 #\a #\b #\c #\d #\e #\f)))
      (list #\%
            (vector-ref v (quotient ci 16))
            (vector-ref v (remainder ci 16)))))
  (define (escape-string s)
    (list->string (apply append
                         (map escape-char
                              (string->list s)))))
  (regexp-substitute/global
   #f
   (rx (+ whitespace))
   (apply string-append
          (regexp-fold-right
           (rx (+ (or alphanumeric (".-_*") whitespace)))
           (lambda (m i lis)
             (cons (match:substring m)
                   (cons (escape-string (substring u (match:end m) i))
                         lis)))
           '()
           u
           (lambda (q lis)
             (cons (escape-string (substring u 0 q)) lis))))
   'pre "+" 'post))

;; Given a list of SExps, SEXP-LIST, return this translated into a string
;; Takes two optional arguments: the first specifies a list of
;; elements which are to be formatted (ie, have linebreaks inserted)
;; as `block' elements (like <div> in HTML), and the second a list
;; which should be formatted as `para' elements (like HTML <p>).
;; Either may be given as 'ALL to format all like this.
;;
;; If the second element of the list is of the form (@ LIST ...), then the
;; LIST is a two-element list of (ATTRIBUTE VALUE)
(define (sexp->xml s . opts)
  (let ((block-elems (and (> (length opts) 0)
                          (car opts)))
        (para-elems  (and (> (length opts) 1)
                          (cadr opts))))
    (cond
     ((string? s)
      s)

     ((symbol? s)
      (symbol->string s))

     ((number? s)
      (format #f "~a" s))

     ((list? s)
      (if (and (> (length s) 1)
               (list? (cadr s))
               (eq? (caadr s) '@))
          (sexp->xml-write* (car s)
                            (cdadr s)
                            (cddr s)
                            block-elems
                            para-elems)
          (sexp->xml-write* (car s)
                            #f
                            (cdr s)
                            block-elems
                            para-elems)))
     (else
      (error (format #f
                     "Unrecognised type of object (~s) in sexp->str"
                     s))))))

;; Write out an element with attributes, and formatting depending on the
;; element `type'.
;; GI: a symbol containing the name of the element to be written
;; ATTLIST: a list of two-element lists, each containing (attribute value),
;;     as either symbols or strings
;; CONTENT: a sexp representing the element content
;; BLOCK-ELEMENT-LIST and PARA-ELEMENT-LIST: either a list of symbols
;;     or the symbol 'ALL.  If the GI is found in one of the lists, or the
;;     relevant variable has the value 'ALL, then the element is formatted
;;     as a block element, a paragraph element, or an inline element if it
;;     is in neither list.
;; Internal function
(define (sexp->xml-write* gi attlist content
                          block-element-list para-element-list)
  (define block-elements
    (or block-element-list
        '(html head body div ul ol)))
  (define para-style
    (or para-element-list
        '(p title link h1 h2 h3 h4 h5 h6 li)))
  (if (null? content)
      (format
       #f
       (cond
        ((or (eq? block-elements 'ALL)
             (memq gi block-elements)
             (eq? para-style 'ALL)
             (memq gi para-style))
         "<~a~a/>~%")
        (else
         "<~a~a/>"))
       gi
       (if attlist
           (apply string-append
                  (map (lambda (p)
                         (format #f " ~a='~a'" (car p) (cadr p)))
                       attlist))
           ""))
      (format
       #f
       (cond
        ((or (eq? block-elements 'ALL)
             (memq gi block-elements))
         "<~a~a>~%~a</~a>~%~%")
        ((or (eq? para-style 'ALL)
             (memq gi para-style))
         "<~a~a>~a</~a>~%")
        (else
         "<~a~a>~a</~a>"))
       gi
       (if attlist
           (apply string-append
                  (map (lambda (p)
                         (format #f " ~a='~a'" (car p) (cadr p)))
                       attlist))
           "")
       (apply string-append
              (map (lambda (x)
                     (sexp->xml x block-elements para-style))
                   content))
       gi)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Options and args

(define (create-option default)
  (let ((v default))
    (lambda o
      (if (null? o)
          v
          (set! v (car o))))))

;; Define the context URL for the Quaestor service
(define base-url (create-option "http://localhost:8080/quaestor"))

;; Preferred language for receiving responses.  Fallback language for uploading.
(define preferred-language (create-option #f))

;; Is the uploaded model TBOX, as opposed to ABOX.  Only matters when
;; uploading submodels.
(define model-is-tbox? (create-option #t))

;; Comma-separated list of Accept mime-types.
(define acceptable-mime-types (create-option #f))

;; CHATTER controls verbosity.  Can be
;;   (chatter) : report verbosity #t/#f
;;   (chatter #t/#f) : set verbosity
;;   (chatter "format" args ...) : print message if verbosity is #t
(define chatter
  (let ((chatter? #t))                  ;default verbosity
    (lambda args
      (cond ((null? args)
             chatter?)
            ((boolean? (car args))
             (set! chatter? (car args)))
            (chatter?
             (apply format `(#t ,(string-append (car args) "~%") ,@(cdr args))))
            (else
             #f)))))

(define (operand-processor operand op-list)
  (append op-list (list operand)))

(define option-list
  (let ((l '()))
    (lambda o
      (if (null? o)
          l
          (set! l (cons (car o) l))))))
(define option-docs
  (let ((l '()))
    (lambda o                           ;must be a three-element list
      (if (null? o)
          l
          (set! l (cons o l))))))

(let-syntax ((declare-option
              (syntax-rules ()
                ((_ option-name docstring option-func)
                 (begin
                   (option-docs option-name
                                #t
                                docstring)
                   (option-list (option '(option-name) #t #t
                                        (lambda (option name arg seeds)
                                          (option-func arg)
                                          seeds)))))
                ((_ option-name docstring has-arg? body ...)
                 (begin
                   (option-docs option-name
                                has-arg?
                                docstring)
                   (option-list (option '(option-name) has-arg? has-arg?
                                        (lambda (option name arg seeds)
                                          body ...
                                          seeds))))))))
  (declare-option "verbose"
                  "chatter"
                  #f (chatter #t))
  (declare-option "quiet"
                  "be quiet"
                  #f (chatter #f))
  (declare-option "rdf"
                  "set preferred language to RDF/XML for upload and download"
                  #f (preferred-language (get-language-from-extension "x.rdf")))
  (declare-option "n3"
                  "set preferred language to N3 for upload and download"
                  #f (preferred-language (get-language-from-extension "x.n3")))
  (declare-option "base-url"
                  "set context URL to arg for Quaestor service"
                  base-url)
  (declare-option "tbox"
                  "uploaded RDF represents a TBOX"
                  #f (model-is-tbox? #t))
  (declare-option "abox"
                  "uploaded RDF represents an ABOX/instances"
                  #f (model-is-tbox? #f))
  (declare-option "accept"
                  "set comma-separated list of MIME types in arg"
                  acceptable-mime-types))

(define (unrecognised-option operand . seeds)
  (Usage)
  (error (format #f "Bad option (~a)" seeds)))
