<!-- ANT build file for Quaestor -->
<project name="Quaestor" default="compile" basedir=".">



<!-- ===================== Property Definitions =========================== -->
<!--

  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:

  * Definitions on the "ant" command line (ant -Dfoo=bar compile).

  * Definitions from a "build.properties" file in the top level
    source directory of this application.

  * Definitions from a "build.properties" file in the developer's
    home directory.

  * Default definitions in this build.xml file.

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.

-->

  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>


<!-- ==================== File and Directory Names ======================== -->
<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.
                       Defaults to "myapp".

  app.path             Context path to which this application should be
                       deployed (defaults to "/" plus the value of the
                       "app.name" property).

  app.version          Version number of this iteration of the application.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  catalina.home        The directory in which you have installed
                       a binary distribution of Tomcat 5.  This will
                       be used by the "deploy" target.

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".

  manager.password     The login password of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

  manager.url          The URL of the "/manager" web application on the
                       Tomcat installation to which we will deploy web
                       applications and web services.

  manager.username     The login username of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

-->

  <property name="app.name"      value="quaestor"/>
  <property name="app.path"      value="/${app.name}"/>
  <property name="app.version"   value="0.5.3+"/>
  <property name='release.date'  value='2008 XX XX'/>
  <property name="build.home"    value="${basedir}/build"/>
  <property name="build.war"     value="${build.home}/war"/>
  <property name="build.client"  value="${build.home}/client"/>
  <property name="build.classes" value="${build.war}/WEB-INF/classes"/>
  <property name="build.lib"     value="${build.war}/WEB-INF/lib"/>
  <property name="build.tests"   value="${build.home}/tests"/>
  <property name="dist.home"     value="${basedir}/dist"/>
  <property name="docs.home"     value="${basedir}/docs"/>
  <property name="tomcat.hostport" value="http://localhost:8080"/>
  <property name="manager.url"   value="${tomcat.hostport}/manager"/>
  <property name="quaestor.url"  value="${tomcat.hostport}${app.path}"/>
  <property name="src.home"      value="${basedir}/src/main"/>
  <property name="scm.src.home"  value="${basedir}/src/main/scm"/>
  <property name="src.etc"       value="${basedir}/src/etc"/>
  <property name="src.tests"     value="${basedir}/src/test"/>
  <property name="scm.test.home" value="${src.tests}/scm"/>
  <property name="web.home"      value="${basedir}/web"/>

  <!-- products -->
  <property name='quaestor.lib.jar' value='${app.name}-lib-${app.version}.jar'/>
  <property name='quaestor.jetty' value='${app.name}-standalone-${app.version}'/>
  <property name='quaestor.client' value='${app.name}-client-${app.version}'/>

  <!-- The following properties must be set in build.properties
   !
   !       catalina.home    : the directory which should be
   !                          assigned to the environment variable
   !                          CATALINA_HOME, that is, the directory
   !                          containing bin/, webapps and so on.
   !
   !       jena.lib         : Jena library directory.  This is the
   !                          directory which contains the jena.jar
   !                          file and friends.
   !
   !       sdb.lib          : the SDB directory which contains sdb.jar
   !
   !       sisc.bin         : the binary directory is the one which
   !                          contains the sisc program.
   !
   !       sisc.lib         : the directory which contains
   !                          sisc{,-opt,-lib}.jar and sisc.shp.
   !
   !       jetty.home       : the directory containing the Jetty support
   !
   !       jdbc.support.jar : a JDBC jar file, which must match the database
   !                          which you have chosen to use with SDB
   ! -->

  <!-- ================= Custom Ant Task Definitions ====================== -->
  <!-- See also <http://localhost:8080/tomcat-docs/manager-howto.html> -->

  <path id='tomcat.classpath'>
    <fileset dir='${catalina.home}/server/lib' includes='catalina-ant.jar'/>
  </path>

  <taskdef name="deploy"   classname="org.apache.catalina.ant.DeployTask">
    <classpath refid="tomcat.classpath"/>
  </taskdef>
  <taskdef name="list"     classname="org.apache.catalina.ant.ListTask">
    <classpath refid="tomcat.classpath"/>
  </taskdef>
  <taskdef name="reload"   classname="org.apache.catalina.ant.ReloadTask">
    <classpath refid="tomcat.classpath"/>
  </taskdef>
  <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
    <classpath refid="tomcat.classpath"/>
  </taskdef>


  <!-- =================== Compilation Control Options =================== -->

  <!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

  compile.source       Value of the -source command-line option.
-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="true"/>
  <property name="compile.source"      value="1.5"/>

  <!-- JUnit test options -->
  <property name="junit.fork" value="true"/>
  <property name="junit.filtertrace" value="on"/>
  <property name="junit.summary" value="withOutAndErr"/>


  <!-- ==================== External Dependencies =========================== -->


  <!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat 5
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

  -->

  <fileset dir="${sisc.lib}" id="sisc.support">
    <include name="*.jar"/>
    <!--include name="sisc.shp"/-->
  </fileset>

  <!-- include Jena support -->
  <fileset dir="${jena.lib}"
           id="jena.support">
    <!-- This is a subset of the Jena jars, which is intended to be minimal, but may not be in fact.
         The version in the Jena-2.3 distribution...
    <include name="antlr-2.7.5.jar"/>
    <include name="commons-logging.jar"/>
    <include name="icu4j_3_4.jar"/>
    <include name="jakarta-oro-2.0.8.jar"/>
    <include name="jena.jar"/>
    <include name="xercesImpl.jar"/>
    <include name="xml-apis.jar"/>
    -->

    <!-- ...and the versions in the SDB SVN build -->
    <!--
    <include name="antlr-2.7.5.jar"/>
    <include name="commons-logging-1.1.jar"/>
    <include name="icu4j_3_4.jar"/>
    <include name="jakarta-oro-2.0.8.jar"/>
    <include name="jena.jar"/>
    <include name='iri.jar'/>
    <include name="xercesImpl.jar"/>
    <include name="xml-apis.jar"/>
-->

    <!-- ...and ARQ jars -->
    <!--
    <include name="arq.jar"/>
    <include name="concurrent.jar"/>
    -->
    <include name='*.jar'/>
  </fileset>

  <fileset id='jetty.support' dir='${jetty.home}/lib'>
    <include name='*.jar'/>
  </fileset>

  <!-- check availability of dependencies -->
  <target name="check-packages"
          unless="runonly.install">
    <available property="sisc.present"
               filepath="${sisc.lib}"
               file="sisc.jar"/>
    <fail unless="sisc.present"
          message="Must have SISC to build: see sisc.sourceforge.net"/>

    <available property="jena.present"
               filepath="${jena.lib}"
               file="jena.jar"/>
    <fail unless="jena.present"
          message="Must have Jena to build: see jena.sourceforge.net"/>

    <available property='jetty.present'
               filepath='${jetty.home}'
               file='lib'/>
    <fail unless='jetty.present'
          message='Must have Jetty: see www.mortbay.org'/>

    <!-- Need JUnit for the src/test/org/... testcases: not essential -->
    <available property="junit.present"
               classpath='${junit.jar}'
               classname="junit.framework.TestCase"/>

    <available property='quaestorlib.built'
               filepath='${dist.home}'
               file='${quaestor.lib.jar}'/>

  </target>

  <!-- =================== Compilation Classpath ========================== -->

  <path id="sisc.classpath">
    <fileset refid="sisc.support"/>
  </path>
  <path id='jetty.classpath'>
    <fileset refid='jetty.support'/>
  </path>

  <path id="compile.classpath">

    <!-- Include all JAR files that will be included in /WEB-INF/lib -->

    <!-- for the sisc.shp file -->
    <path refid="sisc.classpath"/>

    <path refid='jetty.classpath'/>

    <!-- Include all elements that Tomcat exposes to applications -->
    <pathelement location="${catalina.home}/common/classes"/>
    <fileset dir="${catalina.home}/common/endorsed">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${catalina.home}/common/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${catalina.home}/shared/classes"/>
    <fileset dir="${catalina.home}/shared/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="tests.classpath">
    <pathelement location="${build.tests}"/>
    <pathelement location="${build.classes}"/>
    <pathelement location='${junit.jar}'/>
  </path>



<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="clean,compile"
   description="Clean build and dist directories, then compile"/>



<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
  </target>



  <!-- =================== Compile Target ================================= -->

  <!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

  -->

  <!--target name="compile" depends="prepare,quaestor.jar" -->
  <target name="compile" depends="prepare, check-packages"
   description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.classes}"/>
    <javac srcdir="${src.home}"
          destdir="${build.classes}"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}"
           source="${compile.source}"
         >
        <classpath refid="compile.classpath"/>
        <compilerarg value='-Xlint'/>
    </javac>

    <!-- Copy SchemeWrapper support resource -->
    <copy todir="${build.classes}">
      <fileset dir="${src.home}"
               includes="org/**/*.scm"/>
    </copy>

    <!-- Copy Scheme utility scripts into the classpath.
     !   Don't use a JAR: see the quaestor.jar target.
     ! -->
    <mkdir  dir="${build.classes}/quaestor"/>
    <copy todir="${build.classes}/quaestor">
      <fileset dir="${scm.src.home}/quaestor"
               includes="*.scm"/>
    </copy>
    <mkdir  dir="${build.classes}/util"/>
    <copy todir="${build.classes}/util">
      <fileset dir="${scm.src.home}/util"
               includes="*.scm"/>
    </copy>

    <!--
     !   How about compiling them?
     !   Shouldn't be hard, but it requires fiddling with the
     !   classpath so that, eg, utils.scm can find and load other .scm files.
    <mkdir dir="${build.classes}/quaestor"/>
    <java classname="sisc.REPL"
          fork="true"
          classpathref="sisc.classpath">
      <sysproperty key="sisc.home" value="${sisc.lib}"/>
      <arg value="-h"/>
      <arg value="${sisc.lib}/sisc.shp"/>
      <arg value="${src.etc}/compile-files.scm"/>
      <arg value="-x-call-with-args"/>
      <arg value="compile"/>
      <arg value="-x-no-repl"/>
      <arg value="-x-"/>
      <arg value="${scm.src.home}/quaestor"/>
      <arg value="${build.classes}/quaestor"/>
    </java>
    -->

  </target>

  <!-- Compile the SISC .scm files under ${scm.src.home}/quaestor,
   !   putting them in a jar file in WEB-INF.
   !
   !   Using this is a bad idea.  When undeploying, Tomcat 5.5 will
   !   not release resources obtained from JAR files.  We therefore
   !   must not distribute this extra code in a JAR file, at least
   !   not at develoment time.
   ! -->
  <target name="quaestor.jar" depends="prepare"
          description="Compile SISC library modules">
    <!--
    <mkdir dir="${build.home}/scc/quaestor"/>
    <java classname="sisc.REPL"
          fork="true"
          classpathref="sisc.classpath">
      <sysproperty key="sisc.home" value="${sisc.lib}"/>
      <arg value="-h"/>
      <arg value="${sisc.lib}/sisc.shp"/>
      <arg value="${scm.src.home}/etc/compile-files.scm"/>
      <arg value="-x-call-with-args"/>
      <arg value="compile"/>
      <arg value="-x-no-repl"/>
      <arg value="-x-"/>
      <arg value="${scm.src.home}/quaestor"/>
      <arg value="${build.home}/scc/quaestor"/>
    </java>
    <jar basedir="${build.home}/scc"
         destfile="${build.home}/WEB-INF/lib/quaestor.jar"
         includes="**/*.scc"/>
    -->
    <jar basedir="${scm.src.home}"
         destfile="${build.lib}/quaestor.jar"
         includes="quaestor/*.scm"
         />
  </target>


<!-- ==================== Dist Target ===================================== -->


<!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:

  * "compile" so that the entire web application (including external
    dependencies) will have been assembled

  * "javadoc" so that the application Javadocs will have been created

-->

  <target name="dist" depends="compile,javadoc"
   description="Create binary distribution">

    <!-- Copy documentation subdirectories -->
    <mkdir   dir="${dist.home}/docs"/>
    <copy    todir="${dist.home}/docs">
      <fileset dir="${docs.home}"/>
    </copy>

    <!-- Create application WAR file -->
    <jar jarfile="${dist.home}/${app.name}-${app.version}.war"
         basedir="${build.war}"/> <!-- XXX: this scoops up .../scc/, too -->

    <!-- Copy additional files to ${dist.home} as necessary -->

    <!-- Client-side useful things -->
    <mkdir dir="${build.client}"/>
    <copy todir="${build.client}">
      <fileset dir="${dist.home}/docs"/>
    </copy>
    <jar jarfile="${build.client}/${quaestor.client}.jar"
         basedir="${build.war}/WEB-INF/classes"
         includes="org/eurovotech/quaestor/**">
      <manifest>
        <attribute name='Built-By' value='${user.name}'/>
        <attribute name='Main-Class' value='org.eurovotech.quaestor.repl.QuaestorReplClient'/>
      </manifest>
    </jar>
    <zip destfile="${dist.home}/${quaestor.client}.zip">
      <fileset dir="${build.client}"/>
    </zip>

  </target>

  <!-- ==================== Quaestor lib target ==================== -->
  <!-- Bundle up into a single jar file everything needed for the application
       except the quaestor.scm program itself.  This could probably be slimmed
       down a LOT using something like Proguard, but that turns out to be quite
       complicated in practice, due to a fair amount of reflection happening
       here and there within various libraries, which confuses Proguard. -->
  <target name="quaestorlib"
          depends="compile"
          unless='quaestorlib.built'>
    <mkdir dir="${build.home}/quaestorlib"/>
    <mkdir dir='${dist.home}'/>
    <unjar dest="${build.home}/quaestorlib">
      <fileset refid="sisc.support"/>
      <fileset refid="jena.support"/>
      <fileset file="${jdbc.support.jar}"/>
      <!-- jetty.support shouldn't be here, since the presence of
           javax.servlet.Servlet.class here violates the servlet spec
           (Servlet Spec 2.3, section 9.7.2), and apparently causes
           Tomcat to refuse to load the jar file.  Jetty support is added
           when we're building the "jetty" target. -->
    </unjar>
    <!-- It's confusing to inherit a log4j.properties file
         included in a random one of the above jar files -->
    <delete file='${build.home}/quaestorlib/log4j.properties'/>
    <!-- When working on the Java files below, it's convenient to have this
         next element commented out and to change the path to point to
         .../WEB-INF/classes instead. -->
    <copy todir="${build.home}/quaestorlib">
      <fileset dir="${build.war}/WEB-INF/classes">
        <include name="org/eurovotech/quaestor/**"/>
        <include name="quaestor/*"/>
        <include name="util/*"/>
      </fileset>
    </copy>
    <jar jarfile="${dist.home}/${quaestor.lib.jar}"
         basedir="${build.home}/quaestorlib"/>
  </target>

<!-- ==================== Install Target ================================== -->

<!--

  The "install" target tells the specified Tomcat 5 installation to dynamically
  install this web application and make it available for execution.  It does
  *not* cause the existence of this web application to be remembered across
  Tomcat restarts; if you restart the server, you will need to re-install all
  this web application.

  If you have already installed this application, and simply want Tomcat to
  recognize that you have updated Java classes (or the web.xml file), use the
  "reload" target instead.

  NOTE:  This target will only succeed if it is run from the same server that
  Tomcat is running on.

  NOTE:  This is the logical opposite of the "remove" target.

-->

  <target name="install" depends="compile"
   description="Install application to servlet container">

    <deploy url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"
       localWar="file://${build.war}"/>
    <echo>Quaestor deployed to ${quaestor.url}</echo>

  </target>

  <!-- ========== Jetty installation ========== -->
  <!--
      Build everything - specifically the quaestorlib and the quaestor.scm -
      and bundle it into a jar file which can brings up the standalone Jetty service.
  -->
  <!-- When quaestorlib does not include quaestor.scm material (see above),
       remove quaestorlib from this dependency:
       depends="prepare,compile
  -->
  <target name="jetty"
          depends="prepare,compile,dist,quaestorlib"
          description="Build for Jetty">
    <!-- create the contents of the distributed jetty jar file -->
    <mkdir dir='${build.home}/${quaestor.jetty}/Resources'/>
    <copy todir="${build.home}/${quaestor.jetty}/Resources">
      <fileset file='${scm.src.home}/quaestor.scm'/>
      <fileset dir='${build.home}/war'>
        <include name='*'/> <!-- HTML files -->
      </fileset>
      <filterset>
        <filter token="VERSION" value="${app.version}"/>
      </filterset>
    </copy>
    <copy todir='${build.home}/${quaestor.jetty}'>
      <fileset file="${src.etc}/JettySchemeServer.properties"/>
      <fileset file="${src.etc}/log4j.properties"/>
      <fileset dir='${build.home}/war/WEB-INF/classes'>
        <include name='*'/> <!-- quaestor.scm -->
      </fileset>
      <filterset>
        <filter token="VERSION" value="${app.version}"/>
      </filterset>
    </copy>
    <copy todir='${build.home}/${quaestor.jetty}'>
      <!-- as before, but without the filtering (potentially corrupts binary class files) -->
      <fileset dir='${build.home}/war/WEB-INF/classes'>
        <include name='org/eurovotech/quaestor/*.class'/>
      </fileset>
    </copy>
    <unjar dest='${build.home}/${quaestor.jetty}'>
      <fileset dir='${dist.home}'>
        <include name='${quaestor.lib.jar}'/>
      </fileset>
      <fileset refid='jetty.support'/>
    </unjar>
    <!-- ...and jar it up -->
    <mkdir dir='${dist.home}'/>
    <jar jarfile='${dist.home}/${quaestor.jetty}.jar'
         basedir='${build.home}/${quaestor.jetty}'
         manifest='src/etc/JettyManifest'/>
  </target>

  <!-- ==================== Installation/distribution ==================== -->
  <!-- Create a webpage-tarball.tar.gz file which contains everything -->
  <target name="dist-tarball"
          depends='jetty,dist,quaestorlib'
          description='Make a single tarball (dist/webpage-tarball.tar.gz) which can be unpacked in the distribution directory'>
    <mkdir dir='${dist.home}/webpage-tarball'/>
    <copy todir='${dist.home}/webpage-tarball'>
      <fileset file='${dist.home}/${app.name}-${app.version}.war'/>
      <fileset file='${dist.home}/${quaestor.client}.zip'/>
      <fileset file='${dist.home}/${quaestor.jetty}.jar'/>
      <fileset file='${dist.home}/${quaestor.lib.jar}'/>
      <fileset file='${web.home}/base.css'/>
    </copy>
    <mkdir dir='${dist.home}/webpage-tarball/docs'/>
    <copy todir='${dist.home}/webpage-tarball/docs'>
      <fileset dir='${web.home}'/>
      <filterset>
        <filter token="VERSION" value="${app.version}"/>
        <filter token='RELEASEDATE' value='${release.date}'/>
      </filterset>
    </copy>

    <copy file='${web.home}/install.html'
          todir='${dist.home}/webpage-tarball'/>

    <copy file='${basedir}/RELEASE-NOTES.txt'
          todir='${dist.home}/webpage-tarball'/>

    <copy file='${docs.home}/distrib.html'
          tofile='${dist.home}/webpage-tarball/index.html'>
      <filterset>
        <filter token="VERSION"     value="${app.version}"/>
        <filter token='RELEASEDATE' value='${release.date}'/>
        <filter token='JETTYJAR'    value='${quaestor.jetty}.jar'/>
        <filter token='WARFILE'     value='${app.name}-${app.version}.war'/>
        <filter token='CLIENTZIP'   value='${quaestor.client}.zip'/>
        <filter token='LIBJAR'      value='${quaestor.lib.jar}'/>
      </filterset>
    </copy>
    <tar destfile='${dist.home}/webpage-tarball.tar.gz'
         basedir='${dist.home}/webpage-tarball'
         compression='gzip'/>
  </target>

<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" depends="compile"
   description="Create Javadoc API documentation">

    <mkdir          dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="${src.home}"
                destdir="${dist.home}/docs/api"
           packagenames="*"
               overview="${src.home}/org/eurovotech/quaestor/overview.html"
                 source="${compile.source}"
               >
      <classpath refid="compile.classpath"/>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
    </javadoc>

  </target>



<!-- ====================== List Target =================================== -->

<!--

  The "list" target asks the specified Tomcat 5 installation to list the
  currently running web applications, either loaded at startup time or
  installed dynamically.  It is useful to determine whether or not the
  application you are currently developing has been installed.

-->

  <target name="list"
   description="List installed applications on servlet container">

    <list    url="${manager.url}"
        username="${manager.username}"
        password="${manager.password}"/>

  </target>


  <!-- =================== Prepare Target ================================= -->

  <!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

  -->

  <target name="prepare" depends="prepare-static">

    <!-- Create build directories as needed -->
    <mkdir dir="${build.war}"/>
    <mkdir dir="${build.lib}"/>
    <mkdir dir="${build.classes}"/>

    <!-- Copy in external dependencies -->
    <mkdir  dir="${build.lib}"/>
    <copy todir="${build.lib}">
      <fileset refid="sisc.support"/>
      <fileset refid="jena.support"/>
      <fileset file='${jdbc.support.jar}'/>
    </copy>

    <copy todir="${build.war}/WEB-INF/classes">
      <fileset file="${scm.src.home}/quaestor.scm"/>
      <filterset>
        <filter token="APPNAME" value="${app.name}"/>
        <filter token="VERSION" value="${app.version}"/>
      </filterset>
    </copy>

  </target>

  <target name='prepare-static'
          description='Prepare the static content of the webapp'>

    <mkdir dir='${build.war}/access-control-demo'/>
    <copy todir='${build.war}/access-control-demo'>
      <fileset file='${build.war}/base.css'/>
    </copy>
    <!-- Copy the static content of this web application -->
    <copy todir="${build.war}">
      <fileset dir="${web.home}"
               excludes="generate/**"/>
      <filterset>
        <filter token="APPNAME" value="${app.name}"/>
        <filter token="VERSION" value="${app.version}"/>
      </filterset>
    </copy>
    <zip destfile='${build.war}/access-control-demo.zip'
         basedir='${build.war}/access-control-demo'/>

  </target>

  <!-- ========= Test targets ========= -->
  <!-- Run regression tests -->

  <target name="test"
          depends="scm-tests, protocol-tests"
          description="Run all tests"/>

  <path id="sisc.test.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.lib}"/>
    <fileset dir="${build.lib}">
      <include name="*.jar"/>
    </fileset>
  </path>
  <!-- Run the Scheme-based self-tests.  If the system property single.test
       is set, it must be the name of one of the test files, and only that
       test is run.  Otherwise, each of the *.scm files is run. -->
  <target name="scm-tests"
          depends="compile"
          description="Run regression tests">
    <java classname="sisc.REPL"
          fork="true"
          classpathref="sisc.test.classpath"
          failonerror="true">
      <sysproperty key="sisc.home" value="${build.lib}"/>
      <!-- <sysproperty key='single.test' value='${single.test}'/> this doesn't work like I'd expect it to... -->
      <arg value="-h"/>
      <arg value="${build.classes}/sisc.shp"/>
      <arg value="${scm.test.home}/run-tests.scm"/>
      <arg value="--no-repl"/>
      <arg value="--call-with-args"/>
      <arg value="main"/>
      <arg value="--"/>
      <!-- First argument must be location of the test script -->
      <arg value="${scm.test.home}/run-tests.scm"/>
      <!-- add further arguments? -->
    </java>
  </target>
  
  <target name="compile-protocol-tests"
          depends="compile"
          if="junit.present">
    <mkdir dir="${build.tests}"/>
    <javac srcdir="${src.tests}"
           destdir="${build.tests}"
           deprecation="${compile.deprecation}"
           debug="${compile.debug}"
           source="${compile.source}"
           >
      <classpath refid="tests.classpath"/>
    </javac>
  </target>

  <!--
   ! JUnit tests.
   !
   ! This includes a protocol test, for which Tomcat must be running.
   ! The URL of the service can be overridden by setting the quaestor.url
   ! property when invoking ant:
   !   % ant -Dquaestor.url=http://ptolemy.astro.gla.ac.uk:8080/quaestor \
   !         -Dtestcase=org.eurovotech.quaestor.QuaestorTest \
   !         run-single-test
   !-->
  <target name="protocol-tests"
          depends="compile-protocol-tests"
          if="junit.present"
          description="runs all of the JUnit tests">
    <junit printsummary="${junit.summary}"
           haltonfailure="yes"
           filtertrace="${junit.filtertrace}"
           fork="${junit.fork}">

      <jvmarg value="-enableassertions"/>
      <classpath refid="tests.classpath"/>

      <sysproperty key="build.tests" value="${build.tests}"/>
      <sysproperty key="quaestor.url" value="${quaestor.url}"/>

      <formatter type="brief" usefile="false"/>

      <batchtest>
        <fileset dir="${src.tests}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>

    </junit>
    
  </target>

  <!-- Test that the Jetty version of the server works.
       Note that this requires running a shell script, so only works on Unix -->
  <target name="jetty-test"
          depends="jetty"
          description="Run the protocol tests against the Jetty version of the server">
    <exec executable='/bin/sh' failonerror='true'>
      <arg value='src/test/misc/test-with-jetty.sh'/>
      <arg file='build.xml'/> <!-- this file -->
      <arg file='${dist.home}/${quaestor.jetty}.jar'/>
    </exec>
  </target>

  <target name="run-single-test"
          depends="compile-protocol-tests"
          if="junit.present"
          description="runs the single test defined in the testcase property">
    
    <junit printsummary="${junit.summary}"
           haltonfailure="yes"
           filtertrace="${junit.filtertrace}"
           fork="${junit.fork}">

      <jvmarg value="-enableassertions"/>
      <classpath refid="tests.classpath"/>

      <sysproperty key="build.tests" value="${build.tests}"/>
      <sysproperty key="quaestor.url" value="${quaestor.url}"/>

      <formatter type="brief" usefile="false"/>

      <test name="${testcase}"/>
    </junit>
  </target>

<!-- ==================== Reload Target =================================== -->

<!--

  The "reload" signals the specified application Tomcat 5 to shut itself down
  and reload. This can be useful when the web application context is not
  reloadable and you have updated classes or property files in the
  /WEB-INF/classes directory or when you have added or updated jar files in the
  /WEB-INF/lib directory.

  NOTE: The /WEB-INF/web.xml web application configuration file is not reread
  on a reload. If you have made changes to your web.xml file you must stop
  then start the web application. 

-->

  <target name="reload" depends="compile"
   description="Reload application on servlet container">

    <reload url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"/>

  </target>


<!-- ==================== Remove Target =================================== -->

<!--

  The "remove" target tells the specified Tomcat 5 installation to dynamically
  remove this web application from service.

  NOTE:  This is the logical opposite of the "install" target.

-->

  <target name="remove"
   description="Remove application on servlet container">

    <undeploy url="${manager.url}"
         username="${manager.username}"
         password="${manager.password}"
             path="${app.path}"/>
    <echo>Quaestor undeployed from ${quaestor.url}</echo>

  </target>


</project>
