### @GENERATED@

####################################################################
###
### Configuration file for RHESSI-DSA server
###
### Version: @VERSION_STRING@
###
####################################################################
#
# Modified from distribution default.properties by Norman, 2007-01-15
#
# IMPORTANT NOTE ON DSA/catalog installation. 
# -------------------------------------------
# Note that your DSA/catalog should be installed (or accessible, e.g.
# via using httpd request forwarding) on either port 80 or port 8080 
# for full Virtual Observatory interoperability.
#
# Should be installed in Java 1.5 only.
#
#
# Notes on the format of this file:
# ---------------------------------
#
# Comments in this file are preceded by the '#' character.
#
# Sample or disabled properties are preceded by the '!' character.
#
# Values which need to be replaced by a suitable local datum are
# enclosed in curly brackets, e.g. {replace_me}
#
#
# There are a number of properties to be configured, and as far as
# possible they are grouped together in logical collections.
#
# This file is intended to be self-documenting;  if you have 
# suggestions for clarifications or enhancements, please send 
# them to astrogrid_dsa@star.le.ac.uk.
#
####################################################################

# ==================================================================
# CRITICAL SETTINGS
# =================
# 
# All the properties in this file are important, but these two are 
# particularly critical for the operation of DSA/catalog self-tests.
#
#
# ----------
# This property sets the URL on which your DSA/catalog can be accessed.
# This URL MUST BE GLOBALLY VISIBLE as it will be used to tell the 
# Virtual Observatory how to reach your DSA/catalog;  a localhost 
# address will not work.

datacenter.url=@BASEURI@
datacenter.reference.url=http://hessi.ssl.berkeley.edu

# A skeleton Metadoc file can be generated by retrieving the URL
# 
#    http://@BASEURI@/admin/generateMetaDoc
#
# The skeleton metadoc file you have thus created will require some 
# manual enhancement, as described in this DSA/catalog installation's 
# "Configuring your DSA/catalog" web interface pages:
#
#    http://@BASEURI@/configure.jsp
# 
# If the metadoc file is outside the installed webapp tree, then this
# has to be a full path.  If it's inside the tree, as in this case, then
# it appears to be located by default in the WEB-INF/classes directory.

datacenter.metadoc.file=@METADOC@


# ==================================================================
# DATABASE CONNECTION SETTINGS
# ============================
#
# Properties involved in connecting to the dataset in the RDBMS.
#
# The DSA/catalog architecture is "pluggable", i.e. "plugin" modules 
# can be written to handle local data connection requirements without 
# revision to the core DSA/catalog engine.
#
# Two standard plugins are currently supplied, which should hopefully
# be adequate for most users.  
#
# For testing purposes, a test plugin with classname
# 'org.astrogrid.tableserver.test.SampleStarsPlugin' is supplied;  
# this creates and accesses a small test database using the HSQLDB java
# database that is included in the DSA/catalog installation.
#
# For access to your own RDBMS data, a JDBC plugin is supplied
# with classname 'org.astrogrid.tableserver.jdbc.JdbcPlugin', to
# allow the DSA/catalog to connect to your database via the JDBC 
# architecture.
# (NB This plugin requires that your RDBMS vendor supplies a JDBC driver 
# for the RDBMS;  as far as we know, all the major vendors do this).
# If your RDBMS doesn't support JDBC, you will need to provide a 
# customised plugin; you may wish to contact astrogrid_dsa@star.le.ac.uk
# for some advice with this.
#

# ------------------------------------------------------------------ 
# A JDBC plugin for real RDBMS access
# ----------------------------------
#
# We hope that this JDBC plugin should work for most common RDBMS systems.
#
# Comment out the properties for the test plugin above, and uncomment the
# relevant properties below (by removing the leading '!' character) to use JDBC.
#
# Note that you will also need to copy the JDBC jar for your RDBMS 
# into your DSA/catalog webapp's WEB-INF/lib directory (remember to 
# restart the webapp after doing so, to be sure the jar is in the
# webapp's classpath).

# ----------
# This property tells the DSA to use the JDBC Plugin
# ----------

datacenter.querier.plugin=org.astrogrid.tableserver.jdbc.JdbcPlugin

# ----------
# This property tells the plugin whether the RDBMS expects trigonometric
# function arguments in radians or not (set to "false" if RDBMS trig 
# functions use degrees).
# MySQL trig functions are in radians.
# ----------

db.trigfuncs.in.radians=true

# ----------
# These properties tell the DSA what username and password to use for JDBC 
# access to the RDBMS (this user account obviously needs to exist/be 
# configured within your RDBMS).
# IT IS STRONGLY ADVISED THAT THE JDBC USER ACCOUNT BE READ-ONLY - so
# the JDBC username should have no permission to modify the database.
# ----------

datacenter.plugin.jdbc.user=@DBUSER@
datacenter.plugin.jdbc.password=@DBPASS@

# - - - - - - -
# Template JDBC driver/URL properties for MySQL 4.1.16 
# Likely to work with other versions of MySQL too
#
datacenter.plugin.jdbc.drivers=com.mysql.jdbc.Driver
datacenter.plugin.jdbc.url=jdbc:mysql://@DBHOST@/@DBNAME@

# ----------
# Settings for SQL translation.
# The JDBC plugin by default uses an XSLT-based mechanism to produce
# suitable SQL queries from incoming ADQL/XML queries.  We need to
# specify which XSLT stylesheet the RDBMS should use.  
# 
# If your DSA fails its SQL syntax tests,
# you will need to provide a customised stylesheet that produces the
# correct SQL.

# For MySQL 4.1.16 
# (likely to work with other versions of MySQL too)
# (This is a good one to try if your RDBMS is not one of the ones listed).
datacenter.sqlmaker.xslt=MYSQL-4.1.16.xsl


# ==================================================================
# RESOURCE RESTRICTION SETTINGS
# =============================
# 
# These properties allow you to set crude usage limitations to avoid 
# overloading or large-scale data-mining of your DSA/catalog, if you wish.

# Limits number of rows that can be returned by any single query 
# (equivalent to using SQL "TOP" or "LIMIT").   
# NB A value of 0 indicates no limit.  
datacenter.max.return=50000

# Limits number of queries to be processed simultaneously (queries in 
# excess of this will be queued until one or more of the active queries 
# completes).
datacenter.max.queries=4

# Limits run-time for each query.  
# NB A value of 0 indicates no limit
#
# Note that setting this value to some finite time will NOT cause 
# the SQL query running on the actual RDBMS to be terminated;  it
# will just kill off the datacenter's monitoring and results 
# delivery for any query has been running for more than the 
# specified time.
datacenter.sql.timeout=0


# ==================================================================
# SELF-TEST SETTINGS
# ==================
# The DSA/catalog server has a suite of self-tests designed to 
# check that ADQL/XML queries are being translated into SQL compatible
# with your back-end RDBMS.
#
# The self-test infrastructure uses a series of templated ADQL/XML 
# queries; it plugs a real table name and real column names into
# the templates in order to produce SQL that will actually run against
# your data in your RDBMS.
#
# The properties below tell the self-test infrastructure the names of 
# the table and columns to use in populating the templated queries.
# When you configure access to your real RDBMS, you should configure the 
# properties below with real table and column names from your database.
#
# The default properties below will work with the SampleStars plugin
# for initial tests.

!datacenter.self-test.table=SampleStars
!datacenter.self-test.column1=RA
!datacenter.self-test.column2=DEC

# both the following are integer columns
datacenter.self-test.table=rhessi
datacenter.self-test.column1=rate1
datacenter.self-test.column2=rate2

# ==================================================================
# GENERAL QUERY SETTINGS
# ======================

# When an incoming ADQL query doesn't specify the table to which it
# should be applied (which is undesirable, but is legal ADQL 1.0),
# the table defined by the 'default.table' property is used to choose
# the table to apply the query to.   
#
# If you only have one table in your dataset, or one major table,
# it makes sense to set the 'default.table' property to the name 
# of this table.
#
# If you leave the property unset or blank, ADQL queries that do not
# specify the target table will be rejected.

# Replace with a table in your database, or leave blank/unset
default.table=rhessi


# VOTable output uses Unified Content Descriptors to describe the
# nature of different columns in the data.  This property specifies
# version of the UCD specification to use.
# Allowed values here are '1' (for UCD v.1) or '1+' (for UCD v.1+).
#
# UCD v.1 is now deprecated.  However, some services do not yet
# deal with UCD v.1+, so we recommend leaving this property set to 
# v.1 for the time being.
#
# In particular, if you are enabling the conesearch interface
# (see below), PLEASE USE UCD v.1 for now as the conesearch standard
# requires it.
#
# PLEASE POPULATE YOUR METADOC FILE USING BOTH VERSIONS OF THE UCD 
# STANDARD, FOR FUTURE UPGRADEABILITY.
datacenter.ucd.version=1+

# ==================================================================
# CONE-SEARCH INTERFACE SETTINGS
# ==============================
# The DSA/catalog server provides an IVOA "cone-search" interface.
# This simple interface accepts a Right Ascension, Declination and 
# search radius in decimal degrees.
#
# Supplying a conesearch interface to your data probably only makes sense
# if that data is an astronomical catalogue with RA and Dec coordinates for 
# each row.  If you don't want to provide this interface, set this 
# property to false.  However, note the point below about the 
# 'conesearch.table' property.
#
# RHESSI doesn't have RA/Dec coordinates
datacenter.implements.conesearch=false

# If conesearch is enabled above, the following properties configure how 
# an incoming conesearch should be interpreted, namely which table in the 
# database it should be run against, which columns in that table are the 
# RA and Dec coordinates, and what units those columns are in (degrees or 
# radians).
# Unfortunately at present, conesearch can only be configured for a 
# single table;  future versions of DSA/catalog may permit individual
# conesearch interfaces to be set up for >1 table in your database.
#
# The RHESSI table doesn't have any RA/Dec columns, so these are dummy values.
#conesearch.table=nosuchtable
#conesearch.ra.column=dummy
#conesearch.dec.column=dummy
#conesearch.columns.units=rad


# ==================================================================
# VIRTUAL OBSERVATORY SETTINGS
# ============================
# To be useful as part of the Virtual Observatory, this DSA/catalog
# server needs to publish some information about itself.  
# These properties are used to describe the DSA/catalog's interfaces 
# and data so that it can be discovered and utilised by Virtual 
# Observatory tools and their human users.

# ----------
# These two properties are aimed at human readers - change them
# to reflect your own installation details.  The sample entries 
# below describe the default test configuration of the DSA/catalog 
# installation.
# ----------
datacenter.name=Glasgow RHESSI DSA service
datacenter.description=RHESSI solar archive at University of Glasgow

# ----------
# The following settings are for configuring "VOResources", which are XML 
# descriptions of the DSA/catalog server, its interfaces and data,
# intended to be stored in VO-compliant "registries" of such descriptions.
#
# These settings are very important, as together they comprise a unique
# identifier for this resource in the Virtual Observatory.
# The Authority ID is a unique identifier for your organisational unit,
# e.g. star.le.ac.uk);  see 
# http://wiki.astrogrid.org/bin/view/Deploy/InstallationNotesAuthorityID
# for more about authority IDs.
# The Resource Key is a unique identifier for this particular resource,
# e.g. USNOB_DSA.  Your Authority ID must have be no other resources with 
# this name;  the Authority ID / Resource Key pair must be globally unique.

datacenter.authorityId=org.astrogrid
datacenter.resourceKey=rhessi-dsa

# These settings provide helpful information to human users of the VO.
datacenter.publisher=Glasgow University Astronomy and Astrophysics Group
datacenter.contact.name=Norman Gray
datacenter.contact.email=norman@astro.gla.ac.uk
# Scientific contact: Eduard Kontar, eduard@astro.gla.ac.uk
# Data creators: NASA and RHESSI Team, <http://hesperia.gsfc.nasa.gov/hessi/>
datacenter.data.creator.name=RHESSI Team

# ----------
# The DSA/catalog server has a pluggable architecture for VOResource
# generation;  a particular plugin is intended to produce a particular 
# style of Virtual Observatory resource registration.
# Multiple plugins can be specified, for example:
#
#   datacenter.resource.plugin.1=first.plugin.class
#   datacenter.resource.plugin.2=second.plugin.class
#   datacenter.resource.plugin.3=third.plugin.class
#
# (please number these properties in sequence, starting from 1).
# At present, for most purposes, only the TabularDbResources plugin below 
# is needed.  This will probably change as new Registry standards emerge.
#
# This plugin generates and includes TabularDBResource XML registration data
# in this DSA/catalog's Registry metadata.
#
datacenter.resource.plugin.1=org.astrogrid.tableserver.metadata.TabularDbResources

# To publish other XML Resource documents that are stored in local or internet 
# files, configure this set of properties:
#
!datacenter.resource.plugin.2=org.astrogrid.dataservice.metadata.FileResourcePlugin
!datacenter.resource.filename.1=
!datacenter.resource.url=

# Authority IDs (as discussed above) need themselves to have a VOResource
# entry in a VO registry;  each entry has one particular registry that is 
# its "managing registry".  The Authority ID only needs to be registered
# once;  if your organisation has a pre-existing Authority ID, it is 
# probably already registered.  However, if you are creating a new Authority
# ID specifically for this DSA/catalog installation, you can use this plugin
# to register your Authority ID as well as your DSA/catalog VOResource data.
#
!datacenter.resource.plugin.3=org.astrogrid.datacenter.metadata.AuthorityConfigPlugin


# ==================================================================
# REGISTRY SERVICES
# =================
#
# This DSA/catalog installation needs to register its own resources in
# the same "Publishing registry" that publishes the installation's 
# Authority ID registration (see Authority ID discussion above).
#
# Additionally, this installation will sometimes need to search a VO 
# "Querying registry" in order to resolve VOSpace addresses (such as 
# destination IVORNs where it should put query results).
#
# This is the "publishing registry" used when this DSA/catalog needs to 
# register its resources.  It must be the same registry where the DSA/catalog's
# Authority ID is registered.  (Note that the admin endpoint uses the
# RegistryUpdate interface of this registry.)
org.astrogrid.registry.admin.endpoint=http://galahad.star.le.ac.uk:8080/astrogrid-registry/services/RegistryUpdate

# This is the "querying registry" used to resolve VOSpace addresses.  
# It should be reasonably high performance and/or close by, but it doesn't 
# have to belong to your organisation or manage your Authority ID.
# (Note that the query endpoint uses the RegistryQuery interface of this 
# registry.)
org.astrogrid.registry.query.endpoint=http://galahad.star.le.ac.uk:8080/astrogrid-registry/services/RegistryQuery

# This is the alternative querying registry, used if the main querying 
# registry is unavailable.
org.astrogrid.registry.query.altendpoint=http://hydra.star.le.ac.uk:8080/astrogrid-registry/services/RegistryQuery


# ==================================================================
# MISC. OTHER PROPERTIES
# ======================
#
# Enable http-chunking support for large file transfers (to avoid
# buffer overflow errors).
# YOU SHOULD *NOT* NEED TO DISABLE THIS PROPERTY, BUT NOTE THAT 
# HTTP-CHUNKING WILL ONLY WORK IN JAVA 1.5!  
# YOU SHOULD RUN THIS DSA/catalog IN JAVA 1.5 (NOT 1.4).
org.astrogrid.filestore.chunked.send=enabled

# DON'T CHANGE OR REMOVE THIS ONE!  It's a required property.
cea.component.manager.class=org.astrogrid.dataservice.service.cea.DatacenterCEAComponentManager

# ----------
# These set whether CEA tasks should be stored in memory or on disk, 
# and if so, where.  The default is in memory, so you only need to 
# uncomment/configure these properties if you want the CEA interface 
# to store jobs to disk.
# ----------
!cea.persistence.backend=file
!cea.filestore.basedir=/tmp/  (defaults to container's default directory)
