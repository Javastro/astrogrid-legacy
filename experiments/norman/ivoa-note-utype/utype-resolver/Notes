
Building: It needs tagsoup and quaestorlib, in the versions noted in
build.xml



What's here is largely working (2007-03-06, tagged v0-1-7), but here
are some ideas for what might happen next.

The following features are probably not terribly important, and I
don't plan to do anything with them immediately.

* Add translator/validator for HTML->RDF debugging.  Should this just
  do HTML->RDF translation, or create and dump an RDF model?

* Have a think about the potential race condition within
  knowledge.scm:query-utype-superclases.  Shouldn't be too hard to
  solve, but it's not trivial.

* Add more REST methods: PUT namespaces (?); HEAD to test
  whether a definition has been changed; support If-Modified-Since and
  Expires headers on queries of namespace documents

* Namespace lifecycle methods: support expiry of namespaces (probably
  dependent on any Expires headers returned from resources).

* Tighter integration with Quaestor, to support SPARQL queries of
  namespaces (ie, start to turn this into a guerilla UType registry).

* Do I have to worry about making it aware of (outgoing) HTTP
  proxies.  I don't think so, but it shouldn't be a massive challenge
  if so (tweak to knowledge.scm:retrieve-uri, plus something in the
  knowledgebase metadata).

* Make a version of the resolver, or of Quaestor, which is standalone,
  rather than relying on Tomcat.  Use restlets.org, or some standalone
  HTTP server library, perhaps?  Jetty?  John Taylor said he had a
  tiny standalone Java server implementation somewhere.

DONE:

* Read malformed XML/HTML.  Using John Cowan's tagsoup at
  <http://home.ccil.org/~cowan/XML/tagsoup/>; could also use NekoHTML at
  <http://people.apache.org/~andyc/neko/doc/html/>

* Add UType class, subclassing rdfs:Class.  Why?  Because it's largely
  cost-free, doesn't look weird, and opens the door to more
  sophistication in the future.

* Check appropriate behaviour on wrong input

* Change /resolve to a noun: say /superclasses ?

* Only note that we've `seen' a namespace after it's successfully
  loaded.

* How strict should I be about the GRDDL header -- or use another
  profile?  Decided: make it appear like GRDDL, for future
  extensibility, but document that it doesn't actually pay attention
  to the GRDDL attributes,

* Integration with Quaestor: have each namespace in a separate
  knowledgebase submodel.

* Add /description, to provide details about a namespace in HTML and
  RDF forms

* Description: include information such as rdfs:comment and subclass
  relations in HTML output.  Don't overdo this -- the point of this
  UType proposal is that most of this explanation is at the UType
  namespace URL.

* Support explicit namespace expiry with DELETE method.

* Extract other RDF from HTML, such as rdfs:comment.

* Add documentation

