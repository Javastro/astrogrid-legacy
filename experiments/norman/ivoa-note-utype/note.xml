<?xml version="1.0" encoding="utf-8"?><!--*- nxml -*-->
<!-- Based on template at
     http://www.ivoa.net/Documents/templates/ivoa-tmpl.html -->
<html xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en" lang='en'>

<head>
<title>UTypes and URIs</title>
<link rev="made"
      href="http://nxg.me.uk/norman/#norman"
      title="Norman Gray"/>
<meta name="author" content="Norman Gray"/>
<meta name="keywords"
      content="IVOA, International, Virtual, Observatory, Alliance" />
<link href="http://www.ivoa.net/misc/ivoa_note.css"
      rel="stylesheet"
      type="text/css" />
<!-- style: make the ToC a little more compact, and without bullets -->
<style type='text/css'>
div.toc ul { list-style: none; padding-left: 1em; }
span.userinput { font-weight: bold; }
q { color: #666; }
q:before { content: "“"; }
q:after  { content: "”"; }
.todo { background: #ff7; }
</style>
</head>

<body>
<div class='head'>
<table>
<tr><td><a href="http://www.ivoa.net/"
           ><img alt="IVOA logo"
           src="http://ivoa.net/icons/ivoa_logo_small.jpg"
           border="0"/></a></td></tr>
</table>

<!-- $Id: note.xml,v 1.11 2007/03/26 10:16:22 norman Exp $ -->

<h1>UTypes and URIs</h1>
<h2>IVOA Note 
<!--(v1.0, 2007 March 2)-->
(working version $Revision: 1.11 $ $Date: 2007/03/26 10:16:22 $)
</h2> <!-- XXX version/date -->
<dl>
<dt>Interest/Working Group</dt>
<dd><em>Not applicable</em></dd>

<!--
<dt>This version</dt>
<dd>XXX No URL available</dd>

<dt>Latest version</dt>
<dd>XXX No URL available</dd>
-->

<dt>Author</dt>
<dd><a href="http://nxg.me.uk" >Norman Gray</a>,
<a href='http://eurovotech.org/' >Euro-VOTech project</a>
and
<a href='http://www.star.le.ac.uk/' >University of Leicester</a></dd>
</dl>
<hr/>
</div>

<div class='section-nonum' id='abstract'>
<p class='title'>Abstract</p>

<p>We describe a minor change to the interpretation of UType values in
VOTables, which helps document UType meanings, and makes it easy to
relate UTypes to each other, supporting interoperability while
requiring minimal standardisation.</p>

<p>This makes possible simple but powerful reasoning capabilities, and
we illustrate this with a resolver which makes the necessary
capabilities available to applications with minimal cost.</p>

</div>

<div class='section-nonum' id='status'>
<p class='title'>Status of this document</p>

<p>This is an IVOA Note.</p>

<p>This document is an IVOA Note expressing suggestions from and opinions of
the authors.  The first release of this document was 
<!-- XXX Date -->
2007 March 2.</p>

<p>It is intended to share best practices, possible approaches, or
other perspectives on interoperability with the Virtual Observatory.
It should not be referenced or otherwise interpreted as a standard
specification.</p>

<p>A list of current IVOA Recommendations and other technical
documents can be found at
<a href="http://www.ivoa.net/Documents/"
   ><code>http://www.ivoa.net/Documents/</code></a>.</p>

<h3>Acknowledgments</h3>

<p>Thanks to Mark Taylor for comments on an early draft of this Note.</p>

</div>

<h2><a id="contents" name="contents">Table of Contents</a></h2>
<div class="head">
<?toc?>
</div>

<hr/>

<div class='section' id='introduction'>
<p class='title'>Introduction</p>

<p>UTypes are defined in section 4.5 of the VOTable standard <span
class='cite'>std:votable</span>, with a definition which is
sufficiently compact that we can reproduce it in full here.</p>
<blockquote>
<p>In some contexts, it can be important that <code>FIELD</code>s or
<code>PARAM</code>eters are explicitly designed as being the parameter
performing some well-defined role in some external data model. For
instance, it might be important for an application to know that a
given <code>FIELD</code> expresses the surface brightness processed by
an explicit method. None of the existing <code>name</code>,
<code>ID</code> or <code>ucd</code> attributes can fill this role, and
the <code>utype</code> (usage-specific or unique type) attribute has
been added in VOTable 1.1 to fill this gap. By extension, most
elements may refer to some external data model, and the
<code>utype</code> attribute is legal also in <code>RESOURCE</code>,
<code>TABLE</code> and <code>GROUP</code> elements.</p>

<p>In order to avoid name collisions, the data model identification
should be introduced following the XML namespace conventions, as
<code>utype="datamodel_identifier:role_identifier"</code>. The mapping
of <code>datamodel_identifier</code> to an xml-type attribute is
recommended, but not required.</p>
</blockquote>

<p>At the time, this was addressing a newly-identified need for a means to
refer to a data model more precisely than was possible with UCDs.
There were few examples of putative UTypes, and few applications
using them, and so this terse definition sensibly neither greatly
constrains UType syntax, nor defines any specific instances.</p>

<p>Our situation is now different.  The SSA protocol <span
class='cite' >std:ssa</span> specifies a large number of UTypes in its
Working Draft document; the SIA protocol <span class='cite'
>std:sia</span> has acquired a number of UTypes (informally introduced
in <a href='http://www.ivoa.net/forum/dm/0404/0408.htm' >a mail
message from Jonathan McDowell</a>); and the on-going Dataset
Characterisation effort <span class='cite'>std:characterisation</span>
includes a list of UTypes in at least <a
href='http://www.ivoa.net/Documents/Notes/DMAstroDS/DMAstroDS-20060228.pdf'
>one version of its draft note</a>.  In addition, there are various
DAL interfaces using these UTypes.  None of these have yet been
formally standardised (as of March 2007), so that now, with examples
in mind and standardisation in prospect, is a good moment to refine
the UType definition.</p>

<p>We make three suggestions, which we can summarise as follows.</p>
<ol>
<li>Regard the <code>datamodel_identifier</code> prefix above as an
XML namespace, with the syntactic requirements that implies, and
interpret the UType as a URI naming a concept.  That is the namespace
mapping of the prefix should be required, rather than merely recommended.</li>
<li>Require that each UType URI be resolvable, on the web, to
human-readable documentation for the concept thus named.</li>
<li>Require that each UType URI be resolvable, separately, to a
formal (RDF) expression of its semantics, which would therefore be
immediately retrievable, aggressively cacheable, and easily used by
software to interpret data annotated with the UType.</li>
</ol>
<p>The second and third suggestions build on the first, but are independent
of each other.</p>
<blockquote class='todo'>
@@TODO MBT strongly recommends that `require', above, be changed to
`strongly recommend', on the practical grounds that that is how it
would probably be used in fact.  My own feeling is that blessing that
degree of casualness in creating UTypes might be harmful to their
usefulness, but I can appreciate the practical force of the
argument, and can see the extra permissiveness as encouraging the uptake
of UTypes.
</blockquote>

<p>Further discussion of each of these appears in the sections below,
and a rationale for the overall approach appears in <span class='xref'
>rationale</span>.  Although
simple uses of the reasoning framework described there would be
immediately available, the more elaborate possibilities would require
further work.  We would like to stress, however, that this is not the
only benefit of the UType refinement we are suggesting, and that the
consistency and documentation benefits described here would follow
even if the reasoning potential were never exploited.</p>

<p>The draft characterization document describes a possible mechanism
for serialising a data source using a data model and UTypes.  We
presume the existence of such an agreed-upon mechanism in the
discussion of data sharing below.</p>


<div class='section' id='utype-create'>
<p class='title'>Creating UTypes</p>

<p>In this proposal, an organisation creating a UType must perform
three steps, mirroring the steps described in section
<span class='xref'>introduction</span>.</p>
<ol>
<li>Determine a namespace URI, creating a URI in a DNS domain
the organisation controls; then identify individual UType names
respecting the syntax described in section
<span class='xref' >utype-uris</span>.</li>
<li>Create documentation for the namespace, as described in section
<span class='xref' >utype-docs</span>.</li>
<li>Create a simple RDF document expressing how the new UTypes relate
to other standardised or well-known UTypes, as described in section
<span class='xref' >utype-rdf</span>.</li>
</ol>

</div>

</div>

<div class='section' id='utype-uris'>
<p class='title'>UTypes as URIs</p>

<p>The UType definition quoted above (section <span
class='xref'>introduction</span>) includes a <code>datamodel_identifier</code>
which syntactically resembles an XML namespace identifier without
necessarily being one, and in particular without being necessarily
associated with a URI which would give it uniqueness and a potential
reference to documentation.</p>

<p>We suggest slightly expanding the UType definition by interpreting this
<code>datamodel_identifier</code> prefix as precisely an XML namespace
identifier (thus the <code>xmlns</code> mapping of this
prefix is now a requirement rather than merely a recommendataion), and
identifying the UType as the string concatenation of the <em>namespace
name</em> and the <em>local name</em> as given in the <code>utype</code>
attribute, using the terminology of <span class='cite'
>std:xmlns</span>.  There is precedent for this approach in the
definition of `Compact URIs' (CURIE, see <span
class='cite'>birbeck05</span>), and it is a syntax used extensively
and successfully in the RDF world.</p>

<p>In this interpretation, the following three fragments would
represent identical UTypes and would be deemed to be equivalent.</p>
<ul>
<li><code>xmlns:utns="http://www.ivoa.net/ut/#" utype="utns:axis"</code></li>
<li><code>xmlns="http://www.ivoa.net/ut/#" utype="axis"</code></li>
<li><code>utype="http://www.ivoa.net/ut/#axis"</code></li>
</ul>
<p>The first is the usual XML namespace mechanism, and closely resembles
the VOTable definition, the second uses the XML notion of the default
namespace, and the third explicitly gives the URI which
the other two resolve to.  As with XML namespaces, the string used as
the prefix -- <code>utns</code> in the example here -- is
arbitrary, and it is only the post-concatenation URI that has any
meaning attached to it.</p>

<p>This proposal requires no syntactic changes to the VOTable
specification.  It is purely a mild reinterpretation of the syntax
already defined and used.</p>

<p>The UType string that results from this concatenation must be a valid URI.
Since the namespace name is necessarily a URI, this constraint is
satisfied if the <em>local name</em> matches a restricted form of the
<code>URI</code> syntax of of RFC3986 (see <span class='cite'
>std:rfc3986</span>):</p>
<blockquote>
<code>( path-absolute | path-rootless ) [ "?" query ] [ "#" fragment ]</code>
</blockquote>
<p>In practice, we expect most UTypes' local name parts would match
the <code>fragment</code> syntax, and more specifically that subset of
it matching <code>[0-9a-zA-Z_/.-]+</code>.</p>
<blockquote class='todo'>
<p>@@TODO: what characters should be allowed in the <em>local
name</em>?  The above is a rather conservative set.  XML allows the
local name to be <code>(Letter | "_") (NameChar-":")*</code>, but
<code>NameChar</code> includes large chunks of Unicode.  This could be
accomodated by requiring support for IRIs <span class='cite'
>std:rfc3987</span>, but the XML namespace document includes only
ambiguous support for that.  Is the VO ready for kanji in its UTypes?
Probably not.</p>

<p>Even without worrying about IRIs, we shouldn't rely on the fact
that XML has Unicode sorted out.  Other formats, and other software,
will have to read UTypes, and so encoding issues rear their heads.  In
particular, we mustn't require any encoding which uses more than one byte
per character, since that would generate various transcoding
challenges, to put it mildly, when handling FITS files.</p>

<p>We could restrict ourselves to the characters of 7-bit ASCII, but
it would probably be painless to use ISO-8859-1 in fact.  The
defined 0-127 characters in that set exactly match the printable 7-bit
ASCII characters, and ISO-8859-1 as a whole matches Unicode
code points 0-255.  Thus, although this does not correspond to any
Unicode encoding, there is a broad <em>compatibility</em> with Unicode
in this case.</p>

<p>It would be wise to exclude '.' from the set of UType characters,
as this character plays a syntactic role in Notation3, so that it
would be mildly inconvenient to describe UTypes including a dot.  Are
there more similar restrictions?</p>
</blockquote>

<p>In this example and below, we illustrate
UTypes using the URI fragment identifier <code>#</code>: this is
regarded as best practice in the RDF community and would generally be
more convenient in the procedure we illustrate, but there is no
technical reason why a set of distinct, fragmentless, URIs could not
be used instead.  One advantage of using the fragment identifier is
that in this case it is natural to have the namespace URI refer to
an overview document describing the namespace as a whole.</p>

<p>UTypes used in non-XML contexts -- such as FITS files -- would have
to use either the third explicit mechanism or some separate namespacing
mechanism, not specified here, though briefly discussed in appendix
<span class='xref' >fits</span>.</p>

<p>This mechanism makes it possible to mint URI UTypes through a wide
variety of processes, from very formal and widely shared ones, managed
by an elaborate standards process and probably in a
<code>www.ivoa.net</code> namespace; through semi-formal ones specific
to, and managed by, particular interest groups, perhaps on the way to
full standardisation; to very precise ones, perhaps specific to a
single instrument.  Applications would choose which UTypes it was most
useful to them to support: presumably most generic VO applications
would support most <code>www.ivoa.net</code> UTypes, and X-ray
applications, for example, might support many X-ray-specific UTypes.
Perhaps a few applications will support instrument-specific UTypes
directly -- perhaps because they fill a gap in a community-supported
vocabulary -- but most such UTypes would likely be handled via the
reasoning mechanisms described below.</p>

</div>

<div class='section' id='utype-docs'>
<p class='title'>Documentation</p>

<p>Once UTypes have been defined as URIs, then they immediately
provide a source of documentation, if the namespace URI is made
dereferenceable.</p>

<p>For example, to define a UType
<code>http://example.org/utypes/1.0#sharpBounds</code> (presuming that we own
the <code>example.org</code> domain), we would create a web page at
the URL <code>http://example.org/utypes/1.0</code> (see section <span
class='xref' >web-recipes</span> for hints on making Apache return
HTML for such URLs which don't end in <code>.html</code>), within
which we have a link target with the same name, which leads to a
human-readable description of the UType's semantics.</p>
<pre>
&lt;h2&gt;&lt;a name='sharpBounds'&gt;Accurate bounds&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In our data, &lt;code&gt;#sharpBounds&lt;/code&gt; are the
bounds on a bandpass where the transmission goes from 0% to 100%
within 10nm.  This is distinguished from
&lt;code&gt;#fuzzyBounds&lt;/code&gt; data, where...
</pre>

<p>The description here can go into as much or as little detail as is
appropriate for the formality and intricacy of the document.  Thus the URI
UType will, when entered into a browser, show the documentation for
precisely that concept.</p>

<p>Obviously, any entity minting UTypes is making an institutional
commitment to the long-term stability of the namespace URI.  An entity
unable or unwilling to make such a commitment should avoid
creating externally visible UTypes.</p>

</div>

<div class='section' id='utype-rdf'>
<p class='title'>Shared semantics</p>

<p>While the UType documentation described in section <span
class='xref' >utype-docs</span> is useful for humans, it is of course
unintelligible to the applications that must interpret the data source
annotated with the UType.</p>

<p>To continue our example, we might wish to share data using our new
<code>#sharpBounds</code> concept.  Doing so means that any application which
is written to understand our more precise concept can make good use of the
more precise meaning, but we want to make it possible for applications
which do <em>not</em> know about this concept to make use of the data
also.</p>

<div class='section' id='share-rdf'>
<p class='title'>Describing subclass relationships</p>

<p>We suggest a minimal profile of the W3C
best-practice document <span class='cite'>w3c:swbp</span> which
describes how best to share standard RDF <span class='cite'
>std:rdf</span> and RDFS <span class='cite' >std:rdfs</span>
vocabularies.</p>

<p>We wish to assert that our new <code>#sharpBounds</code> UType is a
more specific version of a concept
<code>#coverage-bounds</code>,
which we presume has already defined by the IVOA in the namespace
<code>http://www.ivoa.net/ut/characterization#</code>, and which we
can reasonably 
expect software to know about.  We can do this using RDFS (here
written in Notation3 syntax <span class='cite' >std:n3</span>):</p>
<pre>
@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;.
@prefix myns: &lt;http://example.org/utypes/1.0#&gt;.
@prefix ivoa: &lt;http://www.ivoa.net/ut/characterization#&gt;.

myns:sharpBounds a rdfs:Class; 
    rdfs:subClassOf 
        ivoa:coverage-bounds .
</pre>
<p>This asserts that
<code>http://example.org/utypes/1.0#sharpBounds</code> is a concept --
a Class in RDFS terms -- and that it is a more specific concept than
the Characterisation model's bounds concept.</p>

<p>We propose that the file containing this machine-readable
documentation of our UTypes be available at the namespace URI, and
returned when the URI is dereferenced using an HTTP Accept header of
<code>text/rdf+n3</code>.  All non-trivial HTTP APIs have support for
manipulating request headers in this fashion, and if all else fails,
the command-line <code>curl</code> application can do the
retrieval:</p>
<pre>
% <span class='userinput'>curl --header accept:text/rdf+n3 http://example.org/utypes/1.0</span>
</pre>
<p>Recipes for setting up a web server to support such content
negotiation are in section <span class='xref' >web-recipes</span>.</p>

</div>

<div class='section'>
<p class='title'>Reasoning about UTypes</p>

<p>There are multiple systems (for example <span class='cite'
>app:jena</span> and <span class='cite' >app:pellet</span>), in
multiple languages, which can ingest such specifications and help an
application make the necessary deduction.  While an application could
incorporate such functionality, it is straightforward to wrap such a
reasoning system in a web-based service, and a system such as this has
been prototyped.</p>

<p>Using such a resolver, an application which comes across the
previously-unknown UType
<code>http://example.org/utypes/1.0#sharpBounds</code> can resolve it
in a single URL dereference (shown using <code>curl</code> here):</p>
<pre>
% <span class='userinput'>curl http://localhost/superclasses?http://example.org/utypes/1.0%23sharpBounds</span>
http://www.ivoa.net/ut/characterization#coverage-bounds
</pre>
<p>This returns the list of superclasses of the
<code>#sharpBounds</code> concept (in this case it has only one superclass),
and so the application can simply work
through this list until it finds a UType it recognises, and then
proceed exactly as if that UType had been the one found in the input data
stream, instead of the previously unknown <code>#sharpBounds</code>
Utype.  By making the <code>subClassOf</code> assertion above we have
stated that this is a reasonable thing for an application to do.</p>

<p>The resolver does not need to be pre-loaded with a set of known
UTypes.  In fact, the reasoner can start off knowing about no UTypes
at all, since when it is asked to resolve a hitherto unknown UType
such as this one, it can simply dereference the URI as described in
section <span class='xref' >share-rdf</span>, and add the retrieved
relationships to its knowledgebase, ready to respond to this and any
future queries.  Since UType definitions will be stable, they can be
aggressively cached (the assertions will be permanent in principle, but
might include bugfixes and updates in practice).  Thus this proposal
requires no infrastructure beyond the dereferenceable URIs described
above, and the commitment of the authors of those UTypes to maintain
the URIs into the future.</p>

<p>The author has successfully implemented a resolver which behaves in
this way.</p>

</div>

</div>

<div class='appendices'>

<div class='section' id='fits'>
<p class='title'>UTypes and FITS</p>

<p>The description above is expressed in terms of XML, through its
reference to XML namespaces and its use of VOTable examples, but it is
not specific to XML.  To demonstrate this, and illustrate the
potential use of these UTypes in other systems, we present here an
example of how one might include UTypes in FITS files.</p>

<p>In <a href='http://www.ivoa.net/forum/dm/0610/1257.htm' >a message
to the IVOA data-modelling group</a>, Jonathan McDowell proposed FITS
keywords for UCDs and UTypes, namely <code>TUCDnnnn</code> and
<code>TUTYPnnn</code>, each providing a UCD and UType for the data in
the <code>nnn</code>th column.</p>

<p>This is already enough to reliably associate UTypes with columns,
but it has the disadvantage that the UTypes in question would probably
quickly run into the 72-character limit on FITS card values.</p>

<p>We could expand Jonathan's proposal by requiring the
<code>TUTYPnnn</code> to include a namespace prefix, exactly as the
<code>utype</code> VOTable attribute has, and adding a further header
card to define the namespace prefix.  This could be done with a header
card <code>TUTNSnnn</code>, as follows:</p>
<pre>
TUTNS001=pfx:http://www.ivoa.net/ut/#
TUTYP010=pfx:axis
</pre>
<p>where the numbers <code>nnn</code> in <code>TUTYPnnn</code> refer
to the annotated column, and <code>nnn</code> in <code>TUTNSnnn</code>
distinguishes the namespace header cards from each other.
Alternatively, namespaces could be defined with a card
<code>TUTNSaaa</code> where the <code>aaa</code> letters define the
necessarily short namespace prefix, as in</p>
<pre>
TUTNSpfx=http://www.ivoa.net/ut/#
TUTYP010=pfx:axis
</pre>

<p>This would have the side-effect of requiring that UTypes (or
rather, the part of them following the namespace URI) have a maximum
length of 68 characters (72 characters of a FITS card value, minus the
three <code>aaa</code> characters and the colon).  While this is
unlikely to be a great imposition, it is worth noting that some of the
proposed Characterisation UTypes <span class='cite'
>std:characterisation</span> are already tens of characters long.</p>

<blockquote class='todo'>
@@TODO is there more to say, here?
</blockquote>

</div>

<div class='section' id='web-recipes'>
<p class='title'>Apache recipes</p>

<p>In sections <span class='xref' >utype-docs</span> and <span
class='xref' >utype-rdf</span> above we describe dereferencing a URL
and retrieving either HTML or RDF depending on the content-negotiation
phase of the HTTP transaction -- that is, depending on the content of
the HTTP <code>Accept</code> header.  In this appendix we describe a
simple recipe for configuring Apache to support this; there will be
similar configurations for other web servers.  We describe
only a single configuration here; fuller examples are available in the
W3C best-practice document <span class='cite' >w3c:swbp</span>, and
other examples are in the Apache content-negotiation documentation
<span class='cite'>apache:content</span>.</p>

<p>A namespace such as <code>http://www.ivoa.net/ut/myns-1-0#</code> would
(typically) correspond to a directory <code>.../ut</code> on the web
server.  Let us suppose that we have, in this server directory, HTML
documentation in a file <code>myns-1-0.html</code> and RDF in the
Notation3 syntax in a file <code>myns-1-0.n3</code>.  For
completeness, we might as well have the same information in (the
largely unreadable) RDF/XML <span class='cite' >std:rdfxml</span>
syntax as well, in a file <code>myns-1-0.rdf</code>.  We suppose that
there can be other namespace definitions in this directory as well.</p>

<div class='section'>
<p class='title'>Using URL rewriting</p>

<p>We presume that this configuration is being done in a per-directory
<code>.htaccess</code> file, and that the server has been configured
to allow this, by allowing the <code>FileInfo Options</code>
overrides.  The following <code>.htaccess</code> file will
have the desired effect:</p>
<pre>
AddType application/rdf+xml .rdf
# The MIME type for .n3 should be text/rdf+n3, not application/n3:
# see MIME notes at http://www.w3.org/2000/10/swap/doc/changes.html
AddType text/rdf+n3 .n3
AddCharset UTF-8 .n3

RewriteEngine on
# RewriteBase is the path to the current directory
RewriteBase /ut

# Use response code 303, 'See Other'.
RewriteCond %{HTTP_ACCEPT} application/rdf\+xml
RewriteRule ^([^.]*)$ $1.rdf [R=303]

RewriteCond %{HTTP_ACCEPT} text/rdf\+n3
RewriteRule ^([^.]*)$ $1.n3 [R=303]

# Default -- typically text/html
RewriteRule ^([^.]*)$ $1.html
</pre>
<p>With this configuration we can dereference the namespace URL in two
different ways, to retrieve two different results:</p>
<pre>
% <span class='userinput'>curl http://www.ivoa.net/ut/myns-1-0</span>
&lt;html&gt;
&lt;head&gt;
[...]
% <span class='userinput'>curl -i --header accept:text/rdf+n3 http://www.ivoa.net/ut/myns-1-0</span>
HTTP/1.0 303 See Other
Date: Thu, 30 Nov 2006 16:19:51 GMT
Server: Apache/1.3.33
Location: http://www.ivoa.net/ut/myns-1-0.n3
Content-Type: text/html; charset=iso-8859-1

[...]
% <span class='userinput'>curl -L --header accept:text/rdf+n3 http://www.ivoa.net/ut/myns-1-0</span>
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
[...]
%
</pre>
<p>(the HTTP 303 `see also' response is the appropriate RFC2616 <span
class='cite' >std:rfc2616</span> response indicating that <q>[t]he response
to the request can be found under a different URI and SHOULD be
retrieved using a GET method on that resource</q>, and the
<code>-L</code> option tells <code>curl</code> to follow any
<code>Location</code> headers in the initial response).</p>
</div>

<div class='section'>
<p class='title'>Using typemap files</p>

<p>An alternative technique uses the Apache <code>type-map</code>
feature, and the Apache <code>MultiViews</code> option.  In this case,
one creates a <code>.htaccess</code> file resembling:</p>
<pre>
AddType text/rdf+n3 .n3
AddHandler type-map .var
Options MultiViews
</pre>
<p>and a <code>myns-1-0.var</code> file containing:</p>
<pre>
URI: myns-1-0

URI: myns-1-0.html
Content-type: text/html; qs=1.0

URI: myns-1-0.n3
Content-type: text/rdf+n3; qs=0.9
</pre>
<p>In this case, the server simply responds with the content matching
the requested content-type, rather than returning a redirection.</p>

</div>
</div>

<div class='section' id='rationale'>
<p class='title'>Rationale</p>

<p><em>We include in this appendix a more discursive introduction to
the problem this proposal is attempting to solve, and the larger
social structure we expect to arise from it.</em></p>

<p>Standardisation is expensive, in both time and effort.</p>

<p>A standard must be as small as possible, so that it is more easily
agreed on, and so that its documentation is not overwhelming; and it
must at the same time be as large as possible, so that it covers
enough of what its users want to exchange, to justify the effort
of agreeing.  The pressure for expanding the standard arises because,
while standardisation is expensive, going beyond the standard incurs
crippling costs as a result of the consequent loss of
interoperability.  Thus standardisation is not an end in itself, but
merely a means to reach the real goal of universal
interoperability.</p>

<p>The costs of standardisation arise because the participants in the
standardisation process will have different designs in mind, and bring
different implementations to the discussion.  Sometimes these
differences are merely accidents of history and taste, but sometimes
they arise because the participants have different and incompatible
requirements, so that the resulting standard ends up substantially
more complicated than the designs that preceded it, still without
completely satisfying anybody.  Our particular concern here is the
data models which structure shared data, which are variously designed
for the convenience of the various data providers, but which a wide
variety of data reduction applications nonetheless hope to read.</p>

<p>In this Note, we propose a structure which allows the different
participants to retain their data models, and achieve
interoperability, not by transforming their data into some never quite
satisfactory consensus model, but by `explaining' their data model in
terms applications can understand.  Data providers can `explain' their
model by analogy, saying that a concept in their data model is the
same as, or a more specific variant of, a concept in another data
model; if the latter concept is one which an application understands,
then it knows how to handle the underlying data.</p>

<p>We would therefore expect to see a hierarchy of sets of UTypes.</p>
<ul>
<li>At one extreme, it would be practical for data providers to
provide extremely specific UTypes, to support those users who must
deal with, for example, the nitty-gritty of a specific instrument.
Such information would either be ignored by more generic data users,
or be used by them as an instance of a more general, and more
generally known, concept.  A specialist user might care which particular
filter was used in an observation, where a more general user would only
need to know that it was J-band.</li>
<li>Users in a specific community, defined by wavelength (X-Ray or
radio) or object (solar physicists), have sets of interoperable
concepts which are important to them, but which would bloat an
astronomy-wide standard.  Radio astronomers use `janskys per beam' and
`beam width in RA', in the face of general incomprehension; and though
X-Ray astronomers are happy to talk about `barycentric coordinate
time', (most) other astronomers are extremely happy not to.</li>
<li>At the top of this stack is the set of concepts which is used and
understood by almost all of astronomy, and thus the set of UTypes used
and understood by almost all astronomical applications.  This is the
level which would see the most careful standardisation of a relatively
small set of UTypes.</li>
</ul>

<p>We would therefore expect to see a large number of UTypes, which
are of equal status in principle, but not in practice.  It is in data
providers' interests to make their data as widely intelligible as
possible, by either using well-known UTypes or, where that is
insufficiently precise, by `explaining' more specific ones in those
terms.  This creates an instability which produces a consensus on
which UTypes are recognised as `well-known'.  Of course, this process
could be primed with an initial set of high level IVOA standard
UTypes.</p>

<p>With this proposal, this last highest-level set of UTypes can be
smaller than it might otherwise be, because it is no longer a costly disaster
to omit things.  If in retrospect it appears that a high-level
standard omitted important concepts, then those can be developed in an
agile fashion and stitched into the larger structure.</p>

<p>This agility emerges because this proposal facilitates not only
different levels of specification, but also versioning and
deprecation.  The costs of versioning arise because it is expensive
for applications to be reworked to use an updated version of a
standard.  If the new version's concepts are described in terms of the
older version's, however, then it becomes reasonable for data
providers to use the new improved version of a UType set, knowing that
applications can deduce the relationship with the previous version
they have coded-in knowledge of.</p>

<p>As well as versioning, reducing the community's reliance on a small
set of gold-plated standards makes it possible for components of, or
extensions to, standards to be designed, prototyped and maintained by
specific interest groups, working independently.</p>

</div>

<div class='section-nonum' id='bibliography'>
<p class='title'>Bibliography</p>
<?bibliography?>
</div>

<p style="text-align: right; font-size: x-small; color: #888;">
$Revision: 1.11 $ $Date: 2007/03/26 10:16:22 $
</p>

</div>

</body>
</html>
