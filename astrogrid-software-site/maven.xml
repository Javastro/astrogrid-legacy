<?xml version="1.0" encoding="UTF-8"?>
<!--+
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid-software-site/Attic/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: clq2 $</cvs:author>
    | <cvs:date>$Date: 2006/06/13 13:53:58 $</cvs:date>
    | <cvs:version>$Revision: 1.9 $</cvs:version>
    | <cvs:log>
    |   $Log: maven.xml,v $
    |   Revision 1.9  2006/06/13 13:53:58  clq2
    |   for updating corrected schemata
    |
    |   Revision 1.8.12.1  2006/04/05 11:59:48  gtr
    |   Enhanced to make absolute the schemaLocation and location attributes in the published schemata.
    |
    |   Revision 1.8  2005/08/19 14:39:28  dave
    |   Fixed dependency on main project maven-base.
    |   Added some comments.
    |
    | </cvs:log>
    |
    | Extension maven script
    |
    +-->
<project
    xmlns:deploy="deploy"
    xmlns:j="jelly:core"
    default="astrogrid-rebuild-site"
    >

    <!--+
        | Default goal, clean and build the site.
        +-->
    <goal name="astrogrid-rebuild-site">
        <attainGoal name="clean" />
        <attainGoal name="astrogrid-build-site"/>
    </goal>

        <!-- astrogrid goals for nightly build -->
        <goal name="astrogrid-clean" prereqs="clean"/>
        <goal name="astrogrid-deploy-site" prereqs="astrogrid-build-site">
                <attainGoal name="site:sshdeploy"/>
        </goal>
        <goal name="astrogrid-build-site">
                <attainGoal name="pdf" />
                <attainGoal name="site"/>
        </goal>
        <goal name="astrogrid-deploy-snapshot">
                <echo message="nothing to do"/>
        </goal>
        <goal name="astrogrid-build-snapshot">
                <echo message="nothing to do"/>
        </goal>
        <goal name="astrogrid-install-snapshot">
                <echo message="nothing to do"/>
        </goal>
        <goal name="astrogrid-deploy-artifact">
                <echo message="nothing to do"/>
        </goal>
        <goal name="astrogrid-build-artifact">
                <echo message="nothing to do"/>
        </goal>
        <goal name="astrogrid-install-artifact">
                <echo message="nothing to do"/>
        </goal>
        <!--
          This pregoal takes any simple html docs in the xdocs folder and turns them into xdoc xml,
          before they are turned back into maven-style html docs.  Why?  html is easier to write in
          a WYSIWIG editor than xdoc xml
           - for some maybe. I'd prefer to use xdoc, and leave html as is.
     -->
        <preGoal name="xdoc:jelly-transform">
      <attainGoal name="html2xdoc"/>
      <attainGoal name="faq"/>
        </preGoal>

        <!-- copy war files into jnlp folder, and unpackage each of them

        todo - move this out of release project, and into aggregate project.

        -->

        <postGoal name="xdoc:copy-user-resources">
                                <deploy:copy-deps todir="${maven.docs.dest}/jnlp" />
                                <!-- for each file, need to create subdir, and then unwar into that subdir - why is nothing ever easy? -->
                                        <fileScanner var="wars">
                                    <fileset dir="${maven.docs.dest}/jnlp">
                                    <include name="*.war" />
                                    </fileset>
                                        </fileScanner><!-- (-[^-]*\d[^-]*-)|(.war) -->
                                        <j:forEach var="war" items="${wars.iterator()}">        <!-- ${war} will contain a java.io.File -->
                                                <j:set var="warPrefix" value='${war.getName().replaceAll("(-[^-]*\d[^-]*)|(\.war)","")}' /><!-- take the version number off the warfile name - assumes each part of a version num will have at least one digit.-->
                                                <mkdir dir="${maven.docs.dest}/jnlp/${warPrefix}" />
                                                <unwar src="${war}" dest="${maven.docs.dest}/jnlp/${warPrefix}" />
                                        </j:forEach>
                                        <!-- clean up -->
                                        <delete>
                                                <fileset dir="${maven.docs.dest}/jnlp">
                                                        <include name="*.war" />
                                                </fileset>
                                        </delete>
        </postGoal>

        <!-- When the site has been built, add to it XML schemata which we need to publish at fixed URLs. -->
        <postGoal name="site">
          <attainGoal name="unpack-schema"/>
        	<attainGoal name="make-schemaLocation-absolute"/>
        </postGoal>

        <!-- Extract the XML schemata from jars specified in the POM and add them to the web site. -->
        <goal name="unpack-schema">
                <j:forEach var="item" items="${pom.artifacts}">
                        <j:if test="${item.dependency.getProperty('jar-with-schema')=='true'}">
                                <unjar src="${item.path}" dest="${maven.docs.dest}">
                                        <patternset>
                                                <include name="schema"/>
                                                <include name="schema/*"/>
                                                <include name="schema/**/*"/>
                                        </patternset>
                                </unjar>
                        </j:if>
                </j:forEach>
        </goal>
	
	<!-- Go through the tree of schemata changing all the relative
		hyperlinks (import elements etc.) to be absolute and pointing
		into the site being built. -->
	<goal name="make-schemaLocation-absolute">
		${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
		<xslt style="${basedir}/absolute-location.xsl" basedir="${maven.docs.dest}/schema" 
			  includes="**/*.xsd" extension=".xsd" destdir="${maven.docs.dest}/absolute-schema">
		</xslt>
		<xslt style="${basedir}/absolute-location.xsl" basedir="${maven.docs.dest}/schema" 
			includes="**/*.wsdl" extension=".wsdl" destdir="${maven.docs.dest}/absolute-schema">
		</xslt>
		<move todir="${maven.docs.dest}/schema" overwrite="true">
			<fileset dir="${maven.docs.dest}/absolute-schema"/>
		</move>
	</goal>

</project>
