<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: CEABase.xsd,v 1.2 2006/09/26 15:34:24 clq2 Exp $ -->
<!-- This is refactored from the AGParameterDefinition.xsd -->
<!-- edited with XMLSPY v2004 rel. 3 U (http://www.xmlspy.com) by Paul Harrison (Jodrell Bank Observatory) -->
<xs:schema targetNamespace="http://www.ivoa.net/xml/CEA/base/v1.0" 
   xmlns:ceab="http://www.ivoa.net/xml/CEA/base/v1.0" 
   xmlns:xs="http://www.w3.org/2001/XMLSchema" 
   xmlns:vr="http://www.ivoa.net/xml/VOResource/v1.0" 
   elementFormDefault="unqualified" 
   attributeFormDefault="unqualified"
   version="1.0 $Revision: 1.2 $" xmlns:vs="http://www.ivoa.net/xml/VODataService/v1.0">
    <xs:import namespace="http://www.ivoa.net/xml/VOResource/v1.0"
              schemaLocation="../../../vo-resource-types/VOResource/v1.0/VOResource.xsd"/>
   <xs:import namespace="http://www.ivoa.net/xml/VODataService/v1.0"
              schemaLocation="../../../vo-resource-types/VODataService/v1.0/VODataService.xsd"/>
	<xs:annotation>
		<xs:documentation>this file captures some of the ideas used in the WSDL-like parameter definition files, but as yet is not used for validation</xs:documentation>
	</xs:annotation>
	<xs:annotation>
		<xs:documentation>the baseparameter definition is mimiced by the contents of a part element in the wsdl</xs:documentation>
	</xs:annotation>
	<xs:annotation>
		<xs:documentation>important types are defined here that would have special significance....</xs:documentation>
	</xs:annotation>
	<xs:complexType name="ApplicationBase" abstract="false" mixed="false">
		<xs:annotation>
			<xs:documentation>Base Application Description</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ApplicationType" type="ceab:ApplicationKindType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The CEA type of the application - this allows the system to determine which CEC it should be talking to.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Parameters" type="ceab:ParametersComplexType">
				<xs:annotation>
				   <xs:documentation>The complete list of parameters that might occur in any of the apllication interfaceseditor note - it would perhaps be nice to be able to define extension here of existing application - make it easier for people defining extensions of standard services.... via an attribute - extends=&quot;ssss&quot;</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Interfaces" type="ceab:InterfacesType">
				<xs:annotation>
					<xs:documentation>The list of interfaces that an application might have</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
      <!-- need to remove this for true base type... 
		<xs:attribute name="name" type="vr:IdentifierURI" use="required">
			<xs:annotation>
				<xs:documentation>This is the ivo identifier for the application</xs:documentation>	</xs:annotation>
		</xs:attribute>
      -->
	</xs:complexType>
	<xs:complexType name="InterfaceDefinition" mixed="false">
		<xs:annotation>
			<xs:documentation>description of an interface</xs:documentation>
		</xs:annotation>
		<xs:sequence>
		   <xs:element name="constants" maxOccurs="1" minOccurs="0" type="ceab:InterfaceConstants">
		      <xs:annotation>
		         <xs:documentation>parameters that are always passed to the application - these are not presented to the user, but the server side of the CEA will pick them up and send to the application.
*EDitor note* perhaps this should be only an implementation detal. However, the http CEC could take advantage if it is in the registry.		         </xs:documentation>
		      </xs:annotation>
		   </xs:element>
		   <xs:element name="input" type="ceab:parameterReferenceSpecification">
		      <xs:annotation>
		         <xs:documentation>
		            The list of input paramters for an interface
		         </xs:documentation>
		      </xs:annotation>
		   </xs:element>
		   <xs:element name="output" type="ceab:parameterReferenceSpecification">
		      <xs:annotation>
		         <xs:documentation>
		            The list of output parameters for an interface
		         </xs:documentation>
		      </xs:annotation>
		   </xs:element>
		   <xs:element name="description" type="xs:string"
		      minOccurs="0">
		      <xs:annotation>
		         <xs:documentation>
		            A desciption of the interface suitable for
		            presentation in a UI
		         </xs:documentation>
		      </xs:annotation>
		   </xs:element>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="InterfacesType">
		<xs:sequence>
			<xs:element name="Interface" type="ceab:InterfaceDefinition" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>A particular application interface</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="parameterRef" mixed="false">
   
		<xs:annotation>
			<xs:documentation>reference to an application parameter. Used in the interface definitions.</xs:documentation>
		</xs:annotation>
      <xs:complexContent><xs:extension base="ceab:singleParameterRef">
	<xs:attributeGroup ref="ceab:cardinality"/>
   
</xs:extension>
      </xs:complexContent>
	</xs:complexType>
   <xs:attributeGroup name="cardinality"><xs:annotation><xs:documentation>attributes for specifiying how often a parameter or parameter group should occur</xs:documentation></xs:annotation>
      <xs:attribute name="minoccurs" type="xs:int" use="optional" default="1"/>
      <xs:attribute name="maxoccurs" type="xs:int" use="optional" default="1">
         <xs:annotation>
            <xs:documentation>a value of 0 implies unbounded</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   
   </xs:attributeGroup>
   <xs:complexType name="singleParameterRef" mixed="false">
      <xs:annotation>
         <xs:documentation>reference to an application parameter that is not repeatable or optional. Used in the interface definitions.allow mixed to put the possibility of value? or make this explicit...</xs:documentation>
      </xs:annotation>
      <xs:attributeGroup ref="ceab:parameterReferenceGroup"></xs:attributeGroup>
    </xs:complexType>
	<xs:element name="ParameterDefinition" type="ceab:BaseParameterDefinition" abstract="false">
		<xs:annotation>
			<xs:documentation>A generalised parameter definition - 
         editor note - this is a substitution point- it - is used in the implementation schema for CEA. Has to be non-abstract at the moment because it is also directly used in the registry entry schema VOCEA.xsd</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:simpleType name="ApplicationKindType">
		<xs:annotation>
			<xs:documentation>The type of the underlying application - commandline, http-get etc</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="cmdline">
				<xs:annotation>
					<xs:documentation>application is commandline, wrapped by a CEC</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="http">
				<xs:annotation>
					<xs:documentation>application is a http POST/GET</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="javaclass">
				<xs:annotation>
					<xs:documentation>application is implemented "internally" in the CEA</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="webservice">
				<xs:annotation>
					<xs:documentation>application is an external web service - will be dealt with by a proxy.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="ApplicationList">
		<xs:annotation>
			<xs:documentation>A list of applications</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="ApplicationDefn" type="ceab:ApplicationBase" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>This is a generic application definition that does not take in all of the specializations for web/commandline etc</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		
		Stuff to do with HttpApplications
      
      some of this is probably implementation dependent - even though the registry was used to configure the HTTP CEC - needs review.
		
		-->
	<xs:complexType name="ProxyApplicationSetup">
		<xs:annotation>
			<xs:documentation>Extra description necessary for describing the case where CEA acts as proxy to underlying service</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:choice>
				<xs:element name="URL" type="ceab:HttpURLType">
					<xs:annotation>
						<xs:documentation>A direct referrence to a url of the underlying service</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ResourceReferenceQuery" type="xs:string">
					<xs:annotation>
						<xs:documentation>A query using the registry query language to reference one or more registered resources that provide the underlying http GET/POST service.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="WebHttpApplicationSetup">
		<xs:annotation>
			<xs:documentation>Description of an HTTP Application</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ceab:ProxyApplicationSetup">
				<xs:sequence>
					<xs:element name="PreProcessScript" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This script can be used to map the input parameters to the parameters of the underlying service. This should not usually be necessary as the application defintion will usually be a one-to-one mapping.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:extension base="ceab:script"/>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="PostProcessScript" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This script can be used to post process the result returned by the http application. e.g. to perform a 'screen-scrape' </xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:extension base="ceab:script"/>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--The calling document describing the call to the web service-->
	<xs:complexType name="WebHttpCall">
		<xs:annotation>
			<xs:documentation>Description of an HTTP get or post service</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="URL" type="ceab:HttpURLType"/>
			<xs:element name="SimpleParameter" minOccurs="0" maxOccurs="unbounded" type="ceab:SimpleParameterComplexType">
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="HttpURLType">
		<xs:annotation>
			<xs:documentation>The URL for an http get or post service</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="method" type="ceab:HttpMethodType" default="get">
					<xs:annotation>
						<xs:documentation>the http method to be used to send parameters to the service.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="HttpMethodType">
		<xs:annotation>
			<xs:documentation>http method type: get or post</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="get"/>
			<xs:enumeration value="post"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="script">
		<xs:annotation>
			<xs:documentation>a snippet of code to massage the inputs and outputs</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="lang" type="ceab:scriptingLanguage" use="optional" default="xslt"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="scriptingLanguage">
		<xs:annotation>
			<xs:documentation>Scripting language</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="xslt"/>
			<xs:enumeration value="javascript"/>
			<xs:enumeration value="groovy"/>
		</xs:restriction>
	</xs:simpleType>
	<!--definitions for web service proxy - experimental-->
	<xs:complexType name="WebServiceApplicationSetup">
		<xs:annotation>
			<xs:documentation>Description of WebService</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ceab:ProxyApplicationSetup">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="parameterReferenceSpecification">
        <xs:annotation>
           <xs:documentation>some form of reference to a parameter that would appear in an interface definition. This can either be a direct reference, a reference to a repeating group of parameters or a reference to a conditional group of parameters.</xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
               <xs:documentation>editor note - not too sure what the best multiplicities are here</xs:documentation>
            </xs:annotation>
            <xs:choice>
                <xs:annotation>
                   <xs:documentation>editor note - not too sure what the best multiplicities are here</xs:documentation>
                </xs:annotation>
                <xs:element minOccurs="1" maxOccurs="unbounded" name="pref"
	            type="ceab:parameterRef">
	            <xs:annotation>
	               <xs:documentation>a reference to a parameter which has been defined in the Parameters section of the application description. This reference defines how many times the parameter can occur in the particular interface.The content of the element can define an interface dependent default for the parameter?</xs:documentation>
	            </xs:annotation>
                </xs:element>
	         <xs:element minOccurs="1" maxOccurs="unbounded"
	            name="pgroup" type="ceab:PGroup">
	         </xs:element>
	         <xs:element name="cgroupHead" type="ceab:conditionalPgroup" maxOccurs="unbounded" minOccurs="1">
	            <xs:annotation>
	               <xs:documentation>
	                  this represents a point in the parameter tree
	                  where there could be a series of different
	                  &quot;chains&quot; or sequences of parameters
	                  based on the value of the parameter referred to by
	                  this top level.

	                  Issue - should this allow nestable pchains? or is the whole construct just too difficult to ever be used in reality....
	               </xs:documentation>
	            </xs:annotation>
	         </xs:element>
	      </xs:choice>
	   </xs:sequence>
	</xs:complexType>
   <xs:simpleType name="refToParameter">
        <xs:annotation>
           <xs:documentation>this type is used to make a reference to a parameter - it uses a standard string type rather than an idref because the integrity of the references is checked usingxs:unique constraints within CEAImplementation.xsd (not part of the IVOA standard)IMPL: would be nice to have elements in the VOCEA.xsd to be able to use constraints in the standard schema...</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"></xs:restriction>
   </xs:simpleType>

	<xs:complexType name="conditionalPgroupOption">
	   <xs:annotation>
	      <xs:documentation>this is the chain for a particular value of a head parameter issue: should the chain allow further chains - or is this too difficult?</xs:documentation>
	   </xs:annotation>
	   <xs:sequence>
	      <xs:element name="value" type="xs:string"></xs:element>
	      <xs:element name="pref" type="ceab:singleParameterRef"
	         maxOccurs="unbounded" minOccurs="1">
	      </xs:element>
	   </xs:sequence>
	</xs:complexType>
	<xs:complexType name="conditionalPgroup">
	   <xs:sequence minOccurs="1" maxOccurs="1">
	      <xs:element name="cgroup" type="ceab:conditionalPgroupOption" maxOccurs="unbounded" minOccurs="1"></xs:element>
	   </xs:sequence>
	   <xs:attributeGroup ref="ceab:parameterReferenceGroup"></xs:attributeGroup>
	</xs:complexType>
	<xs:attributeGroup name="parameterReferenceGroup">
	   <xs:annotation>
	      <xs:documentation>
	         the parameters that make up a standard reference to a
	         parameter.
	      </xs:documentation>
	   </xs:annotation>
	   <xs:attribute name="ref" type="ceab:refToParameter">
	      <xs:annotation>
	         <xs:documentation>
	            reference to the parameter definition
	         </xs:documentation>
	      </xs:annotation>
	   </xs:attribute>
	   <xs:attribute name="hidden" type="xs:boolean" default="false">
	      <xs:annotation>
	         <xs:documentation>
	            a flag to allow a suggestion to the user interface that
	            this parameter should normally be hidden from user view
	         </xs:documentation>
	      </xs:annotation>
	   </xs:attribute>

	</xs:attributeGroup>

	<xs:complexType name="ParametersComplexType">
	   <xs:sequence>
	      <xs:element minOccurs="0" maxOccurs="unbounded"
	         ref="ceab:ParameterDefinition">
	      </xs:element>
	   </xs:sequence>
	</xs:complexType>
	<xs:complexType name="InterfaceConstants">
	   <xs:sequence>
	      <xs:element minOccurs="1" maxOccurs="unbounded" name="pval"
	         type="ceab:parameterValue">
	      </xs:element>
	   </xs:sequence>
	</xs:complexType>
	<xs:complexType name="PGroup">
	   <xs:sequence>
	      <xs:element minOccurs="2" maxOccurs="unbounded" name="pref"
	         type="ceab:singleParameterRef">
	         <xs:annotation></xs:annotation>
	      </xs:element>
	   </xs:sequence>
	   <xs:attributeGroup ref="ceab:cardinality"></xs:attributeGroup>
	</xs:complexType>
	<xs:complexType name="SimpleParameterComplexType">
        <xs:annotation>
           <xs:documentation>This really should be unified with the other parameter definitions.....</xs:documentation>
        </xs:annotation>
        <xs:attribute use="required" name="name" type="xs:string"></xs:attribute>
	   <xs:attribute use="required" name="value" type="xs:string"></xs:attribute>
	</xs:complexType>
   <!-- the following used to be in CEAParameterDefinition
    -->
      <!-- This is the standard type -->
   <xs:simpleType name="parameterTypes">
      <xs:annotation>
         <xs:documentation>The list of possible parameter types that are passed in CEA messages. Note that the formal schema type of the message is always a string - The types below are to indicate how that string should be interpreted. There is a mixture of classic atomic types as well as some aggregate types - this wide scope and slightly "fuzzy" definition of a parameter type is a deliberate design decision in CEA as it reflects the typical "objects" that are passed between astronomical applications</xs:documentation>
       <xs:documentation>As Data Models become established then references to these should also be made as top level aggregate types</xs:documentation>
         <xs:documentation>Note that some of the "bulkier" types - e.g. VOTable would normally be passed "by reference"</xs:documentation>
         <xs:documentation>Note that in a typical atomic parameter definition a UType would be specified so that a workflow builder might be able to automatically insert code to extract such a value from the bulk output of a previous step</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:NMTOKENS">
         <xs:enumeration value="integer">
            <xs:annotation>
               <xs:documentation>Integer</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="real">
            <xs:annotation>
               <xs:documentation>Real</xs:documentation>
               <xs:documentation>The string formats that can be recognised should be as defined by FORTRAN? Java? C? (all?)</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="complex">
            <xs:annotation>
               <xs:documentation>A complex number</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="text">
            <xs:annotation>
               <xs:documentation>Any string of characters</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="boolean">
            <xs:annotation>
               <xs:documentation>A representation of a boolean - e.g. true/false on/off</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="anyURI">
            <xs:annotation>
               <xs:documentation>Any Uniform Resource Indentifier</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="VOTable">
            <xs:annotation>
               <xs:documentation>A VOTable in its entirety </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="RA">
            <xs:annotation>
               <xs:documentation>A value that is to be interpreted as a Right Ascension</xs:documentation>
               <xs:documentation>This is obviously a convienience simplification of part of STC</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="Dec">
            <xs:annotation>
               <xs:documentation>A value that is to be interpreted as a Declination</xs:documentation>
               <xs:documentation>This is obviously a convienience simplification of part of STC</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
             <xs:enumeration value="MJD">
                <xs:annotation>
                   <xs:documentation>Modified Julian date</xs:documentation>
                </xs:annotation>
             </xs:enumeration>
             <xs:enumeration value="DateTime">
                <xs:annotation>
                   <xs:documentation>ISO Date representation</xs:documentation>
                </xs:annotation>
             </xs:enumeration>
         <xs:enumeration value="ADQL">
            <xs:annotation>
               <xs:documentation>the full XML version of the Astronomical Data Query Language</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="ADQL-S">
            <xs:annotation>
               <xs:documentation>The string representation of Astronomical Data Query Language</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="STC-S">
            <xs:annotation>
               <xs:documentation>A value that is specified using the Space Time Coordinate string definition</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="binary">
            <xs:annotation>
               <xs:documentation>A general piece of binary data with no special interpretation</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="FITS">
            <xs:annotation>
               <xs:documentation>Data encoded in the Flexible Image Transport System http://fits.gsfc.nasa.gov/iaufwg/iaufwg.html</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:complexType name="xhtmlDocumentation" mixed="false">
      <xs:annotation>
         <xs:documentation>should really reference the XHTML shema, but just did this for convienience</xs:documentation>
      </xs:annotation>
      <xs:simpleContent>
         <xs:extension base="xs:string"/>
      </xs:simpleContent>
   </xs:complexType>
   <xs:complexType name="tDocumentation" mixed="true">
      <xs:annotation>
         <xs:documentation>what documentation can be</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
   </xs:complexType>
   <xs:simpleType name="java-param">
      <xs:restriction base="xs:token">
         <xs:pattern value="[a-zA-Z][a-zA-Z0-9]*"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="java-class">
      <xs:restriction base="xs:token">
         <xs:pattern value="([a-zA-Z0-9]+\.)*[a-zA-Z][a-zA-Z0-9]*"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="java-package">
      <xs:restriction base="xs:token">
         <xs:pattern value="([a-zA-Z0-9]+\.)*[a-zA-Z0-9]*"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:complexType name="BaseParameterDefinition">
   <!-- for the new derivation from DataService baseParam
   attribute name -> id
   element UI_NAME - uses base name 
   element description - uses base description
           units - base unit
           UCD - base ucd
   -->
   
      <xs:annotation>
         <xs:documentation> The basic definition of what a parameter is - this is common to all of the CEA implementations.

editor note - still have to try to tie this up with the httpParameter from the DataService defintion.

editor note = 
</xs:documentation>
      </xs:annotation>
      <xs:complexContent>

         <!-- editor note - The UCD, UType, and MimeType are not all expected to be filled in for all parameters, but are there to give a workflow builder "hints" about the semantics of a particular parameter beyond the basic type attribute - 
            this is rather fuzzy at the moment and it there is probably some overlap between the scopes of the elements, and certainly there is nothing stopping the user entering inconsistent information-->
         <xs:extension base="vs:BaseParam">
            <xs:sequence>
               <!-- editor note - The UCD, UType, and MimeType are not all expected to be filled in for all parameters, but are there to give a workflow builder "hints" about the semantics of a particular parameter beyond the basic type attribute - 
                  this is rather fuzzy at the moment and it there is probably some overlap between the scopes of the elements, and certainly there is nothing stopping the user entering inconsistent information-->
                <xs:element name="UType" type="xs:string" maxOccurs="1"
                  minOccurs="0">
                  <xs:annotation>
                     <xs:documentation>
                        possibility to specify a UType
                     </xs:documentation>
                  </xs:annotation>
               </xs:element>
               <xs:element name="MimeType" type="xs:string"
                  maxOccurs="1" minOccurs="0">
                  <xs:annotation>
                     <xs:documentation>
                        possibility to specify a UType
                     </xs:documentation>
                  </xs:annotation>
               </xs:element>
               <xs:element name="DefaultValue" type="xs:string"
                  minOccurs="0" maxOccurs="unbounded">
                  <xs:annotation>
                     <xs:documentation>
                        a possible default for this type of parameter
                        this is repeateable in the case of array
                        parameters.
                     </xs:documentation>
                  </xs:annotation>
               </xs:element>
               <xs:choice maxOccurs="1" minOccurs="0">
                  <xs:annotation>
                     <xs:documentation>
                        various ways of specifying the legal values that
                        a parameter might have

                        editor note - does this construct produce nice
                        object models in code generators, or would it be
                        better to have an abstract base type here..
                     </xs:documentation>
                  </xs:annotation>
                  <xs:element name="OptionList" minOccurs="1"
                     maxOccurs="1" type="ceab:OptionList">
                     <xs:annotation>
                        <xs:documentation>
                           For parameters that can only have one of a
                           list of values
                        </xs:documentation>
                     </xs:annotation>
                  </xs:element>
                  <xs:element name="Range" maxOccurs="1" minOccurs="1"
                     type="ceab:Range">
                     <xs:annotation>
                        <xs:documentation>
                           captures the idea that a parameter can have a
                           range of values
                        </xs:documentation>
                     </xs:annotation>
                  </xs:element>
               </xs:choice>

            </xs:sequence>
                 <xs:attribute name="id" type="xs:string" use="required"/>
      <xs:attribute name="type" type="ceab:parameterTypes" use="required"/>
        <xs:attribute
         name="array" type="ceab:arrayDEF" default="1" use="optional">
         <xs:annotation><xs:documentation>this says whether the parameter an array.</xs:documentation></xs:annotation>
</xs:attribute>
            
         </xs:extension>
         
      </xs:complexContent>
    </xs:complexType>
   <!--The parameter value possibly needs to be more strongly typed than it is at the moment...or use the Quantity from the DM working group when available..-->
   <xs:complexType name="parameterValue" mixed="false">
      <xs:annotation>
         <xs:documentation>Defines what a parameter can contain when it is passed to be executed -This can be a single value element, or a simple construction of an array - could perhaps allow a VOQuantity as well.</xs:documentation>
      </xs:annotation>
      <xs:choice>
         <xs:element name="value" type="xs:string" />
         <xs:element name="array" type="ceab:ParameterValueArray">
                <xs:annotation>
                   <xs:documentation>very simple model of a array - cannot be sparsely filled, 
</xs:documentation>
                </xs:annotation>
         </xs:element>
      </xs:choice>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="encoding" type="ceab:binaryEncodings" use="optional">
         <xs:annotation>
            <xs:documentation>This is unused in implementations at the moment - give the opportunity to specify some form of encoding for parameter values .</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="indirect" type="xs:boolean" use="optional" default="false">
         <xs:annotation>
            <xs:documentation>This specifies whether the parameter value is indirect - i.e. if value of the parameter is some form of URI to the actual parameter value. If the value is indirect then the CEA implementation is expected to fetch the parameter before passing it on to the application.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:element name="tool">
      <xs:annotation>
         <xs:documentation>represents a call to a CEA application </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element name="input" minOccurs="0" type="ceab:ListOfParameterValues">
               <xs:annotation>
                  <xs:documentation>the list of parameters supplied as input</xs:documentation>
               </xs:annotation>
            </xs:element>
            <xs:element name="output" minOccurs="0"
               type="ceab:ListOfParameterValues">
               <xs:annotation>
                  <xs:documentation>
                     the list of parameters expected as output
                  </xs:documentation>
               </xs:annotation>
            </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
               <xs:documentation>ivoa resource identifier of the application to call</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="interface" type="xs:string" use="required">
            <xs:annotation>
               <xs:documentation>which interface of the application to call</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   
   <xs:simpleType  name="arrayDEF">
   <xs:annotation><xs:documentation>taken from the votable definition...- perhaps want something else...</xs:documentation>
   </xs:annotation>
  <xs:restriction base="xs:token">
    <xs:pattern  value="([0-9]+x)*[0-9]*[*]?(s\W)?"/>
  </xs:restriction>
</xs:simpleType>
   
   <xs:simpleType name="rangeType">
        <xs:annotation>
           <xs:documentation>this different type of supported ranges</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
         <xs:enumeration value="integer"></xs:enumeration>
         <xs:enumeration value="float"></xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

   <xs:simpleType name="binaryEncodings">
        <xs:annotation>
           <xs:documentation>the allowable binary encodings for a parameter value.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
           <xs:enumeration value="base64"></xs:enumeration>
        </xs:restriction>
   </xs:simpleType>

   <xs:complexType name="ParameterValueArray">
      <xs:sequence>
         <xs:element minOccurs="0" maxOccurs="unbounded" name="value"
            type="xs:string">
         </xs:element>
      </xs:sequence>
      <xs:attribute name="arrayShape" type="ceab:arrayDEF">
         <xs:annotation></xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="OptionList">
      <xs:sequence>
         <xs:element maxOccurs="unbounded" name="OptionVal"
            type="xs:string">
            <xs:annotation></xs:annotation>
         </xs:element>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="Range">
      <xs:sequence>
         <xs:element name="min" type="xs:string"></xs:element>
         <xs:element name="max" type="xs:string"></xs:element>
      </xs:sequence>
      <xs:attribute use="required" name="rangetype"
         type="ceab:rangeType">
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="ListOfParameterValues">
      <xs:sequence>
         <xs:element minOccurs="0" maxOccurs="unbounded"
            name="parameter" type="ceab:parameterValue">
         </xs:element>
      </xs:sequence>
   </xs:complexType>
    <!-- the following used to be in CEAParameterDefinition
    -->
    
</xs:schema>
