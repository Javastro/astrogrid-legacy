/*$Id: AdqlSqlMaker.java.OLD,v 1.2 2006/06/15 16:50:10 clq2 Exp $
 * Created on 27-Nov-2003
 *
 * Copyright (C) AstroGrid. All rights reserved.
 *
 * This software is published under the terms of the AstroGrid
 * Software License version 1.2, a copy of which has been included
 * with this distribution in the LICENSE.txt file.
 *
 **/
package org.astrogrid.tableserver.jdbc;



import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.astrogrid.cfg.ConfigFactory;
import org.astrogrid.query.OldQuery;
import org.astrogrid.query.Query;
import org.astrogrid.query.QueryException;
import org.astrogrid.query.adql.Adql074Writer;
import org.astrogrid.xml.DomHelper;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

/**
 * A translator that creates ADQL SQL from a query. This might be used to generate
 * SQL for RDBMSs that have the ADQL functions built into them as procedures/etc
 *
 * @deprecated Uses old query model OldQuery, which has been deprecated and
 * will be removed.
 */
public class AdqlSqlMaker implements SqlMaker {

   private static final Log log = LogFactory.getLog(AdqlSqlMaker.class);
   
   /**
    * Constructs an SQL statement for the given Query.  Uses the ADQL generator
    * and XSLT style sheets - there may be a better way of doing this!
    */
   public String makeSql(OldQuery query) throws QueryException {
      
      //botch fix for cone searches which don't specify table
      /* not needed any more
      if ( ((query.getScope() == null) || (query.getScope().length==0)) && (query.getCriteria() instanceof Function)) {
         if ( ((Function) query.getCriteria()).getName().toUpperCase().equals("CIRCLE")) {
            query.setScope(new String[] { ConfigFactory.getCommonConfig().getProperty(StdSqlWriter.CONE_SEARCH_TABLE_KEY) });
         }
      }
       */

      if ((query.getScope() == null) || (query.getScope().length==0)) {
         throw new QueryException("No scope (FROM) given in query "+query);
      }
      
      try {
         //Create an ADQL string documnet from the query
         String adqlTxt = Adql074Writer.makeAdql(query);
         Document adqlDom = DomHelper.newDocument(adqlTxt);
         
         //translate it
         String sql = useXslt(adqlDom.getDocumentElement());
         return sql;
         
      }
      catch (SAXException e) {
         throw new RuntimeException("Adql074Writer produced invalid XML from query "+query,e);
      }
      catch (IOException e) {
         throw new RuntimeException("Server error:"+e,e);
      }
      
   }

   /**
    * Constructs an SQL count statement for the given Query.
    */
   public String makeCountSql(OldQuery query) throws QueryException {

      //get ordinary SQL
      String sql = makeSql(query);
      
      //remove anything between SELECT and FROM and replace with COUNT(*)
      int selectIdx = sql.indexOf("SELECT");
      int fromIdx = sql.indexOf("FROM");
      String countSql = sql.substring(0,selectIdx+6)+" COUNT(*) "+sql.substring(fromIdx);
      return countSql;
   }

   /** Dummy method so this class is still compilable */
   public String makeCountSql(Query query) throws QueryException {
     throw new QueryException("Method not implemented");
   }

   
   /** Uses Xslt to do the translations */
   public String useXslt(Element adql) throws QueryException {
      
      String namespaceURI = adql.getNamespaceURI();
      
      if ((namespaceURI==null) || (namespaceURI.length()==0)) {
         throw new QueryException("No namespace specified in query document, so don't know what it is");
      }
      
      String xsltDoc = null;
      InputStream xsltIn = null;
      String whereIsDoc = null; //used for debug/trace/error messages
      
      //work out which translator sheet to use
      
      //see if there's a config property set
      String key = "datacenter.sqlmaker.xslt."+namespaceURI.replaceAll(":","_");
      xsltDoc = ConfigFactory.getCommonConfig().getString(key, null);
      
      try {
         if (xsltDoc != null) {
            //use config-specified sheet
            xsltIn = new FileInputStream(xsltDoc);
            whereIsDoc = "File "+xsltDoc;
         }
         else {
            //not given in configuration file - look in subdirectory of class as resource
            if (namespaceURI.equals("http://tempuri.org/adql")) { //assume v0.5
               //xsltDoc = "adql05-2-sql.xsl";
               throw new QueryException("ADQL 0.5 is no longer supported.  Please submit ADQL 0.7.4 documents");
            }
            if (namespaceURI.equals("http://www.ivoa.net/xml/ADQL/v0.7.4")) {
               xsltDoc = "adql074-2-sql.xsl";
            }
            else if (namespaceURI.equals("http://www.ivoa.net/xml/ADQL/v0.7.3")) {
               xsltDoc = "adql073-2-sql.xsl";
            }
            else if (namespaceURI.equals("http://www.ivoa.net/xml/ADQL/v0.8")) {
               xsltDoc = "adql08-2-sql.xsl";
            }
            else if (namespaceURI.equals("http://astrogrid.org/sadql/v1.1")) {
               xsltDoc = "sadql1.1-2-sql.xsl";
            }
            
            if (xsltDoc == null) {
               throw new RuntimeException("No builtin xslt for ADQL namespace '"+namespaceURI+"'; set configuration key '" + key+"'");
            }
            
            //find specified sheet as resource of this class
            xsltIn = StdSqlMaker.class.getResourceAsStream("./xslt/"+xsltDoc);
            whereIsDoc = StdSqlMaker.class+" resource ./xslt/"+xsltDoc;
            
            //if above doesn't work, try doing by hand for Tomcat ClassLoader
            if (xsltIn == null) {
               String path = StdSqlMaker.class.getPackage().toString().replace('.', '/').substring(8)+"/xslt/"+xsltDoc;
               xsltIn = StdSqlMaker.class.getClassLoader().getResourceAsStream(path);
            }

            //sometimes it won't even find it then if it's in a JAR.  Look in class path.  However
            //*assume* it's in classpath, as we don't know what the classpath is during unit tests.
            if (xsltIn == null) {
               log.warn("Could not find builtin ADQL->SQL transformer doc '"+whereIsDoc+"', looking in classpath...");
               
               xsltIn = this.getClass().getClassLoader().getResourceAsStream(xsltDoc);
               whereIsDoc = xsltDoc+" in classpath at "+this.getClass().getClassLoader().getResource(xsltDoc);
            }
            
            if (xsltIn == null) {
               throw new QueryException("Could not find ADQL->SQL transformer doc "+xsltDoc);
            }
         }
         
         //create transformer
         log.debug("Transforming ADQL ["+namespaceURI+"] using Xslt doc at '"+whereIsDoc+"'");
         TransformerFactory tFactory = TransformerFactory.newInstance();
         try {
            tFactory.setAttribute("UseNamespaces", Boolean.FALSE);
         }
         catch (IllegalArgumentException iae) {
            //ignore - if UseNamepsaces is unsupported, it will chuck an exception, and
            //we don't want to use namespaces anyway so taht's fine
         }
         Transformer transformer = tFactory.newTransformer(new StreamSource(xsltIn));
         
         //transform
         StringWriter sw = new StringWriter();
         transformer.transform(new DOMSource(adql), new StreamResult(sw));
         String sql = sw.toString();
         
         //tidy it up - remove new lines and double spaces
         sql = sql.replaceAll("\n","");
         sql = sql.replaceAll("\r","");
         while (sql.indexOf("  ")>-1) { sql = sql.replaceAll("  ", " "); }
         
         //botch botch botch - for some reason transformers sometimes add <?xml tag to beginning
         if (sql.startsWith("<?")) {
            sql = sql.substring(sql.indexOf("?>")+2);
         }
         //botch botch botch - something funny with ADQL 0.7.3 schema to do with comparisons
         sql = sql.replaceAll("&gt;", ">").replaceAll("&lt;", "<");
         
         log.debug("Used '"+xsltDoc+"' to translate ADQL ("+namespaceURI+") to '"+sql+"'");
         
         return sql;
      }
      catch (TransformerConfigurationException tce) {
         throw new QueryException(tce+" (using xslt sheet "+xsltDoc+")",tce);
      }
      catch (TransformerException te) {
         throw new QueryException(te+" translating ADQL->SQL using "+xsltDoc,te);
      }
      catch (IOException ioe) {
         throw new QueryException(ioe+" Opening XSLT sheet "+xsltDoc,ioe);
      }
      
   }
   
}


/*
 $Log: AdqlSqlMaker.java.OLD,v $
 Revision 1.2  2006/06/15 16:50:10  clq2
 PAL_KEA_1612

 Revision 1.1.2.1  2006/04/20 15:23:08  kea
 Checking old sources in in oldserver directory (rather than just
 deleting them, might still be useful).

 Revision 1.2  2005/03/21 18:45:55  mch
 Naughty big lump of changes

 Revision 1.1  2005/03/10 16:42:55  mch
 Split fits, sql and xdb

 Revision 1.1.1.1  2005/02/17 18:37:35  mch
 Initial checkin

 Revision 1.1.1.1  2005/02/16 17:11:24  mch
 Initial checkin

 Revision 1.2.12.4  2004/12/10 12:37:13  mch
 Cone searches to look in metadata, lots of metadata interpreterrs

 Revision 1.2.12.3  2004/12/08 23:23:37  mch
 Made SqlWriter and AdqlWriter implement QueryVisitor

 Revision 1.2.12.2  2004/12/08 18:36:40  mch
 Added Vizier, rationalised SqlWriters etc, separated out TableResults from QueryResults

 Revision 1.2.12.1  2004/12/03 11:56:43  mch
 switched from using stylesheet to dedicated SQL maker

 Revision 1.2  2004/11/03 01:35:18  mch
 PAL_MCH_Candidate2 merge Part II

 Revision 1.1.2.1  2004/10/27 00:43:39  mch
 Started adding getCount, some resource fixes, some jsps

 
 */



