/* Generated by Together */

package org.astrogrid.mySpace.mySpaceServer;

//astrogrid
import org.astrogrid.mySpace.mySpaceManager.DataItemRecord;
import org.astrogrid.mySpace.mySpaceStatus.*;
import org.astrogrid.mySpace.mySpaceUtil.MySpaceUtils;

//java
import java.io.PrintWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.util.Properties;


//log4j
import org.apache.log4j.Logger;

import org.astrogrid.Configurator;
import org.astrogrid.i18n.*;

/**
 * @WebService
 * 
 * @author C L Qin
 * @version Iteration 2.
 */
public class ServerManager {
	
    private static Logger logger = Logger.getLogger(ServerManager.class);
    private static boolean DEBUG = true;
	private static MySpaceStatus status = new MySpaceStatus();
    private String response = ""; //this would be a xml response contains info match portal/datacentre xml schema.
	private static String mySpaceProperties = "statuscodes.lis";
	private static Properties conProperties = new Properties();

    public String deleteDataHolder(String dataHolderPath){
    	if (DEBUG)
    		logger.debug("MySpace ServerManager.deleteDataHolder..."+dataHolderPath);	
    	try{  		
    		File file = new File(dataHolderPath);   		
    		if  (file == null || !file.exists()){
				if (DEBUG)  logger.debug("File not exist! can't delete.");
				//MySpaceMessage msMessage = new MySpaceMessage("NULL_FILE_DELETE");
				status.addCode(MySpaceStatusCode.AGMSCE01001,MySpaceStatusCode.ERROR, MySpaceStatusCode.NOLOG, this.getComponentName());
			    response = MSC.FAULT+MySpaceStatusCode.AGMSCE01001;
				return response;
    		}else{
	    		try{
	    			boolean isDeleted = file.delete();
					if (DEBUG) logger.debug("ServerManager deleteDataHolder "+dataHolderPath);
					if (isDeleted)  response = MSC.SUCCESS+"File Deleted.";
					else response = MSC.FAULT+"File Not Deleted";
					return response;
	    		}catch(SecurityException se){
					//MySpaceMessage msMessage = new MySpaceMessage("ERR_SECURITY_DELETE_DATA_HOLDER");
					status.addCode(MySpaceStatusCode.AGMSCE01045,MySpaceStatusCode.ERROR, MySpaceStatusCode.NOLOG, this.getComponentName());
					response = MSC.FAULT+MySpaceStatusCode.AGMSCE01045;
					return response;
	    		}
    		}
    	}
    	catch(Exception e){
    		logger.error("Exception caught while deleting dataholder: "+e.toString());
			AstroGridMessage generalMessage = new AstroGridMessage( "AGMSCE01046", this.getComponentName()) ;
			status.addCode(MySpaceStatusCode.AGMSCE01046,MySpaceStatusCode.ERROR, MySpaceStatusCode.NOLOG, this.getComponentName());
			response = MSC.FAULT+MySpaceStatusCode.AGMSCE01046;
			return response;
			}
    }

    public String exportDataHolder(String dataHolderPath, String destinationDataHolderPath) {

        return "";
    }

/**
 * 
 * @param contentPath: full path or url of the file need to get from
 * @param mySpaceFileName: only the file name without full path e.g. f35 where the file is saved to.
 * @return
 */
    public String saveDataHolder(String contentPath, String mySpaceFileName) {
		PrintWriter printWriter = null;
		try{
			MSC.getInstance().checkPropertiesLoaded();
			String path = MSC.getProperty(MSC.dataHolderFolder, MSC.CATLOG);
			String dataHolderPath = path + mySpaceFileName;
           
			long fileSize = (new File(contentPath)).length();
			if (DEBUG)  {
				logger.debug("Inside ServerManager.saveDataHolder..."+dataHolderPath+"contentPath="+contentPath); 
			    logger.debug("saveDataHolder.saveDataHolder.fileSize: "+fileSize +"mySpaceFileName: "+mySpaceFileName);
			    logger.debug("dataHolderPath= "+dataHolderPath);
			}
			
			String command = MSC.getProperty(MSC.copyCommand, MSC.CATLOG);
			long sizeLimit = Long.parseLong(MSC.getProperty(MSC.sizeLimit, MSC.CATLOG));
			
			if(DEBUG) logger.debug("COPY_COMMAND: " +command+"SIZELIMIT: " +sizeLimit);
			if (fileSize>=sizeLimit){
				if (DEBUG)  logger.debug("command = "+command);
			    try{
			    	Runtime.getRuntime().exec(command);
			    	}catch(java.lang.Exception e){
			    		if (DEBUG)  logger.error("savedataholder error: "+e);
			    }
			}else{
				String content = MySpaceUtils.readFromFile(new File(contentPath));
				//open file to write into
			    printWriter = new PrintWriter(new FileOutputStream(new File(dataHolderPath)));    	    
    	    
			//write to file
			    printWriter.println(content);
			}

		    response = MSC.SUCCESS +" File Saved.";
			return response;		    
				    
		}catch (Exception e) {//catch unexpected Exception
			logger.error("FAULT ServerManagetr.saveDataHolder!!! "+e.toString());
			AstroGridMessage generalMessage = new AstroGridMessage( "AGMSCE01040", this.getComponentName()) ;
			status.addCode(MySpaceStatusCode.AGMSCE01040,MySpaceStatusCode.ERROR, MySpaceStatusCode.NOLOG, this.getComponentName());
			response = MSC.FAULT+MySpaceStatusCode.AGMSCE01040+"::"+generalMessage.toString();			
			return response; 
		}finally{
			//close file
			try{
				if(printWriter != null) {
					printWriter.close();
				}
			}catch(Exception e){
				logger.error("Exception caught in finally block: ServerManager.saveDataHolder: "+e.toString());
				AstroGridMessage generalMessage = new AstroGridMessage( "AGMSCE01040", this.getComponentName()) ;	
				response = MSC.FAULT+MySpaceStatusCode.AGMSCE01040+"::"+generalMessage.toString();		
			}
		}
    }
    
    
	public String copyDataHolder(String dataHolderPath, String destinationDataHolderPath) {
		try{

			String copytoname = destinationDataHolderPath.substring(destinationDataHolderPath.lastIndexOf("/")+1,destinationDataHolderPath.length());
			if ( DEBUG ) logger.debug("ServerManager filtering single file name copyto: "+copytoname +"dataholderpaht   = " +dataHolderPath);
			response = MSC.SUCCESS +saveDataHolder(dataHolderPath, copytoname);
			return response;
		}catch(Exception e){
			logger.error("FAULT ServerManagetr.COPYDataHolder!!! "+e.toString());
			AstroGridMessage generalMessage = new AstroGridMessage( "AGMSCE01042", this.getComponentName()) ;
			status.addCode(MySpaceStatusCode.AGMSCE01042,MySpaceStatusCode.ERROR,MySpaceStatusCode.NOLOG, this.getComponentName());
			response = MSC.FAULT+MySpaceStatusCode.AGMSCE01042+"::"+generalMessage.toString();	
			return response;
		}
	}    

    //need to be decided not implement in Iteration 2
    public String tidyMySpace() {
    	return "";
    }

    /** given a size, return true or false indecate whether this action is doable
     *
     * */
    public String enquireDataHolderSize(String userId, String communityId, int size) {
         
         return "";
    }
   
    public String buildXMLResponse(String dum){//String origiRs, File xsl){
    	if ( DEBUG )  logger.debug("BUILDXMLRESPONSE...");
    	//this is for tesing response xml string
		MySpaceUtils util = new MySpaceUtils();
		DataItemRecord dataItemRecord = new DataItemRecord();
		String response = util.buildMySpaceManagerResponse(dataItemRecord,"","","");
		if ( DEBUG )  logger.debug("GOT RESPONSE" +response);
		return response;	
    }
    

    /**
     * @link aggregationByValue
     * @clientCardinality 1
     * @supplierCardinality 0..*
     */
    private DataHolder lnkDataRecord;
    
	protected String getComponentName() { return Configurator.getClassName( ServerManager.class) ; }
}
