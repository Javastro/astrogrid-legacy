/* Generated by Together */

package org.astrogrid.mySpace.mySpaceServer;

//astrogrid
import org.astrogrid.mySpace.mySpaceManager.DataItemRecord;
import org.astrogrid.mySpace.mySpaceStatus.*;
import org.astrogrid.mySpace.mySpaceUtil.MySpaceUtils;

//java
import java.io.PrintWriter;
import java.io.File;
import java.io.InputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.util.Properties;

import org.apache.axis.AxisProperties;

//log4j
import org.apache.log4j.Logger;

/**
 * @WebService
 * 
 * @author C L Qin
 * @version Iteration 2.
 */
public class ServerManager {
	
    private static Logger logger = Logger.getLogger(ServerManager.class);
    private static boolean DEBUG = true;
	private static MySpaceStatus status = new MySpaceStatus();
    private String response = ""; //this would be a xml response contains info match portal/datacentre xml schema.
    private static final String SUCCESS = "SUCCESS";
    private static final String FAULT = "FAULT";
	private static String catalinaHome = AxisProperties.getProperty("catalina.home");
	private static String mySpaceProperties = catalinaHome+"/conf/astrogrid/mySpace/" +"statuscodes.lis";
	private static Properties conProperties = new Properties();
    
    public String processRequest(){

    	return "";
    }

    /** userAcc = String usrID + String communityID
     * */
    public String deleteDataHolder(String dataHolderPath){
    	if (DEBUG)
    		logger.debug("MySpace ServerManager.deleteDataHolder..."+dataHolderPath);	
    	try{  		
    		File file = new File(dataHolderPath);   		
    		if  (file == null || !file.exists()){
				if (DEBUG)  logger.debug("File not exist! can't delete.");
				MySpaceMessage msMessage = new MySpaceMessage("NULL_FILE_DELETE");
				status.addCode(MySpaceStatusCode.NULL_FILE_DELETE,MySpaceStatusCode.ERROR);
			    response = FAULT+MySpaceStatusCode.NULL_FILE_DELETE;
				return response;
    		}else{
	    		try{
	    			boolean isDeleted = file.delete();
					if (DEBUG) logger.debug("ServerManager deleteDataHolder "+dataHolderPath);
					if (isDeleted)  response = SUCCESS+"File Deleted.";
					else response = FAULT+"File Not Deleted";
					return response;
	    		}catch(SecurityException se){
					MySpaceMessage msMessage = new MySpaceMessage("ERR_SECURITY_DELETE_DATA_HOLDER");
					status.addCode(MySpaceStatusCode.ERR_SECURITY_DELETE_DATA_HOLDER,MySpaceStatusCode.ERROR);
					response = FAULT+MySpaceStatusCode.ERR_SECURITY_DELETE_DATA_HOLDER;
					return response;
	    		}
    		}
    	}
    	catch(Exception e){
			MySpaceMessage msMessage = new MySpaceMessage("ERR_DELETE_DATA_HOLDER");
			status.addCode(MySpaceStatusCode.ERR_DELETE_DATA_HOLDER,MySpaceStatusCode.ERROR);
			response = FAULT+MySpaceStatusCode.ERR_DELETE_DATA_HOLDER;
			return response;
			}
    }

    public String exportDataHolder(String dataHolderPath, String destinationDataHolderPath) {

        return "";
    }

    public String copyDataHolder(String dataHolderPath, String destinationDataHolderPath) {
		try{
			File oldFile = new File(dataHolderPath);
			String content = MySpaceUtils.readFromFile(oldFile);
			response = SUCCESS +saveDataHolder(content, destinationDataHolderPath)+MySpaceStatusCode.DATA_HOLDER_COPIED;
			return response;
		}catch(Exception e){
			MySpaceMessage message = new MySpaceMessage("ERR_COPY_DATA_HOLDER");
			status.addCode(MySpaceStatusCode.ERR_COPY_DATA_HOLDER,MySpaceStatusCode.ERROR);
			response = FAULT+MySpaceStatusCode.ERR_COPY_DATA_HOLDER;	
			return response;
		}
    }

    public String moveDataHolder(String dataHolderPath, String destinationDataHolderPath) {
    	try{
	    	File oldFile = new File(dataHolderPath);
	    	String content = MySpaceUtils.readFromFile(oldFile);
			deleteDataHolder(dataHolderPath);
	    	response = SUCCESS +saveDataHolder(content, destinationDataHolderPath)+MySpaceStatusCode.DATA_HOLDER_MOVED;
	    	return response;
    	}catch(Exception e){
			MySpaceMessage message = new MySpaceMessage("ERR_MOVE_DATA_HOLDER");
			status.addCode(MySpaceStatusCode.ERR_MOVE_DATA_HOLDER,MySpaceStatusCode.ERROR);
			response = FAULT+MySpaceStatusCode.ERR_MOVE_DATA_HOLDER;	
    		return response;
    	}
    }

/**
 * 
 * @param contentPath: path of the file need to get from
 * @param dataHolderPath: the file path ServerManager will save the file to.
 * @return
 */
    public String saveDataHolder(String contentPath, String dataHolderPath) {
		PrintWriter printWriter = null;
		try{
			
			if (DEBUG)  logger.debug("Inside ServerManager.saveDataHolder...");
			long fileSize = (new File(contentPath)).length();
			if (DEBUG)  logger.debug("saveDataHolder.saveDataHolder.fileSize: "+fileSize);
			
			MySpaceUtils msutil = new MySpaceUtils();
			conProperties = msutil.loadProperties(mySpaceProperties);
			if(DEBUG) logger.debug("COPY_COMMAND: " +conProperties.getProperty( "COPY_COMMAND" ) +"SIZELIMIT: " +conProperties.getProperty( "SIZELIMIT" ));
			String command = conProperties.getProperty( "COPY_COMMAND" )+" "+contentPath+" "+dataHolderPath;
			long sizeLimit = Long.parseLong(conProperties.getProperty( "SIZELIMIT" ));
			if (fileSize>=sizeLimit){
				if (DEBUG)  logger.debug("command = "+command);
			    try{
			    	Runtime.getRuntime().exec(command);
			    	}catch(java.lang.Exception e){
			    		if (DEBUG)  logger.error("savedataholder error: "+e);
			    }
			}else{
				String content = MySpaceUtils.readFromFile(new File(contentPath));
				//open file to write into
			printWriter = new PrintWriter(new FileOutputStream(new File(dataHolderPath)));    	    
    	    
			//write to file
			printWriter.println(content);
			}

		    response = SUCCESS +" File Saved.";
			return response;		    
				    
		}catch (Exception e) {//catch unexpected Exception
			logger.error("FAULT ServerManagetr.saveDataHolder!!! "+e);
			MySpaceMessage message = new MySpaceMessage("ERR_SAVE_DATAHOLDER");
			status.addCode(MySpaceStatusCode.ERR_SAVE_DATAHOLDER,MySpaceStatusCode.ERROR);
			response = FAULT+MySpaceStatusCode.ERR_SAVE_DATAHOLDER+"::"+e.toString();			
			return response; //temp code for now, should catch the exception and return proper error message
		}finally{
			//close file
			try{
				if(printWriter != null) {
					printWriter.close();
				}
			}catch(Exception e){
				//should catch the exception and return proper error message			
			}
		}
    }

    //need to be decided not implement in Iteration 2
    public String tidyMySpace() {
    	return "";
    }

    /** given a size, return true or false indecate whether this action is doable
     *
     * */
    public String enquireDataHolderSize(String userId, String communityId, int size) {
         
         return "";
    }
   
    public String buildXMLResponse(String dum){//String origiRs, File xsl){
    	logger.debug("BUILDXMLRESPONSE...");
    	//this is for tesing response xml string
		MySpaceUtils util = new MySpaceUtils();
		logger.debug("CREATED MYSPACEUTIL...");
		//DataItemRecord record = new DataItemRecord();
		DataItemRecord dataItemRecord = new DataItemRecord();
		String response = util.buildMySpaceManagerResponse(dataItemRecord,"","","");
		
		logger.debug("GOT RESPONSE" +response);
		
		
		return response;	
    }//end method
    

    /**
     * @link aggregationByValue
     * @clientCardinality 1
     * @supplierCardinality 0..*
     */
    private DataHolder lnkDataRecord;
}
