/* Generated by Together */

package org.astrogrid.mySpace.mySpaceRegistry;

import org.astrogrid.mySpace.mySpaceServer.ServerManager;
import java.util.Vector;

/**
 * @wsScope Request 
 * @WebService
 */
public class MySpaceManager {
    public String processRequest(){
        //create UserAccount instance according to the input request
    	return "";
    }

    /**
     * 
     * 
     * this method checks whether this user has rights to do this action
     * @param usrID user Identity
     * @param communityID Community Identity
     * @param jobID Job Identity
     * @param action Action which requires checking for user validation
     **/

    private boolean authenticateUser(UserAccount useracc, String jobID, String action) {
    	return true;
    }

    /** userAcc = String usrID + String communityID
     *
     *
     * */
        public boolean deleteDataItem(UserAccount userAcc, String jobID, int dataHolderID) {
        //if authenticateUser(userID, communityID, jobID, DELETE) return false
        //return false
        //else
           //try{
          //if ServerManager.deleteDataItem(userID, communityID, jobID, DELETE) return false
        //}catch(Status s){return the error messages to user }
          //return false
          //else return true
          return true;
    }


    public boolean extendLease(UserAccount userAcc, String jobID, int dataHolderID) {
       // try{
        //authenticateUser(userAcc, jobID, EXTEND_LEASE)
        //if ServerManager.checkDataState(userID, communityID, dataItemID) return Cached
          //moveDataItem
        //else if return Permenate saveDataItem
        //else return "can't perform this action"+error message
        //}catch(Status s){return the error messages to user }
        return true;
    }

    public boolean copyDataItem(UserAccount userAcc, String jobID, int dataHolderIDFrom, String dataHolderNameTo) {
        //try{
         //authenticateUser(userID, communityID, jobID, EXTEND_LEASE)
        //create instance of dataItemRecord+dataHolder according to dataHolderTo.
        //lookupDataItem(userID, communityID, jobID) -- which returns the dataItemID
        //if ServerManager.checkDataState return cached
          //
        //else if ServerManager.checkDataState return permanent
          //if ServerManager.enquireStorageAvailable return false
            //return false -- can't copy since not enough space for you
          //else saveDataItem
        //return true
        //}catch(Status s){return the error messages to user }
        return true;
    }

    public boolean moveDataItem(UserAccount userAcc, String jobID, int dataHolderIDFrom, String dataHolderNameTo) {
        //try{
         //authenticateUser(userID, communityID, jobID, MOVE)
        //if ServerManager.enquireStorageAvailable return false
            //return false -- can't copy since not enough space for you
          //else saveDataItem
        //return true
        //delete dataHolder from location: dataHoderIDFrom
         //}catch(Status s){return the error messages to user }
        return true;
    }

  /** lookUpData will return perform lookUp in ServerManager to get detailed data for
   *  the dataItem
   * */
    public DataItemRecord[] lookUpDataItemRecords(UserAccount userAcc, String jobID, String dataHolderExpr) {
        //try{
         //authenticateUser(userID, communityID, jobID, EXTEND_LEASE)
        //lookUpDataItem
        //ServerManager.lookUpData(String usrID, String communityID, String dataItemID)
        //}catch(Status s){return the error messages to user }
        DataItemRecord[] vec = null;
        return vec;
    }

    /** createContainer will creates a Container for one user
     *  a Container is composed by many DataItems.
     * */
    protected Vector createContainer(String usrID, String communityID, DataItemRecord dataitem) {
        //TO BE DECIDED
         //authenticateUser(userID, communityID, jobID, EXTEND_LEASE)
        //call for enquireStorageAvailable
        //add DataItem
        Vector vec = new Vector();
        return vec;
    }

    /** User checks how much space he has left on the MySpaceServer
     *
     * */
    public int enquireStorageAvailable(UserAccount userAcc) {
        //try{
         //authenticateUser(userID, communityID, jobID, ENQUIRE_STORAGE_AVAILABLE)
        //ServerManager.enquireStorageAvailable
        //}catch(Status s){return the error messages to user }
        int size =0;
        return size;
    }

    /** given a size, return true or false indecate whether this action is doable
     *
     * */
    public boolean enquireStorageAvailable(UserAccount userAcc, int size) {
         //authenticateUser(userID, communityID, jobID, ENQUIRE_STORAGE_AVALIABLE)
         return true;
    }

    public boolean saveDataItem(UserAccount userAcc, String jobID, String externalTempFrom, String dataHolderNameTo) {
        //try{
         //authenticateUser(userID, communityID, jobID, SAVE)
        //add new row dataItemRecord
        //creat dataHolder file/VOTable -- for it2 copy from DataCentre temp file
        //}catch(Status s){return the error messages to user }
        return true;
    }

    public boolean createDirectory(UserAccount userAcc, String dirSpec) {
        //checkAuthentication
        //remember to add restrictions of file name because of OS
        return true;
    }

    public boolean setPermissions() {
    	return true;
    }

    public boolean tidyMySpace() {
       return false;
    }

    private String community;
    private Vector users;
    private final static String DELETE = "DELETE";
    private final static String SAVE = "SAVE";
    private final static String COPY = "COPY";
    private final static String MOVE = "MOVE";
    private final static String EXTEND_LEASE = "EXTEND_LEASE";
    private final static String LOOK_UP = "LOOK_UP";
    private final static String ENQUIRE_STORAGE_AVAILABLE = "ENQUIRE_STORAGE_AVAILABLE";

    /**
     * @link aggregation 
     */
    private UserAccount lnkUserAccount;
}
