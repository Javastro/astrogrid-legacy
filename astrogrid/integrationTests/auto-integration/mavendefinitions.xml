<project xmlns:j="jelly:core"
        xmlns:jsl="jelly:jsl"
        xmlns:jxml="jelly:xml"
        xmlns:maven="jelly:maven"
        xmlns:util="jelly:util"
        xmlns:deploy="deploy"
        xmlns:http="jelly:http"
                xmlns:define="jelly:define"
                xmlns:ag="org.astrogrid.deploy"
    >

        <!-- does this need to be in a task? -->
<goal name="declare-tasks">
   <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="tomcat-deploy"    classname="org.apache.catalina.ant.DeployTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-install"   classname="org.apache.catalina.ant.InstallTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-list"      classname="org.apache.catalina.ant.ListTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-reload"    classname="org.apache.catalina.ant.ReloadTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-remove"    classname="org.apache.catalina.ant.RemoveTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-roles"     classname="org.apache.catalina.ant.RolesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-start"     classname="org.apache.catalina.ant.StartTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-stop"      classname="org.apache.catalina.ant.StopTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpathref="maven.dependency.classpath"/>
  <!-- and some of our specialized declarations -->
  <taskdef name="register-entry" classname="org.astrogrid.deployment.RegistryLoaderTask" classpathref="maven.dependency.classpath"/>
</goal>

<goal name="register" prereqs="declare-tasks">
           <echo>registering ${registry.entry} at ${registry.endpoint}</echo>
       <register-entry
            data="${registry.entry}"
            registry="${registry.endpoint}Update"
            />
 </goal>

<!--tag lib - better to put in an astrogrid plugin-->
        <define:taglib uri="org.astrogrid.deploy">
                <!-- need to decide how careful to be about property lookups - context stuff -->
                <define:tag name="GetDeploy" ><!-- this is not using the normal dependencies yet - needs to -->
                        <j:set var="component.name" value="${name}"/>
                        <j:choose>
                                <j:when test="${!empty(version)}">
                                        <j:set var="component.version" value="${version}"/>
                                </j:when>
                                <j:otherwise>
                                        <j:set var="component.version"
                                                value="${context.getVariable('astrogrid.release')}"/>
                                </j:otherwise>
                        </j:choose>
                        <filter token="RELEASE" value="${component.version}"/> <!-- does this behave like a property? - this might not change once set initially -->
                        <j:set var="war.name"
                                value="astrogrid-${component.name}-${component.version}" />
                        <get src="${astrogrid.repository}/wars/${war.name}.war"
                                dest="${download.dir}/${war.name}.war" usetimestamp="true" verbose="true"/>
                        <copy todir="${temporary.dir}/${component.name}" filtering="true" overwrite="false">
                                <fileset dir="contexts/${component.name}" />
                        </copy>
                        <copy todir="${temporary.dir}/" filtering="false">
                                <fileset dir="${download.dir}" includes="${war.name}.war" />
                        </copy>
                        <war update="true" destfile="${temporary.dir}/${war.name}.war">
                                <metainf dir="${temporary.dir}/${component.name}"/>
                        </war>
                        <echo>
                           installing ${war.name} to /astrogrid-${component.name}-${component.version}
                        </echo>
                        <j:choose >
                        <j:when test="${context.getVariable('name') eq 'portal'}">
                                <!-- unfortunately this is a hack because the portal must be called portal -->
                                <j:catch>
                                        <tomcat-deploy url="${context.getVariable('tomcat.manager.url')}"
                                                username="${context.getVariable('tomcat.manager.username')}"
                                                password="${context.getVariable('tomcat.manager.password')}"
                                                update="true"
                                                path="/astrogrid-portal"
                                                war="file://${context.getVariable('temporary.dir')}/${war.name}.war"/>
                                </j:catch>
                        </j:when>
                        <j:otherwise>
                                <j:catch>
                                        <tomcat-deploy url="${context.getVariable('tomcat.manager.url')}"
                                                username="${context.getVariable('tomcat.manager.username')}"
                                                password="${context.getVariable('tomcat.manager.password')}"
                                                update="true"
                                                path="/${war.name}"
                                                war="file://${context.getVariable('temporary.dir')}/${war.name}.war"/>
                                </j:catch>
                        </j:otherwise>
                        </j:choose>
                </define:tag>
                <define:tag name="UnDeploy">
                        <j:set var="component.name" value="${name}"/>
                        <j:choose>
                                <j:when test="${!empty(version)}">
                                        <j:set var="component.version" value="${version}"/>
                                </j:when>
                                <j:otherwise>
                                        <j:set var="component.version"
                                                value="${context.getVariable('astrogrid.release')}"/>
                                </j:otherwise>
                        </j:choose>
                        <j:catch>
                                <tomcat-remove url="${context.getVariable('tomcat.manager.url')}"
                                        username="${context.getVariable('tomcat.manager.username')}"
                                        password="${context.getVariable('tomcat.manager.password')}"
                                        path="/astrogrid-${component.name}-${component.version}" />
                        </j:catch>
                </define:tag>

                <define:tag name="tomreload">
                        <j:set var="component.name" value="${name}"/>
                        <j:choose>
                                <j:when test="${!empty(version)}">
                                        <j:set var="component.version" value="${version}"/>
                                </j:when>
                                <j:otherwise>
                                        <j:set var="component.version"
                                                value="${context.getVariable('astrogrid.release')}"/>
                                </j:otherwise>
                        </j:choose>
                        <j:catch>
                                <tomcat-reload url="${context.getVariable('tomcat.manager.url')}"
                                        username="${context.getVariable('tomcat.manager.username')}"
                                        password="${context.getVariable('tomcat.manager.password')}"
                                        path="/astrogrid-${component.name}-${component.version}" />
                        </j:catch>

                </define:tag>

                <define:tag name="register">
                        <j:set var="registry.entry" value="${file}"/>


                                  <taskdef name="register-entry" classname="org.astrogrid.deployment.RegistryLoaderTask" classpathref="maven.dependency.classpath"/>

                                      <register-entry
            data="${registry.entry}"
            registry="${registry.endpoint}Update"
            />


                </define:tag>
                <!-- enable cougar for this webapp, if it's 'short name' is part of the space-separated list of
                names in the variable 'enable.cougaar.list'.
                example shortnames - portal, community, registry, myspace, cea, cea-commandline, cea-http, jes, etc.
                - works on war filenames conforming to pattern
                  astrogrid-${shortname}-{$version}.war
                   - so doesn't work for pal, and its vairants, which don't follow this pattern.-->
                <define:tag name="maybe-enable-cougaar">
                        <!-- bit of a pity that we parse this every time - dunno how to declare a global though.. -->
                        <util:tokenize var="enableList" delim=" ">${enable.cougaar.list}</util:tokenize>
                        <j:if test="${enableList.contains(webapp)}">
                                <ag:enable-cougaar webapp="${webapp}" />
                        </j:if>
                </define:tag>

                <define:tag name="enable-cougaar">
                    <echo>enabling cougaar profiler for ${webapp}</echo>
                        <!-- off-line processing -first extract the war -->
                        <property name="war.dir" location="${temporary.dir}/${webapp}-war" />
                        <unwar src="${temporary.dir}/astrogrid-${webapp}-${pom.currentVersion}.war"
                                dest="${war.dir}" />
                        <!-- instrument the classes -->
                        <echo>instrumenting WEB-INF/classes</echo>
                        <fileScanner var="classes">
                                <fileset dir="${war.dir}/WEB-INF/classes">
                                        <include name="**/*.class" />
                                </fileset>
                        </fileScanner>
                        <j:forEach var="class" items="${classes.iterator()}">
                                <ag:_cougaar-instrument
                                        class="${class}"
                                        warRoot="${war.dir}"
                                />
                        </j:forEach>
                        <!-- instrument the jars - takes a very very long time - so only do the ag ones
                        commented it out for now...
                        <echo>instrumenting WEB-INF/lib</echo>
                        <fileScanner var="libs">
                                <fileset dir="${war.dir}/WEB-INF/lib">
                                        <include name="astrogrid-*.jar" />
                                </fileset>
                        </fileScanner>
                        <property name="jar.dir" location="${temporary.dir}/jar-working" />
                        <j:forEach var="lib" items="${libs.iterator()}">

                                <echo>Instrumenting jar file ${lib}</echo>
                                <delete dir="${jar.dir}" quiet="true"/>
                                <mkdir dir="${lib.dir}" />
                                <unjar src="${lib}" dest="${jar.dir}" />
                                <fileScanner var="jarClasses">
                                        <fileset dir="${jar.dir}">
                                                <include name="**/*.class" />
                                        </fileset>
                                </fileScanner>
                                <j:forEach var="class" items="${jarClasses.iterator()}">
                                        <ag:_cougaar-instrument class="${class}" warRoot="${war.dir}" />
                                </j:forEach>
                                <delete file="${lib}" />
                                <jar destfile="${lib}" basedir="${lib.dir}" />
                        </j:forEach>
                        -->
                   <!-- patch web.xml -->
                        <jsl:stylesheet var="addCougaarServlet">
                                <jsl:template match="node() | @*" priority="1">
                                        <jxml:copy>
                                                <jsl:applyTemplates select="@* | node()" />
                                        </jxml:copy>
                                </jsl:template>
                                <!-- match the last 'servlet' entry -->
                                <jsl:template match="servlet[name(following-sibling::*[1]) != 'servlet']" priority="2">
                                        <jxml:copyOf select="." />
                                        <servlet>
                                                <servlet-name>CougaarServlet</servlet-name>
                                                <servlet-class>org.cougaar.profiler.servlet.ProfilerServlet</servlet-class>
                                        </servlet>
                                </jsl:template>
                                <!-- same for servlet mapping -->
                                <jsl:template match="servlet-mapping[name(following-sibling::*[1]) != 'servlet-mapping']" priority="2">
                                        <jxml:copyOf select="." />
                                        <servlet-mapping>
                                                <servlet-name>CougaarServlet</servlet-name>
                                                <url-pattern>/cougaar</url-pattern>
                                        </servlet-mapping>
                                </jsl:template>
                        </jsl:stylesheet>
                        <jxml:parse var="originalWebXML" xml="file:${war.dir}/WEB-INF/web.xml" />
                        <j:file name="${war.dir}/WEB-INF/web.xml">
                                <jsl:style stylesheet="${addCougaarServlet}" select="$originalWebXML" />
                        </j:file>
                  <!-- stuff things back into the war file  - and add in cougaar jars.-->
                  <delete file="${temporary.dir}/astrogrid-${webapp}-${pom.currentVersion}.war" />
                  <war destfile="${temporary.dir}/astrogrid-${webapp}-${pom.currentVersion}.war"
                        basedir="${war.dir}"
                        webxml="${war.dir}/WEB-INF/web.xml"
                        excludes="**/web.xml">
                        <lib dir="${temporary.dir}">
                                <include name="*cougaar*.jar" />
                                <include name="*bcel*.jar" />
                        </lib>
                  </war>
                </define:tag>
                <!-- not for external use -->
                <define:tag name="_cougaar-instrument">
                       <java classname="org.cougaar.profiler.transform.SelfProfiler"
                             fork="true" output="${class}-instrumented">
                             <classpath><!-- necessary to have all classes the processed class may depend upon on the classpath -->
                                   <fileset dir="${warRoot}/WEB-INF/lib">
                                     <include name="*.jar" />
                                   </fileset>
                                   <fileset dir="${temporary.dir}">
                                           <include name="*.jar" />
                                   </fileset>
                                                <path refid="maven.dependency.classpath" />
                                                <path location="${warRoot}/WEB-INF/classes" />
                             </classpath>
                        <arg value="${class}" />
                       </java>
                       <move overwrite="true" file="${class}-instrumented" tofile="${class}" />
                </define:tag>
        </define:taglib>

</project>