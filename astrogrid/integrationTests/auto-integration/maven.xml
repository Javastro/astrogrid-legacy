<?xml version="1.0" ?>
<!-- $Id: maven.xml,v 1.82 2004/08/20 15:18:30 dave Exp $ -->
<!-- to use:
  check that tomcat is 'clean' and running - ie has no astrogrid components
  installed that will interfere with the deployment (use maven undeploy-all then
  manually check that it's worked).

   Run 'maven deploy-all'.  If it completes successfully, run 'maven int-test'.

   The deployer checks the astrogrid repository and your local one as normal to find the latest wars to
   deploy, so if you have local changes to a component you will need to rebuild that component separately.
   When the auto builds happen, the astrogrid repository version will become 'newer' and you will need to
   rebuild your locally changed component.
   Alternatively, run this script with the -o switch which instructs maven to build offline
   -->

<!-- extension maven script -->
<project xmlns:j="jelly:core"
        xmlns:jsl="jelly:jsl"
        xmlns:jxml="jelly:xml"
        xmlns:maven="jelly:maven"
        xmlns:util="jelly:util"
        xmlns:deploy="deploy"
        xmlns:http="jelly:http"
    default="jar:jar">


<property name="tomcat.host" value="localhost"/>
<property name="tomcat.port" value="8080"/>
<property name="tomcat.url" value="http://${tomcat.host}:${tomcat.port}"/>
<property name="tomcat.manager.url" value="${tomcat.url}/manager"/>
<property name="existurl" value="${tomcat.url}/exist/servlet/db"/>
<property name="version" value="SNAPSHOT"/>
<!-- name of the smtp mail server to use -->
<property name="mailhost" value="localhost" />


<!-- other, non-configurable properties -->

<!-- temp dir - used for mangling files, etc -->
<property name="temporary.dir" location="${basedir}/tmp" />
<property name="config.webapp.name" value="astrogrid-autoconfiguration" />

        <j:if test="${context.getVariable('registry.authorityid') == null}">
                <j:set var="registry.authorityid" value="${registry.authorityid}"/>
        </j:if>

        <!-- tokens to subst into config files -->
        <filter token="WORKDIR" value="${work.dir}" />
        <filter token="CONFIGPATH" value="${tomcat.url}/${config.webapp.name}" />
        <filter token="TOMCATROOT" value="${tomcat.url}" />
        <filter token="TOMCATLOC" value="${tomcat.location}" />
        <filter token="REGAUTHORITY" value="${registry.authorityid}" />
        <filter token="TOMCATPORT" value="${tomcat.port}"/>
                <!--filter token="VERSION" value="${version}"/-->
                                <filter token="VERSION" value="${astrogrid.iteration}"/>
                <filter token="MAILHOST" value="${mailhost}" />
            <filter token="TOOLBASEDIR" value="${work.dir}"/> <!--this is the directory that is the root of CEA command line applications set it to the workdir for autointegration purposes-->

<!-- setup -->
<goal name="init" prereqs="tomcat-declare-tasks">
                <echo>AuthorityID used: ${registry.authorityid}</echo>
        <delete dir="${temporary.dir}" />
        <mkdir dir="${temporary.dir}" />
        <deploy:copy-deps todir="${temporary.dir}" />
</goal>

<!-- main goals //////////////////////////////////////////////////////////////////////////////////// -->
<goal name="cycle"
 description="deprecated: timing issues. call undeploy-all, deploy-all, setup, int-test by hand.">
         <echo>Deprecated: problems with timing / memory load. call undeploy-all, deploy-all, int-test by hand individually</echo>
        <attainGoal name="undeploy-all" />
        <attainGoal name="deploy-all" />
        <attainGoal name="int-test" />
 </goal>

<goal name="deploy-all" prereqs="init" description="deploy all webapps, setup environment.">
        <echo>*** Deploying all webapps...</echo>

        <attainGoal name="common-libs-deploy" />
        <attainGoal name="configuration-deploy" />
        <sleep seconds="2" />
        <attainGoal name="myspace-store-deploy" />
        <sleep seconds="2" />
        <attainGoal name="reg-deploy" />
        <sleep seconds="4" />
        <attainGoal name="jes-deploy" />
        <sleep seconds="2" />
        <attainGoal name="cea-server-deploy" />
        <sleep seconds="2" />
        <attainGoal name="cea-commandline-deploy" />
        <sleep seconds="2" />
        <attainGoal name="cea-http-deploy" />
        <sleep seconds="2" />
        <attainGoal name="myspace-deploy" />
        <sleep seconds="2" />
        <attainGoal name="filestore-deploy" />
        <sleep seconds="2" />
        <attainGoal name="pal-deploy" />
        <sleep seconds="2" />
        <attainGoal name="pal-fits-deploy" />
        <sleep seconds="2" />
        <attainGoal name="pal-sec-deploy" />
        <sleep seconds="2" />
        <attainGoal name="community-deploy"/>
        <sleep seconds="2" />
        <attainGoal name="portal-deploy" />
        <sleep seconds="4" />
        <attainGoal name="setup" />
</goal>

<goal name="undeploy-all" prereqs="init" description="undeploy all webapps">
        <echo>*** Undeploying all webapps...</echo>
        <attainGoal name="configuration-undeploy" />
        <attainGoal name="myspace-store-undeploy" />
        <attainGoal name="jes-undeploy" />
        <attainGoal name="cea-server-undeploy" />
        <attainGoal name="cea-commandline-undeploy" />
        <attainGoal name="cea-http-undeploy" />
        <attainGoal name="reg-undeploy" />
        <attainGoal name="myspace-undeploy" />
        <attainGoal name="filestore-undeploy" />
        <attainGoal name="pal-undeploy" />
        <attainGoal name="pal-fits-undeploy" />
        <attainGoal name="pal-sec-undeploy" />
        <attainGoal name="community-undeploy" />
        <attainGoal name="portal-undeploy" />
</goal>

<goal name="list" prereqs="init" description="list deployed webapps">
        <tomcat-list url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" />
</goal>


<goal name="int-test" description="run integration tests">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="test" />
</goal>

<goal name="eclipse-int-test" description="Generate eclipse files for the tests">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="eclipse" />
</goal>

<goal name="astrogrid-build-site" description="Build the site docs for the test project">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="site" />
</goal>

<goal name="astrogrid-deploy-site" description="Deploy the site docs for the test project" >
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="site:deploy" />
</goal>
<!--+
    | This pregoal takes any simple html docs in the xdocs folder and turns them into xdoc xml,
    | before they are turned back into maven-style html docs.  Why?  html is easier to write in
    | a WYSIWIG editor than xdoc xml
    |
    | I think using this means that the  documents all turn out in the same maven style (plus navigation bars, etc)
    +-->
<preGoal name="xdoc:jelly-transform">
    <attainGoal name="html2xdoc"/>
</preGoal>

<goal name="ui-int-test"  description="run integration tests in ui runner">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="test:ui" />
</goal>

<goal name="scripting-gui"  description="run javascript gui">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="run-scripting-gui" />
</goal>

<goal name="style-workflows" description="apply presentation stylesheet to all workflows">
                  <!--declare the transformer factory to use -->
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <xslt style="${basedir}/build/workflow.xsl" destdir="${work.dir}/styled-workflows" basedir="${work.dir}/jes" />
</goal>

<!-- Working direcotry //////////////////////////////////////////////////////////////////////////////////////////////// -->

<goal name="setup" description="configure webapps and working dir">
        <echo>*** Configuring...</echo>
        <attainGoal name="community-toolkit"/>
        <attainGoal name="setup-working-dir" />
        <attainGoal name="setup-exist" />
        <attainGoal name="setup-registry" />
        <attainGoal name="community-database"/>
        <attainGoal name="community-register"/>
        <attainGoal name="setup-cea-server" />
        <attainGoal name="setup-cea-commandline" />
        <attainGoal name="setup-cea-http" />
        <attainGoal name="setup-myspace" />
        <attainGoal name="setup-filestore" />
        <attainGoal name="copy-test-resources" />
</goal>

<goal name="setup-working-dir" description="create working dir, copy across templates">
        <echo>Setting up working directory</echo>
        <mkdir dir="${work.dir}" />
        <copy todir="${work.dir}" overwrite="true" filtering="true">
                        <fileset dir="work">
                                <exclude name="**/filestore/data/*"/>
                        </fileset>
        </copy>
        <!-- make everything world-accessible - necessary as tomcat may be running as different user to
        whoever is executing this script

        hmm - dunno if this is necessary really.
         -->
        <chmod file="${work.dir}" perm="a+rwx" type="dir"/>
        <chmod dir="${work.dir}" perm="a+rwx" type="dir">
                <include name="**/*" />
        </chmod>
        <chmod dir="${work.dir}" perm="a+rw" type="file">
                <include name="**/*" />
        </chmod>
</goal>

<goal name="setup-cea-server">
        <mkdir dir="${work.dir}/cea/java/store" />
</goal>

<goal name="setup-cea-http">
        <mkdir dir="${work.dir}/cea/http/store" />
</goal>

<goal name="setup-cea-commandline" description="setup specific to commandline cea server">
        <mkdir dir="${work.dir}/cea/commandline/store" />
        <chmod dir="${work.dir}/cea/commandline/work" perm="a+x">
                <include name="*.sh" />
        </chmod>
</goal>

<goal name="setup-myspace" description="myspace setup">
        <echo>Configuring Myspace</echo>
</goal>

<goal name="setup-filestore" description="filestore setup">
        <echo>Configuring Filestore repository</echo>
    <mkdir dir="${work.dir}/filestore/repository"/>
    <mkdir dir="${work.dir}/filestore/data"/>
        <copy todir="${work.dir}">
                <fileset dir="work">
                        <include name="**/filestore/data/*"/>
                </fileset>
        </copy>
</goal>

<goal name="setup-community" description="Community setup">
</goal>

<goal name="setup-exist" description="PUT documents in eXist">
         <echo>Configuring eXist entries</echo>
        <copy todir="${temporary.dir}/exist-entries" filtering="true">
                <fileset dir="exist-entries">
                        <include name="**/*.xml" />
                </fileset>
        </copy>
        <!-- now upload each one -->
        <pathconvert property="entries" pathsep=" ">
                <path>
                        <fileset dir="${temporary.dir}/exist-entries"/>
            </path>
        </pathconvert>
        <util:tokenize var="entryList" delim=" ">${entries}</util:tokenize>
        <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
                <j:set var="collpath" value="${temporary.dir}/exist-entries"/>
        <j:forEach var="entry" items="${entryList}">
          <echo>${entry}</echo>
          <j:catch>
                        <util:file name="${entry}"  var="xmlentry" />
                        <jxml:parse xml="${xmlentry}" var="xmlbody" />

                        <echo>${existurl}/${entry.substring(collpath.length())}</echo>
                        <j:set var="existtempurl" value="${existurl}${entry.substring(collpath.length())}"/>
                    <util:replace oldChar="\" newChar="/" var="existputurl">${existtempurl}</util:replace>
                    <echo>${existputurl}</echo>
                <http:put var="xmlexist" uri="${existputurl}">
                <header name="Content-Type" value="text/xml"/>
                <http:body>
                                        <jxml:copyOf select="$xmlbody" />
                </http:body>
                        </http:put>
                <echo>${xmlexist.statusCode}</echo>
          </j:catch>
        </j:forEach>
        <echo>Finsihed setting up eXist</echo>

</goal>

<goal name="setup-registry" description="populate the registry">
        <echo>Configuring Registry</echo>
        <!-- expand tokens -->
        <copy todir="${temporary.dir}/registry-entries" filtering="true">
                <fileset dir="registry-entries">
                        <include name="**/*.xml" />
                </fileset>
        </copy>
        <!-- now upload each one -->
        <pathconvert property="entriesr" pathsep=" ">
                <path>
                        <fileset dir="${temporary.dir}/registry-entries"/>
                </path>
        </pathconvert>
            <util:tokenize var="entryListr" delim=" ">${entriesr}</util:tokenize>
          <j:catch>
            <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
            <ant target="register" antfile="register.xml" >
        `       <property name="registry.entry" value="${temporary.dir}/registry-entries/ARegistry.xml"/>
            </ant>
          </j:catch>
                <waitfor maxwait="10" maxwaitunit="second" checkevery="500">
                <http url="${tomcat.url}/exist/xmldb/db/?xpath=%2F%2F*%3AResource%5B*%3AIdentifier%2F*%3AResourceKey%2Ftext%28%29+%3D+%27org.astrogrid.registry.RegistryService%27%5D"/>
                </waitfor>

        <j:forEach var="entryr" items="${entryListr}">
          <j:catch>
            <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
            <ant target="register" antfile="register.xml" >
        `       <property name="registry.entry" value="${entryr}"/>
            </ant>
          </j:catch>
        </j:forEach>
</goal>
<!--+
    | Unpack our Community install toolkit.
    +-->
<goal name="community-toolkit">
        <echo message=""/>
        <echo message="Installing community toolkit ...."/>
        <!--+
            | Unpack our toolkit.
            +-->
        <unzip src="${temporary.dir}/astrogrid-community-install-${pom.currentVersion}.zip" dest="${temporary.dir}/community"/>
        <!--+
            | Set the community ident.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="org.astrogrid.community.ident"
                value="${registry.authorityid}"/>
        </propertyfile>
</goal>

<!--+
    | Initialise our Community database.
    +-->
<goal name="community-database">
        <echo message=""/>
        <echo message="Installing community database ...."/>
        <!--+
            | Wait for our service to respond.
            +-->
        <attainGoal name="community-wait"/>
        <!--+
            | Reset our database tables.
            +-->
        <j:catch>
        <ant
            target="database.reset"
            dir="${temporary.dir}/community"
            antfile="${temporary.dir}/community/install.xml"
            />
        </j:catch>
        <!--+
            | Load our database tables.
            +-->
        <j:catch>
        <ant
            target="database.load"
            dir="${temporary.dir}/community"
            antfile="${temporary.dir}/community/install.xml"
            />
         </j:catch>
</goal>

<!--+
    | Register the Community.
    +-->
<goal name="community-register">
        <echo message=""/>
        <echo message="Registering community service ...."/>
        <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
        <echo message=""/>
        <!--+
            | Set the community ident.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="org.astrogrid.community.ident"
                value="${registry.authorityid}"/>
        </propertyfile>
        <!--+
            | Set the registry endpoint.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="org.astrogrid.registry.url"
                value="${tomcat.url}//astrogrid-registry-${pom.currentVersion}/services/Registry"/>
        </propertyfile>
        <!--+
            | Set the registry admin endpoint.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="org.astrogrid.registry.admin"
                value="${tomcat.url}//astrogrid-registry-${pom.currentVersion}/services/RegistryUpdate"/>
        </propertyfile>
        <!--+
            | Set the local hostname.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="service.host"
                value="${tomcat.host}"/>
        </propertyfile>
        <!--+
            | Wait for our service to respond.
            +-->
        <attainGoal name="community-wait"/>
        <!--+
            | Register our service.
            +-->
        <j:catch>
        <ant
            target="service.register"
            dir="${temporary.dir}/community"
            antfile="${temporary.dir}/community/install.xml"
            />
         </j:catch>
</goal>
<!--+
    | Wait for the Community service to respond.
    +-->
<goal name="community-wait">
    <echo message="Waiting for Community webapp .."/>
    <echo message="  URL : ${tomcat.url}/astrogrid-community/happyaxis.jsp"/>
    <waitfor maxwait="10" maxwaitunit="second" checkevery="500">
        <http url="${tomcat.url}/astrogrid-community"/>
    </waitfor>
</goal>

<!--+
    | Upload a Registry Entry to the local service.
    +-->
<goal name="registry.upload.test">
    <echo message="Uploading Registry Entry .."/>
    <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
    <echo message=""/>

    <ant
        target="register"
        antfile="register.xml"
        >
        <property name="registry.entry" value="tmp/community/config/service/policy.manager.xml"/>
        </ant>
</goal>

<!-- pregoals ///////////////////////////////////////////////////////////////////////////////////////////////// -->

  <preGoal name="java:compile">
     <mkdir dir="${basedir}/target/classes" />     <!-- Clover fails if this dir is not present -->
  </preGoal>

  <preGoal name="test:test-resources">
        <attainGoal name="copy-test-resources" />
  </preGoal>

  <goal name="copy-test-resources" description="takes a copy of the config, puts it on the classpath for the test classes to find">
          <echo>Copying global config file across to the client / test code</echo>
          <copy file="webapps/astrogrid-configuration/AstroGridConfig.properties" tofile="test/java/astrogrid.properties" filtering="true" overwrite="true" />
  </goal>


<goal name="run-scripting-gui" description="don't call directly - use scripting-gui goal">
        <mkdir dir="${temporary.dir}/client" />
        <copy todir="${temporary.dir}/client" filtering="true">
                <fileset dir="webapps/astrogrid-configuration" />
        </copy>
        <!-- classname="org.mozilla.javascript.tools.shell.Main" for command-line version -->
        <java classname="org.mozilla.javascript.tools.debugger.Main"
                fork="true" classpathref="maven.dependency.classpath"
                dir="${temporary.dir}/client">
        </java>
</goal>




<!-- deployment //////////////////////////////////////////////////////////////////////// -->

<goal name="common-libs-deploy" description="copy db drivers, etc into shared directory">
        <echo message="Tomcat common : ${tomcat.common.lib.dir}"/>
        <copy verbose="true" todir="${tomcat.common.lib.dir}">
                <fileset dir="${temporary.dir}">
                        <include name="hsql*.jar" />
                        <include name="mail*.jar" />
                        <!-- may need to add more here later -->
                </fileset>
        </copy>
</goal>

<!-- hand assembled webapps ///////////////////////////////////////-->
<goal name="configuration-deploy" description="create and install configuration webapp">
        <copy todir="${temporary.dir}/astrogrid-configuration" filtering="true">
                <fileset dir="webapps/astrogrid-configuration" />
        </copy>
        <jar destfile="${temporary.dir}/${config.webapp.name}.war" basedir="${temporary.dir}/astrogrid-configuration">
        </jar>
        <j:catch>
                <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                        path="/${config.webapp.name}" war="file:///${temporary.dir}/${config.webapp.name}.war" />
        </j:catch>
</goal>

<!-- need a webspace store for myspace?? - this is a first stab -->
<goal name="myspace-store-deploy">
        <copy todir="${temporary.dir}/myspace-store" filtering="true">
                <fileset dir="webapps/myspace-store" />
        </copy>
        <jar destfile="${temporary.dir}/myspace-store.war" basedir="${temporary.dir}/myspace-store">
        </jar>
        <j:catch>
                <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                        path="/myspace-store" war="file:///${temporary.dir}/myspace-store.war" />
        </j:catch>
</goal>

<!-- context- driven webapps ////////////////////////////////-->
<goal name="jes-deploy">
        <copy todir="${temporary.dir}/jes" filtering="true">
                <fileset dir="contexts/jes" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-jes-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/jes"/>
        </war>
   <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-jes-${pom.currentVersion}" war="file:///${temporary.dir}/astrogrid-jes-${pom.currentVersion}.war"/>
  </j:catch>
</goal>

<goal name="cea-server-deploy"  prereqs="tomcat-declare-tasks" >
        <copy todir="${temporary.dir}/cea-server" filtering="true">
                <fileset dir="contexts/cea-server" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-cea-server-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/cea-server"/>
        </war>
   <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-cea-server-${pom.currentVersion}" war="file:///${temporary.dir}/astrogrid-cea-server-${pom.currentVersion}.war"/>
   </j:catch>
</goal>

<goal name="cea-commandline-deploy"  prereqs="tomcat-declare-tasks" >
        <copy todir="${temporary.dir}/cea-commandline" filtering="true">
                <fileset dir="contexts/cea-commandline" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-cea-commandline-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/cea-commandline"/>
        </war>
   <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-cea-commandline-${pom.currentVersion}" war="file:///${temporary.dir}/astrogrid-cea-commandline-${pom.currentVersion}.war"/>
   </j:catch>
</goal>

<goal name="cea-http-deploy"  prereqs="tomcat-declare-tasks" >
        <copy todir="${temporary.dir}/cea-http" filtering="true">
                <fileset dir="contexts/cea-http" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-cea-http-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/cea-http"/>
        </war>
   <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-cea-http-${pom.currentVersion}" war="file:///${temporary.dir}/astrogrid-cea-http-${pom.currentVersion}.war"/>
   </j:catch>
</goal>


<goal name="reg-deploy" >
        <copy todir="${temporary.dir}/registry" filtering="true">
                <fileset dir="contexts/registry" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-registry-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/registry"/>
        </war>
  <j:catch>
          <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-registry-${pom.currentVersion}" war="file:///${temporary.dir}/astrogrid-registry-${pom.currentVersion}.war"/>
  </j:catch>
  <j:catch>
          <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/exist" war="file:///${temporary.dir}/astrogrid-exist-${pom.currentVersion}.war"/>
  </j:catch>
</goal>

<goal name="myspace-deploy" >
        <copy todir="${temporary.dir}/myspace" filtering="true">
                <fileset dir="contexts/myspace" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-mySpace-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/myspace"/>
        </war>
  <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-mySpace-${pom.currentVersion}" war="file:///${temporary.dir}/astrogrid-mySpace-${pom.currentVersion}.war"/>
  </j:catch>
</goal>

<goal name="filestore-deploy" >
        <copy todir="${temporary.dir}/filestore" filtering="true">
                <fileset dir="contexts/filestore"/>
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-filestore-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/filestore"/>
        </war>
  <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-filestore-${pom.currentVersion}" war="file:///${temporary.dir}/astrogrid-filestore-${pom.currentVersion}.war"/>
  </j:catch>
</goal>

<goal name="pal-deploy" >
        <copy todir="${temporary.dir}/pal" filtering="true">
                <fileset dir="contexts/pal" />
        </copy>
        <war update="true" destfile="${temporary.dir}/pal-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/pal"/>
        </war>
  <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-${pom.currentVersion}" war="file:///${temporary.dir}/pal-${pom.currentVersion}.war"/>
  </j:catch>
</goal>

<goal name="pal-fits-deploy" >
                <copy file="${temporary.dir}/pal-${pom.currentVersion}.war"
                      tofile="${temporary.dir}/pal-fits-${pom.currentVersion}.war" />
        <copy todir="${temporary.dir}/pal_fits" filtering="true">
                <fileset dir="contexts/pal_fits" />
        </copy>
        <war update="true" destfile="${temporary.dir}/pal-fits-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/pal_fits"/>
        </war>
  <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-fits-${pom.currentVersion}" war="file:///${temporary.dir}/pal-fits-${pom.currentVersion}.war"/>
  </j:catch>
</goal>

<goal name="pal-sec-deploy" >
                <copy file="${temporary.dir}/pal-${pom.currentVersion}.war"
                      tofile="${temporary.dir}/pal-sec-${pom.currentVersion}.war" />
        <copy todir="${temporary.dir}/pal_sec" filtering="true">
                <fileset dir="contexts/pal_sec" />
        </copy>
        <war update="true" destfile="${temporary.dir}/pal-sec-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/pal_sec"/>
        </war>
  <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-sec-${pom.currentVersion}" war="file:///${temporary.dir}/pal-sec-${pom.currentVersion}.war"/>
  </j:catch>
</goal>

<goal name="portal-deploy">
        <copy todir="${temporary.dir}/portal" filtering="true">
                <fileset dir="contexts/portal" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-portal-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/portal" />
        </war>
   <j:catch>
        <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/astrogrid-portal" war="file:///${temporary.dir}/astrogrid-portal-${pom.currentVersion}.war" />
   </j:catch>
</goal>


<goal name="community-deploy">
        <copy todir="${temporary.dir}/community" filtering="true">
                <fileset dir="contexts/community" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-community-${pom.currentVersion}.war">
                <metainf dir="${temporary.dir}/community"/>
        </war>
    <j:catch>
        <tomcat-deploy
            url="${tomcat.manager.url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/astrogrid-community-${pom.currentVersion}" war="file:///${temporary.dir}/astrogrid-community-${pom.currentVersion}.war"/>
    </j:catch>
</goal>





<!-- undeploy ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<goal name="reg-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-registry-${pom.currentVersion}" />
  </j:catch>
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/exist" />
  </j:catch>
</goal>

<goal name="myspace-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-mySpace-${pom.currentVersion}" />
  </j:catch>
</goal>

<goal name="filestore-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-filestore-${pom.currentVersion}" />
  </j:catch>
</goal>

<goal name="cea-server-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-cea-server-${pom.currentVersion}" />
  </j:catch>
</goal>
<goal name="cea-commandline-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-cea-commandline-${pom.currentVersion}" />
  </j:catch>
</goal>
<goal name="cea-http-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-cea-http-${pom.currentVersion}" />
  </j:catch>
</goal>
<goal name="jes-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-jes-${pom.currentVersion}" />
  </j:catch>
</goal>


<goal name="pal-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-${pom.currentVersion}" />
  </j:catch>
</goal>

<goal name="pal-fits-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-fits-${pom.currentVersion}" />
  </j:catch>
</goal>

<goal name="pal-sec-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-sec-${pom.currentVersion}" />
  </j:catch>
</goal>


<goal name="configuration-undeploy" >
  <j:catch>
        <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/astrogrid-autoconfiguration" />
  </j:catch>
</goal>
<goal name="myspace-store-undeploy" >
  <j:catch>
        <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/myspace-store" />
  </j:catch>
</goal>

<goal name="portal-undeploy">
  <j:catch>
        <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/astrogrid-portal" />
  </j:catch>
</goal>

<goal name="community-undeploy" >
  <j:catch>
    <tomcat-remove
        url="${tomcat.manager.url}"
        username="${tomcat.manager.username}"
        password="${tomcat.manager.password}"
        path="/astrogrid-community-${pom.currentVersion}" />
  </j:catch>
</goal>

<goal name="CLEANTOMCAT" description="run this to clean out tomcat directories if tomcat not running">
        <delete includeEmptyDirs="true" defaultexcludes="false" >
                <fileset dir="${tomcat.location}/webapps" >
                        <include name="astrogrid-*/**"/>
                        <include name="exist*/**"/>
           </fileset>
                <fileset dir="${tomcat.location}/work/Catalina/localhost" >
                        <include name="*/**"/>
           </fileset>
                <fileset dir="${tomcat.location}/conf/Catalina/localhost" >
                        <include name="astrogrid-*.xml"/>
           </fileset>
                <fileset dir="${tomcat.location}/logs" >
                        <include name="*"/>
           </fileset>
        </delete>
</goal>


<!-- extra reports - full junit report, annotated with regression info.-->
<postGoal name="maven-junit-report-plugin:report">
        <attainGoal name="full-junit-report" />
        <attainGoal name="produce-baseline-summary" />
        <attainGoal name="annotate-report" />
        <attainGoal name="style-full-report" />
</postGoal>
<goal name="full-junit-report">
        <mkdir dir="${basedir}/target/docs/junit-full" />
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <junitreport todir="${basedir}/target">
                <fileset dir="${basedir}/target/test-reports">
                        <include name="TEST-*.xml" />
                </fileset>
        </junitreport>
</goal>

<goal name="style-full-report">
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <style basedir="${basedir}/target/" destdir="${basedir}/target/docs/junit-full" style="${basedir}/build/junit-frames.xsl">
                <include name="TESTS-TestSuites-Annotated.xml" />
                <param name="output.dir" expression="${basedir}/target/docs/junit-full" />
        </style>

      <!-- now the workflow documents-->
      <j:catch>
      <style basedir="${basedir}/target/docs/junit-full" destdir="${basedir}/target/docs/junit-full"
        style="${basedir}/build/workflow.xsl">
                <include name="**/*-workflow.xml" />
        </style>
        </j:catch>

</goal>


<goal name="produce-baseline-summary" description="generate summary test report, which could be used as a baseline for future tests">
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
       <!-- define summarizing stylesheet inline - handy!-->
        <jsl:stylesheet var="summarize" >
                <jsl:template match="/">
                        <testsuites>
                        <baseline-summary>
                                <baseline-name>GeneratedSummary</baseline-name>
                                <baseline-description>to fill in</baseline-description>
                                <j:new var="now" className="java.util.Date" />
                                <when>${now}</when>
                                <j:invokeStatic var="where" className="java.net.InetAddress" method="getLocalHost" />
                                <where>${where}</where>
                                <j:invokeStatic var="who" className="java.lang.System" method="getProperty">
                                        <j:arg value="user.name" />
                                </j:invokeStatic>
                                <who>${who}</who>
                                <project-name>auto-integration</project-name>
                                <project-version>${pom.currentVersion}</project-version>
                                <total-tests><jxml:expr select="sum(//testsuite/@tests)" /></total-tests>
                                <total-errors><jxml:expr select="sum(//testsuite/@errors) + sum(//testsuite/@failures)"/></total-errors>
                        </baseline-summary>
                        <jsl:applyTemplates select="//testsuite" />
                        </testsuites>
                </jsl:template>

                <jsl:template match="testsuite">
                        <jxml:element name="testsuite">
                              <jxml:attribute name="name"><jxml:expr select="@name"/></jxml:attribute>
                             <jxml:attribute name="package"><jxml:expr select="@package"/></jxml:attribute>
                             <jxml:attribute name="tests"><jxml:expr select="@tests"/></jxml:attribute>
                             <jxml:attribute name="failures"><jxml:expr select="@failures + @errors"/></jxml:attribute>
                             <jsl:applyTemplates select="testcase" />
                        </jxml:element>
                </jsl:template>

                <jsl:template match="testcase">
                        <jxml:element name="testcase">
                                <jxml:attribute name="name"><jxml:expr select="@name" /></jxml:attribute>
                                <jxml:attribute name="failure"><jxml:expr select="count(failure) + count(error)" /></jxml:attribute>
                        </jxml:element>
                </jsl:template>
        </jsl:stylesheet>
        <echo>Producing summary from current test results</echo>
        <!-- read in input file -->
        <jxml:parse var="allSuites" xml="target/TESTS-TestSuites.xml"/>
        <!-- apply stylesheet -->
        <j:file name="${basedir}/target/regression-baseline-summary.xml"><!-- add date here -->
         <jsl:style stylesheet="${summarize}" select="$allSuites" />
        </j:file>
</goal>

<goal name="annotate-report" description="add details from saved baseines into current test results">
        <echo>annotating test report with previous baselines</echo>
        <!-- take a copy to start -->
        <copy file="${basedir}/target/TESTS-TestSuites.xml" tofile="${basedir}/target/TESTS-TestSuites-Annotated.xml" overwrite="true"/>
        <fileScanner var="files">
                <fileset dir="${basedir}/baselines">
                        <include name="*.xml" />
                </fileset>
        </fileScanner>
        <j:forEach var="baselineFile" items="${files.iterator()}">
                <echo>Merging baseline ${baselineFile}</echo>
                <!-- parse this document in -->
                <!-- read in baseline file -->
                <jxml:parse var="baseline" xml="${baselineFile}" />

                <j:set var="baselineName"><jxml:expr select="$baseline/testsuites/baseline-summary/baseline-name" /></j:set>
                <echo>Baseline '${baselineName}' defined in ${baselineFile}</echo>
                <!-- define stylesheet -->
                <jsl:stylesheet var="annotate">
                        <jsl:template match="testsuites">
                                <jxml:copy select=".">
                                        <jxml:copyOf select="$baseline/testsuites/baseline-summary" />
                                        <jsl:applyTemplates select="testsuite|baseline-summary"/>
                                </jxml:copy>
                        </jsl:template>
                        <jsl:template match="testsuite">
                                <jxml:copy select=".">
                                        <jxml:set var="currentSuite" select="." />
                                        <jxml:set var="suiteSummary" select="$baseline/testsuites/testsuite[@name=$currentSuite/@name and @package=$currentSuite/@package" />

                                          <jxml:element name="baseline">
                                                <jxml:attribute name="name">${baselineName}</jxml:attribute>
                                                <jxml:attribute name="tests"><jxml:expr select="$suiteSummary/@tests"/></jxml:attribute>
                                                <jxml:attribute name="failures"><jxml:expr select="$suiteSummary/@failures"/></jxml:attribute>
                                          </jxml:element>
                                        <jsl:applyTemplates select="testcase|baseline|properties|system-err|system-out"/>
                                </jxml:copy>
                        </jsl:template>
                        <jsl:template match="testcase">
                                <jxml:copy select=".">
                                        <jxml:set var="currentTest" select="." />
                                        <jxml:set var="testSummary" select="$suiteSummary/testcase[@name=$currentTest/@name]"/>
                                        <jxml:element name="baseline">
                                                <jxml:attribute name="name">${baselineName}</jxml:attribute>
                                                <jxml:attribute name="failure"><jxml:expr select="$testSummary/@failure"/></jxml:attribute>
                                        </jxml:element>
                                        <jsl:applyTemplates select="error|failure|baseline"/>
                                </jxml:copy>
                        </jsl:template>

                        <jsl:template match="properties|error|failure|baseline|baseline-summary"><!-- pass through.. -->
                                <jxml:copyOf select="." />
                        </jsl:template>
                        <jsl:template match="system-err"><!-- need special handling to preserve markup -->
                                <system-err><jxml:expr select="." /></system-err>
                        </jsl:template>
                        <jsl:template match="system-out"><!-- need special handling to preserve markup -->
                                <system-out><jxml:expr select="." /></system-out>
                        </jsl:template>
                </jsl:stylesheet>
                <!-- read in intput file -->
                <jxml:parse var="allSuites" xml="target/TESTS-TestSuites-Annotated.xml" />
                <!-- apply stylesheet -->
                <j:file name="${basedir}/target/processed-TESTS-TestSuites-Annotated.xml">
                        <jsl:style stylesheet="${annotate}" select="$allSuites" />
                </j:file>
                <!-- move new file back to original copy -->
                <move file="${basedir}/target/processed-TESTS-TestSuites-Annotated.xml"
                        tofile="${basedir}/target/TESTS-TestSuites-Annotated.xml" overwrite="true"/>
        </j:forEach>
</goal>

<!-- boilerplate below here /////////////////////////////////////////////////////////////////////////////////////////////-->

  <goal name="axis-declare-tasks">
     <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>

<!-- tomcat tools -->
<goal name="tomcat-declare-tasks">
   <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="tomcat-deploy"    classname="org.apache.catalina.ant.DeployTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-install"   classname="org.apache.catalina.ant.InstallTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-list"      classname="org.apache.catalina.ant.ListTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-reload"    classname="org.apache.catalina.ant.ReloadTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-remove"    classname="org.apache.catalina.ant.RemoveTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-roles"     classname="org.apache.catalina.ant.RolesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-start"     classname="org.apache.catalina.ant.StartTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-stop"      classname="org.apache.catalina.ant.StopTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpathref="maven.dependency.classpath"/>
</goal>


    <goal name="frog">
        <!--+
            | Clean out the target directory.
            +-->
        <attainGoal name="clean:clean"/>
        <!--+
            | Initialise the integration env.
            +-->
        <attainGoal name="init"/>
        <!--+
            | Deploy our components.
            +-->
        <attainGoal name="common-libs-deploy"/>
        <attainGoal name="configuration-deploy"/>
        <attainGoal name="reg-deploy"/>
        <attainGoal name="myspace-deploy"/>
        <attainGoal name="filestore-deploy"/>
        <attainGoal name="community-toolkit"/>
        <attainGoal name="setup-working-dir"/>
        <attainGoal name="setup-registry"/>
        <attainGoal name="setup-filestore"/>
        <attainGoal name="setup-myspace"/>
        <!--+
            | Run the integration tests.
            +-->
        <attainGoal name="int-test"/>
    </goal>

    <goal name="toad">
        <!--+
            | Clean out the target directory.
            +-->
        <attainGoal name="clean:clean"/>
        <!--+
            | Initialise the integration env.
            +-->
        <attainGoal name="init"/>
        <!--+
            | Deploy our components.
            +-->
        <attainGoal name="deploy-all"/>
        <!--+
            | Run the integration tests.
        <attainGoal name="int-test"/>
        <attainGoal name="astrogrid-build-site"/>
            +-->
        <attainGoal name="int-test"/>
    </goal>
</project>
