<?xml version="1.0" ?>

<!-- to use:
  check that tomcat is 'clean' and running - ie has no astrogrid components
  installed that will interfere with the deployment (use maven undeploy-all then
  manually check that it's worked).

   Run 'maven deploy-all'.  If it completes successfully, run 'maven int-test'.

   The deployer checks the astrogrid repository and your local one as normal to find the latest wars to
   deploy, so if you have local changes to a component you will need to rebuild that component separately.
   When the auto builds happen, the astrogrid repository version will become 'newer' and you will need to
   rebuild your locally changed component.
   Alternatively, run this script with the -o switch which instructs maven to build offline
   -->

<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:maven="jelly:maven" xmlns:util="jelly:util" xmlns:deploy="deploy" default="jar:jar">


<property name="tomcat.host" value="localhost"/>
<property name="tomcat.port" value="8080"/>
<property name="tomcat.url" value="http://${tomcat.host}:${tomcat.port}"/>
<property name="tomcat.manager.url" value="${tomcat.url}/manager"/>

<!-- other, non-configurable properties -->

<!-- temp dir - used for mangling files, etc -->
<property name="temporary.dir" location="${basedir}/tmp" />
<property name="config.webapp.name" value="astrogrid-configuration" />

        <j:if test="${context.getVariable('registry.authorityid') == null}">
                <j:set var="registry.authorityid" value="org.astrogrid.localhost"/>
        </j:if>

        <!-- tokens to subst into config files -->
        <filter token="WORKDIR" value="${work.dir}" />
        <filter token="CONFIGPATH" value="${tomcat.url}/${config.webapp.name}" />
        <filter token="TOMCATROOT" value="${tomcat.url}" />
        <filter token="TOMCATLOC" value="${tomcat.location}" />
        <filter token="REGAUTHORITY" value="${registry.authorityid}" />

<!-- setup -->
<goal name="init" prereqs="tomcat-declare-tasks">
                <echo>AuthorityID used: ${registry.authorityid}</echo>
        <delete dir="${temporary.dir}" />
        <mkdir dir="${temporary.dir}" />
        <deploy:copy-deps todir="${temporary.dir}" />
</goal>

<!-- main goals //////////////////////////////////////////////////////////////////////////////////// -->
<goal name="cycle"
 description="deprecated: timing issues. call undeploy-all, deploy-all, setup, int-test by hand.">
         <echo>Deprecated: problems with timing / memory load. call undeploy-all, deploy-all, int-test by hand individually</echo>
        <attainGoal name="undeploy-all" />
        <attainGoal name="deploy-all" />
        <attainGoal name="int-test" />
 </goal>

<goal name="deploy-all" prereqs="init" description="deploy all webapps, setup environment.">
        <echo>*** Deploying all webapps...</echo>
        <attainGoal name="common-libs-deploy" />
        <attainGoal name="configuration-deploy" />
        <sleep seconds="2" />
        <attainGoal name="myspace-store-deploy" />
        <sleep seconds="2" />
        <attainGoal name="reg-deploy" />
        <sleep seconds="4" />
        <attainGoal name="jes-deploy" />
        <sleep seconds="2" />
        <attainGoal name="apps-deploy" />
        <sleep seconds="2" />
        <attainGoal name="myspace-deploy" />
        <sleep seconds="2" />
        <attainGoal name="pal-deploy" />
        <sleep seconds="2" />
        <attainGoal name="community-deploy"/>
        <sleep seconds="2" />
        <attainGoal name="portal-deploy" />
        <sleep seconds="4" />
        <attainGoal name="setup" />
</goal>

<goal name="undeploy-all" prereqs="init" description="undeploy all webapps">
        <echo>*** Undeploying all webapps...</echo>
        <attainGoal name="configuration-undeploy" />
        <attainGoal name="myspace-store-undeploy" />
        <attainGoal name="jes-undeploy" />
        <attainGoal name="apps-undeploy" />
        <attainGoal name="reg-undeploy" />
        <attainGoal name="myspace-undeploy" />
        <attainGoal name="pal-undeploy" />
        <attainGoal name="community-undeploy" />
        <attainGoal name="portal-undeploy" />
</goal>

<goal name="list" prereqs="init" description="list deployed webapps">
        <tomcat-list url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" />
</goal>


<goal name="int-test" description="run integration tests">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="test" />
</goal>

<goal name="eclipse-int-test" description="Generate eclipse files for the tests">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="eclipse" />
</goal>

<goal name="astrogrid-build-site" description="Build the site docs for the test project">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="site" />
</goal>

<goal name="astrogrid-deploy-site" description="Deploy the site docs for the test project" >
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="site:deploy" />
</goal>

<goal name="ui-int-test"  description="run integration tests in ui runner">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="test:ui" />
</goal>

<goal name="scripting-gui"  description="run javascript gui">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="run-scripting-gui" />
</goal>

<goal name="style-workflows" description="apply presentation stylesheet to all workflows">
                  <!--declare the transformer factory to use -->
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <xslt style="${basedir}/build/workflow.xsl" destdir="${work.dir}/styled-workflows" basedir="${work.dir}/jes" />
</goal>

<!-- Working direcotry //////////////////////////////////////////////////////////////////////////////////////////////// -->

<goal name="setup" description="configure webapps and working dir">
        <echo>*** Configuring...</echo>
        <attainGoal name="community-toolkit"/>
        <attainGoal name="setup-working-dir" />
        <attainGoal name="setup-registry" />
        <attainGoal name="community-database"/>
        <attainGoal name="community-register"/>
        <attainGoal name="setup-applications" />
        <attainGoal name="setup-myspace" />
        <!--Finally kick the CommonExecutionController to register itself-->
        <http url="${tomcat.url}/astrogrid-applications-SNAPSHOT/servlet/initForRegistry"/>

</goal>

<goal name="setup-working-dir" description="create working dir, copy across templates">
        <echo>Setting up working directory</echo>
        <mkdir dir="${work.dir}" />
        <copy todir="${work.dir}" overwrite="true" filtering="true">
                <fileset dir="work" />
        </copy>
        <!-- make everything world-accessible - necessary as tomcat may be running as different user to
        whoever is executing this script -->
        <chmod file="${work.dir}" perm="a+rwx" type="dir"/>
        <chmod dir="${work.dir}" perm="a+rwx" type="dir">
                <include name="**/*" />
        </chmod>
        <chmod dir="${work.dir}" perm="a+rw" type="file">
                <include name="**/*" />
        </chmod>
</goal>

<goal name="setup-applications" description="setup specific to applications">
        <echo>Configuring Applications</echo>
        <!-- make all scripts executable -->
        <chmod dir="${work.dir}/applications" perm="a+x">
                <include name="*.sh" />
        </chmod>
        <!-- initialize database : no need, db contents should be stored as a template really.-->
        <sql driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:${work.dir}/applications/application-db"
             classpathref="maven.dependency.classpath"
             userid="sa" password="" print="true"
            ><![CDATA[
        DROP TABLE exestat IF EXISTS ;
        CREATE TABLE exestat
                    (
    executionId      INTEGER IDENTITY,
    jobstepId    VARCHAR ,
    program      VARCHAR ,
    starttime        DATETIME DEFAULT 'now',
    params         VARCHAR,
    endtime TIMESTAMP,
    status  VARCHAR
            ) ;
           ]]></sql>
</goal>

<goal name="setup-myspace" description="myspace setup">
        <echo>Configuring Myspace</echo>
</goal>

<goal name="setup-community" description="Community setup">
</goal>

<goal name="setup-registry" description="populate the registry">
        <echo>Configuring Registry</echo>
        <!-- expand tokens -->
        <copy todir="${temporary.dir}/registry-entries" filtering="true">
                <fileset dir="registry-entries">
                        <include name="**/*.xml" />
                </fileset>
        </copy>
        <!-- now upload each one -->
        <pathconvert property="entries" pathsep=" ">
                <path>
                        <fileset dir="${temporary.dir}/registry-entries"/>
                </path>
        </pathconvert>
            <util:tokenize var="entryList" delim=" ">${entries}</util:tokenize>
          <j:catch>
            <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
            <ant target="register" antfile="register.xml" >
        `       <property name="registry.entry" value="${temporary.dir}/registry-entries/ARegistry.xml"/>
            </ant>
          </j:catch>            
		<waitfor maxwait="10" maxwaitunit="second" checkevery="500">
        	<http url="${tomcat.url}/exist/xmldb/db/?xpath=%2F%2F*%3AResource%5B*%3AIdentifier%2F*%3AResourceKey%2Ftext%28%29+%3D+%27org.astrogrid.registry.RegistryService%27%5D"/>
		</waitfor>
            
        <j:forEach var="entry" items="${entryList}">
          <j:catch>
            <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
            <ant target="register" antfile="register.xml" >
        `       <property name="registry.entry" value="${entry}"/>
            </ant>
          </j:catch>
        </j:forEach>
</goal>
<!--+
    | Unpack our Community install toolkit.
    +-->
<goal name="community-toolkit">
        <echo message=""/>
        <echo message="Installing community toolkit ...."/>
        <!--+
            | Unpack our toolkit.
            +-->
        <unzip src="${temporary.dir}/astrogrid-community-install-SNAPSHOT.zip" dest="${temporary.dir}/community"/>
        <!--+
            | Set the community ident.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="org.astrogrid.community.ident"
                value="${registry.authorityid}"/>
        </propertyfile>
</goal>

        <!--+
    | Initialise our Community database.
    +-->
<goal name="community-database">
        <echo message=""/>
        <echo message="Installing community database ...."/>
        <!--+
            | Wait for our service to respond.
            +-->
        <attainGoal name="community-wait"/>
        <!--+
            | Reset our database tables.
            +-->
        <j:catch>
        <ant
            target="database.reset"
            dir="${temporary.dir}/community"
            antfile="${temporary.dir}/community/install.xml"
            />
        </j:catch>
        <!--+
            | Load our database tables.
            +-->
        <j:catch>
        <ant
            target="database.load"
            dir="${temporary.dir}/community"
            antfile="${temporary.dir}/community/install.xml"
            />
         </j:catch>
</goal>

<!--+
    | Register the Community.
    +-->
<goal name="community-register">
        <echo message=""/>
        <echo message="Registering community service ...."/>
        <!--+
            | Fix the Maven JAXP properties.
            +-->
        <echo message="Fixing JAXP properties ...."/>
        <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
        <echo message=""/>
        <!--+
            | Set the community ident.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="org.astrogrid.community.ident"
                value="${registry.authorityid}"/>
        </propertyfile>
        <!--+
            | Set the registry endpoint.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="org.astrogrid.registry.url"
                value="${tomcat.url}//astrogrid-registry-SNAPSHOT/services/Registry"/>
        </propertyfile>
        <!--+
            | Set the registry admin endpoint.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="org.astrogrid.registry.admin"
                value="${tomcat.url}//astrogrid-registry-SNAPSHOT/services/RegistryAdmin"/>
        </propertyfile>
        <!--+
            | Set the local hostname.
            +-->
        <propertyfile
            file="${temporary.dir}/community/install.properties">
            <entry key="service.host"
                value="${tomcat.host}"/>
        </propertyfile>
        <!--+
            | Wait for our service to respond.
            +-->
        <attainGoal name="community-wait"/>
        <!--+
            | Register our service.
            +-->
        <j:catch>
        <ant
            target="service.register"
            dir="${temporary.dir}/community"
            antfile="${temporary.dir}/community/install.xml"
            />
         </j:catch>
</goal>
<!--+
    | Wait for the Community service to respond.
    +-->
<goal name="community-wait">
    <echo message="Waiting for Community webapp .."/>
    <echo message="  URL : ${tomcat.url}/astrogrid-community/happyaxis.jsp"/>
    <waitfor maxwait="10" maxwaitunit="second" checkevery="500">
        <http url="${tomcat.url}/astrogrid-community"/>
    </waitfor>
</goal>

<!--+
    | Upload a Registry Entry to the local service.
    +-->
<goal name="registry.upload.test">
    <echo message="Uploading Registry Entry .."/>

    <!--+
        | Fix the Maven JAXP properties.
        +-->
    <echo message="Fixing JAXP properties ...."/>
    <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
    <echo message=""/>

    <ant
        target="register"
        antfile="register.xml"
        >
        <property name="registry.entry" value="tmp/community/config/service/policy.manager.xml"/>
        </ant>
</goal>

<!-- pregoals ///////////////////////////////////////////////////////////////////////////////////////////////// -->

  <preGoal name="java:compile">
     <mkdir dir="${basedir}/target/classes" />     <!-- Clover fails if this dir is not present -->
  </preGoal>

  <preGoal name="test:test-resources">
            <echo>Copying global config file across to the client / test code</echo>
          <copy file="webapps/astrogrid-configuration/AstroGridConfig.properties" tofile="test/java/astrogrid.properties" filtering="true" overwrite="true" />
  </preGoal>


<goal name="run-scripting-gui" description="don't call directly - use scripting-gui goal">
        <mkdir dir="${temporary.dir}/client" />
        <copy todir="${temporary.dir}/client" filtering="true">
                <fileset dir="client-config" />
        </copy>
        <!-- classname="org.mozilla.javascript.tools.shell.Main" for command-line version -->
        <java classname="org.mozilla.javascript.tools.debugger.Main"
                fork="true" classpathref="maven.dependency.classpath"
                dir="${temporary.dir}/client">
        </java>
</goal>

<postGoal name="maven-junit-report-plugin:report">
        <attainGoal name="full-junit-report" />
</postGoal>
<goal name="full-junit-report">
        <mkdir dir="${basedir}/target/docs/junit-full" />
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <junitreport todir="${basedir}/target">
                <fileset dir="${basedir}/target/test-reports">
                        <include name="TEST-*.xml" />
                </fileset>
                <report format="frames" styledir="${basedir}/build" todir="${basedir}/target/docs/junit-full" />
        </junitreport>
</goal>


<!-- deployment //////////////////////////////////////////////////////////////////////// -->

<goal name="common-libs-deploy" description="copy db drivers, etc into shared directory">
        <echo message="Tomcat common : ${tomcat.common.lib.dir}"/>
        <copy verbose="true" todir="${tomcat.common.lib.dir}">
                <fileset dir="${temporary.dir}">
                        <include name="hsql*.jar" />
                        <!-- may need to add more here later -->
                </fileset>
        </copy>
</goal>

<!-- hand assembled webapps ///////////////////////////////////////-->
<goal name="configuration-deploy" description="create and install configuration webapp">
        <copy todir="${temporary.dir}/astrogrid-configuration" filtering="true">
                <fileset dir="webapps/astrogrid-configuration" />
        </copy>
        <jar destfile="${temporary.dir}/${config.webapp.name}.war" basedir="${temporary.dir}/astrogrid-configuration">
        </jar>
        <j:catch>
                <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                        path="/${config.webapp.name}" war="file:///${temporary.dir}/${config.webapp.name}.war" />
        </j:catch>
</goal>

<!-- need a webspace store for myspace?? - this is a first stab -->
<goal name="myspace-store-deploy">
        <copy todir="${temporary.dir}/myspace-store" filtering="true">
                <fileset dir="webapps/myspace-store" />
        </copy>
        <jar destfile="${temporary.dir}/myspace-store.war" basedir="${temporary.dir}/myspace-store">
        </jar>
        <j:catch>
                <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                        path="/myspace-store" war="file:///${temporary.dir}/myspace-store.war" />
        </j:catch>
</goal>

<!-- context- driven webapps ////////////////////////////////-->
<goal name="jes-deploy">
        <copy todir="${temporary.dir}/jes" filtering="true">
                <fileset dir="contexts/jes" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-jes-SNAPSHOT.war">
                <metainf dir="${temporary.dir}/jes"/>
        </war>
   <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-jes-SNAPSHOT" war="file:///${temporary.dir}/astrogrid-jes-SNAPSHOT.war"/>
  </j:catch>
</goal>

<goal name="apps-deploy"  prereqs="tomcat-declare-tasks" >
        <copy todir="${temporary.dir}/applications" filtering="true">
                <fileset dir="contexts/applications" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-applications-SNAPSHOT.war">
                <metainf dir="${temporary.dir}/applications"/>
        </war>
   <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-applications-SNAPSHOT" war="file:///${temporary.dir}/astrogrid-applications-SNAPSHOT.war"/>
   </j:catch>
</goal>

<goal name="reg-deploy" >
        <copy todir="${temporary.dir}/registry" filtering="true">
                <fileset dir="contexts/registry" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-registry-SNAPSHOT.war">
                <metainf dir="${temporary.dir}/registry"/>
        </war>
  <j:catch>
          <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-registry-SNAPSHOT" war="file:///${temporary.dir}/astrogrid-registry-SNAPSHOT.war"/>
  </j:catch>
  <j:catch>
          <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/exist" war="file:///${temporary.dir}/exist-inttest.war"/>
  </j:catch>
</goal>

<goal name="myspace-deploy" >
        <copy todir="${temporary.dir}/myspace" filtering="true">
                <fileset dir="contexts/myspace" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-mySpace-SNAPSHOT.war">
                <metainf dir="${temporary.dir}/myspace"/>
        </war>
  <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-mySpace-SNAPSHOT" war="file:///${temporary.dir}/astrogrid-mySpace-SNAPSHOT.war"/>
  </j:catch>
</goal>

<goal name="pal-deploy" >
        <copy todir="${temporary.dir}/pal" filtering="true">
                <fileset dir="contexts/pal" />
        </copy>
        <war update="true" destfile="${temporary.dir}/pal-SNAPSHOT.war">
                <metainf dir="${temporary.dir}/pal"/>
        </war>
  <j:catch>
  <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-SNAPSHOT" war="file:///${temporary.dir}/pal-SNAPSHOT.war"/>
  </j:catch>
</goal>

<goal name="portal-deploy">
        <copy todir="${temporary.dir}/portal" filtering="true">
                <fileset dir="contexts/portal" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-portal-SNAPSHOT.war">
                <metainf dir="${temporary.dir}/portal" />
        </war>
   <j:catch>
        <tomcat-deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/astrogrid-portal" war="file:///${temporary.dir}/astrogrid-portal-SNAPSHOT.war" />
   </j:catch>
</goal>


<goal name="community-deploy">
        <copy todir="${temporary.dir}/community" filtering="true">
                <fileset dir="contexts/community" />
        </copy>
        <war update="true" destfile="${temporary.dir}/astrogrid-community-webapp-SNAPSHOT.war">
                <metainf dir="${temporary.dir}/community"/>
        </war>
    <j:catch>
        <tomcat-deploy
            url="${tomcat.manager.url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/astrogrid-community" war="file:///${temporary.dir}/astrogrid-community-webapp-SNAPSHOT.war"/>
    </j:catch>
</goal>





<!-- undeploy ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<goal name="reg-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-registry-SNAPSHOT" />
  </j:catch>
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/exist" />
  </j:catch>
</goal>

<goal name="myspace-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-mySpace-SNAPSHOT" />
  </j:catch>
</goal>

<goal name="apps-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-applications-SNAPSHOT" />
  </j:catch>
</goal>

<goal name="jes-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-jes-SNAPSHOT" />
  </j:catch>
</goal>


<goal name="pal-undeploy" >
  <j:catch>
  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-SNAPSHOT" />
  </j:catch>
</goal>


<goal name="configuration-undeploy" >
  <j:catch>
        <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/astrogrid-configuration" />
  </j:catch>
</goal>
<goal name="myspace-store-undeploy" >
  <j:catch>
        <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/myspace-store" />
  </j:catch>
</goal>

<goal name="portal-undeploy">
  <j:catch>
        <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/astrogrid-portal" />
  </j:catch>
</goal>

<goal name="community-undeploy" >
  <j:catch>
    <tomcat-remove
        url="${tomcat.manager.url}"
        username="${tomcat.manager.username}"
        password="${tomcat.manager.password}"
        path="/astrogrid-community" />
  </j:catch>
</goal>

<!-- boilerplate below here /////////////////////////////////////////////////////////////////////////////////////////////-->

  <goal name="axis-declare-tasks">
     <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>

<!-- tomcat tools -->
<goal name="tomcat-declare-tasks">
   <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="tomcat-deploy"    classname="org.apache.catalina.ant.DeployTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-install"   classname="org.apache.catalina.ant.InstallTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-list"      classname="org.apache.catalina.ant.ListTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-reload"    classname="org.apache.catalina.ant.ReloadTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-remove"    classname="org.apache.catalina.ant.RemoveTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-roles"     classname="org.apache.catalina.ant.RolesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-start"     classname="org.apache.catalina.ant.StartTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-stop"      classname="org.apache.catalina.ant.StopTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpathref="maven.dependency.classpath"/>
</goal>

</project>
