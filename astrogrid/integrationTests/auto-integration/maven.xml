<?xml version="1.0" ?>
<!-- to use:
  check that tomcat is 'clean' and running - ie has no astrogrid components
  installed that will interfere with the deployment (use maven undeploy-all then
  manually check that it's worked).

   Run 'maven deploy-all'.  If it completes successfully, run 'maven int-test'.
   see also goal 'deploy-all-except-portal' - deploys backend components only

   The deployer checks the astrogrid repository and your local one as normal to find the latest wars to
   deploy, so if you have local changes to a component you will need to rebuild that component separately.
   When the auto builds happen, the astrogrid repository version will become 'newer' and you will need to
   rebuild your locally changed component.
   Alternatively, run this script with the -o switch which instructs maven to build offline
   -->

<!-- extension maven script -->
<project xmlns:j="jelly:core"
        xmlns:jsl="jelly:jsl"
        xmlns:jxml="jelly:xml"
        xmlns:maven="jelly:maven"
        xmlns:util="jelly:util"
        xmlns:deploy="deploy"
        xmlns:http="jelly:http"
                xmlns:define="jelly:define"
                xmlns:ag="org.astrogrid.deploy"
    default="jar:jar">

<j:import inherit="true" file="./mavendefinitions.xml"/>
<property environment="env"/>
        <!--use immutability in the next three lines...-->
<!-- this will not work on windows      <property name="tomcat.host" value="${env.HOSTNAME}"/> unix
        <property name="tomcat.host" value="${env.COMPUTERNAME}"/>  windows -->
<property name="tomcat.host" value="localhost"/><!--default-->
<property name="tomcat.port" value="8080"/>
<property name="tomcat.url" value="http://${tomcat.host}:${tomcat.port}"/>
<property name="tomcat.manager.url" value="${tomcat.url}/manager"/>
<property name="existurl" value="${tomcat.url}/exist/servlet/db"/>
<!-- properties that should be overridden when deploying real components -->
<property name="cea.app.id" value="testdsa" /><!--this is a property that will be set when installing a single cea application-->
<property name="cea.cmd.config" value="${work.dir}/cea/commandline/config/TestApplicationConfig.xml"/>
<property name="toolbasedir" value="${work.dir}/cea/commandline/work/" />
<property name="registry.exclusions" value="examples/**" />

<!--Context paths--> <!--remove these to a file?-->
<property name="aginab.jes.contextpath" value="/astrogrid-jes-SNAPSHOT"/>
<property name="aginab.filestore1.contextpath" value="/astrogrid-filestore-one-SNAPSHOT"/>
<property name="aginab.filemanager1.contextpath" value="/astrogrid-filemanager-one-SNAPSHOT"/>
<property name="aginab.filestore2.contextpath" value="/astrogrid-filestore-two-SNAPSHOT"/>
<property name="aginab.filemanager2.contextpath" value="/astrogrid-filemanager-two-SNAPSHOT"/>
<property name="aginab.portal.contextpath" value="/astrogrid-portal"/> <!--Do not change this one-->
<property name="aginab.registry.contextpath" value="/astrogrid-registry-SNAPSHOT"/>
<property name="aginab.ceajava.contextpath" value="/astrogrid-cea-server-SNAPSHOT"/>
<property name="aginab.ceacmdline.contextpath" value="/astrogrid-cea-commandline-SNAPSHOT"/>
<property name="aginab.ceahttp.contextpath" value="/astrogrid-cea-http-SNAPSHOT"/>

<!--Derived Properties that are used in more than one component-->
<!--Component URLs-->
<property name="aginab.jes.url" value="${tomcat.url}${aginab.jes.contextpath}/"/>
<property name="aginab.portal.url" value="${tomcat.url}${aginab.portal.contextpath}/"/>
<property name="aginab.registry.url" value="${tomcat.url}${aginab.registry.contextpath}/"/>

<!--Registry Keys and IVORNS-->
<property name="aginab.filemanager1.regkey" value="filemanager-one"/>
<property name="aginab.filemanager2.regkey" value="filemanager-two"/>

<property name="aginab.filestore1.regkey" value="filestore-one"/>
<property name="aginab.filestore1.ivorn" value="ivo://${registry.authorityid}/${aginab.filestore1.regkey}"/>
<property name="aginab.filestore2.regkey" value="filestore-two"/>
<property name="aginab.filestore2.ivorn" value="ivo://${registry.authorityid}/${aginab.filestore2.regkey}"/>		
<!--+
    | need to rationalize the use of the astrogrid.iteration - pah
    | better name would be astrogrid.release - i.e. it is intended to be SNAPSHOT for the current iteration and the iteration TAG for preious ones
    +-->
<j:if test="${empty(context.getVariable('astrogrid.iteration'))}">
    <j:set var="astrogrid.iteration" value="SNAPSHOT"/>
</j:if>
<property name="astrogrid.release" value="${astrogrid.iteration}"/>
<!--+
    | Please avoid using 'version' it is already set by the Java VM.
<property name="version" value="${astrogrid.iteration}"/>
    +-->
<!-- name of the smtp mail server to use -->
<property name="mailhost" value="localhost" />
<!-- where the root to the registry services is -->
<property name="registry.endpoint" value="${tomcat.url}/astrogrid-registry-${astrogrid.iteration}/services/Registry"/>
<!-- other, non-configurable properties -->

<!-- temp dir - used for mangling files, etc -->
<property name="temporary.dir" location="${basedir}/tmp" />
<property name="config.webapp.name" value="astrogrid-autoconfiguration" />
<property name="testdata.webapp.name" value="astrogrid-testdata"/>

<j:if test="${empty(context.getVariable('registry.authorityid'))}">
	<j:set var="registry.authorityid" value="org.astrogrid.localhost"/>
</j:if>

<property name="communityid" value="${registry.authorityid}" /> <!--NB in general it is *not* true that community=authority this is a temporary measure to start the refactoring of the code-->

<!-- tokens to subst into config files -->
<filter token="WORKDIR" value="${work.dir}" />
<filter token="CONFIGPATH" value="${tomcat.url}/${config.webapp.name}" />
<filter token="TOMCATROOT" value="${tomcat.url}" />
<filter token="TOMCATLOC" value="${tomcat.location}" />
<filter token="REGAUTHORITY" value="${registry.authorityid}" />
<filter token="COMMUNITYID" value="${communityid}" />

<filter token="TOMCATPORT" value="${tomcat.port}"/>
<filter token="VERSION" value="${astrogrid.iteration}"/>
<filter token="MAILHOST" value="${mailhost}" />
<filter token="TOOLBASEDIR" value="${toolbasedir}"/> <!--this is the directory that is the root of CEA command line applications set it to the workdir for autointegration purposes-->
<filter token="CENTRALREGISTRY" value="${registry.endpoint}"/>
<filter token="TOMCATUSER" value="${tomcat.manager.username}"/>
<filter token="TOMCATPASS" value="${tomcat.manager.password}"/>
<filter token="CEAAPPID" value="${cea.app.id}"/>

<!-- setup -->
<goal name="astrogrid-clean" prereqs="clean:clean">
       <delete dir="${temporary.dir}" />
</goal>


<goal name="init" prereqs="declare-tasks">
        <echo>AuthorityID used: ${registry.authorityid}</echo>
        <echo>Community ivo identifier: ${communityid}</echo>
<!--do not delete the temporary directory here - pah-->
        <mkdir dir="${temporary.dir}" />
        <deploy:copy-deps todir="${temporary.dir}" />
<!-- important to do this before the original gets patched -->
    	<copy file="${temporary.dir}/astrogrid-community-${astrogrid.community.version}.war"
          tofile="${temporary.dir}/astrogrid-community-two-${astrogrid.community.version}.war" />
	
	<!-- this needs to be done earlier with the new installers -->		
	<attainGoal name="setup-working-dir" />
		  
</goal>

<!-- main goals //////////////////////////////////////////////////////////////////////////////////// -->
<goal name="deploy-all" prereqs="init,deploy-all-except-portal">
	<!-- refactored setup into this as cannot install all the apps until the registry is in place -->
         <echo>*** Deploying all webapps...</echo>
         <attainGoal name="portal-deploy" />
</goal>
<goal name="deploy-all-except-portal" prereqs="init" description="deploy all webapps except the portal, setup environment.">
        <attainGoal name="common-libs-deploy" />
        <attainGoal name="configuration-deploy" />
		<attainGoal name="copy-test-resources" />
        <attainGoal name="testdata-deploy"/>
        <sleep seconds="2" />
        <attainGoal name="registry-deploy" />
        <sleep seconds="4" />
		<attainGoal name="populate-registry" />

        <attainGoal name="jes-deploy" />
        <sleep seconds="2" />
        <attainGoal name="cea-server-deploy" />
        <sleep seconds="2" />
        <attainGoal name="cea-commandline-deploy" />
        <sleep seconds="2" />
        <attainGoal name="cea-http-deploy" />
        <sleep seconds="2" />

        <sleep seconds="2" />
        <attainGoal name="filestore-one-deploy" />
        <sleep seconds="2" />
        <attainGoal name="filestore-two-deploy" />
        <sleep seconds="2" />
        <attainGoal name="filemanager-one-deploy" />
        <sleep seconds="2" />
        <attainGoal name="filemanager-two-deploy" />
        <sleep seconds="2" />        
        <attainGoal name="community-deploy"/>
        <sleep seconds="2" />
		<attainGoal name="community-toolkit"/>
        <attainGoal name="setup-community"/>
	    <!--attainGoal name="community-deploy-two"/-->
</goal>

<goal name="undeploy-all" prereqs="init" description="undeploy all webapps">
       <echo>*** Undeploying all webapps...</echo>
       <attainGoal name="undeploy-all-except-portal" />
       <attainGoal name="portal-undeploy" />
</goal>

<goal name="undeploy-all-except-portal" prereqs="init" description="undeploy all webapps except the portal">
        <echo>*** Undeploying all webapps except the portal...</echo>
        <attainGoal name="configuration-undeploy"/>
        <attainGoal name="testdata-undeploy"/>
        <attainGoal name="jes-undeploy" />
        <attainGoal name="cea-server-undeploy" />
        <attainGoal name="cea-commandline-undeploy" />
        <attainGoal name="cea-http-undeploy" />
<!--        <attainGoal name="myspace-undeploy" />-->
        <attainGoal name="filestore-one-undeploy" />
        <sleep seconds="2" />
        <attainGoal name="filestore-two-undeploy" />
        <sleep seconds="2" />
        <attainGoal name="filemanager-one-undeploy" />
        <sleep seconds="2" />
        <attainGoal name="filemanager-two-undeploy" />
        <sleep seconds="2" />        
        <attainGoal name="community-undeploy" />
	    <!--attainGoal name="community-two-undeploy" /-->	
        <attainGoal name="registry-undeploy" />
</goal>

<goal name="list" prereqs="init" description="list deployed webapps">
        <tomcat-list url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" />
</goal>


<goal name="int-test" description="run integration tests">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="test" />
</goal>

<goal name="eclipse-int-test" description="Generate eclipse files for the tests">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="eclipse" />
</goal>

<goal name="astrogrid-build-site" description="Build the site docs for the test project">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="site" />
</goal>

<goal name="astrogrid-deploy-site" description="Deploy the site docs for the test project" >
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="site:deploy" />
</goal>

<goal name="ui-int-test"  description="run integration tests in ui runner">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="test:ui" />
</goal>

<goal name="scripting-gui"  description="run javascript gui">
        <maven:maven descriptor="${basedir}/tests-project.xml" goals="run-scripting-gui" />
</goal>

<goal name="style-workflows" description="apply presentation stylesheet to all workflows">
                  <!--declare the transformer factory to use -->
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <xslt style="${basedir}/build/workflow.xsl" destdir="${work.dir}/styled-workflows" basedir="${work.dir}/jes" />
</goal>

<!-- Working direcotry //////////////////////////////////////////////////////////////////////////////////////////////// -->

<goal name="setup-working-dir" description="create working dir, copy across templates">
        <echo>Setting up working directory</echo>
                <!-- do not delete the working dir here -->
        <mkdir dir="${work.dir}" />
        <copy todir="${work.dir}" overwrite="false" filtering="true">
            <fileset dir="work">
                <exclude name="**/filestore/data/*"/>
            </fileset>
        </copy>
        <!--don't filter binary files-->
        <copy todir="${work.dir}" overwrite="false" filtering="false">
            <fileset dir="work">
                <exclude name="**/filestore/data/*"/>
                <include name="**/*.jpg"/>
            </fileset>
        </copy>        
        <!--some test data for the filestore--> 
        <echo>Configuring test data for filestore one ....</echo>
        <mkdir dir="${work.dir}/filestore-one/data"/>
        <copy todir="${work.dir}/filestore-one/data">
            <fileset dir="work/filestore/data"/>
        </copy>
        <echo>Configuring test data for filestore two ....</echo>
        <mkdir dir="${work.dir}/filestore-two/data"/>
        <copy todir="${work.dir}/filestore-two/data">
            <fileset dir="work/filestore/data"/>
        </copy>

        
        <!-- make everything world-accessible - necessary as tomcat may be running as different user to
        whoever is executing this script

        hmm - dunno if this is necessary really.
         -->
        <chmod file="${work.dir}" perm="a+rwx" type="dir"/>
        <chmod dir="${work.dir}" perm="a+rwx" type="dir">
                <include name="**/*" />
        </chmod>
        <chmod dir="${work.dir}" perm="a+rw" type="file">
                <include name="**/*" />
        </chmod>
        <!--In particular, the test apps must be executable in Un*x-->
        <chmod dir="${work.dir}" perm="a+rwx" type="file">
                <include name="**/*.sh" />
        </chmod>        
</goal>


<goal name="setup-community" description="Community setup">
    <echo>Configuring community database ....</echo>
    <attainGoal name="community-database"/>
	<!--
    <attainGoal name="community-register"/>
    -->
</goal>
<!--
<goal name="setup-exist" description="PUT documents in eXist">
         <echo>Configuring eXist entries</echo>
                <delete dir="${temporary.dir}/exist-entries" />
        <copy todir="${temporary.dir}/exist-entries" filtering="true">
                <fileset dir="exist-entries">
                        <include name="**/*.xml" />
                </fileset>
        </copy>
        <!- now upload each one ->
        <pathconvert property="entries" pathsep=" ">
                <path>
                        <fileset dir="${temporary.dir}/exist-entries"/>
            </path>
        </pathconvert>
        <util:tokenize var="entryList" delim=" ">${entries}</util:tokenize>
        <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
                <j:set var="collpath" value="${temporary.dir}/exist-entries"/>
        <j:forEach var="entry" items="${entryList}">
          <echo>${entry}</echo>

                        <util:file name="${entry}"  var="xmlentry" />
                        <jxml:parse xml="${xmlentry}" var="xmlbody" />

                        <echo>${existurl}/${entry.substring(collpath.length())}</echo>
                        <j:set var="existtempurl" value="${existurl}${entry.substring(collpath.length())}"/>
                    <util:replace oldChar="\" newChar="/" var="existputurl">${existtempurl}</util:replace>
                    <echo>${existputurl}</echo>
                <http:put var="xmlexist" uri="${existputurl}">
                <header name="Content-Type" value="text/xml"/>
                <http:body>
                                        <jxml:copyOf select="$xmlbody" />
                </http:body>
                        </http:put>
                <echo>${xmlexist.statusCode}</echo>

        </j:forEach>
        <echo>Finsihed setting up eXist</echo>

</goal>
-->
<goal name="populate-registry" description="populate the registry" >
        <echo>Populating Registry</echo>
        <!-- expand tokens -->
        <copy todir="${temporary.dir}/registry-entries" filtering="true">
                <fileset dir="registry-entries">
                        <include name="**/*.xml" />						
                        <exclude name="${registry.exclusions}" />
                </fileset>
        </copy>
        <!-- now upload each one -->
        <pathconvert property="entriesr" pathsep=" ">
                <path>
                        <fileset dir="${temporary.dir}/registry-entries">
							<exclude name="**/AuthorityTest.xml"/>
						</fileset>
                </path>
        </pathconvert>
        <util:tokenize var="entryListr" delim=" ">${entriesr}</util:tokenize>
        <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>

        <!--upload this one first - I don't know why (jdt)-->
        <ag:register file="${temporary.dir}/registry-entries/AuthorityTest.xml" />
						
<!--
                <waitfor maxwait="10" maxwaitunit="second" checkevery="500">
                <http url="${tomcat.url}/exist/xmldb/db/?xpath=%2F%2F*%3AResource%5B*%3AIdentifier%2F*%3AResourceKey%2Ftext%28%29+%3D+%27org.astrogrid.registry.RegistryService%27%5D"/>
                </waitfor>
-->
        <!--now the rest-->
        <j:forEach var="entryr" items="${entryListr}">
            <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
                     <ag:register file="${entryr}" />
        </j:forEach>

</goal>

<!--+
    | Unpack our Community install toolkit.
    +-->
<goal name="community-toolkit">
    <echo message=""/>
    <echo message="Installing community toolkit ...."/>
    <!--+
        | Create our toolkit directory.
        +-->
    <mkdir dir="${temporary.dir}/community"/>
    <mkdir dir="${temporary.dir}/community/toolkit"/>
    <!--+
        | Unpack our toolkit.
        +-->
    <unzip src="${temporary.dir}/astrogrid-community-install-${astrogrid.community.version}.zip" dest="${temporary.dir}/community/toolkit"/>
    <!--+
        | Set the community ident.
        +-->
    <propertyfile
        file="${temporary.dir}/community/toolkit/install.properties">
        <entry key="org.astrogrid.community.ident"
            value="${communityid}"/>
    </propertyfile>
    <!--+
        | Set the registry endpoint.
        +-->
    <propertyfile
        file="${temporary.dir}/community/toolkit/install.properties">
        <entry key="org.astrogrid.registry.url"
            value="${registry.endpoint}Query"/>
    </propertyfile>
    <!--+
        | Set the registry admin endpoint.
        +-->
    <propertyfile
        file="${temporary.dir}/community/toolkit/install.properties">
        <entry key="org.astrogrid.registry.admin"
            value="${registry.endpoint}Update"/>
    </propertyfile>
    <!--+
        | Set the local hostname.
        +-->
    <propertyfile
        file="${temporary.dir}/community/toolkit/install.properties">
        <entry key="service.host"
            value="${tomcat.host}"/>
    </propertyfile>
</goal>

<!--+
    | Initialise our Community database.
    +-->
<goal name="community-database">
    <echo message=""/>
    <echo message="Installing community database ...."/>
    <echo>Community ivo identifier: ${communityid}</echo>	
    <!--+
        | Wait for our service to respond.

    <attainGoal name="community-wait"/>
            +-->
    <!--+
        | Reset our database tables.
        +-->
    <ant
        target="database.reset"
        dir="${temporary.dir}/community/toolkit"
        antfile="${temporary.dir}/community/toolkit/install.xml">
    	<property name="org.astrogrid.community.ident" value="${communityid}"/>
    	<property name="service.url" value="${tomcat.url}/astrogrid-community-SNAPSHOT/services"/>    	
    	
    </ant>
    <!--+
        | Load our database tables.
        +-->
    <ant
        target="database.load"
        dir="${temporary.dir}/community/toolkit"
        antfile="${temporary.dir}/community/toolkit/install.xml"
        >
        <!-- load the community from a file local to the autointegration rather than out of the community install kit -->
    	<property name="org.astrogrid.community.ident" value="${communityid}"/>
    	<property name="service.url" value="${tomcat.url}/astrogrid-community-SNAPSHOT/services"/>    	
        <property name="community.xmlfile" value="file:///${work.dir}/community/demoaccounts.xml"/>
    </ant>
	<!--
    <ant
        target="database.reset"
        dir="${temporary.dir}/community/toolkit"
        antfile="${temporary.dir}/community/toolkit/install.xml">
    	<property name="org.astrogrid.community.ident" value="${communityid}.two"/>
    	<property name="service.url" value="${tomcat.url}/astrogrid-community-two-SNAPSHOT/services"/>
    	
    </ant>
	
	
    <ant
        target="database.load"
        dir="${temporary.dir}/community/toolkit"
        antfile="${temporary.dir}/community/toolkit/install.xml"
        >
         load the community from a file local to the autointegration rather than out of the community install kit 
    	<property name="org.astrogrid.community.ident" value="${communityid}.two"/>
    	<property name="service.url" value="${tomcat.url}/astrogrid-community-two-SNAPSHOT/services"/>
    	<property name="community.xmlfile" value="file:///${work.dir}/community/demoaccounts_two.xml"/>
    </ant>-->
	
</goal>

<!--+
    | Register the Community.
    +-->
<goal name="community-register">
    <echo message=""/>
    <echo message="Registering community service ...."/>
    <echo>Community ivo identifier: ${communityid}</echo>
    <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
    <echo message=""/>
    <!--+
        | Wait for our service to respond.
        -->
    <attainGoal name="community-wait"/>
            
    <!--+
        | Register our service(s).
        +-->
    <ant target="service.register"
         dir="${temporary.dir}/community/toolkit"
         antfile="${temporary.dir}/community/toolkit/install.xml">
    	<property name="org.astrogrid.community.ident" value="${communityid}"/>
    	<property name="service.url" value="${tomcat.url}/astrogrid-community-SNAPSHOT/services"/>
	</ant>
	<!--
    <ant target="service.register"
         dir="${temporary.dir}/community/toolkit"
         antfile="${temporary.dir}/community/toolkit/install.xml">
    	<property name="org.astrogrid.community.ident" value="${communityid}.two"/>
    	<property name="service.url" value="${tomcat.url}/astrogrid-community-two-SNAPSHOT/services"/>
	</ant>	-->
</goal>
<!--+
    | Wait for the Community service to respond.
    +-->
<goal name="community-wait">
    <echo message="Waiting for Community webapp .."/>
    <echo message="  URL : ${tomcat.url}/astrogrid-community/happyaxis.jsp"/>
    <waitfor maxwait="10" maxwaitunit="second" checkevery="500">
        <http url="${tomcat.url}/astrogrid-community"/>
    </waitfor>
</goal>

<!--+
    | Upload a Registry Entry to the local service.
    +-->
<goal name="registry.upload.test">
    <echo message="Uploading Registry Entry .."/>
    <j:expr value="${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}"/>
    <echo message=""/>
    <ant target="register"
         antfile="register.xml"
         >
        <property name="registry.entry" value="tmp/community/config/service/policy.manager.xml"/>
    </ant>
</goal>

<!-- pregoals ///////////////////////////////////////////////////////////////////////////////////////////////// -->


  <preGoal name="test:test-resources">
        <attainGoal name="copy-test-resources" />
  </preGoal>

  <goal name="copy-test-resources" description="takes a copy of the config, puts it on the classpath for the test classes to find">
          <echo>Copying global config file across to the client / test code</echo>
          <copy file="webapps/astrogrid-configuration/AstroGridConfig.properties" tofile="test/java/astrogrid.properties" filtering="true" overwrite="true" />
  </goal>


<goal name="run-scripting-gui" description="don't call directly - use scripting-gui goal">
        <mkdir dir="${temporary.dir}/client" />
        <copy todir="${temporary.dir}/client" filtering="true">
                <fileset dir="webapps/astrogrid-configuration" />
        </copy>
        <!-- classname="org.mozilla.javascript.tools.shell.Main" for command-line version -->
        <java classname="org.mozilla.javascript.tools.debugger.Main"
                fork="true" classpathref="maven.dependency.classpath"
                dir="${temporary.dir}/client">
        </java>
</goal>




<!-- deployment //////////////////////////////////////////////////////////////////////// -->

<goal name="common-libs-deploy" description="copy db drivers, etc into shared directory">
        <echo message="Tomcat common : ${tomcat.common.lib.dir}"/>
        <copy verbose="true" todir="${tomcat.common.lib.dir}">
                <fileset dir="${temporary.dir}">
                        <include name="hsql*.jar" />
                        <include name="mail*.jar" />
                        <include name="activation*.jar" /> <!-- required by mail - dunno why tomcat doesn't ship with these.. -->
                </fileset>
        </copy>
        <echo message="If this is the first time you have run AGINAB since installing Tomcat you will need to bounce Tomcat and restart this script!"/>
</goal>

<!-- hand assembled webapps ///////////////////////////////////////-->
<goal name="configuration-deploy" description="create and install configuration webapp" >
        <copy todir="${temporary.dir}/astrogrid-configuration" filtering="true">
                <fileset dir="webapps/astrogrid-configuration" />
        </copy>
        <jar destfile="${temporary.dir}/${config.webapp.name}.war" basedir="${temporary.dir}/astrogrid-configuration">
        </jar>

        <tomcat-deploy update="true" url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
              path="/${config.webapp.name}" war="file:///${temporary.dir}/${config.webapp.name}.war" />

</goal>
<goal name="testdata-deploy" description="create and install testdata webapp" >
        <copy todir="${temporary.dir}/test-data" filtering="true">
                <fileset dir="webapps/test-data" />
        </copy>
        <jar destfile="${temporary.dir}/${testdata.webapp.name}.war" basedir="${temporary.dir}/test-data">
        </jar>
        <tomcat-deploy update="true" url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                        path="/${testdata.webapp.name}" war="file:///${temporary.dir}/${testdata.webapp.name}.war" />
</goal>

<!-- Deploy and register AstroGrid components using their own deployment scripts -->
<!--
    Deploy/Undeploy CEA
    -->

    <!--CEA deploy/undeploy is now handled by a self-contained Ant script in the CEA project itself.
    Please see astrogrid/cea/deployment -->
    
    <!--Vanilla (Java) version-->
<goal name="cea-server-deploy" prereqs="override-input-task,init,cea-init">
      <!--Self register.  Currently this only registers v0.9 of the schema, until bug 1159 is fixed-->
  ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
 
        <ant dir="${cea.deployment.jar.unpacked}" target="install-and-register" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="cea.continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            <property name="input.cea.flavour" value="Java"/>
            <property name="input.cea.contextpath" value="${aginab.ceajava.contextpath}"/>
			<property name="input.cea.working.dir" value="${work.dir}/cea/java"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>            
			<property name="input.cea.regauthority" value="${registry.authorityid}"/>
			<!--currently the following matches that in registry-entries/JavaAppsCEA.xml
			When the self-reg is working properly with v0.10 the above file will no longer be needed-->
            <property name="input.cea.regkey" value="JavaProviderCEC"/>
     		<property name="input.cea.mailserver" value="${mailhost}"/>
		    <property name="input.cea.javaclass.server.class" value="org.astrogrid.applications.javaclass.SampleJavaClassApplications"/>
            
            <!--The following entries are used by the CEA to generate a registry entry...however,
            this entry is not used at the moment as it's v0.9-->
			<property name="input.cea.username" value="John Taylor"/>
			<property name="input.cea.useremail" value="jdt@roe.ac.uk"/>

            
            <!--stick with the built-in apps-->
            <property name="input.cea.install.java" value="no"/>
      </ant>
</goal>

<goal name="cea-server-undeploy" prereqs="override-input-task,init,cea-init">
        <ant dir="${cea.deployment.jar.unpacked}" target="remove" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            <property name="input.cea.flavour" value="Java"/>
            <property name="input.cea.contextpath" value="${aginab.ceajava.contextpath}"/>
    </ant>
</goal>

<!--Commandline version-->
<goal name="cea-commandline-deploy" prereqs="override-input-task,init,cea-init">
		<!--By moving the unwaring to a separate project, I've broken the cougaar setup.  Need to think about
		best way of restoring it (jdt)-->
		<!--ag:maybe-enable-cougaar webapp="cea-server" /-->
 ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
         <ant dir="${cea.deployment.jar.unpacked}" target="install-and-register" >
	        <property name="custom.tasks.defined" value="yes"/>
            <property name="cea.continueifnodownload" value="true"/> <!-- allow use of local files-->

            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            <property name="input.cea.flavour" value="commandline"/>
            <property name="input.cea.contextpath" value="${aginab.ceacmdline.contextpath}"/>
			<property name="input.cea.working.dir" value="${work.dir}/cea/commandline"/>
			<property name="input.cea.config.file" value="${cea.cmd.config}"/>
			
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>            
			<property name="input.cea.regauthority" value="${registry.authorityid}"/>
			<!--currently the following matches that in registry-entries/CEAEntriesv10.xml
			When the self-reg is working properly with v0.10 the above file will no longer be needed-->
            <property name="input.cea.regkey" value="cea-cmdline-test"/>
     		<!--property name="input.cea.mailserver" value="${mailhost}"/-->
		    
            
            <!--The following entries are used by the CEA to generate a registry entry...however,
            this entry is not used at the moment as it's v0.9-->
			<property name="input.cea.username" value="John Taylor"/>
			<property name="input.cea.useremail" value="jdt@roe.ac.uk"/>

            
      </ant>
</goal>

<goal name="cea-commandline-undeploy" prereqs="override-input-task,init,cea-init">
        <ant dir="${cea.deployment.jar.unpacked}" target="remove" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            <property name="input.cea.flavour" value="commandline"/>
            <property name="input.cea.contextpath" value="${aginab.ceacmdline.contextpath}"/>
    </ant>
</goal>

<!--http version-->
<goal name="cea-http-deploy" prereqs="override-input-task,init,cea-init">
		<!--By moving the unwaring to a separate project, I've broken the cougaar setup.  Need to think about
		best way of restoring it-->
		<!--ag:maybe-enable-cougaar webapp="cea-server" /-->

  ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <ant dir="${cea.deployment.jar.unpacked}" target="install-and-register" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="cea.continueifnodownload" value="true"/> <!-- allow use of local files-->

            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            <property name="input.cea.flavour" value="http"/>
            <property name="input.cea.contextpath" value="${aginab.ceahttp.contextpath}"/>
			<property name="input.cea.working.dir" value="${work.dir}/cea/http"/>
			
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>            
			<property name="input.cea.regauthority" value="${registry.authorityid}"/>
			<!--currently the following matches that in registry-entries/CEAEntriesv10.xml
			When the self-reg is working properly with v0.10 the above file will no longer be needed-->
            <property name="input.cea.regkey" value="TestHttpCEC"/>
   
            
            <!--The following entries are used by the CEA to generate a registry entry...however,
            this entry is not used at the moment as it's v0.9-->
			<property name="input.cea.username" value="John Taylor"/>
			<property name="input.cea.useremail" value="jdt@roe.ac.uk"/>
      </ant>
</goal>

<goal name="cea-http-undeploy" prereqs="override-input-task,init,cea-init">
        <ant dir="${cea.deployment.jar.unpacked}" target="remove" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            <property name="input.cea.flavour" value="http"/>
            <property name="input.cea.contextpath" value="${aginab.ceahttp.contextpath}"/>
    </ant>
</goal>

<goal name="cea-init">
   <property name="cea.deployment.jar.unpacked" value="${temporary.dir}/cea"/>
   <unjar src="${temporary.dir}/astrogrid-cea-deploy-script-${astrogrid.applications.version}.jar" 
    dest="${cea.deployment.jar.unpacked}"/>
</goal>

<!-- FileStore deploy/undeploy is now handled by a self-contained Ant script in the FileStore project itself.    Please see astrogrid/filestore/deployment -->

<!--
    Deploy/Undeploy FileStore
    -->
<goal name="filestore-one-deploy" prereqs="override-input-task,init,filestore-init">
      <ant dir="${filestore.deployment.jar.unpacked}" target="install-and-register" inheritAll="false" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            
            <property name="input.filestore.working.dir" value="${work.dir}/filestore-one/repository/"/>
            <property name="input.filestore.contextpath" value="${aginab.filestore1.contextpath}"/>
			<property name="input.filestore.regauthority" value="${registry.authorityid}"/>
			<property name="input.filestore.regkey" value="${aginab.filestore1.regkey}"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
      </ant>
      
      <echo>Configuring test data and repository for filestore one ....</echo>

     <copy todir="${work.dir}/filestore-one/repository">
        <fileset dir="work/filestore/data"/>
     </copy>
</goal>
<goal name="filestore-one-undeploy" prereqs="override-input-task,init,filestore-init">
      <ant dir="${filestore.deployment.jar.unpacked}" target="remove" inheritAll="false" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            
            <property name="input.filestore.working.dir" value="${work.dir}/filestore-one/repository/"/>
            <property name="input.filestore.contextpath" value="${aginab.filestore1.contextpath}"/>
			<property name="input.filestore.regauthority" value="${registry.authorityid}"/>
			<property name="input.filestore.regkey" value="${aginab.filestore1.regkey}"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
      </ant>
</goal>
<goal name="filestore-two-deploy" prereqs="override-input-task,init,filestore-init">
      <ant dir="${filestore.deployment.jar.unpacked}" target="install-and-register" inheritAll="false" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            
            <property name="input.filestore.working.dir" value="${work.dir}/filestore-two/repository/"/>
            <property name="input.filestore.contextpath" value="${aginab.filestore2.contextpath}"/>
			<property name="input.filestore.regauthority" value="${registry.authorityid}"/>
			<property name="input.filestore.regkey" value="${aginab.filestore2.regkey}"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
      </ant>
      <echo>Configuring test data and repository for filestore two ....</echo>
      <copy todir="${work.dir}/filestore-two/repository">
        <fileset dir="work/filestore/data"/>
      </copy>
</goal>
<goal name="filestore-two-undeploy" prereqs="override-input-task,init,filestore-init">    
      <ant dir="${filestore.deployment.jar.unpacked}" target="remove" inheritAll="false" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            
            <property name="input.filestore.working.dir" value="${work.dir}/filestore-two/repository/"/>
            <property name="input.filestore.contextpath" value="${aginab.filestore2.contextpath}"/>
			<property name="input.filestore.regauthority" value="${registry.authorityid}"/>
			<property name="input.filestore.regkey" value="${aginab.filestore2.regkey}"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
      </ant>
</goal>

<goal name="filestore-init">
   <property name="filestore.deployment.jar.unpacked" value="${temporary.dir}/filestore"/>
   <unjar src="${temporary.dir}/astrogrid-filestore-deploy-script-${astrogrid.filestore.version}.jar" 
    dest="${filestore.deployment.jar.unpacked}"/>
</goal>

<!--FileManager deploy/undeploy is now handled by a self-contained Ant script in the FileManager project itself.  Please see astrogrid/filemanager/deployment -->

<!--
    Deploy/Undeploy FileManager
    -->
<goal name="filemanager-one-deploy" prereqs="override-input-task,init,filemanager-init">
      <ant dir="${filemanager.deployment.jar.unpacked}" target="install-and-register" inheritAll="false" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
           
            <property name="input.filestore.ivorn" value="${aginab.filestore1.ivorn}"/>
            <property name="input.filemanager.contextpath" value="${aginab.filemanager1.contextpath}"/>
			<property name="input.filemanager.regauthority" value="${registry.authorityid}"/>
			<property name="input.filemanager.regkey" value="${aginab.filemanager1.regkey}"/>
            <property name="input.filemanager.working.dir" value="${work.dir}/filemanager-one/repository/"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
            <property name="input.contact.name" value="AGINAB"/>
            <property name="input.contact.email" value="anon@astrogrid.org"/>
      </ant>
</goal>
<goal name="filemanager-one-undeploy" prereqs="override-input-task,init,filemanager-init">
      <ant dir="${filemanager.deployment.jar.unpacked}" target="remove" inheritAll="false" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
           
            <property name="input.filestore.ivorn" value="${aginab.filestore1.ivorn}"/>
            <property name="input.filemanager.contextpath" value="${aginab.filemanager1.contextpath}"/>
			<property name="input.filemanager.regauthority" value="${registry.authorityid}"/>
			<property name="input.filemanager.regkey" value="${aginab.filemanager1.regkey}"/>
            <property name="input.filemanager.working.dir" value="${work.dir}/filemanager-one/repository/"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
            <property name="input.contact.name" value="AGINAB"/>
            <property name="input.contact.email" value="anon@astrogrid.org"/>      
      </ant>
</goal>
<goal name="filemanager-two-deploy" prereqs="override-input-task,init,filemanager-init">
      <ant dir="${filemanager.deployment.jar.unpacked}" target="install-and-register" inheritAll="false" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
           
            <property name="input.filestore.ivorn" value="${aginab.filestore2.ivorn}"/>
            <property name="input.filemanager.contextpath" value="${aginab.filemanager2.contextpath}"/>
			<property name="input.filemanager.regauthority" value="${registry.authorityid}"/>
			<property name="input.filemanager.regkey" value="${aginab.filemanager2.regkey}"/>
            <property name="input.filemanager.working.dir" value="${work.dir}/filemanager-two/repository/"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
            <property name="input.contact.name" value="AGINAB"/>
            <property name="input.contact.email" value="anon@astrogrid.org"/>      
       </ant>


</goal>
<goal name="filemanager-two-undeploy" prereqs="override-input-task,init,filemanager-init">    
      <ant dir="${filemanager.deployment.jar.unpacked}" target="install-and-register" inheritAll="false" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
           
            <property name="input.filestore.ivorn" value="${aginab.filestore2.ivorn}"/>
            <property name="input.filemanager.contextpath" value="${aginab.filemanager2.contextpath}"/>
			<property name="input.filemanager.regauthority" value="${registry.authorityid}"/>
			<property name="input.filemanager.regkey" value="${aginab.filemanager2.regkey}"/>
            <property name="input.filemanager.working.dir" value="${work.dir}/filemanager-two/repository/"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
            <property name="input.contact.name" value="AGINAB"/>
            <property name="input.contact.email" value="anon@astrogrid.org"/>      
       </ant>
</goal>

<goal name="filemanager-init">
   <property name="filemanager.deployment.jar.unpacked" value="${temporary.dir}/filemanager"/>
   <unjar src="${temporary.dir}/astrogrid-filemanager-deploy-script-${astrogrid.filemanager.version}.jar" 
    dest="${filemanager.deployment.jar.unpacked}"/>
</goal>

<!--	
	<goal name="exist-deploy" >
	          <tomcat-deploy update="true" url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
	     path="/exist" war="file:///${temporary.dir}/exist-SNAPSHOT.war"/>
	</goal>
-->		
<!--Registry deploy/undeploy is now handled by a self-contained Ant script in the registry project itself.
    Please see astrogrid/registry/deployment -->

<!--
    Deploy/Undeploy Registry
    -->			
<goal name="registry-deploy" prereqs="override-input-task, registry-init">
    
      <ant dir="${registry.deployment.jar.unpacked}" target="install-and-register" inheritAll="true" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
           
      </ant>
      <ant dir="${registry.deployment.jar.unpacked}" target="add-authid" inheritAll="true" >
            <property name="custom.tasks.defined" value="yes"/>
            
            <property name="input.reg.managedauthority" value="org.astrogrid"/>
            <property name="input.reg.managedauthority.title" value="Astrogrid Standard Authority"/>
            <property name="input.reg.managedauthority.shorttitle" value="AG-AT-ST"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
      </ant>
      <ant dir="${registry.deployment.jar.unpacked}" target="add-authid" inheritAll="true" >
            <property name="custom.tasks.defined" value="yes"/>
            
            <property name="input.reg.managedauthority" value="roe.ac.uk"/>
            <property name="input.reg.managedauthority.title" value="Astrogrid Standard Authority"/>
            <property name="input.reg.managedauthority.shorttitle" value="AG-AT-ST"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
      </ant>
</goal>			
<goal name="registry-undeploy" prereqs="override-input-task, registry-init">
      <ant dir="${registry.deployment.jar.unpacked}" target="remove" inheritAll="true" >
            <property name="custom.tasks.defined" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
           
       </ant>   
</goal>	
<goal name="registry-init" prereqs="init">
   <property name="registry.deployment.jar.unpacked" value="${temporary.dir}/registry"/>
   <unjar src="${temporary.dir}/astrogrid-registry-deploy-script-${astrogrid.registry.version}.jar" 
    dest="${registry.deployment.jar.unpacked}" overwrite="true"/>
    
    <!--Set some properties that will be common to the registry deploy/undeploy-->
    <!--Could add more, but these properties are "permanent" and will affect every other subsequent goal
        so for now restrict to registry specific ones -->
    <property name="input.registry.contextpath" value="${aginab.registry.contextpath}"/>
    <property name="input.registry.public.url" value="${aginab.registry.url}"/>
    <property name="input.registry.regauthority" value="${registry.authorityid}"/>
    <property name="input.reg.title" value="Test AGINAB Registry"/>
    <property name="input.reg.contact.name" value="AGINAB"/>
    <property name="input.reg.contact.email" value="anon@astrogrid.org"/>           
    <property name="input.registry.data.location" value="internal"/>           
    <property name="input.reg.enableharvesting" value="false"/>                   
</goal>		
	

<!--
<goal name="pal-deploy" >
        <copy todir="${temporary.dir}/pal" filtering="true">
                <fileset dir="contexts/pal" />
        </copy>
       <ag:maybe-enable-cougaar webapp="pal" />
        <war update="true" destfile="${temporary.dir}/pal-${astrogrid.datacenter.version}.war">
                <metainf dir="${temporary.dir}/pal"/>
        </war>

  <tomcat-deploy update="true" url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-${pom.currentVersion}" war="file:///${temporary.dir}/pal-${astrogrid.datacenter.version}.war"/>

</goal>
-->
<!-- NOEL - cougaar taglib won't work with these pal wars - pal uses a different naming pattern. arse -->
<!--
<goal name="pal-fits-deploy" >
                <copy file="${temporary.dir}/pal-${astrogrid.datacenter.version}.war"
                      tofile="${temporary.dir}/pal-fits-${astrogrid.datacenter.version}.war" />
        <copy todir="${temporary.dir}/pal_fits" filtering="true">
                <fileset dir="contexts/pal_fits" />
        </copy>
       <ag:maybe-enable-cougaar webapp="pal_fits" />
        <war update="true" destfile="${temporary.dir}/pal-fits-${astrogrid.datacenter.version}.war">
                <metainf dir="${temporary.dir}/pal_fits"/>
        </war>

  <tomcat-deploy update="true" url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-fits-${pom.currentVersion}" war="file:///${temporary.dir}/pal-fits-${astrogrid.datacenter.version}.war"/>

</goal>

<goal name="pal-sec-deploy" >
        <copy todir="${temporary.dir}/pal_sec" filtering="true">
                <fileset dir="contexts/pal_sec" />
        </copy>
       <ag:maybe-enable-cougaar webapp="pal-sec" />
        <war update="true" destfile="${temporary.dir}/pal-sec-${astrogrid.datacenter.version}.war">
                <metainf dir="${temporary.dir}/pal_sec"/>
        </war>

  <tomcat-deploy update="true" url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-sec-${pom.currentVersion}" war="file:///${temporary.dir}/pal-sec-${astrogrid.datacenter.version}.war"/>

</goal>

        <goal name="pal-cds-deploy" >

                <copy todir="${temporary.dir}/pal_cds" filtering="true">
                        <fileset dir="contexts/pal_cds" />
                </copy>
                <ag:maybe-enable-cougaar webapp="pal_cds" />
                <war update="true" destfile="${temporary.dir}/pal-cds-${astrogrid.datacenter.version}.war">
                        <metainf dir="${temporary.dir}/pal_cds"/>
                </war>

          <tomcat-deploy update="true" url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                  path="/astrogrid-pal-cds-${pom.currentVersion}" war="file:///${temporary.dir}/pal-cds-${astrogrid.datacenter.version}.war"/>

        </goal>
-->



<!--
    Deploy/Undeploy Portal
    -->

    <!--Portal deploy/undeploy is now handled by a self-contained Ant script in the portal project itself.
    Please see astrogrid/portal/deployment -->
<goal name="portal-deploy" prereqs="override-input-task,init,portal-init">
    <!--horribly crude, but will do for now-->
        <ant dir="${portal.deployment.jar.unpacked}" target="customize-login-page" >
            <property name="input.login.image.file" value="${work.dir}/portal/AGINABloginBackground.jpg"/>
        </ant>    
        <ant dir="${portal.deployment.jar.unpacked}" target="install-portal" >
            <property name="tasks.already.set" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="yes"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            <property name="input.astrogrid.jes.endpoint" value="${aginab.jes.url}"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
            <property name="input.mail.admin" value="jdt@roe.ac.uk"/>
            <property name="input.mail.server" value="${mailhost}"/>
            <property name="input.mail.from" value="donotreply@astrogrid.org"/>
            <property name="input.mail.user" value="astrogrid"/>
            <property name="input.mail.pass" value=""/>
      </ant>
</goal>
<goal name="portal-undeploy" prereqs="override-input-task,init,portal-init">
        <ant dir="${portal.deployment.jar.unpacked}" target="uninstall-portal" >
            <property name="tasks.already.set" value="yes"/>
            <property name="input.tomcat.present" value="yes"/>
            <property name="input.tomcat.url" value="${tomcat.manager.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
          
        </ant>
</goal>
<goal name="portal-init">
   <property name="portal.deployment.jar.unpacked" value="${temporary.dir}/portal"/>
   <unjar src="${temporary.dir}/astrogrid-portal-deploy-script-${astrogrid.portal.version}.jar" dest="${portal.deployment.jar.unpacked}"/>
</goal>


<!--
    Deploy/Undeploy JES
    -->

    <!--JES deploy/undeploy is now handled by a self-contained Ant script in the jes project itself.
    Please see astrogrid/jes/deployment -->
    
<goal name="jes-deploy" prereqs="override-input-task,init,jes-init">
        <ant dir="${jes.deployment.jar.unpacked}" target="install-jes" >
            <property name="tasks.already.set" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            <property name="input.jes.working.dir" value="${work.dir}/jes"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
            <property name="input.eraseworking" value="Do it"/>
            <property name="input.jes.contextpath" value="${aginab.jes.contextpath}"/>
      </ant>
</goal>

<goal name="jes-undeploy" prereqs="override-input-task,init,jes-init">
        <ant dir="${jes.deployment.jar.unpacked}" target="remove-jes" >
            <property name="tasks.already.set" value="yes"/>
            <property name="continueifnodownload" value="true"/> <!-- allow use of local files-->
            
            <property name="input.tomcat.present" value="continue"/>
            <property name="input.tomcat.url" value="${tomcat.manager.url}"/>
            <property name="input.tomcat.manager.user" value="${tomcat.manager.username}"/>
            <property name="input.tomcat.manager.pass" value="${tomcat.manager.password}"/>
            <property name="input.jes.working.dir" value="${work.dir}/jes"/>
            <property name="input.astrogrid.registry.endpoint" value="${aginab.registry.url}"/>
            <property name="input.eraseworking" value="Do it"/>
            <property name="input.jes.contextpath" value="${aginab.jes.contextpath}"/>
      </ant>
</goal>
<goal name="jes-init">
   <property name="jes.deployment.jar.unpacked" value="${temporary.dir}/jes"/>
   <unjar src="${temporary.dir}/astrogrid-jes-deploy-script-${astrogrid.jes.version}.jar" 
    dest="${jes.deployment.jar.unpacked}"/>
</goal>


<goal name="community-deploy">
    <echo>Community ivo identifier: ${communityid}</echo>	
    <copy todir="${temporary.dir}/community/webapp" filtering="true">
        <fileset dir="contexts/community" />
    </copy>
       <ag:maybe-enable-cougaar webapp="community" />
    <war update="true" destfile="${temporary.dir}/astrogrid-community-${astrogrid.community.version}.war">
        <metainf dir="${temporary.dir}/community/webapp"/>
    </war>
    <tomcat-deploy
        update="true"
        url="${tomcat.manager.url}"
        username="${tomcat.manager.username}"
        password="${tomcat.manager.password}"
        path="/astrogrid-community-${pom.currentVersion}"
        war="file:///${temporary.dir}/astrogrid-community-${astrogrid.community.version}.war"
        />
</goal>
	
	<goal name="community-deploy-two">
        <echo>Community ivo identifier: ${communityid}</echo>
	    <copy todir="${temporary.dir}/community_two/webapp" filtering="true">
	        <fileset dir="contexts/community_two" />
	    </copy>
	    <ag:maybe-enable-cougaar webapp="community" />
	    <war update="true" destfile="${temporary.dir}/astrogrid-community-two-${astrogrid.community.version}.war">
	        <metainf dir="${temporary.dir}/community_two/webapp"/>
	    </war>
	    <tomcat-deploy
	        update="true"
	        url="${tomcat.manager.url}"
	        username="${tomcat.manager.username}"
	        password="${tomcat.manager.password}"
	        path="/astrogrid-community-two-${pom.currentVersion}"
	        war="file:///${temporary.dir}/astrogrid-community-two-${astrogrid.community.version}.war"
	        />
	</goal>

<!-- undeploy ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!--	
	<goal name="exist-undeploy" >

	  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
	          path="/exist" />

	</goal>	


<goal name="pal-undeploy" >

  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-${pom.currentVersion}" />

</goal>

<goal name="pal-fits-undeploy" >

  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-fits-${pom.currentVersion}" />

</goal>

<goal name="pal-sec-undeploy" >

  <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
          path="/astrogrid-pal-sec-${pom.currentVersion}" />

</goal>

<goal name="pal-cds-undeploy" >

          <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                  path="/astrogrid-pal-cds-${pom.currentVersion}" />

</goal>
-->
<goal name="configuration-undeploy" >

        <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/${config.webapp.name}" />

</goal>

<goal name="testdata-undeploy" >

        <tomcat-remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
                path="/${testdata.webapp.name}" />

</goal>




<goal name="community-undeploy" >

    <tomcat-remove
        url="${tomcat.manager.url}"
        username="${tomcat.manager.username}"
        password="${tomcat.manager.password}"
        path="/astrogrid-community-${pom.currentVersion}" />

</goal>
	
	<goal name="community-two-undeploy" >

	    <tomcat-remove
	        url="${tomcat.manager.url}"
	        username="${tomcat.manager.username}"
	        password="${tomcat.manager.password}"
	        path="/astrogrid-community-two-${pom.currentVersion}" />

	</goal>	


<goal name="override-input-task">
    <echo>The Input Task in Ant 1.5.3 hangs when a property has already been set...overriding with that from Ant 1.6</echo>
    <taskdef name="input" classname="org.apache.tools.ant1point6.taskdefs.Input" classpathref="maven.dependency.classpath"/>
    <property name="input.test" value="foo"/>
    <input addProperty="input.test">If this has worked, execution should continue at this point</input>
    <echo>The Get Task in Ant 1.5.3 has a bug - it will often redownload files whose timestamps are the same as the existing file</echo>
    <taskdef name="get" classname="org.apache.tools.ant1point6.taskdefs.Get" classpathref="maven.dependency.classpath"/>
</goal>

<goal name="CLEANTOMCAT" description="run this to clean out tomcat directories if tomcat not running - will clean the tmp and working directories">
        <echo message="Cleaning out files in ${tomcat.location}"/>
            <delete includeEmptyDirs="true" defaultexcludes="false" >
                <fileset dir="${tomcat.location}/webapps" >
                        <include name="astrogrid-*/**"/>
                        <include name="exist*/**"/>
                </fileset>
                <fileset dir="${tomcat.location}/work/Catalina/localhost" >
                        <include name="*/**"/>
                </fileset>
                <fileset dir="${tomcat.location}/conf/Catalina/localhost" >
                        <include name="astrogrid-*.xml"/>
                </fileset>
                <fileset dir="${tomcat.location}/logs" >
                        <include name="*"/>
                </fileset>
				
        </delete>
                <!-- clean the temp dir here as well -->
                <delete dir="${temporary.dir}" />
                                <delete dir="${work.dir}"/>
</goal>



<!-- extra reports - full junit report, annotated with regression info.-->
<postGoal name="maven-junit-report-plugin:report">
        <attainGoal name="full-junit-report" />
        <attainGoal name="produce-baseline-summary" />
        <attainGoal name="annotate-report" />
        <attainGoal name="style-full-report" />
</postGoal>
<goal name="full-junit-report">
        <mkdir dir="${basedir}/target/docs/junit-full" />
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <junitreport todir="${basedir}/target">
                <fileset dir="${basedir}/target/test-reports">
                        <include name="TEST-*.xml" />
                </fileset>
        </junitreport>
</goal>

<goal name="style-full-report">
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <style basedir="${basedir}/target/" destdir="${basedir}/target/docs/junit-full" style="${basedir}/build/junit-frames.xsl">
                <include name="TESTS-TestSuites-Annotated.xml" />
                <param name="output.dir" expression="${basedir}/target/docs/junit-full" />
        </style>

      <!-- now the workflow documents-->

      <style basedir="${basedir}/target/docs/junit-full" destdir="${basedir}/target/docs/junit-full"
        style="${basedir}/build/workflow.xsl">
                <include name="**/*-workflow.xml" />
        </style>


</goal>


<goal name="produce-baseline-summary" description="generate summary test report, which could be used as a baseline for future tests">
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
       <!-- define summarizing stylesheet inline - handy!-->
        <jsl:stylesheet var="summarize" >
                <jsl:template match="/">
                        <testsuites>
                        <baseline-summary>
                                <baseline-name>LAST RUN</baseline-name>
                                <baseline-description>to fill in</baseline-description>
                                <j:new var="now" className="java.util.Date" />
                                <when>${now}</when>
                                <j:invokeStatic var="where" className="java.net.InetAddress" method="getLocalHost" />
                                <where>${where}</where>
                                <j:invokeStatic var="who" className="java.lang.System" method="getProperty">
                                        <j:arg value="user.name" />
                                </j:invokeStatic>
                                <who>${who}</who>
                                <project-name>auto-integration</project-name>
                                <project-version>${pom.currentVersion}</project-version>
                                <total-tests><jxml:expr select="sum(//testsuite/@tests)" /></total-tests>
                                <total-errors><jxml:expr select="sum(//testsuite/@errors) + sum(//testsuite/@failures)"/></total-errors>
                        </baseline-summary>
                        <jsl:applyTemplates select="//testsuite" />
                        </testsuites>
                </jsl:template>

                <jsl:template match="testsuite">
                        <jxml:element name="testsuite">
                              <jxml:attribute name="name"><jxml:expr select="@name"/></jxml:attribute>
                             <jxml:attribute name="package"><jxml:expr select="@package"/></jxml:attribute>
                             <jxml:attribute name="tests"><jxml:expr select="@tests"/></jxml:attribute>
                             <jxml:attribute name="failures"><jxml:expr select="@failures + @errors"/></jxml:attribute>
                             <jsl:applyTemplates select="testcase" />
                        </jxml:element>
                </jsl:template>

                <jsl:template match="testcase">
                        <jxml:element name="testcase">
                                <jxml:attribute name="name"><jxml:expr select="@name" /></jxml:attribute>
                                <jxml:attribute name="failure"><jxml:expr select="count(failure) + count(error)" /></jxml:attribute>
                        </jxml:element>
                </jsl:template>
        </jsl:stylesheet>
        <echo>Producing summary from current test results</echo>
        <!-- read in input file -->
        <jxml:parse var="allSuites" xml="target/TESTS-TestSuites.xml"/>
        <!-- apply stylesheet -->
        <j:file name="${basedir}/target/regression-baseline-summary.xml"><!-- add date here -->
         <jsl:style stylesheet="${summarize}" select="$allSuites" />
        </j:file>
</goal>

<goal name="annotate-report" description="add details from saved baseines into current test results">
        <echo>annotating test report with previous baselines</echo>
        <!-- take a copy to start -->
        <copy file="${basedir}/target/TESTS-TestSuites.xml" tofile="${basedir}/target/TESTS-TestSuites-Annotated.xml" overwrite="true"/>
        <!--copy in previous results, if present"-->
        <copy file="${user.home}/AGINAB-lastresults.xml" todir="${basedir}/baselines" overwrite="true" failonerror="false"/>
        <!--back  up latest for use next time-->
        <copy file="${basedir}/target/regression-baseline-summary.xml" tofile="${user.home}/AGINAB-lastresults.xml" overwrite="true"/>

        <fileScanner var="files">
                <fileset dir="${basedir}/baselines">
                        <include name="*.xml" />
                </fileset>
        </fileScanner>
        <j:new var="now" className="java.util.Date" />
        <j:forEach var="baselineFile" items="${files.iterator()}">
                <echo>Merging baseline ${baselineFile}</echo>
                <!-- parse this document in -->
                <!-- read in baseline file -->
                <jxml:parse var="baseline" xml="${baselineFile}" />

                <j:set var="baselineName"><jxml:expr select="$baseline/testsuites/baseline-summary/baseline-name" /></j:set>
                <echo>Baseline '${baselineName}' defined in ${baselineFile}</echo>
                <!-- define stylesheet -->
                <jsl:stylesheet var="annotate">
                        <jsl:template match="testsuites">
                                  <jxml:element name="testsuites">
                                        <jxml:attribute name="date">${now}</jxml:attribute>
                                        <jxml:copyOf select="$baseline/testsuites/baseline-summary" />
                                        <jsl:applyTemplates select="testsuite|baseline-summary"/>
                                </jxml:element>
                        </jsl:template>
                        <jsl:template match="testsuite">
                                <jxml:copy select=".">
                                        <jxml:set var="currentSuite" select="." />
                                        <jxml:set var="suiteSummary" select="$baseline/testsuites/testsuite[@package=$currentSuite/@package][@name=$currentSuite/@name]" />
                                        <!-- work around for bug- necessary to have two [..] clauses, as 'and' doesn't seem to work within a clause -->
                                          <jxml:element name="baseline">
                                                <jxml:attribute name="name">${baselineName}</jxml:attribute>
                                                <jxml:attribute name="tests"><jxml:expr select="$suiteSummary/@tests"/></jxml:attribute>
                                                <jxml:attribute name="failures"><jxml:expr select="$suiteSummary/@failures"/></jxml:attribute>
                                          </jxml:element>
                                        <jsl:applyTemplates select="testcase|baseline|properties|system-err|system-out"/>
                                </jxml:copy>
                        </jsl:template>
                        <jsl:template match="testcase">
                                <jxml:copy select=".">
                                        <jxml:set var="currentTest" select="." />
                                        <jxml:set var="testSummary" select="$suiteSummary/testcase[@name=$currentTest/@name]"/>
                                        <jxml:element name="baseline">
                                                <jxml:attribute name="name">${baselineName}</jxml:attribute>
                                                <jxml:attribute name="failure"><jxml:expr select="$testSummary/@failure"/></jxml:attribute>
                                        </jxml:element>
                                        <jsl:applyTemplates select="error|failure|baseline"/>
                                </jxml:copy>
                        </jsl:template>

                        <jsl:template match="properties|error|failure|baseline|baseline-summary"><!-- pass through.. -->
                                <jxml:copyOf select="." />
                        </jsl:template>
                        <jsl:template match="system-err"><!-- need special handling to preserve markup -->
                                <system-err><jxml:expr select="." /></system-err>
                        </jsl:template>
                        <jsl:template match="system-out"><!-- need special handling to preserve markup -->
                                <system-out><jxml:expr select="." /></system-out>
                        </jsl:template>
                </jsl:stylesheet>
                <!-- read in intput file -->
                <jxml:parse var="allSuites" xml="target/TESTS-TestSuites-Annotated.xml" />
                <!-- apply stylesheet -->
                <j:file name="${basedir}/target/processed-TESTS-TestSuites-Annotated.xml">
                        <jsl:style stylesheet="${annotate}" select="$allSuites" />
                </j:file>
                <!-- move new file back to original copy -->
                <move file="${basedir}/target/processed-TESTS-TestSuites-Annotated.xml"
                        tofile="${basedir}/target/TESTS-TestSuites-Annotated.xml" overwrite="true"/>
        </j:forEach>
</goal>

<!-- boilerplate below here /////////////////////////////////////////////////////////////////////////////////////////////-->

  <goal name="axis-declare-tasks">
     <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>

<!-- tomcat tools -->

    <goal name="frog">
        <!--+
            | Clean out the target directory.
            +-->
        <attainGoal name="clean:clean"/>
        <delete dir="${temporary.dir}"/>
        <!--+
            | Initialise the integration env.
            +-->
        <attainGoal name="init"/>
        <!--+
            | Deploy our components.
            +-->
        <attainGoal name="common-libs-deploy"/>
        <attainGoal name="configuration-deploy"/>
        <attainGoal name="reg-deploy"/>
        <attainGoal name="filestore-deploy"/>
        <attainGoal name="filemanager-deploy"/>
        <attainGoal name="community-deploy"/>
        <!--+
            | Configure our components.
            +-->
        <attainGoal name="community-toolkit"/>
        <attainGoal name="setup-working-dir"/>
        <attainGoal name="setup-registry"/>
        <attainGoal name="setup-filestore"/>
        <attainGoal name="setup-filemanager"/>
        <attainGoal name="community-database"/>
    	<!--
        <attainGoal name="community-register"/>
        -->
        <!--+
            | Run the integration tests.
        <attainGoal name="int-test"/>
            +-->
    </goal>

    <goal name="toad">
        <!--+
            | Clean out the target directory.
            +-->
        <attainGoal name="clean:clean"/>
        <delete dir="${temporary.dir}"/>
        <!--+
            | Initialise the integration env.
            +-->
        <attainGoal name="init"/>
        <!--+
            | Deploy our components.
            +-->
        <attainGoal name="deploy-all"/>
        <!--+
            | Run the integration tests.
        <attainGoal name="int-test"/>
        <attainGoal name="astrogrid-build-site"/>
        <attainGoal name="astrogrid-build-site"/>
            +-->
    </goal>
</project>
