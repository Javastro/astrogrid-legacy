<?xml version="1.0" ?>
<project xmlns:j="jelly:core" xmlns:define="jelly:define"  
	xmlns:artifact="artifact" xmlns:u="jelly:util" xmlns:x="jelly:xml">
<!-- 
common definitions and hooks used by the impl projects.
 -->

<!--  hooks -->
	
	<!--  record version infromation. -->
	<postGoal name="java:jar-resources">
	<echo>Setting Version Information</echo>	
			<echo file="${maven.build.dir}/classes/org/astrogrid/desktop/hivemind/version.xml">
	<default symbol="astrogrid.desktop.version" value="${astrogrid.desktop.version}" />
	<default symbol="astrogrid.build.date" value="${maven.jar.manifest.attribute.BuildDate}" />
	<default symbol="astrogrid.build.location" value="${maven.jar.manifest.attribute.BuildLocation}" />
	<default symbol="astrogrid.build.by" value="${user.name}" />
	<default symbol="astrogrid.build.jdk" value="${java.version}" />
				</echo>	
		
	</postGoal>
	
	
    <postGoal name="dist:prepare-bin-filesystem">
        	<echo>Copying dependencies into distro</echo>
                <j:forEach var="lib" items="${pom.artifacts}">
                        <j:set var="dep" value="${lib.dependency}"/>
                                <j:if test="${dep.getProperty('dist.bundle')=='true'}">
                                        <copy todir="${maven.dist.bin.assembly.dir}" file="${lib.path}"/>
                                </j:if>
                </j:forEach>
    </postGoal>		
	
    <goal name="astrogrid-build-artifact" prereqs="setup,dist:build-bin"
    description="Build the artifacts and leave in the target directory"
    />	
    
    <!--overridable goal, to zap appropriate settings (necessary when running in multiproject mode -->
		<goal name="setup">
			<j:set var="ifBuildingASR" scope="parent" value="false" />
		</goal>
    
    
    	
<!--  all the libs are now in maven.dist.bin.assembly.dir -here we list all the other things we're going to do with them-->
<postGoal name="dist:build-bin">
<!--  strip surplus classes -->
	<attainGoal name="jar-strip" />
<!--  package as a jar file -->
	<attainGoal name="app-jar" />
	<!--  sign this jar .-->	
		<attainGoal name="sign" />
	<!-- smoke-test -->
		<attainGoal name="smoke-test" />


<!--  package as an osx app -->
	<j:set var="tmpVar" value="${os.name}" />
   <j:if test="${tmpVar == 'Mac OS X'}">
	<attainGoal name="osx" />
	</j:if>	
	<!-- package as an installer -->
	<attainGoal name="installer" />		
	<j:if test="${! (ifBuildingASR.getValue().equals('true'))}">
	<!--  package as a webstart app -->
		<attainGoal name="webstart" />
	</j:if>
</postGoal>

	
  <!--==================================
  	Supporting goals
  	-->
    
<!--  
	real packaging routine. - hangs off back of 'dist' goal-
-->

<!--  makes an all-in-one executable jar -->
  <goal name="app-jar"
  description="build an all-in-one executable jar: depends on dist:build-bin">
  <echo>Building Application Jar: ${maven.final.name}-app.jar</echo>
  <!--  first extract the existing manifest -->
	<unjar src="${maven.dist.bin.assembly.dir}/${maven.final.name}.jar"
		dest="${maven.dist.bin.assembly.dir}">
		<patternset>
			<include name="META-INF/MANIFEST.MF" />
		</patternset>
	</unjar>
	<!-- then merge all jars together, splicing in the previously extracted manifest, 
	and a main-class attribute. -->
	<jar destfile="${maven.build.dir}/${maven.final.name}-app.jar"
	 	filesetmanifest="skip" update="false" duplicate="preserve"
	 	manifest="${maven.dist.bin.assembly.dir}/META-INF/MANIFEST.MF">
	 	<!--  generate a zipfileset for each jar in the folder - necessary to do it this way so I can specify excludes for 'within' the zipfileset-->
	 	<u:file var="d" name="${maven.dist.bin.assembly.dir}" />
	 	<j:forEach var="j" items="${d.listFiles()}">
	 		<j:if test="${j.getAbsolutePath().endsWith('.jar')}">
		 		<zipfileset src="${j.getAbsolutePath()}" 
		 		excludes="META-INF/*.SF META-INF/*.RSA META-INF/*.DSA META-INF/INDEX.LIST doc/** **/*.wsdl **/*.xsd **/*.txt log4j.properties simplelog.properties" />
	 		</j:if>
	 	</j:forEach>
		<manifest>
			<attribute name="Main-Class" value="${maven.javaapp.mainclass}" />
		</manifest>
	</jar>  
  </goal>	

<!-- package as an osx app - build only works on osx
todo see if we can include other things in the disk image too. -->
	<goal name="osx"  
	description="builds an osx-specific app. depends on app-jar, and only works on OSX">
	<!--  remove if already there - otherwise task won't proceed -->
	<delete dir="${maven.build.dir}/osx" quiet ="true" />
	<mkdir dir="${maven.build.dir}/osx"	/>
    <jarbundler 
    	dir="${maven.build.dir}/osx"
    	name="${pom.name}"
         version="${astrogrid.desktop.version}"
         bundleid="${maven.javaapp.mainclass}"
         jvmversion="${minimum.jvm.version}+"
         icon="${basedir}/src/webapp/logo.icns"         
         aboutmenuname="${pom.name}"
         smalltabs="true"
    	mainclass="${maven.javaapp.mainclass}"
    	screenmenu="true"
    	vmoptions="-Xmx512m"
    	jars="${maven.build.dir}/${maven.final.name}-app.jar">
    </jarbundler>
    <!--  remove the executable jar - so got a smaller package -->
    <echo> removing app jar </echo>
    <delete file="${maven.build.dir}/osx/${pom.name}.app/Contents/Resources/Java/${maven.final.name}-app.jar" />
    <!--  package it up as a osx disk image.-->
<!--    <exec executable="/usr/bin/hdiutil" dir="${maven.build.dir}" os="Mac OS X">-->
<!--      <arg value="create"/>-->
<!--      <arg value="-srcfolder"/>-->
<!--      <arg value="${maven.build.dir}/osx"/>-->
<!--      <arg value="-volname"/>-->
<!--      <arg value="${maven.final.name}"/>-->
<!--      <arg value="-ov"/>-->
<!--      <arg value="${maven.final.name}.dmg"/>-->
<!--    </exec>    -->
	<exec executable="/usr/bin/ditto" dir="${maven.build.dir}" os="Mac OS X">
		<arg value="-c" />
		<arg value="-X" />
		<arg value="-z"/>
		<arg value="--rsrc" />
		<arg value="${maven.build.dir}/osx" />
		<arg value="${maven.build.dir}/${maven.final.name}-osx.cpio" />
	</exec>
</goal>

<!--  try running stripped - testing / development only -->
<goal name="run" 
	description="run the application from within the dist/bin directory - useful as part of testing. Depends on dist:build-bin"
	>
	<echo>Running ${maven.javaapp.mainclass}</echo>
	<java classname="${maven.javaapp.mainclass}"
		fork="true">
		<classpath>
			<fileset dir="${maven.dist.bin.assembly.dir}" >
				<include name="*.jar" />
			</fileset>
		</classpath>
	</java>
</goal>

<goal name="run-app-jar"
	description="run the (stripped) application jar- useful for testing stripping. Depends on app-jar"
	>
	<echo>Running ${maven.javaapp.mainclass}</echo>
	<java classname="${maven.javaapp.mainclass}"
		fork="true">
		<classpath>
			<pathelement location="${maven.build.dir}/${maven.final.name}-app.jar" />
		</classpath>
	</java>
</goal>

	<!--  helper goal - unpackage resource zips, so that they can be referenced by the installer builder -->
	<goal name="unzipResources">
		<j:set scope="parent" var="resourceDir" value="${maven.build.dir}/resources" />
		<mkdir dir="${resourceDir}" />
        <j:forEach var="lib" items="${pom.artifacts}">
        	<j:set var="dep" value="${lib.dependency}"/>
            <j:if test="${dep.getProperty('unzip')}">
            	<unzip src="${lib.path}" dest="${resourceDir}" />
	        </j:if>
       </j:forEach>		
	</goal>

	<goal name="installer"
		description="Build an os-independent installer using IzPack. Depends on app-jar"
		prereqs="unzipResources">
		<echo>
			Building installer : ${maven.final.name}-installer.jar
		</echo>
		<!--  write oout icon config files
		in folowing 3 files, ${ } refers to a maven variable (compile time),
		while $FRED refers to a izpack variable (installtime)
		 -->
			<j:file name="${maven.build.dir}/windows_shortcuts.xml"		omitXmlDeclaration="false" xmlns="dummy">
				<shortcuts>
					<skipIfNotSupported />
					<programGroup defaultName="Astrogrid\${pom.name}"	 location="applications" />
					<shortcut name="${pom.name}" 
						target="$INSTALL_PATH/launch.bat"
						description="Launch ${pom.name} ${astrogrid.desktop.version}" 
						iconFile="$INSTALL_PATH/logo.ico" 
						initialState="noShow"
						programGroup="yes" desktop="yes" />
				</shortcuts>
			</j:file>
			<j:file name="${maven.build.dir}/unix_shortcuts.xml"	omitXmlDeclaration="false" xmlns="dummy">
				<shortcuts>
					<skipIfNotSupported />
					<programGroup defaultName="Astrogrid/${pom.name}"	 location="applications" />
					<shortcut name="${pom.name}" 
						target="$INSTALL_PATH/launch.sh"
						description="Launch ${pom.name} ${astrogrid.desktop.version}" 
						iconFile="$INSTALL_PATH/logo.png" 
						programGroup="yes" desktop="yes" type="Application" encoding="UTF-8" />
				</shortcuts>
			</j:file>						
		<!--  write out installer config file -->
		<j:file name="${maven.build.dir}/izpack.xml" omitXmlDeclaration="false" trim="true" xmlns="dummy">
				<installation version="1.0">
					<info>
						<appname>${pom.name}</appname>						
						<appversion>
							${astrogrid.desktop.version}
						</appversion>
						<appsubpath>astrogrid/${pom.name}</appsubpath>
						<authors>
							<author name="AstroGrid Consortium"
								email="helpdesk@astrogrid.org" />
						</authors>
						<url>http://www.astrogrid.org/desktop</url>
						<webdir>http://www.astrogrid.org/desktop/download</webdir>
						<javaversion>${minimum.jvm.version}</javaversion>
					</info>
					<variables>
						<!--  these can then be referenced in start scripts, etc -->
						<variable name="jarname" value="${maven.final.name}-app.jar" />
						<variable name="jdicversion" value="${jdic.version}" />
						<variable name="mainclass" value="${maven.javaapp.mainclass}" />
						<variable name="cpio" value="${maven.final.name}-osx.cpio" />
						<variable name="appname" value="${pom.name}" />
						<!--  customization of ui -->
						<variable name="desktopshortcutcheckboxenabled" value="true"/> 						
					</variables>
					<guiprefs height="600" resizable="yes" width="800" >
					  <modifier key="headingPanelCounter" value="progressbar"/>
					  <modifier key="headingPanelCounterPos" value="inNavigationPanel"/>
					</guiprefs>
					<locale>
						<langpack iso3="eng" />
					</locale>
					<resources><!-- to here. -->
						<res id="Installer.image" src="${basedir}/src/webapp/logo.gif" />
						<res id="LicencePanel.licence"
							src="${maven.license.licenseFile}" />
						<res src="${maven.build.dir}/windows_shortcuts.xml"
     							id="shortcutSpec.xml"/><!--  for windows -->
						<res src="${maven.build.dir}/unix_shortcuts.xml"
     								id="Unix_shortcutSpec.xml"/>			
					</resources>
					<panels>
						<panel classname="HelloPanel" />
					  	<panel classname="LicencePanel" />
						<panel classname="PacksPanel" />
						<panel classname="TargetPanel" />
						<panel classname="SummaryPanel" />
						<panel classname="InstallPanel" />
						<panel classname="ShortcutPanel" />
						<panel classname="SimpleFinishPanel" />
					</panels>
					<packs>
						<!--  program files pack -->
						<pack name="${pom.name}" required="yes" preselected="yes">
							<description>
								Program Files
							</description>
							<!--  new - check on what this can do.-->
<!--							<updatecheck>-->
<!--								<include name="*.jar" />-->
<!--							</updatecheck>		-->
							<file src="${maven.build.dir}/${maven.final.name}-app.jar" targetdir="$INSTALL_PATH/lib"/>
							<file src="${buildlib}/launch.sh" targetdir="$INSTALL_PATH" override="true">
								<os family="unix" /> 
							</file> 
							<file src="${buildlib}/launch.bat" targetdir="$INSTALL_PATH" os="windows" override="true"/>
							<fileset dir="${basedir}/src/webapp" targetdir="$INSTALL_PATH">
								<os family="windows" />
								<include name="*.ico" />
							</fileset>
							<fileset dir="${basedir}/src/webapp" targetdir="$INSTALL_PATH">
								<os family="unix" />
								<include name="*.png" />
							</fileset>							
							<!-- jdic native libraries -->
							<fileset dir="${resourceDir}/jdic_native_all-${jdic.version}/windows"  targetdir="$INSTALL_PATH/lib">
								<os family="windows" />
							</fileset>
							<fileset dir="${resourceDir}/jdic_native_all-${jdic.version}/linux"  targetdir="$INSTALL_PATH/lib">
								<os name="Linux" arch="i386" />
							</fileset>
							<fileset dir="${resourceDir}/jdic_native_all-${jdic.version}/solaris"  targetdir="$INSTALL_PATH/lib">
								<os name="Solaris" />
							</fileset>
							<fileset dir="${resourceDir}/jdic_native_all-${jdic.version}/solaris/i386"  targetdir="$INSTALL_PATH/lib">
								<os name="Solaris" arch="i386" />
							</fileset>											
							<fileset dir="${resourceDir}/jdic_native_all-${jdic.version}/solaris/sparc"  targetdir="$INSTALL_PATH/lib">
								<os name="Solaris" arch="SPARC" />
							</fileset>					
							<file src="${maven.build.dir}/${maven.final.name}-osx.cpio" targetdir="$INSTALL_PATH" >
								<os family="mac"/>
							</file>		
							<file src="${buildlib}/osx-install.sh" targetdir="$INSTALL_PATH" os="mac" override="true" />
																										
							<parsable targetfile="$INSTALL_PATH/launch.sh" type="shell" os="unix"/>	
							<parsable targetfile="$INSTALL_PATH/launch.bat" os="windows"/>			
							<parsable targetfile="$INSTALL_PATH/osx-install.sh" os="mac" type="shell"/>
							<executable targetfile="$INSTALL_PATH/launch.sh" stage="never" failure="warn"/>							
							<executable targetfile="$INSTALL_PATH/osx-install.sh" os="mac" stage="postinstall" failure="abort"/>
						</pack>
						<!--  optional pack of documentation -->
						<j:if test="${pom.artifactId != 'plastic-hub'}"> <!--  no point including examples for this one. -->
						<pack name="AR Scripting Support" required="no" preselected="yes">
							<description>
								Documentation and Examples of scripting the Astro Runtime 
							</description>
							<fileset dir="${resourceDir}/acr-interface-${astrogrid.desktop.version}"
								targetdir="$INSTALL_PATH/scripting" override="true"
							/>	
						</pack>
						</j:if>
						<!--  later - web installer? osx option? -->
						<!--  later : add shortcuts to other docuemntation, examples, etc -->
					</packs>
					<native type="izpack" name="ShellLink.dll"/>
				</installation>		
		</j:file>
		<!--  run installer compiler -->
			<echo>Building Installer</echo>
		<java classname="com.izforge.izpack.compiler.Compiler"  failonerror="true"
			classpathref="maven.dependency.classpath" fork="true" dir="${buildlib}">
			 <!--    run in a particular directory, so it can find the native libs. sheesh. -->
			<arg file="${maven.build.dir}/izpack.xml" />
			<arg value="-o"/><arg value="${maven.build.dir}/${maven.final.name}-installer.jar" />
		  	<arg value="-b"/><arg file="${basedir}" />
			<arg value="-k"/><arg value="standard" />   <!--  or web -->  
		</java>
<!--  dosn't work - so need to run directly. -->
<!--			<izpack input="${maven.build.dir}/izpack.xml"-->
<!--				output="${maven.build.dir}/${maven.final.name}-installer.jar"-->
<!--				installerType="standard"-->
<!--				basedir="${basedir}"-->
<!--				izPackDir="${buildlib}"-->
<!--			/>-->
	</goal>

	<goal name="webstart" 
	description="build zip containing jnlp and appllication. depends on app-jar">
  <echo>Building Webstart Zip: ${maven.final.name}-jnlp.zip</echo>
	<mkdir dir="${maven.build.dir}/jnlp" />
<!--  copy requirements into dir -->
	<copy todir="${maven.build.dir}/jnlp">
		<fileset dir="${basedir}/src/webapp" />
		<fileset dir="${maven.build.dir}" includes="${maven.final.name}-app.jar" />
	</copy>
<!-- write out jnlp file - from inline template. -->
	<j:file name="${maven.build.dir}/jnlp/${pom.artifactId}.jnlp" omitXmlDeclaration="false"  trim="true" xmlns="dummy">
	<jnlp href="${pom.artifactId}.jnlp" spec="1.0+" 
	codebase="http://software.astrogrid.org/jnlp/${pom.artifactId}">
	<information>
		<title>${pom.name}</title>
		<vendor>AstroGrid Consortium</vendor>
		<homepage href="http://www.astrogrid.org/desktop" />
		<icon href="logo.gif" />
		<icon href="splash.png" kind="splash" />
		<description>${pom.shortDescription}</description>
		<description kind="short">${pom.shortDescription}</description>
		<description kind="tooltip">${pom.shortDescription}</description>
		<offline-allowed />
	</information>
	<security>
		<all-permissions />
	</security>
	<resources>
		<j2se version="${minimum.jvm.version}+" max-heap-size="512m" initial-heap-size="32m" />
		<jar href="${maven.final.name}-app.jar" />
		<extension href="/jnlp/desktop-integration/desktop-integration.jnlp" name="Java Desktop Integration Components" />
	</resources>
	<application-desc main-class="${maven.javaapp.mainclass}" />
</jnlp>
	</j:file>
	<zip destfile="${maven.build.dir}/${maven.final.name}-jnlp.zip" 
		basedir="${maven.build.dir}/jnlp"
		update="false"/>
</goal>

	<!--  parses all the hivemind descriptors, and extracts a list of classes referenced by them.
		this result is left in a variable 'hivemindRequiredClasses' in the parent scope.
	 -->
	<goal name="scanDescriptors">
			<!--  define a set of results. -->
			<j:new var="classSet" className="java.util.HashSet" />
			<!--  find a list of descriptors -->
		 	<u:file var="d" name="${maven.build.dest}/org/astrogrid/desktop/hivemind" />
	 		<j:forEach var="f" items="${d.listFiles()}"> 
	 			<!--  a file called *.xml, but not hivemind*.xml or fallback*.xml -->
	 			<j:set var="fname" value="${f.getName()}" />	
	 			<j:if test="${fname.endsWith('.xml') &amp;&amp; ! fname.startsWith('hivemind') &amp;&amp; ! fname.startsWith('fallback') &amp;&amp; ! fname.startsWith('version')}">		
	 				<echo>${fname}</echo>
					<!-- load the file, and filter oout the entity references that maven can't handle-->
					<loadfile property="${fname}" srcFile="${f}"><!--  this ant task assigns to a write-once property - so need to use a new property each iteration. -->
						<filterchain>
							<linecontainsregexp >
								<regexp pattern="^(?!.*ENTITY)" /> <!--  regexps are horrible. this means 'lines not matching ENTITY' -->
								<regexp pattern="^.*&amp;lt;|^.*&amp;amp;|^(?!.*&amp;\w+;)" /> <!-- 
						here I'm trying to say:  'pass any lines  not containing an entity reference apart from lt; and amp;' 
						however,all I can manage is 'pass any lines containing amp;, or lt; or no-other entity reference.
						not quite equiuvalent, but does the job
						-->						
							</linecontainsregexp>
						</filterchain>
					</loadfile>
					<!--  now parse the filtered file  - need to double dereference fname -->
					<x:parse var="hd" validate="false" text="${context.findVariable(fname)}" />
					
					<!--  use xpath to search for referecned classes within the parsed descriptor -->
					<x:set var="classes" select="
						  $hd//@class
						| $hd//@servletClass
						| $hd//@interface[not(starts-with(.,'org.astrogrid.acr')) and contains(.,'.')]
						| $hd//@*[starts-with(.,'instance:')]
						| $hd//text()[starts-with(.,'instance:')]
						" />

					<!--  append classes we found in this descriptor to the set -->
					<j:forEach var="i" items="${classes}">
						<j:set var="classname" value="${i.getStringValue()}" />
						 <j:choose>
							<j:when test="${classname.startsWith('instance:')}">
								<!--  only interested in side-effect - j:set just used to prevent lots of output to console -->
								<j:set var="ignored" value="${classSet.add(classname.substring(9))}" />
							</j:when>
							<j:otherwise>
								<j:set var="ignored"	value="${classSet.add(classname)}"/>
							</j:otherwise>
						</j:choose>
					</j:forEach>
				</j:if>
			</j:forEach>
			<j:set scope="parent" var="hivemindRequiredClasses" value="${classSet}" />
	</goal>
	
	<!--  helper goal, that lists extracted descriptors -->
	<goal name="listDescriptors" prereqs="scanDescriptors">
		<echo>${hivemindRequiredClasses}</echo>
	</goal>
	
	
	<!-- strip unused classes, and optimize the rest
	
	load of rules here - some not relevant to smaller packagings - but this isn't a problem,
	as jars aren't available in these cases.
	-->
<goal name="jar-strip"
	description="strip and optimize the jars. depends on dist:build-bin" prereqs="scanDescriptors">
	<echo>Stripping Jar: ${maven.final.name}-app.jar</echo>
	<!--  very twitchy about whitespace inside loops and between tags. - need to pass in args directly for it to work. -->
    <proguard  printseeds="false"
    	skipnonpubliclibraryclasses="false"
    	skipnonpubliclibraryclassmembers="false"
    	allowaccessmodification="false"
    	verbose="true"
    	ignorewarnings="true" 
    	warn="true" note="true"
    	shrink="true" optimize="true" obfuscate="false" >
     	-injars ${maven.build.dir}/${maven.final.name}.jar     	
     	<j:forEach var="lib" items="${pom.artifacts}">
    		<j:set var="dep" value="${lib.dependency}"/>
    		<j:if test="${dep.getProperty('dist.bundle')=='true'  &amp;&amp; dep.getProperty('strip') == 'true'}" trim="false">
 			-injars "${lib.path}" 
 		</j:if>
 		</j:forEach>   
    	-outjars ${maven.dist.bin.assembly.dir}
    	<!--  list of libs to preserve -->
     	<j:forEach var="lib" items="${pom.artifacts}">
    		<j:set var="dep" value="${lib.dependency}" />
    		<!--  libraries that avoid the stripping process, but will be bundled in later -->
    		<j:if test="${dep.getProperty('dist.bundle')=='true'  &amp;&amp; dep.getProperty('strip') != 'true'}" trim="false">
    		<echo>Excluding lib: ${lib.name} from stripping</echo>
    		 -libraryjars ${lib.path} 
    		</j:if>
    		<!--  libraries that don't get bundled, but are used in testing process. -->
    		<j:if test="${dep.getProperty('testing.jar')=='true'}" trim="false">
    		  -libraryjars ${lib.path}
    		</j:if>
    	</j:forEach>
    		<!--  system libraries -->
			<j:set var="tmpVar" value="${os.name}" />  			
  			<j:choose>
  				<j:when test="${tmpVar == 'Mac OS X'}" trim="false"> <!--  for OSX -->
  				-libraryjars ${java.home}/../Classes/classes.jar
  				</j:when>
  				<j:otherwise trim="false"><!--  for other os. -->
  				-libraryjars ${java.home}/lib/rt.jar 
  				</j:otherwise>
  			</j:choose>
  	<!-- 
  	=============
  	ROOTS - which classes to keep
  	 -->
  	<!--  main classes-->	
    	-keep public class org.astrogrid.* {
    		public static void main(java.lang.String[]);
    		public protected *;
    	}	
    <!--  keep all classes referenced from hivemind visibly the same. -->	
    <j:forEach var="cl" items="${hivemindRequiredClasses}" trim="false">
    	-keep class ${cl} {
    		public  protected *;
    	}
    </j:forEach>
    	<!--  preserve handlers too -->
    	-keep class org.astrogrid.desktop.protocol.** {
    		public protected *;
    		}
    <!-- keep all things that extend AR interface classes -->
    	-keep class * implements org.astrogrid.acr.** {
    		public protected *;
    	}
    <!-- smoke-testing entry point -->
    	-keep class org.astrogrid.desktop.BuildInprocessWorkbench {
    		public protected *;
    		}
    		
    <!--  blunderbuss - would like to remove this rule in the fututre, and just use the ones above 
    	seems to be necessary to fix problems with xstream. todo - look into this.
    -->
    -keep class org.astrogrid.desktop.** {
    	public protected *;
    	}
	<!-- 
	=================== 
	How to preserve classes that are kept.
	-->
    	<!--  preserve naming and serialization code  , in any serializable classes that are required -->
	-keepclassmembers class * implements java.io.Serializable {
			*;
    		static final long serialVersionUID;
    		private void writeObject(java.io.ObjectOutputStream);
    		private void readObject(java.io.ObjectInputStream);
    		java.lang.Object writeReplace();
    		java.lang.Object readResolve();
		}		
	<!-- 
	=================
	Additional Rules for AG codebase -->
        <!--  Dynamically checked by the Finder class see bug JDT1845  -->
        -keep class org.astrogrid.desktop.BuildInprocessACR {
            public protected *;
        }		
	<!--  required to make security work. -->		
	-keep class org.astrogrid.community.** { <!-- could narrow to community**securtity?? -->
		public protected *;
	}
	-keep class org.astrogrid.security.** {
		public protected *;
		}  
	<!--  castor beans - keep these classes -->
	-keep class org.astrogrid.workflow.beans.**.* {
		*;
		}
	-keep class org.astrogrid.applications.beans.**.* {
		*;
		}			      
	<!--  complains that it can't find javax.xml.rpc.Service.createCall() - so make it a root -->
	 -keep class org.astrogrid.applications.delegate.impl.CommonExecutionConnectorDelegateImpl {
	 	*;
	 	}
	 -keep class javax.xml.rpc.Service {
	 	public protected *;
	 }
	 -keep class * implements javax.xml.rpc.Service {
	 	public protected *;
	 	}
	<!-- 
	=================
	Additional Rules for supporting libraries
	 -->	
	<!--  preserve commons logging factory -->
	-keep class org.apache.commons.logging.impl.LogFactoryImpl {
		public *;
		}
	-keep class org.apache.commons.logging.impl.Log4JLogger {
		public *;
		}
	-keep class org.apache.commons.logging.Log {
		public  *;
	}	
	<!--  fallback - and used within plastic hub variant. -->
	-keep class org.apache.commons.logging.impl.SimpleLog {
		public *;
	}
	<!--  log4j code -->
	-keep class org.apache.log4j.ConsoleAppender {
		public *;
		}
	-keep class org.apache.log4j.PatternLayout {
		public *;
		}		
	-keep class org.apache.log4j.Category {
		public *;
	}		
		<!--  preserve UI look and feel - always dynamically loaded-->			
	-keep class com.l2fprod.**.* extends javax.swing.plaf.ComponentUI {
    	public static javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent);
	}    
	<!--  security -->
	-keep class org.globus.myproxy.MyProxy {
		public *;
		}	
	-keep class org.globus.gsi.gssapi.GlobusGSSManagerImpl {
		public *;
		}			
	-keep class org.globus.gsi.gssapi.net.impl.GSIGssSocketFactory {
		public *;
		}
	<!--  later - should whittle this down further later -->
	-keep public class cryptix.** {
		public *;
		}
	-keep public class org.apache.xml.security.** {
		public *;
		}
	<!--  not enough - meh. 
	-keep class org.apache.xml.security.Init {
		public *;
		}  
	-keep class * implements org.apache.xml.security.keys.keyresolver.KeyResolverSpi {
		public *;
		}
	-keep class * implements org.apache.xml.security.utils.resolver.ResourceResolverSpi {
		public *;
		}
	-keep class  org.apache.xml.security.algorithms.SignatureAlgorithm {
		public *;
		}
	-keep class org.apache.xml.security.algorithms.implementations.SignatureBaseRSA {
		public *;
		}-->
	-keep public class org.bouncycastle.** {
		public *;
		}	
	-keep public class org.apache.ws.security.**.* {
		public *;
		}
	<!--  jdbm -->
	-keep class jdbm.recman.Provider {
		public *;
		}
	<!--  groovy -->
	-keep class groovyjarjarantlr.CommonToken {
		public *;
		}
		<!--  adql beans - keep as is. -->		
	-keep class org.astrogrid.adql.**.* {
		*;
		}
	<!--  xmlbeans -->
	-keep class org.apache.xmlbeans.impl.schema.SchemaTypeLoaderImpl {
		public *;
		}
	-keep class org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem {
		public *;
		}	
	-keep class org.apache.xmlbeans.impl.schema.SchemaTypeSystemCompiler {
		public *;
	}
	-keep class org.apache.xmlbeans.impl.store.Locale {
		public *;
		}
	-keep class org.apache.xmlbeans.impl.schema.PathResourceLoader {
		public *;
		}	
	-keep class org.apache.xmlbeans.impl.store.Path {
		public *;
		}
	-keep class org.apache.xmlbeans.impl.store.Query {
		public *;
		}	
	-keep class org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl {
		public *;
		}	
	<!--  castor - preserve all for the moment, else seems to fail - but include in strip path, so dependencies are processed. -->
	-keep class org.exolab.castor.**.* {
		*;
		}
	<!--  for jxpath (used within castor)  todo either remove, or strip this lib -->
	-keep public class * implements org.apache.commons.jxpath.ri.model.NodePointerFactory {
		public *;
		}
	-keep class org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl {
		public *;
		}
	<!--  xml streaming / xfire todo - todo try removing this-->
<!--	-keep class * implements javax.xml.stream.XMLStreamReader{-->
<!--		public *;-->
<!--		}-->
	<!--  axis, and dependent jars--> 
	-keep class org.apache.axis.transport.http.HTTPSender {
		public *;
		}
	-keep class org.apache.axis.transport.local.LocalSender {
		public *;
	}
	-keep class org.apache.axis.transport.java.JavaSender {
		public *;
	}
	-keep class * implements org.apache.axis.EngineConfiguration{
		public *;
	}
	-keep class org.apache.axis.configuration.DefaultEngineConfigurationFactory {
		public *;
	}
	-keep class org.apache.axis.configuration.EngineConfigurationFactoryDefault {
		public *;
	}
	-keep class * implements org.apache.axis.components.net.SocketFactory {
		public *;
	}
	<!--  stilts - uses a plugin discovery mechanism. -->
	-keep class * implements uk.ac.starlink.table.StarTableWriter {
		public *;
	}
	-keep class * implements uk.ac.starlink.table.TableBuilder {
		public *;
	}
    </proguard>	
	</goal>
	
	<!-- smoke test: defintion from wikipedia (fount of all my knowledge ;)
	
		It refers to the first test made after repairs or first assembly to provide some 
		assurance that a device, plumbing, woodwind instrument, or software will not 
		catastrophically fail. After a smoke test proves that the pipes will not leak, 
		the keys seal properly, the circuit will not burn, or the software will not crash 
		outright, the assembly is ready for more stressful testing.
	
	-->
	<goal name="smoke-test" description="Run a 'smoke test' that verifies that stripped packaged jar is minimally functional. depends on app-jar">
	 	<echo>Assembling Smoke Tests</echo>
	 	<attainGoal name="test:eclipse" /><!-- for some reason, necessary before I can taskdef the next op -->
          <taskdef
            name="junit"
            classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
          />  
         <!-- sign test classes - so that they can be run with the signed jar -->
         <j:set var="testJar" value="${maven.build.dir}/${maven.final.name}-tests.jar" />
         <jar destfile="${testJar}" basedir="${maven.test.dest}" />
         <signjar jar="${testJar}" 
         	alias="${astrogrid.signature.alias}" storepass="${astrogrid.signature.storepass}" 
         	lazy="true"/>
	 	<!--  based on maven test plugin. -->
	 	<mkdir dir="${maven.build.dir}/smoke-test-reports" />
	 	<echo>Running Smoke Tests</echo>
		<junit printsummary="${maven.junit.printSummary}"          failureProperty="maven.test.failure"
			 fork="${maven.junit.fork}" dir="${maven.junit.dir}"
			haltonerror="true" >
            <u:tokenize var="listOfProperties" delim=" ">${maven.junit.sysproperties}</u:tokenize>
            	<j:forEach var="someProperty" items="${listOfProperties}">
              		<sysproperty key="${someProperty}" value="${context.getVariable(someProperty)}"/>
            	</j:forEach>	
            	<formatter type="xml" />
	            <formatter type="${maven.junit.format}" usefile="${maven.junit.usefile}"/>
				<classpath>
					<pathelement location="${pom.getDependencyPath('junit')}" /> <!-- must come first, before any stripped version in the app jar -->
					<pathelement location="${maven.build.dir}/${maven.final.name}-app.jar" />				
					<pathelement location="${testJar}" />
					<j:forEach var="lib" items="${pom.artifacts}">
    					<j:set var="dep" value="${lib.dependency}"/>
    					<j:if test="${dep.getProperty('testing.jar')=='true'}">
							<pathelement path="${lib.path}" />
 						</j:if>
 					</j:forEach> 
				</classpath>
			<u:tokenize var="tList" delim=" ">${smoke.tests}</u:tokenize>
			<j:forEach var="t" items="${tList}">
				<test name="${t}" todir="${maven.build.dir}/smoke-test-reports" />
			</j:forEach>
		</junit>
          <j:if test="${maven.test.failure}">
            <j:if test="${context.getVariable('maven.test.failure.ignore') != 'true'}">
              <fail message="There were failures in the smoke test"/>
            </j:if>
          </j:if>	
	</goal>

	<!--  simple tag that signs the build product. 

	-->
	<goal name="sign" >
		<echo>Signing Jar: ${maven.final.name}-app.jar</echo>
		<signjar  alias="${astrogrid.signature.alias}" storepass="${astrogrid.signature.storepass}" 
			jar="${maven.build.dir}/${maven.final.name}-app.jar"/>
	</goal>

<!--  definitions of custom ant tasks. -->

	
          
	<!--  strips unused classes and methods from a jar -->
	<taskdef resource="proguard/ant/task.properties"
      classpathref="maven.dependency.classpath"/>
      
      <!--  packages jars into an OSX application bundle -->
	<taskdef name="jarbundler" 
		classname="com.loomcom.ant.tasks.jarbundler.JarBundler"
         classpathref="maven.dependency.classpath" />

	<!--  izPack installer compiler -->
<taskdef name="izpack"  classname="com.izforge.izpack.ant.IzPackTask"
         classpathref="maven.dependency.classpath" />
</project>