<?xml version="1.0" encoding="iso-8859-1"?>
<document>
<properties>
<title>Testing</title>
        <author email="noel.winstanley@manchester.ac.uk">Noel Winstanley</author>

</properties>
<body>
<section>
<p>
<h2>
<a name="Unit_testing_with_Mock_Objects"></a>Unit testing with Mock
Objects</h2>
<a name="EasyMock"></a>Because Hivemind encourages a
constructor-injection style of programming, the implementation is
amenable to a 
<a href="http://c2.com/cgi/wiki?MockObject" target="_top">
mock-object</a>style of unit testing. Here the class-under-test is
provided with mock implementations of it's dependent objects. These
mock implementations can be configured to expect a particular
interaction with the class-under-test - ie. expect certain method
calls, with particular parameters, and return test data. The
class-under-test is exercised, after which the expectations of the
mock objects are verified. 
<p></p>Writing mock objects by hand is quite a drudge. There are
tools which will generate mock-object sourcecode, but this not a
good thing, IMHO - as this leads to additioinal source that needs
to be managed, while re-use is infrequent. 
<p></p>Instead, 
<a href="/bin/view/Astrogrid/DesktopAstroGrid" class="twikiLink">
DesktopAstroGrid</a>uses 
<a href="http://www.easymock.org/" target="_top">EasyMock</a>to
generate mock objects on-the-fly as needed. This is the preferred
method for unit testing. The coding style takes a little bit of
getting used to - however, there are plenty of example tests to
work from in the project 
<a href="http://software.astrogrid.org/astrogrid-desktop-docs-snapshot/xref-test/org/astrogrid/desktop/alternatives/HeadlessUIComponentUnitTest.html"
target="_top">(example)</a>, 
<a href="http://software.astrogrid.org/astrogrid-desktop-docs-snapshot/xref-test/org/astrogrid/desktop/modules/system/pref/PreferenceManagerImplUnitTest.html"
target="_top">(example)</a>
<p></p>

</p>
</section>
</body>
</document>
