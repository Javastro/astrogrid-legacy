/**
 * 
 */
package org.astrogrid.desktop.framework;

import java.net.HttpURLConnection;
import java.net.URL;
import java.security.Principal;

import junit.framework.Test;
import junit.framework.TestSuite;
import net.ladypleaser.rmilite.RemoteInvocationException;
import net.sourceforge.jwebunit.WebTester;

import org.apache.commons.lang.StringUtils;
import org.astrogrid.Fixture;
import org.astrogrid.acr.ACRException;
import org.astrogrid.acr.Finder;
import org.astrogrid.acr.Finder.RmiAcr;
import org.astrogrid.acr.builtin.ACR;
import org.astrogrid.acr.system.Configuration;
import org.astrogrid.acr.system.WebServer;
import org.astrogrid.acr.test.SessionTest;
import org.astrogrid.desktop.ARTestSetup;
import org.astrogrid.desktop.InARTestCase;
import org.astrogrid.desktop.modules.system.ConfigurationRpcTransportTest.ConfigurationXmlRpcClient;

/** integraiton test for full session manager 
 * @author Noel Winstanley
 * @since Jun 6, 20062:34:02 PM
 */
public class SessionManagerIntegrationTest extends InARTestCase {
	/*
	 * @see TestCase#setUp()
	 */
	protected void setUp() throws Exception {
		super.setUp();
		sess = (SessionManagerInternal)assertComponentExists(SessionManagerInternal.class,"builtin.sessionManager");
		ws = (WebServer)assertServiceExists(WebServer.class,"system.webserver");
	}
	
	protected SessionManagerInternal sess;
	protected WebServer ws;

	protected void tearDown() throws Exception {
		super.tearDown();
		sess= null;
		ws = null;
	}

	
	public void testDefaultSession() throws Exception {
		String id = sess.getDefaultSessionId();
		assertNotNull(id);
		assertTrue(sess.exists(id));
		Principal p = sess.findSessionForKey(id);
		assertNotNull(p);
	}
	
	// test all is fine with default session.
	public void testSessionAdoption() throws Exception {
		String id = sess.getDefaultSessionId();
		Principal p = sess.findSessionForKey(id);
		assertNotNull(p);
		
		sess.clearSession();
		assertNull(sess.currentSession());
		sess.adoptSession(p);
		assertNotNull(sess.currentSession());
		assertEquals(p.getClass(),sess.currentSession().getClass());
		
		assertSame(p,sess.currentSession());
		sess.clearSession(); 
		assertNull(sess.currentSession());
		
	}
	
	// test that endpoint reported for default session match with 
	// root reported by webserver.
	public void testDefaultSessionEndpoints() throws Exception {
		String id = sess.getDefaultSessionId();
		assertEquals(ws.getRoot(),sess.findHttpSession(id));
		assertTrue(StringUtils.contains(sess.findXmlRpcSession(id).toString(),ws.getRoot().toString()));
		
	}
	
	public void testCreateNewSession() throws Exception {
		String id = sess.createNewSession(20); //20 mins
		assertNotNull(id);
		assertTrue(sess.exists(id));
		assertFalse(id.equals(sess.getDefaultSessionId()));
		
		Principal p = sess.findSessionForKey(id);
		assertNotNull(p);
		assertFalse(p.equals(sess.findSessionForKey(sess.getDefaultSessionId())));
		
		sess.dispose(id);
		assertFalse(sess.exists(id));
		assertNull(sess.findSessionForKey(id));
	}

	public void testNewSessionHttp() throws Exception {
		String id = sess.createNewSession(20); //20 mins
		assertNotNull(id);
		assertTrue(sess.exists(id));
		URL u = sess.findHttpSession(id);
		assertNotNull(u);
		// now need to test this.
		WebTester web = new WebTester();
		web.getTestContext().setBaseUrl(u.toString());
		web.beginAt("/");
		
		web.assertTextPresent("Modules");
		
		// can't be bothered to test partitioning in this version. too hard.

		sess.dispose(id);
		
		// re-examine the base url for this context - should give a 403 (generated by the root context)
    	HttpURLConnection conn = (HttpURLConnection) u.openConnection();
    	conn.connect();
    	assertEquals(403,conn.getResponseCode());
    	conn.disconnect();		
		
	}
	
	public void testNewSessionXmlRpc() throws Exception {
		String id = sess.createNewSession(20); //20 mins
		assertNotNull(id);
		assertTrue(sess.exists(id));
		URL u = sess.findXmlRpcSession(id);
		assertNotNull(u);
		URL defaultU = sess.findXmlRpcSession(sess.getDefaultSessionId());
		
		// check some things are shared.
		Configuration conf = new ConfigurationXmlRpcClient(defaultU);
		Configuration sConf = new ConfigurationXmlRpcClient(u);
		checkSharedService(id, conf, sConf);

		// and test some things are sessioned.
		SessionTest st = new SessionTestXmlRpcClient(defaultU);
		SessionTest sst = new SessionTestXmlRpcClient(u);	
		checkSessionedService(st, sst);
		
		// finally, verify that disposiong a session makes it inaccessible.
		sess.dispose(id);
		
		// re-examine the base url for this context - should give a 403 (generated by the root context)
    	HttpURLConnection conn = (HttpURLConnection) u.openConnection();
    	conn.connect();
    	assertEquals(403,conn.getResponseCode());
    	conn.disconnect();		
    	try {
    		sConf.listKeys(); 
    		fail("expected to chuck");
    	} catch (ACRException e) {
    		// expected.
    	}
	}


	public void testNewSessionRmi() throws Exception {
		String id = sess.createNewSession(20); //20 mins
		assertNotNull(id);
		assertTrue(sess.exists(id));
		// although the ar classes are on the classpath, this connects via rmi, because the
		// ar is already running - which is what we want. :)
		Finder f = new Finder();
		ACR acr = f.find();
		assertTrue(acr instanceof RmiAcr);
		ACR sessioned = f.findSession(id);
		assertNotNull(sessioned);
		assertTrue(sessioned instanceof RmiAcr);
		assertNotSame(acr,sessioned);
		assertFalse(acr.equals(sessioned));
		
		// check some things are shared.
		Configuration conf = (Configuration)acr.getService(Configuration.class);
		Configuration sConf =(Configuration)sessioned.getService(Configuration.class);
		assertNotSame(conf,sConf);
		// we'll use id as a suitable temporary key.
		checkSharedService(id, conf, sConf);
		
		// check other things are sessioned.
		SessionTest st = (SessionTest)acr.getService(SessionTest.class);
		SessionTest sst = (SessionTest)sessioned.getService(SessionTest.class);
		checkSessionedService(st, sst);
		
		// check that a session is inaccessibble after it's been disposed.
		sess.dispose(id);
		try {
			sConf.listKeys(); // pretty innocuous, and even on a shared (i.e. non-sessioned object).
			fail("expected to chuck");
		} catch (RemoteInvocationException e) {
			// ok
		}
			
	}

	
	// xmlrpc client for talking to sessiontest - makes the code a little clearer and more concise.
	public static class SessionTestXmlRpcClient implements SessionTest {

		public SessionTestXmlRpcClient(URL rpcUrl) {
			client = Fixture.createXmlRpcClient(rpcUrl);		
		}	
		public final org.apache.xmlrpc.client.XmlRpcClient client;
		public String get() {
			try {
			String s = (String)client.execute("test.sessiontest.get",new Object[]{});
			return s.equals("NULL") ? null :s;
			} catch (Exception e) {
				fail(e.getMessage());
				throw new RuntimeException("never reached");			
			}			
		}
		public void put(String arg0) {
			try {
				client.execute("test.sessiontest.put",new Object[]{arg0});
			} catch (Exception e) {
				fail(e.getMessage());						
			}
		}
		
	}
	

	private void checkSharedService(String id, Configuration conf, Configuration sConf) {
		assertNull(conf.getKey(id));
		assertNull(sConf.getKey(id));
		
		conf.setKey(id,"42");
		assertEquals("42",conf.getKey(id));
		assertEquals("42",sConf.getKey(id)); // sharing between sessions.
		
		sConf.setKey(id,"24");
		assertEquals("24",sConf.getKey(id));
		assertEquals("24",conf.getKey(id)); // and it works both ways.
		conf.removeKey(id);
		assertNull(conf.getKey(id));
		assertNull(sConf.getKey(id));
	}


	private void checkSessionedService(SessionTest st, SessionTest sst) {
		assertNotNull(st);
		assertNotNull(sst);
		assertNotSame(st,sst);
		
		st.put("foo");
		assertNotNull(st.get());
		assertEquals("foo",st.get());
		assertNull(sst.get()); // the crunch.
		
		sst.put("bar");
		assertEquals("bar",sst.get());
		assertEquals("foo",st.get()); // and back again.
	}	
	
	
	// too long to wait for this.
	public void dontTestSessionExpires() throws Exception {
		String id = sess.createNewSession(1); //1 minute
		assertNotNull(id);
		assertTrue(sess.exists(id));
		assertFalse(id.equals(sess.getDefaultSessionId()));
		
		Principal p = sess.findSessionForKey(id);
		assertNotNull(p);
		assertFalse(p.equals(sess.findSessionForKey(sess.getDefaultSessionId())));
		
		Thread.sleep(120 * 1000); // need to wait for longer than the expirey.
		assertFalse(sess.exists(id));
		assertNull(sess.findSessionForKey(id));
	}
	
	
	
	
    public static Test suite() {
        return new ARTestSetup(new TestSuite(SessionManagerIntegrationTest.class));
    }
}
