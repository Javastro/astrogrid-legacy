<?xml version="1.0"?>
<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:jsl="jelly:jsl" xmlns:jxml="jelly:xml"      xmlns:artifact="artifact">

        <goal name="astrogrid-build-artifact" prereqs="javaapp,dist:build-bin"/>
		<goal name="astrogrid-install-artifact" prereqs="javaapp:install,dist-install" />
		
	<goal name="astrogrid-build-site" prereqs="site" />

	<goal name="astrogrid-deploy-site" prereqs="astrogrid-build-site">
		<attainGoal name="site:sshdeploy" />
	</goal>
		
		
	<postGoal name="java:jar-resources">
		<attainGoal name="astrogrid.version" />
	</postGoal>
		
		<goal name="astrogrid.version">
			<echo file="${maven.build.dir}/classes/org/astrogrid/desktop/hivemind/astrogrid.version">
astrogrid.desktop.version=${astrogrid.desktop.version}
astrogrid.build.date=${maven.jar.manifest.attribute.BuildDate}
astrogrid.build.location=${maven.jar.manifest.attribute.BuildLocation}
astrogrid.build.by=${user.name}
astrogrid.build.jdk=${java.version}
			</echo>
		</goal>
<!-- javaapp -->		
	<!-- do the final tweaks to the javaapp process -->
		    <!-- work around: javaapp unzips all dependent jars before making one big jar.
		    this doesn't work on MacOS, as packages named EDU... and edu... get mapped to the
		    same folder - which then results in a 'class not found' exception.
		    Concurrent is the only one that uses non-standard capitalization, that falls foul of this
		    so exclude it from the javaaapp process, and stuff it in later ourseleves using a maven 
		    post goal.
		    -->	
	<postGoal name="javaapp:jar">
   <j:forEach var="lib" items="${pom.artifacts}">
      <j:set var="dep" value="${lib.dependency}"/>     
      <j:if test="${dep.getProperty('nww.bundle.later')=='true'}">
		<jar update="true" destfile="${maven.javaapp.final.name}"
			filesetmanifest="skip" duplicate="fail">
			<zipfileset src="${lib.path}" />
		</jar>
	  </j:if>
    </j:forEach>
	</postGoal>

<!-- distribution -->
     <!--  add in dependencies -->
        <postGoal name="dist:prepare-bin-filesystem">
                <j:forEach var="lib" items="${pom.artifacts}">
                        <j:set var="dep" value="${lib.dependency}"/>
                                <j:if test="${dep.getProperty('dist.bundle')=='true'}">
                                        <copy todir="${maven.dist.bin.assembly.dir}" file="${lib.path}"/>
                                </j:if>
                </j:forEach>
         </postGoal>
         
         <goal name="dist-install" prereqs="dist:build-bin">
         <!-- rename - otherwise I can't distinguish it in the site build -->
               <artifact:install
        artifact="${maven.dist.dir}/${maven.final.name}.zip"
        type="zip"
        project="${pom}"
        /> 
        </goal>
         
<!-- webstart -->

<!-- publishing goals -->

<goal name="publish-jnlp" 
      description="Publish the release configuration of this JNLP at the release URL"
      prereqs="release,jnlp,site:sshdeploy" />
<goal name="publish-beta-jnlp" 
      description="Publish the beta configuration of this JNLP at the beta URL"
      prereqs="beta,release,jnlp,site:sshdeploy"/>
<goal name="publish-alpha-jnlp" 
      description="Publish the alpha configuration of this JNLP at the alpha url"
      prereqs="alpha,release,jnlp,site:sshdeploy"/>
	
	
	<!-- zap values in pom, to adjust publish location -->
<goal name="release">
        <j:set var="_dir" value="/var/www/software/jnlp/${subPath}${pom.artifactId}/"/>
        ${pom.setSiteDirectory(_dir)}
        <echo>Publish location set to ${pom.siteDirectory}</echo>
</goal>

<goal name="beta">
        <j:set var="subPath" value="beta/" />
        <j:set var="jnlpVersion" value=" (BETA)" />
</goal>

<goal name="alpha">
        <j:set var="subPath" value="alpha/" />
        <j:set var="jnlpVersion" value=" (ALPHA)" />
</goal>
	
        <postGoal name="jnlp:generate-jnlp">
		<copy todir="${maven.jnlp.dir}">
			<fileset dir="${basedir}/src/webapp" />
		</copy>
                <!-- sign jars by hand - as maven jnlp task is flakey - -->
                <signjar alias="astrogrid" storepass="qwertyuiop">
                        <fileset dir="${maven.jnlp.dir}">
                                <include name="*.jar" />
                        </fileset>
                </signjar>		
		<attainGoal name="define-stylesheet" />
         <attainGoal name="patch-jnlp" />
        </postGoal>	
	
	
        <goal name="define-stylesheet">
             <jsl:stylesheet var="patch">
                <jsl:template match=
		  "jar|security|extension|resources|application-desc|j2se|property|title|vendor|description|homepage|icon|offline-allowed|shortcut|association|related-content">
                        <jxml:copyOf select="." />
                </jsl:template>
		<jsl:template match="information">
			<jxml:copy>
				<jxml:element name="related-content">
					<jxml:attribute name="href">http://www.astrogrid.org/desktop</jxml:attribute>
					<jxml:element name="title">Hiome Pages</jxml:element>
				</jxml:element>		
			
				<jsl:applyTemplates select="@* | node()" />
			</jxml:copy>
		</jsl:template>
                <jsl:template match="jnlp">
					<jxml:copy>
  								<jsl:applyTemplates select="@* | information | security | resources "/>																
								<jxml:copyOf select="application-desc" />
                            </jxml:copy>
                </jsl:template>
				
				<jsl:template match="@*">
                                <jxml:copy>
                                        <jsl:applyTemplates select="@* | node()" />
                                </jxml:copy>				
				</jsl:template>
             </jsl:stylesheet>
        </goal>

        <goal name="patch-jnlp">
                <echo>Patching JNLP file</echo>
             ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}

             <!-- read in original jnlp -->
             <jxml:parse var="originalJNLP" xml="file://${maven.jnlp.dir}/${pom.artifactId}.jnlp" />
             <!-- apply stylesheet -->
             <j:file name="${maven.jnlp.dir}/${pom.artifactId}.jnlp">
                <jsl:style stylesheet="${patch}" select="$originalJNLP" />
             </j:file>
        </goal>


</project>

