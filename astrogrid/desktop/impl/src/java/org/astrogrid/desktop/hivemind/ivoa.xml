<?xml version="1.0"?>
<!DOCTYPE module  [
	<!ENTITY descriptors SYSTEM "classpath:/org/astrogrid/desktop/hivemind/ivoa-descriptors.xml">
	]>
<module id="ivoa" version="1.0.0" package="org.astrogrid.acr.ivoa">
	IVOA standard services. 

	
	<contribution configuration-id="framework.descriptors">
		<acr-module name="ivoa" description="IVOA Standard Services">
		&descriptors;
		</acr-module>
	</contribution>	
		
	<contribution configuration-id="framework.acrServices">
			<acrService id="ssap" interface="Ssap" />
			<acrService id="siap" interface="Siap" />
			<acrService id="cone" interface="Cone" />
			<acrService id="adql" interface="Adql" />
			<acrService id="registry" interface="Registry" />
			<acrService id="externalRegistry" interface="ExternalRegistry" />
			<acrService id="cache" interface="CacheFactory" />
            <acrService id="vosi" interface="Vosi" />
	</contribution>
	
	
	<!--  =====================
	ADQL
	 -->
	<service-point id="adql" interface="org.astrogrid.desktop.modules.ivoa.AdqlInternal">
        Adql parser component.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ivoa.AdqlImpl" />
		</invoke-factory>
	</service-point>
	
	<!-- =====================
	REGISTRY
	-->

    <service-point id="registry" interface="org.astrogrid.desktop.modules.ivoa.RegistryInternal">
        System Registry
        <interceptor service-id="system.edt" />        
        <interceptor service-id="system.throbber" />
        <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.ivoa.IndexCachingRegistryImpl" >
                <service>externalRegistry</service>
               <object>preference:org.astrogrid.registry.query.endpoint</object>
               <object>preference:org.astrogrid.registry.query.altendpoint</object>
              <int>${registry.large.query.threshold}</int>               
                <object>cache:resources</object>
                <object>cache:documents</object>
                <object>cache:indexes</object>      
            </construct>
    </invoke-factory>
    </service-point>
    
    
    <contribution configuration-id="hivemind.FactoryDefaults">
        <!--  size above which a differenty query strategy is used. -->
        <default symbol="registry.large.query.threshold" value="300" /> 
    </contribution> 
    
        <!--  run periodically -->  
    <contribution configuration-id="system.scheduledTasks">
        <object>service:registry</object><!--  removes obsolete registry entries -->
    </contribution>
        
	
	<contribution configuration-id="ivoa.caches">
		cache for individual resource objects. elements are eternal - never expire based on age. We manage expiration instead.
		<cache name="resources"
			maxElementsInMemory="300"
			maxElementsOnDisk="5000"
			overflowToDisk="true"
			diskPersistent="true"
            registrySensitive="true"
            eternal="true"
		/>
		cache for registry return documents - resource docs, and xquery docs
		sized so it's just enough in memory one up, one down in registry google.
		<cache name="documents"
			maxElementsInMemory="3"
			maxElementsOnDisk="20"
			overflowToDisk="true"
			diskPersistent="true"
			timeToLiveSeconds="${ivo.registry.cacheLife}"
			timeToIdleSeconds="${ivo.registry.cacheLife}"
            registrySensitive="true"
		/>
        unused - keep around so that any residual data in this cache will be cleaned from disk.
		<cache name="bulk"
			maxElementsInMemory="1"
			maxElementsOnDisk="10"
			overflowToDisk="true"
			diskPersistent="true"
			timeToLiveSeconds="10"
			timeToIdleSeconds="10"
            registrySensitive="true"
		/>			
        cache for index lists - lists of indexes matching a particular xquery. used to optimize xquery and voexplorer UI
        <cache name="indexes"
            maxElementsInMemory="3"
            maxElementsOnDisk="200"
            overflowToDisk="true"
            diskPersistent="true"
            timeToLiveSeconds="${ivo.registry.cacheLife}"
            timeToIdleSeconds="${ivo.registry.cacheLife}"
            registrySensitive="true"
            />            
	</contribution>
    
     <contribution configuration-id="util.selftest" >
        <object>service-property:registry:selftest</object>
    </contribution>
	
	<implementation service-id="registry" if="property ivoa.registry.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	
	
		<contribution configuration-id="framework.preferences">
		<preference name="org.astrogrid.registry.query.endpoint" 
			advanced="false" requires-restart="true" propagate-to-config="true"
            default-value="http://registry.astrogrid.org/astrogrid-registry/services/RegistryQueryv1_0">
				<ui-name>Registry endpoint</ui-name>
				<description>http url of the main registry service</description>
                <alternative>http://alt.registry.astrogrid.org/astrogrid-registry/services/RegistryQueryv1_0</alternative>
                 <alternative>http://alt.registry.astrogrid.org/astrogrid-registry_v1_0/services/RegistryQueryv1_0</alternative>
                <alternative>http://msslxv.mssl.ucl.ac.uk:8080/mssl-registry/services/RegistryQueryv1_0</alternative>
				<alternative>http://harvesting-registry.roe.ac.uk/astrogrid-registry/services/RegistryQueryv1_0</alternative>
                <alternative>http://rakaposhi.star.le.ac.uk/astrogrid-registry/services/RegistryQueryv1_0</alternative>
   <!-- remove the following for public release 
				<alternative>http://msslxt.mssl.ucl.ac.uk:8080/astrogrid-regtest-1_0/services/RegistryQueryv1_0</alternative>
                <alternative>http://twmbarlwm.star.le.ac.uk:8080/astrogrid-registry/services/RegistryQueryv1_0</alternative>
                <alternative>http://casx019-zone1.ast.cam.ac.uk:8080/astrogrid-registry/services/RegistryQuery</alternative>
                -->
				<units>url</units>
		</preference>
		<preference name="org.astrogrid.registry.query.altendpoint"
			advanced="false" requires-restart="true" propagate-to-config="true"
            default-value="http://alt.registry.astrogrid.org/astrogrid-registry_v1_0/services/RegistryQueryv1_0">		
				<ui-name>Fallback Registry endpoint</ui-name>
				<description>http url of the main registry service</description>
                <alternative>http://registry.astrogrid.org/astrogrid-registry/services/RegistryQueryv1_0</alternative>
                <alternative>http://msslxv.mssl.ucl.ac.uk:8080/mssl-registry/services/RegistryQueryv1_0</alternative>
				<alternative>http://harvesting-registry.roe.ac.uk/astrogrid-registry/services/RegistryQueryv1_0</alternative>
                <alternative>http://rakaposhi.star.le.ac.uk/astrogrid-registry/services/RegistryQueryv1_0</alternative>
   <!-- remove the following for public release 
                <alternative>http://msslxt.mssl.ucl.ac.uk:8080/astrogrid-regtest-1_0/services/RegistryQueryv1_0</alternative>
                <alternative>http://twmbarlwm.star.le.ac.uk:8080/astrogrid-registry/services/RegistryQueryv1_0</alternative>
                <alternative>http://casx019-zone1.ast.cam.ac.uk:8080/astrogrid-registry/services/RegistryQuery</alternative>
                -->
				<units>url</units>
		</preference>
		<preference name="ivo.registry.cacheLife" requires-restart="true"
			default-value="86400">
				<ui-name>Cached entries expire after</ui-name>
				<description>86400 seconds = a day, 604800 seconds = a week</description>
				<units>seconds</units>
		</preference>
	</contribution>
	<!-- =========================
	EXTERNAL REGISTRY
	 -->
	<service-point id="externalRegistry" interface="org.astrogrid.desktop.modules.ivoa.ExternalRegistryInternal">
		External Registries.
        <interceptor service-id="system.edt" />        
		<interceptor service-id="system.throbber" />
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ivoa.StreamingExternalRegistryImpl" >
                <service>registry</service>
                <service>adql</service>
			</construct>
		</invoke-factory>	
	</service-point>
	
		<implementation service-id="externalRegistry" if="property ivoa.externalRegistry.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>
	

	
<!-- 
	<contribution configuration-id="hivemind.FactoryDefaults">
		<default symbol="ivoa.registry.of.registries.endpoint" value="http://FILL.ME.IN" />	
	</contribution>	
    -->
    
    <!-- registry resource access servlet
    -->
 
        <contribution configuration-id="system.servlets" if="not (property ivoa.resource.servlet.disabled)">
            <!--  path is fragile - used within ResourceSetMessageType -->
        <servlet name="resource" path="/resource" 
            servletClass="org.astrogrid.desktop.modules.ivoa.ResourceServlet" />
    </contribution>
 
 <!-- 
=========================
SSAP
 -->
	<service-point id="ssap" interface="Ssap">
		Simple Spectral Access Protocol
        <interceptor service-id="system.edt" />        
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ivoa.SsapImpl" >
				<service>ivoa.registry</service>
                <service>system.vfs</service>
                <service>system.ui</service>
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="ssap" if="property ivoa.ssap.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>


<!-- 
====================
SIAP
 -->
	<service-point id="siap" interface="Siap">
		Simple Image Access Protocol
        <interceptor service-id="system.edt" />        
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ivoa.SiapImpl">
				<service>ivoa.registry</service>
                <service>system.vfs</service>   
                <service>system.ui</service>                             
			</construct>			
		</invoke-factory>			
	</service-point>
	
	<implementation service-id="siap" if="property ivoa.siap.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	
	<!-- 
	=====================
	CONE
	 -->
	<service-point id="cone" interface="Cone">
	   Cone Catalog Search Protocol
        <interceptor service-id="system.edt" />        
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ivoa.ConeImpl" >
				<service>ivoa.registry</service>
                <service>system.vfs</service>   
                <service>system.ui</service>                             
			</construct>
		</invoke-factory>	
	</service-point>

	<implementation service-id="cone" if="property ivoa.cone.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	

<!--  
=======================
RESULT CACHE 
-->
	<service-point id="cache" interface="org.astrogrid.desktop.modules.ivoa.CacheFactoryInternal">
	Caching system. Would fit more logically in the system module, but historically it ended up here .
    Different caches can be defined via contribution.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ivoa.CacheFactoryImpl">
				<string>${astrogrid.workdir}</string>
				<configuration>caches</configuration>
               <object>preference:org.astrogrid.registry.query.endpoint</object>
               <object>preference:org.astrogrid.registry.query.altendpoint</object>                
				<event-listener service-id="builtin.shutdown" />			
			</construct>
		</invoke-factory>
	</service-point>
	
	<contribution configuration-id="hivemind.ObjectProviders">
		<provider prefix="cache" service-id="cache" />
	</contribution>
		
    <!--  run periodically -->  
    <contribution configuration-id="system.scheduledTasks">
        <object>service:cache</object><!--  removes old data from the cache periodically -->
    </contribution>
        
	
	<configuration-point id="caches">
		Defines caches for components to use.
		<schema>
			<element name="cache" key-attribute="name">
				<attribute name="name" required="true" unique="true">
					name of the cache
				</attribute>
				<attribute name="diskPersistent" translator="boolean">
				For caches that overflow to disk, whether the disk cache persists between CacheManager instances.				
				</attribute>
                <attribute name="eternal" translator="boolean">
                    If eternal, timeouts are ignored and items are never expired.                
                </attribute>
				<attribute name="maxElementsInMemory">
				the maximum objects to be held in the MemoryStore.
				</attribute>
				<attribute name="maxElementsOnDisk">
				  the maximum objects to be held in the DiskStore.
				</attribute>
				<attribute name="overflowToDisk" translator="boolean">
				whether elements can overflow to disk when the in-memory cache has reached the set limit.				
				</attribute>
				<attribute name="timeToIdleSeconds" >
				the time to idle for an element before it expires.
				</attribute>
				<attribute name="timeToLiveSeconds">
				the time to live for an element before it expires.
				</attribute>
                <attribute name="registrySensitive" translator="boolean">
                 Whether this cache is sensitive to changes to the registry
                    i.e. if the registry endpoint changes, should this cache be cleared.                
                </attribute>
				<conversion class="org.astrogrid.desktop.modules.ivoa.ExtendedCacheConfiguration" />
			</element>
		</schema>
	</configuration-point>
	
    <!--  capabilitieis tester
    =================================
     -->
        <service-point id="capabilityTester" interface="org.astrogrid.desktop.modules.ivoa.resource.CapabilityTester">
            Capabilities tester. If a capability in a resource has a test query, this component knows how to execute that
            test to verify that it's working.
        <interceptor service-id="system.edt" />        
        <interceptor service-id="system.throbber" />           
        <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.ivoa.resource.CapabilityTesterImpl">
                <service>cone</service>
                <service>ssap</service>
                <service>astrogrid.stap</service>
                <service>siap</service>           
            </construct>
        </invoke-factory>
    </service-point>
    
    <!--  vosi availability tester
    ==================
     -->
     <service-point id="vosi" interface="org.astrogrid.desktop.modules.ivoa.VosiInternal">
        VOSI availability tester. Knows how to check VOSI information.
        <interceptor service-id="system.edt" >
            <exclude method="makeTooltipFor" />
            <exclude method="suggestIconFor" />
        </interceptor>        
        <interceptor service-id="system.throbber" />                    
        <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.ivoa.VosiImpl">
                <service>registry</service>
            </construct>
        </invoke-factory>
     </service-point>
     
     <!--  VOSPace VFS provider
     ===========================
      -->
    <service-point id="vospacevfs" interface="org.astrogrid.desktop.modules.ag.vfs.VfsFileProvider" >
        VFS provider for VOSpace - work in progress.
        <invoke-factory model="primitive"><!--  has to be primitive, as vfs implementation casts it to implementation type. -->
            <construct class="org.astrogrid.vospace.v11.client.vfs.acr.AcrVosFileProvider">
                <service>registry</service>
            </construct>
        </invoke-factory>
    </service-point>
    
    <contribution configuration-id="system.vfsProviders">
        <provider scheme="vos"
            implementation="service:vospacevfs" />
    </contribution>     
 </module>
 
