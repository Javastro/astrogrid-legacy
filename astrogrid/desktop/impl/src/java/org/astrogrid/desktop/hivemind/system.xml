<?xml version="1.0"?>
<!DOCTYPE module  [
	<!ENTITY descriptors SYSTEM "classpath:/org/astrogrid/desktop/hivemind/system-descriptors.xml">
	]>
<module id="system" version="1.0.0" package="org.astrogrid.acr.system">
System module.
	<dependency module-id="framework" />
	<!-- PREAMBLE -->
	
	<contribution configuration-id="framework.acrServices">
			<acrService id="help" interface="HelpServer" />
			<acrService id="browser" interface="BrowserControl" />
			<acrService id="configuration" interface="Configuration" />
			<acrService id="ui" interface="UI" />
		    <acrService id="webserver" interface="WebServer" />
			<acrService id="apihelp" interface="ApiHelp" />
			<acrService id="rmi" interface="RmiServer" />
			<acrService id="systray" interface="SystemTray" />
	</contribution>
		
	<contribution configuration-id="framework.descriptors">
		<acr-module name="system" description="System Components">
		&descriptors;
		</acr-module>
	</contribution>
	
	<!--  new schemas  -->
		<schema id="objects">
		A list of objects - used in various configuration points.
			<element name="object" content-translator="object">
				An object - which may be instantiated in-line, or it might be a reference to another service, or preference, 
                or cache, or whatever.
				<rules>
					<push-content />
					<invoke-parent method="addElement" />
				</rules>
			</element>		
	</schema>	


	
	<contribution configuration-id="framework.preferences">	
		<!-- working directory - used for storing various data. -->
		<preference name="astrogrid.workdir"
			requires-restart="true"
			default-value="${user.home}${file.separator}.workbench" >
			<ui-name>Working directory</ui-name>
			<description>Location to store query results, cache registry queries, etc</description>
			<units>directory</units>
		</preference>	

	</contribution>

		<!-- things that should be started eager -->
	<contribution configuration-id="hivemind.EagerLoad">
		<load service-id="webserver" /> 
		<load service-id="rmi" /> 
		<load service-id="scheduler"/>
		<load service-id="snitch" />
		<load service-id="executor" />
		<load service-id="configuration" />
		<load service-id="tupperware" />
	</contribution>

	
	<!--  
	============================
	HELP
	 -->
	<service-point id="help" interface="org.astrogrid.desktop.modules.system.HelpServerInternal">		
        Help Service	
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.HelpServerImpl">
				<service>browser</service>
                <string>${helpmap.url}</string>
                <service>ui</service>
			</construct>
		</invoke-factory>
	</service-point>
	
	<implementation service-id="help" if="(property system.help.disabled) or (property system.browser.disabled)">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>
    
    <contribution configuration-id="hivemind.FactoryDefaults">                  
        <default symbol="helpmap.url" value="http://technology.astrogrid.org/raw-attachment/wiki/vodesktopResources/helpmap.xml"/> 
    </contribution>
    
    <contribution configuration-id="scheduledTasks">
        <object>service:help</object><!--  fetches the helpmap from the server. only occurs once, but triggered as a scheduled task to avoid a race condition with UIContext -->
    </contribution>
    
	<!--  
	================================
	BROWSER CONTROL
	 -->
	
	<service-point id="browser" interface="BrowserControl">
	Controls the webbrowser
		<invoke-factory>
		<construct class="org.astrogrid.desktop.modules.system.BrowserLauncherBrowserControl">
			<service>webserver</service>
			<service>ui</service>
		</construct>
		</invoke-factory>		
	</service-point>

		
	<implementation service-id="browser"  if="(property system.browser.disabled) or (property java.awt.headless)">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />					
	</implementation>	
	
	<!--  
	===================================
	CONFIGURATION
	 -->

	
	<service-point id="configuration" interface="org.astrogrid.desktop.modules.system.ConfigurationInternal">
		Provides and persists preference objects
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.pref.PreferenceManagerImpl">
				<configuration>framework.preferences</configuration>
				<configuration>framework.preferenceClass</configuration>
				<service>framework.sysproperties</service>
			</construct>
		</invoke-factory>
	</service-point>	
	
	<contribution configuration-id="hivemind.ObjectProviders">
		<provider prefix="preference" service-id="configuration" />
	</contribution>
	
	<contribution configuration-id="hivemind.SymbolSources">
		<source name="preferences"
		 	before="hivemind.ApplicationDefaults" 
		 	service-id="configuration" />
	</contribution>	
	
	<!--  preference editing servlet -->
	<contribution configuration-id="servlets" if="not (property system.preference.servlet.disabled)">
		<servlet name="preferences" path="/preferences" 
			servletClass="org.astrogrid.desktop.modules.system.pref.PreferenceEditorServlet" />
	</contribution>
	
	<contribution configuration-id="servletContext">
		<attribute name="preferences" object="configuration:framework.preferences" />
		<attribute name="arranger" object="service:preferencesArranger" />
	</contribution>

	<!-- 
	=============================
	UI
	 -->
	 
	 <service-point id="ui" interface="org.astrogrid.desktop.modules.system.ui.UIContext">
	 	The User Interface central model - manages windows, display of warning messages, etc.
        <!-- 
         -->
        <interceptor service-id="system.edtInvoke" >
            <include method="show" />
            <include method="hide" />
            <include method="setLoggedIn" />
            <include method="setStatusMessage" />
            <include method="startThrobbing" />
            <include method="stopThrobbing" />  
            <include method="actionPerformed" />                                              
            <exclude method="*" />
        </interceptor>           
	 	<invoke-factory>
	 		<construct class="org.astrogrid.desktop.modules.system.ui.UIContextImpl">
	 			<service>configuration</service>
	 			<service>executor</service>
	 			<service>help</service>
	 			<service>browser</service>
                <service>ivoa.cache</service>
                <service>astrogrid.community</service>
                <service>builtin.shutdown</service>
                <service>util.selftest</service>
                <service>workersMonitor</service>
                <service>configDialogue</service>
                <service>aboutDialogue</service>
	 			<service>plasticList</service>
	 			<configuration>windowFactories</configuration>
                <string>${system.ui.launchApp}</string>
                <service>tupperware</service>
	 		</construct>
	 	</invoke-factory>
	 </service-point>
	 
	 <configuration-point id="windowFactories">
	 	Defines factories that can create different kinds of top level UI windows.
	 	<schema>
			<element name="window" key-attribute="name" content-translator="object">
	 				Reference to a service, or somesuch that acts as a factory.
	 				must implement org.apache.commons.collections.Factory
	 			<attribute name="name" required="true" unique="true">
	 				Name of the window factory - used in UI.
	 			</attribute>
				<rules>
					<push-content />
					<invoke-parent method="addElement" />
				</rules>
			</element>	
	 	</schema>
	 </configuration-point>

	
		<!--  control which application to show at startup 
        FRAGILE: names must exactly match name attribute of corresponding system.windowFactory
        
        -->
      <contribution configuration-id="framework.preferences">
		<preference name="system.ui.launchApp" advanced="false"
			default-value="VO Explorer">
			<ui-name>At startup, launch</ui-name>
			<description>Select which window to open at startup</description>
            <option>VO Explorer</option>
            <option>File Explorer</option>
            <option>Task Runner</option>
            <option>All-VO Astroscope</option>
            <option>All-VO Helioscope</option>
            <option>none</option>            
		</preference>
	</contribution>	
		
<!--
============================
 Background workers
 
 -->
    <service-point id="workersMonitor" interface="org.astrogrid.desktop.modules.system.ui.BackgroundWorkersMonitor">
        Monitor ui for background workers
        <interceptor service-id="system.edtInvoke" />
        <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.system.ui.BackgroundWorkersMonitorImpl">
                <service>ui</service>
            </construct>
        </invoke-factory>        
    </service-point>
    
    <implementation service-id="workersMonitor"  if="property java.awt.headless">
        When running headless, replace ui with an empty placeholder.
        <invoke-factory service-id="hivemind.lib.PlaceholderFactory" />                 
    </implementation>  
	<!-- 
	====================
	WEBSERVER
	 -->
	<service-point id="webserver" interface="org.astrogrid.desktop.modules.system.WebServerInternal">
		Internal Web server - consumes servlets and servletContext configurations.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.JettyWebServer"
				initialize-method="init" >
				<configuration>servlets</configuration>				
				<configuration>servletContext</configuration>
				<configuration>webapps</configuration>
				<event-listener service-id="builtin.shutdown" />				
				<set property="port" value="${system.webserver.port}" />
				<set property="scanStartPort" value="${system.webserver.startScanPort}" />
				<set property="scanEndPort" value="${system.webserver.endScanPort}" />
				<set property="contextName" value="${system.webserver.contextName}" />			
				<set property="connectionFile" value="${system.webserver.connectionFile}" />
				<set property="disableConnectionFile" value="${system.webserver.disableConnectionFile}" />
				<set property="inetAddress" value="${system.webserver.inetAddress}" />
				<set-object property="contextName" value="service-property:builtin.sessionManager:defaultSessionId" />
			</construct>
		</invoke-factory>
	</service-point>	
	
	<implementation service-id="webserver"  if="property system.webserver.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />					
	</implementation>	
    
     <contribution configuration-id="util.selftest" >
        <object>service-property:webserver:selftest</object>
    </contribution>
    
	<contribution configuration-id="framework.preferences" if="not (property system.webserver.disabled)">
		<preference name="system.webserver.port" default-value="-1"
		requires-restart="true" advanced="true">
			<ui-name>Run webserver on port</ui-name>
			<alternative>-1</alternative>
			<units>(-1 to scan for available port)</units>
			<description></description>
		</preference>		
		<preference name="system.webserver.startScanPort" default-value="8001" 
			requires-restart="true" advanced="true">
			<ui-name>Webserver: scan from port</ui-name>
			<description>network port number to start scanning from</description>		
			<units>number</units>
		</preference>
		<preference name="system.webserver.endScanPort" default-value="8800" 
			requires-restart="true" advanced="true">
			<ui-name>until port</ui-name>
			<description>network port number to scan up to</description>		
			<units>number</units>
		</preference>
        <preference name="system.webserver.inetAddress" default-value="127.0.0.1"
        requires-restart="true" advanced="true">
            <ui-name>Network address</ui-name>
            <description>Network address that webserver and RMI Server should accept connections from. Leave blank to use DNS assigned address</description>
        </preference>
	</contribution>
	
	<contribution configuration-id="hivemind.FactoryDefaults">					
		<default symbol="system.webserver.contextName" value=""/> <!-- indicates auto-generate -->
		<default symbol="system.webserver.disableConnectionFile" value="false" />
		<default symbol="system.webserver.connectionFile" value="${user.home}${file.separator}.astrogrid-desktop" />
	</contribution>

	<configuration-point id="servlets">
			List of servlets to deploy in Webserver
			<schema>
				<element name="servlet">
					Describes a single servlet
					<attribute name="name" required="true" unique="true" >
						the name of the servlet
					</attribute>
					<attribute name="path" required="true" unique="true" >
						the context path to deploy the servlet to
					</attribute>
					<attribute name="servletClass" required="true" translator="class">			
						name of the class implementing this servlet. Must extend AbstractServlet
					</attribute>
					<conversion 
						class="org.astrogrid.desktop.modules.system.contributions.ServletsContribution" 
						/>				
				</element>
			</schema>
	</configuration-point>
	
	<configuration-point id="servletContext">
		List of objects to add into servlet context, so they can be accessed by servlets
		(as hivemind can't constructor-inject into servlets itself)
		<schema>
			<element name="attribute">
				Describes a single addition to the servlet context
				<attribute name="name" required="true" unique="true" >
					name to store the object under
				</attribute>
				<attribute name="object" required="true" translator="object" >
					the object to store - give a reference to a service using 'service:..', or 
					instantiate a new object using 'instance:..'
				</attribute>
				<conversion 
					class="org.astrogrid.desktop.modules.system.contributions.ServletContextContribution"
					/>
			</element> 
		</schema>
	</configuration-point>

    <configuration-point id="webapps">
        List of additional web applications to deploy
        <schema>
            <element name="web-app">
                Describes a single webapp to deploy
                <attribute name="context" required="true" unique="true">
                the context name to deploy this webapp under.
                </attribute>
                <attribute name="location" required="true">
                the url or filepath to the war file or webapp directory.
                </attribute>
                <conversion class="org.astrogrid.desktop.modules.system.contributions.WebappContribution"
                />
            </element>
        </schema>
    </configuration-point>
		
	<contribution configuration-id="servlets" if="not (property system.xmlrpc.disabled)">
		<servlet name="xmlrpc" path="/xmlrpc" servletClass="org.astrogrid.desktop.modules.system.XMLRPC3Servlet" />
	</contribution>
	
	<contribution configuration-id="servlets" if="not (property system.html.disabled)">
			<servlet name="html" path="/*" servletClass="org.astrogrid.desktop.modules.system.HtmlServlet"/>		
	</contribution>
		
	<contribution configuration-id="servletContext">
		<attribute name="module-registry" object="service:builtin.acr"/>
		<attribute name="converter" object="service:framework.converter"/>
        <attribute name="xmlrpc" object="service:xmlrpc" />
		<attribute name="plainResultTransformer" object="service:framework.plainResultTransformer" />
		<attribute name="htmlResultTransformer" object="service:framework.htmlResultTransformer" />
		<attribute name="rpcResultTransformer" object="service:framework.rpcResultTransformer" />
	</contribution>
	
<!-- XMLRPC server - used from within the xmlrpc servlet 
=====================================
-->    

    <service-point id="xmlrpc" visibility="private" interface="org.apache.xmlrpc.webserver.XmlRpcServletServer">
        XMLRPC server -  used from within the xmlrpc servlet 
        <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.system.ArXmlRpcServer">
                <service>builtin.acr</service>
                <service>framework.rpcResultTransformer</service>
                <service>framework.converter</service>
                <service>apihelp</service>             
                <service>plastic.hub</service>
                <service>tupperware</service>
            </construct>
        </invoke-factory>
    </service-point>        

    <implementation service-id="xmlrpc"  if="property system.xmlrpc.disabled">
        <invoke-factory service-id="hivemind.lib.PlaceholderFactory" />                 
    </implementation>   

<!-- 
==========================================
SYSTEM TRAY
 -->
	<service-point id="systray" interface="org.astrogrid.desktop.modules.system.SystemTrayInternal">		
	System Tray
               
	</service-point>
    
	 <contribution configuration-id="hivemind.Startup" >
        <startup object="service:systray" />
    </contribution>
    
	<implementation service-id="systray" if="(class java.awt.SystemTray) and not(property java.awt.headless)">
        Adaptable UI, when JVM offers a system tray (yet this may not be supported under this particular OS / Window manager)
        <interceptor service-id="system.edtInvoke" />
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.BestSuitableSystemTray">
				<service>system.ui</service>
                <object>preference:system.ui.launchApp</object>
			</construct>
		</invoke-factory>
	</implementation>

    <implementation service-id="systray" if="not (class java.awt.SystemTray) and not (property java.awt.headless)">
        Minimalistic UI, when no system tray provided by JVM
        <interceptor service-id="system.edtInvoke" />        
        <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.system.FallbackSystemTray">
                <service>system.ui</service>
            </construct>
        </invoke-factory>
    </implementation>

	<implementation service-id="systray"  if="(property system.systray.disabled) or (property java.awt.headless)">
        Non-UI - just logs.
		<invoke-factory>
			<construct class='org.astrogrid.desktop.alternatives.LoggingSystemTray'>
				<string>SYSTRAY</string>
			</construct>
		</invoke-factory>		
	</implementation>	
    
	
	<!-- 
	========================================
	APIHELP
	 -->
	<service-point id="apihelp" interface="ApiHelp">
		Access documentation for AR API methods
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.ApiHelpImpl">
				<service>builtin.acr</service>
				<service>framework.converter</service>
				<service>framework.rpcResultTransformer</service>
				<service>framework.plainResultTransformer</service>				
			</construct>
		</invoke-factory>
	</service-point>		

	<implementation service-id="apihelp"  if="property system.apihelp.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />					
	</implementation>	
	
	<!-- 
	==============================
	RMI
	 -->
	<service-point id="rmi" interface="org.astrogrid.desktop.modules.system.RmiServerInternal">
		RMI API Binding. Consumes the rmiListenerInterfaces configuration
		<invoke-factory>
			<construct 
				class="org.astrogrid.desktop.modules.system.RmiLiteRmiServerImpl"
				initialize-method="init"
				>
				<service>builtin.acr</service>
				<configuration>rmiListenerInterfaces</configuration>
				<service>builtin.sessionManager</service>
				<event-listener service-id="builtin.shutdown" />						
				<set property="port" value="${system.rmi.port}" />
				<set property="scanStartPort" value="${system.rmi.startScanPort}" />
				<set property="scanEndPort" value="${system.rmi.endScanPort}" />
				<set property="disableConnectionFile" value="${system.rmi.disableConnectionFile}" />				
        	</construct>
		</invoke-factory>	
	</service-point>	

     <contribution configuration-id="util.selftest" >
        <object>service-property:rmi:selftest</object>
    </contribution>
    	
	<implementation service-id="rmi"  if="property system.rmi.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />					
	</implementation>
	
	<contribution configuration-id="framework.preferences" if="not (property system.rmi.disabled)">
		<preference name="system.rmi.port" default-value="-1"
		requires-restart="true" advanced="true">
			<ui-name>Run RMI server on port</ui-name>
			<alternative>-1</alternative>
			<description></description>
			<units>(-1 to scan for available port)</units>
		</preference>		
		<preference name="system.rmi.startScanPort" default-value="1099" 
			requires-restart="true" advanced="true">
			<ui-name>RMI server: scan from port </ui-name>
			<description>network port number to start scanning from</description>		
			<units>number</units>
		</preference>
		<preference name="system.rmi.endScanPort" default-value="2099" 
			requires-restart="true" advanced="true">
			<ui-name>until port</ui-name>
			<description>network port number to scan up to</description>	
			<units>number</units>
		</preference>
	</contribution>

	<contribution configuration-id="hivemind.FactoryDefaults">
		<default symbol="system.rmi.disableConnectionFile" value="false" />
	   <default symbol="system.rmi.connectionFile" value="${user.home}${file.separator}.acr-rmi-port" />			
	</contribution>
		
		<configuration-point id="rmiListenerInterfaces">
		List of services that accept listener interfaces - and the 
		interfaces used. Each of these listener interfaces needs to be registered differently
		with the RMI server.
		<schema>
			<element name="service" key-attribute="id">
				Description of an acr service with listener interfaces
				<attribute name="id" required="true" unique="true" translator="qualified-id" >
					the id of the service
				</attribute>
				<element name="listener">
					A listener inteface that this service accepts as a parameter
					<attribute name="interface" required="true" translator="class" >
						Class name of the listener interface. Must extend Listener.
					</attribute>
					<rules>
						<push-attribute attribute="interface" />
						<invoke-parent method="add" />
					</rules>
				</element>
				<rules>
					<create-object class="org.astrogrid.desktop.modules.system.contributions.RmiListenerInterfacesContribution" />
					<read-attribute property="id" attribute="id" />
					<invoke-parent method="addElement" />
				</rules>
			</element>
		</schema>
	</configuration-point>
	
	<!-- ===========================
	INTERNALS - not visible as acr services 
	 -->	
	
	<!--  ===========================
	VFS
    NB: if the following vfs config is changed, ensure that org.astrogrid.Fixture.createVFS() is altered to match.
	 -->
	<service-point id="vfs" interface="org.apache.commons.vfs.FileSystemManager">
		Uniform access to all kinds of filesystems.
        <interceptor service-id="system.edt" ><!-- doesn't give much protection, but might identify some problems. -->
            <exclude method="createVirtualFileSystem" />
            <exclude method="closeFileSystem" /> <!--  only strictly correect for virtual file systems. -->
        </interceptor>        
		<invoke-factory> <!-- should maybe be session later -->
			<construct 
			class="org.astrogrid.desktop.modules.system.HivemindFileSystemManager"
			initialize-method="init"
			log-property="logger">
				<service>tmpFileStore</service>
				<configuration>vfsProviders</configuration>
				<configuration>vfsOperations</configuration>
				<configuration>vfsExtensions</configuration>
				<configuration>vfsMimes</configuration>                
				<set-object property="filesCache" value="service:vfsCache" />
                <!-- 
                <set-object property="defaultProvider"
				     value="instance:org.apache.commons.vfs.provider.url.UrlFileProvider" />
                 -->
                 <!-- using a subclass to work around a bug ignoring query in url. -->
                <set-object property="defaultProvider"
                 value="instance:org.astrogrid.desktop.modules.system.QueryRespectingUrlFileProvider" />

				 <set-object property="replicator" value="service:replicator" />
			<!-- 	 <set-object property="temporaryFileStore" value="service:tmpFileStore" /> -->
				 <set property="baseFileString" value="${vfs.basefile}" />
				 <set-object property="fileContentInfoFactory" value="instance:org.astrogrid.desktop.modules.system.AugmentedFileContentInfoFilenameFactory" />
				<event-listener service-id="builtin.shutdown" />
			</construct>
		</invoke-factory>
	</service-point>
    
	
		<!-- ikkle services that vfs depends upon.	-->
		
    <service-point id="vfsCache"  interface="org.apache.commons.vfs.FilesCache" >
        Cache for vfs file objects.
        <invoke-factory model="primitive">
            <construct class="org.astrogrid.desktop.modules.ag.vfs.DesktopFilesCache">
            </construct>
        </invoke-factory>
    </service-point>
            
        
	<service-point id="replicator" visibility="private"
		interface="org.apache.commons.vfs.provider.FileReplicator">
        Replicator for VFS
		<invoke-factory model="primitive">
			<construct class="org.apache.commons.vfs.impl.PrivilegedFileReplicator">
				<service>tmpFileStore</service>
			</construct>
		</invoke-factory>	
	</service-point>		
	<service-point id="tmpFileStore" visibility="private"
		interface="org.apache.commons.vfs.impl.DefaultFileReplicator">
        Part of VFS
		<create-instance model="primitive" 
			class="org.apache.commons.vfs.impl.DefaultFileReplicator" />
	</service-point>
	
	<configuration-point id="vfsProviders">
		List of file system types that vfs knows how to access.
	  <schema>
    	<element name="provider" key-attribute="scheme">
      		<attribute name="scheme">
            uri scheme
            </attribute>
      		<attribute name="implementation" required="true" translator="object">
            VfsFileSystem for this uri scheme.
            </attribute>
	      <rules>
    	    <push-attribute attribute="implementation"/>
        	<invoke-parent method="addElement"/>
	      </rules>
   	 </element>
	  </schema>	
	</configuration-point>
	
		<configuration-point id="vfsOperations">
		List of objects that provide additional vfs operations
	  <schema>
    	<element name="operation" key-attribute="scheme">
      		<attribute name="scheme">
                uri scheme
            </attribute>
      		<attribute name="implementation" required="true" translator="object">
                additional file operations for this scheme.
            </attribute>
	      <rules>
    	    <push-attribute attribute="implementation"/>
        	<invoke-parent method="addElement"/>
	      </rules>
   	 </element>
	  </schema>	
	</configuration-point>
		
	<configuration-point id="vfsExtensions">
	List of mappings between file extension and scheme. Used to expose .zip, .gz as nested filesystem.s
	  <schema>
    	<element name="extension" key-attribute="name">
      		<attribute name="name">
            the file type
            </attribute>
      		<attribute name="scheme" required="true">
            the uri scheme this file type corresponds to.
            </attribute>
	      <rules>
    	    <push-attribute attribute="scheme"/>
        	<invoke-parent method="addElement"/>
	      </rules>
   	 </element>
	  </schema>
	</configuration-point>	
	
	<configuration-point id="vfsMimes">
	List of mappings between mimetype and scheme. Used to expose .zip, etc as nested filesystems.
	  <schema>
    	<element name="mime" key-attribute="name">
      		<attribute name="name">
            the mimetype
            </attribute>
      		<attribute name="scheme" required="true">
            this uri scheme this mimetype corresponds to.
            </attribute>
	      <rules>
    	    <push-attribute attribute="scheme"/>
        	<invoke-parent method="addElement"/>
	      </rules>
   	 </element>
	  </schema>
	</configuration-point>	
	
	<!--  and now some default contributions. -->	
	<contribution configuration-id="vfsProviders">
		<provider scheme="file" 
			implementation="instance:org.apache.commons.vfs.provider.local.DefaultLocalFileProvider" />
            <!--  don't want these for now - not sure if my ui could support it 
            re-examine these later
		<provider scheme="zip"
			implementation="instance:org.apache.commons.vfs.provider.zip.ZipFileProvider" />
		<provider scheme="gz"
			implementation="instance:org.apache.commons.vfs.provider.gzip.GzipFileProvider" />
            -->
			<!--  required external libs 
		<provider scheme="tar"
			implementation="instance:org.apache.commons.vfs.provider.tar.TarFileProvider" />
		<provider scheme="bz2"
			implementation="instance:org.apache.commons.vfs.provider.bzip2.Bzip2FileProvider" />
		<provider scheme="tgz"
			implementation="instance:org.apache.commons.vfs.provider.tar.TarFileProvider" />
		<provider scheme="tbz2"
			implementation="instance:org.apache.commons.vfs.provider.tar.TarFileProvider" />			
		-->
		<provider scheme="tmp"
			implementation="instance:org.apache.commons.vfs.provider.temp.TemporaryFileProvider" />
		<provider scheme="ftp"
			implementation="instance:org.apache.commons.vfs.provider.ftp.FtpFileProvider" />
            <!--  removed for now - as latest vfs has a version clash with httpclient.
            removing this providers means that the native java lib's HTTP access is used - which is not a problem.
		<provider scheme="http"
			implementation="instance:org.apache.commons.vfs.provider.http.HttpFileProvider" />
		<provider scheme="https"
			implementation="instance:org.apache.commons.vfs.provider.https.HttpsFileProvider" />
            -->
		<provider scheme="sftp"
			implementation="instance:org.apache.commons.vfs.provider.sftp.SftpFileProvider" />
            <!-- unneeded 
		<provider scheme="res"
			implementation="instance:org.apache.commons.vfs.provider.res.ResourceFileProvider" />
            -->
		<provider scheme="ram"
			implementation="instance:org.apache.commons.vfs.provider.ram.RamFileProvider" />
	</contribution>
	
	<contribution configuration-id="vfsExtensions">
		<extension name="zip" scheme="zip"/>
		<extension name="gz" scheme="gz"/>
<!-- 		<extension name="tar" scheme="tar"/>
		<extension name="bz2" scheme="bz2"/>
		<extension name="tgz" scheme="tar"/>
		<extension name="tbz2" scheme="tar"/> -->		
	</contribution>
	
	<contribution configuration-id="vfsMimes">
		<mime name="application/zip" scheme="zip" />
		<mime name="application/x-gzip" scheme="gz" />
		<mime name="application/x-tar" scheme="tar" />
	</contribution>
		
	<contribution configuration-id="hivemind.FactoryDefaults">			
	    <default symbol="vfs.basefile" value="${user.home}" />
	</contribution>


	
	<!--  ===================
	SCHEDULER
	 -->
	<service-point id="scheduler" interface="org.astrogrid.desktop.modules.system.SchedulerInternal">
		Runs scheduled tasks. Consumes the scheduledTasks configuration
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.ClockDaemonScheduler">
				<configuration>scheduledTasks</configuration>
				<service>ui</service>
				<service>builtin.sessionManager</service>
				<event-listener service-id="builtin.shutdown" />
			</construct>
		</invoke-factory>
	</service-point>		

	<implementation service-id="scheduler"  if="property system.scheduler.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />					
	</implementation>		
	
		<configuration-point id="scheduledTasks" schema-id="objects">
		List of task objects to add to the scheduler.
        Objects may either be instances of ScheduledTask, or DelayedContinuation.
	</configuration-point>

	<!--  ===========================
	EXECUTOR
	 -->
	<service-point id="executor" interface="org.astrogrid.desktop.modules.system.BackgroundExecutor">
		Runs background tasks on a pool of threads. Used to process long-running and IO-accessing operations
        while keeping the UI responsive (by not locking up the Swing Event Dispatch Thread)
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.BackgroundExecutorImpl"
				initialize-method="init">
				<service>ui</service>
				<service>builtin.sessionManager</service>
				<set property="queueSize" value="${system.executor.queueSize}" />
				<set property="startThreads" value="${performance.maxWorkerThreads}" />
				<event-listener service-id="builtin.shutdown" />				
			</construct>		
		</invoke-factory>
	</service-point>		

	<implementation service-id="executor"  if="property system.executor.disabled">
		<create-instance class="org.astrogrid.desktop.alternatives.InThreadExecutor" />
	</implementation>		
	
	<contribution configuration-id="hivemind.FactoryDefaults">			
	    <default symbol="system.executor.queueSize" value="10000" />
	</contribution>		
	

<!--  =============================
MAC SETUP
 -->
	<service-point id="macSetup" visibility="private" interface="java.lang.reflect.InvocationHandler">
	UI Customisations for Mac OSX
        <invoke-factory service-id="hivemind.lib.PlaceholderFactory" />
	</service-point>
	
	<implementation service-id="macSetup" if="(class com.apple.eawt.Application) and (not(property java.awt.headless)) ">
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.MacSetup">
				<service>ui</service>
			</construct>
		</invoke-factory>		
	</implementation>

	
	<contribution configuration-id="hivemind.EagerLoad" >
		<load service-id="macSetup" />
	</contribution>
	
		
	<!-- RELATED - when running in UI mode, tweak the ui up -->
	<contribution configuration-id="hivemind.Startup" if="not(property java.awt.headless)">
		<startup object="instance:org.astrogrid.desktop.modules.system.SwingSetup" />
	</contribution>
		
	
	<!--  ====================================
	THROBBER
	 -->
	<service-point id="throbber" interface="org.apache.hivemind.ServiceInterceptorFactory">
		Causes UI to throb to indicate calls to remote services.
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />					
	</service-point>
	<implementation service-id="throbber"  if="not ((property java.awt.headless) or (property system.ui.disabled) or (property system.systray.disabled))" >
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.ThrobberInterceptorFactory">
				<service>ui</service>
				<service>systray</service>
				<service>hivemind.ClassFactory</service>
			</construct>
		</invoke-factory>		
	</implementation>

	<!--  ============================
    EDT invoker 
    -->
    
    <service-point id="edtInvoke"
     interface="org.apache.hivemind.ServiceInterceptorFactory"
        parameters-schema-id="hivemind.MethodFilter"      >
        Interceptor - Causes all service methods to be invoked on the EDT thread, which simplifies the threading model.
       <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.system.EdtInvocationInterceptorFactory">
                <service>hivemind.ClassFactory</service>
            </construct>
        </invoke-factory>   
    </service-point>
    

    
	<!--  ===========================
	SNITCH
	 -->
	<service-point id="snitch" interface="org.astrogrid.desktop.modules.system.SnitchInternal">
		Usage tracking service
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.SnitchImpl">
				<service>ui</service>
				<string>${astrogrid.desktop.version}</string>
				<string>${app.mode}</string>
				<service>plasticList</service>
				<object>preference:system.doSnitch</object>
			</construct>
		</invoke-factory>
	</service-point>
	
	<contribution configuration-id="framework.preferences"> 
		<preference name="system.doSnitch" default-value="true" 
		advanced="true" requires-restart="true">
			<ui-name>Track usage</ui-name>
			<description></description>
			<units>boolean</units>
		</preference>		
	</contribution>		
	
	<implementation service-id="snitch" if="property system.snitch.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		
	
	<service-point id="snitchInterceptor" 
		interface="org.apache.hivemind.ServiceInterceptorFactory"
		parameters-schema-id="hivemind.MethodFilter">
	  Interceptor that reports on usage of AR
	  <invoke-factory model="primitive">
	  	<construct class="org.astrogrid.desktop.modules.system.SnitchInterceptorFactory">
	  		<service>snitch</service>	  	
			<service>hivemind.ClassFactory</service>	  		
	  	</construct>
	  </invoke-factory>
	</service-point>
	
	<!--  ==================================
	DEPRECATION
	 -->
	<service-point id="deprecation"
		interface="org.apache.hivemind.ServiceInterceptorFactory"
		parameters-schema-id="hivemind.MethodFilter">
		Interceptor that logs a warning when clients call  deprecated methods
		<invoke-factory model="primitive">
			<construct class="org.astrogrid.desktop.modules.system.DeprecationInterceptorFactory">
				<service>hivemind.ClassFactory</service>
			</construct>
		</invoke-factory>
		</service-point>

    <!--  ==================================
    EDT enforcement
     -->
    <service-point id="edt"
        interface="org.apache.hivemind.ServiceInterceptorFactory"
        parameters-schema-id="hivemind.MethodFilter">
        Interceptor that logs a warning when long-running methods are called on the EDT thread.
        <invoke-factory model="primitive">
            <construct class="org.astrogrid.desktop.modules.system.ExpensiveMethodInterceptorFactory">
                <service>hivemind.ClassFactory</service>
            </construct>
        </invoke-factory>
    </service-point>

  
<!--  ================================
	TUPPERWARE - Client side of PLASTIC
	 -->
	<service-point id="tupperware"
		interface="org.astrogrid.desktop.modules.system.TupperwareInternal">
		Plastic wrapper that allows other components to send and handle plastic messages.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.system.TupperwareImpl">
                <event-listener service-id="builtin.shutdown" /> 
				<service>ui</service>
				<string>${interop.app.name}</string>
				<string>${interop.app.description}</string>
                <string>${interop.app.icon}</string>
                <string>${interop.app.ivorn}</string>
                <object>service-property:system.webserver:root</object>      
				<configuration>plasticMessageHandlers</configuration>
				<service>plasticList</service>
                <service>plastic.hub</service>
                <service>httpclient</service>
			</construct>
		</invoke-factory>
	</service-point>
		
	<implementation service-id="tupperware"  if="(property system.tupperware.disabled) ">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />					
	</implementation>
	
		<configuration-point id="plasticMessageHandlers" schema-id="objects">
	List of handlers to register as processors of plastic messages.
	Should all be instances of org.votech.plastic.incoming.handlers.MessageHandler
	</configuration-point>
        
    <contribution configuration-id="hivemind.FactoryDefaults">   
        <default symbol="interop.app.name" value="VO Desktop" />    
        <default symbol="interop.app.description" value="AstroGrid VO Desktop: see http://www.astrogrid.org" />
        <default symbol="interop.app.icon" value="http://technology.astrogrid.org/raw-attachment/wiki/vodesktopResources/AGlogo.png" />
        <default symbol="interop.app.ivorn" value="ivo://org.astrogrid/ar" />           
    </contribution>
    

<!-- ========================================
XML Persistence --> 
    <service-point id="xmlPersist" interface="org.astrogrid.desktop.modules.system.XmlPersist">
        Utility component that handles serializing objects structures to XML for storage.
        <create-instance class="org.astrogrid.desktop.modules.system.XStreamXmlPersist" />
    </service-point>

<!-- ================================
	CONFIGURATION DIALOGUE
 -->
 	<service-point id="configDialogue" visibility="private"  interface="java.lang.Runnable">
 		A configuration dialogue
        <interceptor service-id="system.edtInvoke" />
 		<invoke-factory>
 			<construct class="org.astrogrid.desktop.modules.system.pref.PreferenceEditor">
 				<service>preferencesArranger</service>
 				<object>preference:acr.advanced</object>
 				<service>system.ui</service>
 			</construct>
 		</invoke-factory>
 	</service-point>
 	
    <implementation service-id="configDialogue"  if="property java.awt.headless">
        When running headless, replace ui with an empty placeholder.
        <invoke-factory service-id="hivemind.lib.PlaceholderFactory" />                 
    </implementation>    
    
    
 	<service-point id="preferencesArranger" interface="org.astrogrid.desktop.modules.system.pref.PreferencesArranger">
 		Helper component that sorts preferences into structures for ui work.
 		<invoke-factory>
 			<construct class="org.astrogrid.desktop.modules.system.pref.PreferencesArrangerImpl">
 				<configuration>framework.preferences</configuration>
 			</construct>
 		</invoke-factory>
 	</service-point>
 	
 
 <!--  ===================
 ABOUT Dialogue - -->
 <service-point id="aboutDialogue" visibility="private" interface="java.lang.Runnable">
    An about dialogue
    <interceptor service-id="system.edtInvoke" />
    <invoke-factory>
        <construct class="org.astrogrid.desktop.modules.system.AboutDialogue">
            <service>browser</service>
            <string><![CDATA[
            <html>
            <h1>VO Desktop v${astrogrid.desktop.version}</h1>      
            <b><a href="http://www.astrogrid.org">http://www.astrogrid.org</a></b><br>
            <h2>Contributors</h2>
             Alasdair&nbsp;Allan, Elizabeth&nbsp;Auden, Kona&nbsp;Andrews, Kevin&nbsp;Benson, Silvia&nbsp;Dalla,
             Gary&nbsp;Gilchrist, Eduardo&nbsp;Gonzalez&nbsp;Solares, Norman&nbsp;Gray, Paul&nbsp;Harrison, Mark&nbsp;Holliman,
             Andrew&nbsp;Lawrence, Tony&nbsp;Linde, Jeff&nbsp;Lusted, Phil&nbsp;Nicholson, Keith&nbsp;Noddle, Jonathan&nbsp;Tedds, 
            Dave&nbsp;Morris, Catherine&nbsp;Qin, Anita&nbsp;Richards, Guy&nbsp;Rixon, John&nbsp;Taylor,
            Mark&nbsp;Taylor, Nicholas&nbsp;Walton, Noel&nbsp;Winstanley, Dugan&nbsp;Witherick  
                     
            <h2>Acknowledgements</h2>
            Contains code and/or integrates with services provided by 
            <a href="http://www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/cadc">Canadian&nbsp;Astronomy&nbsp;Data&nbsp;Center</a>, 
            <a href="http://cdsweb.u-strasbg.fr/">Centre&nbsp;de&nbsp;Donnees&nbsp;Astronomiques</a>, 
            <a href="http://esavo.esa.int/">ESA-VO</a>, 
            <a href="http://plastic.sourceforge.net/">Plastic</a>, 
            <a href="http://www.us-vo.org/">US&nbsp;National&nbsp;Virtual&nbsp;Observatory</a>, 
            <a href="http://www.starlink.rl.ac.uk/">Starlink</a>, 
            <a href="http://eurovotech.org/">Euro-VO&nbsp;VOTech</a>
            and other <a href="http://www.ivoa.net">International&nbsp;Virtual&nbsp;Observatory&nbsp;Alliance</a> partners.

            <h2>Build Information</h2>
            Built: ${astrogrid.build.date}<br>
            At: ${astrogrid.build.location}<br>
            With ${astrogrid.build.jdk}<br>
            By: ${astrogrid.build.by}
            <br>
            <a href="http://dingo.care2.com/cards/flash/5409/galaxy.swf">perspective</a>
            </html>
            ]]></string>
        </construct>
    </invoke-factory>
 </service-point>
 
 		    <implementation service-id="aboutDialogue"  if="property java.awt.headless">
        When running headless, replace ui with an empty placeholder.
        <invoke-factory service-id="hivemind.lib.PlaceholderFactory" />                 
    </implementation>    

<!--  ======================
PLASTIC LIST MODEL -->

	<service-point id="plasticList"
		interface="ca.odell.glazedlists.EventList">
        List model that contains description of applications currently connected to plastic hub.
		<create-instance class="ca.odell.glazedlists.BasicEventList" />
	</service-point>

<!-- 
================================
UPDATE CHECKER
 
 -->
<service-point id="update" visibility="private" interface="java.lang.Runnable">
    Software update checker

		<invoke-factory model="primitive">
			<construct class="org.astrogrid.desktop.modules.system.UpdateChecker">
				<service>ui</service>
				<service>browser</service>
				<string>${astrogrid.desktop.version}</string>
                <string>${update.release.info.url}</string>
				<object>preference:system.checkForUpdates</object>
			</construct>	
           </invoke-factory>
</service-point>

    <implementation service-id="update"  if="(property java.awt.headless) or (property system.update.disabled)">
        When running headless, replace ui with an empty placeholder.
        <invoke-factory service-id="hivemind.lib.PlaceholderFactory" />                 
    </implementation>    
	

	<contribution configuration-id="framework.preferences"> 
		<preference name="system.checkForUpdates" default-value="true">
			<ui-name>Check for updates on startup</ui-name>
			<description></description>
			<units>boolean</units>
		</preference>		
	</contribution>	
    
        <contribution configuration-id="hivemind.FactoryDefaults">          
        <default symbol="update.release.info.url" value="http://technology.astrogrid.org/raw-attachment/wiki/vodesktopResources/vodesktopReleaseInfo.xml" />
    </contribution>     



	<contribution configuration-id="hivemind.Startup">
		<startup object="service:update" />
	</contribution>

<!--  upgrade -->
	<service-point id="upgrade" visibility="private" interface="java.lang.Runnable">
		upgrade code - runs once for each new version, to fix bugs / manage migration between previous versions
		<invoke-factory model="primitive">
			<construct class="org.astrogrid.desktop.modules.system.Upgrade">
				<string>${astrogrid.desktop.version}</string>
				<service>configuration</service>
			</construct>
		</invoke-factory>
	</service-point>

	<contribution configuration-id="hivemind.Startup">
		<startup object="service:upgrade" />
	</contribution>
 
    <service-point id="httpclient" visibility="public" interface="org.apache.commons.httpclient.HttpClient">
        Shared HttpClient component
        <invoke-factory>
            <construct class="org.apache.commons.httpclient.HttpClient">
                   <set-object property="httpConnectionManager"
                 value="instance:org.apache.commons.httpclient.MultiThreadedHttpConnectionManager" />               
            </construct>
        </invoke-factory>
    </service-point>
 
 </module> 
 