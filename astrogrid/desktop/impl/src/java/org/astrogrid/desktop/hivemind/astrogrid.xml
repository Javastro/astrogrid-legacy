<?xml version="1.0"?>
<!DOCTYPE module  [
	<!ENTITY descriptors SYSTEM "classpath:/org/astrogrid/desktop/hivemind/astrogrid-descriptors.xml">
	]>

<module id="astrogrid" version="1.0.0" package="org.astrogrid.acr.astrogrid">
	<dependency module-id="system"/>
	AstroGrid Services
	<!--  PREAMBLE -->

		<contribution configuration-id="framework.acrServices">
			<acrService id="myspace" interface="Myspace" />
			<acrService id="community" interface="Community" />
			<acrService id="applications" interface="Applications" />
			<acrService id="jobs" interface="Jobs" />
			<acrService id="processManager" interface="RemoteProcessManager" />
			<acrService id="stap" interface="Stap"/>
	</contribution>

	<contribution configuration-id="framework.descriptors">
		<acr-module name="astrogrid" description="AstroGrid Services">
		&descriptors;
		</acr-module>
	</contribution>
	
	<!-- things to start eager -->	
	<contribution configuration-id="hivemind.EagerLoad">
		<load service-id="myspace" />   <!--  enabling this means myspace it gets notified of login, and prefetches ms root - for preception of speedup -->
	</contribution>
	
<!-- 
===================
UI CONFIGURATION -->

	<!-- NEW ACTIONS -->
	<!-- add login and logout actions -->
	<contribution configuration-id="system.uiStructure">
		<action text="Login" name="login"  parentName="runtime" iconName="connect_creating16.png"
			object="service:community" methodName="guiLogin" before="logout">
			<tooltip>Log in to AstroGrid</tooltip>
		</action>
		<action text="Logout" name="logout" parentName="runtime" iconName="connect_no16.png"
			object="service:community" methodName="logout" after="login" before="prefs">
			<tooltip>Log out of AstroGrid</tooltip>
		</action>
	</contribution>
	
	<!--  buttons, help links, etc to use when runnin as 'ACR' -->
	<contribution configuration-id="system.uiStructure" if="not (property system.help.disabled) and (property acr.mode)">
		<action text="Introduction" name="acrHelp"  parentName="help" iconName="help16.png"
			object="service:system.help" methodName="showHelpForTarget" 
			before="*">
					<tooltip>Introduction to Astro Runtime</tooltip>
			<parameter>acr.overview</parameter>
		</action>		
		<action text="API Reference" name="acrApi"  parentName="help" iconName="reference16.png"
			object="service:system.help" methodName="showHelpForTarget" 
			after="acrHelp" before="projects">
					<tooltip>Lists available functions, gives examples of their use</tooltip>
			<parameter>acr.api</parameter>
		</action>		
	</contribution>	
	
	<!--  equivalent to use with running as 'workbench'  - basically just make these 'advanced'-->
	<contribution configuration-id="system.uiStructure" if="not (property system.help.disabled) and (property workbench.mode)">
		<action text="Astro Runtime - Introduction" name="acrHelp"  parentName="help" iconName="help16.png"
			object="service:system.help" methodName="showHelpForTarget" 
			after="div1" before="acrApi" visibleCondition="preference:acr.advanced">
					<tooltip>Introduction to Astro Runtime</tooltip>
			<parameter>acr.overview</parameter>
		</action>		
		<action text="Astro Runtime - API Reference" name="acrApi"  parentName="help" iconName="reference16.png"
			object="service:system.help" methodName="showHelpForTarget" 
			 after="acrHelp" before="div2" visibleCondition="preference:acr.advanced">
					<tooltip>Lists available functions, gives examples of their use</tooltip>
			<parameter>acr.api</parameter>
		</action>		
	</contribution>	
	
	<!--  always added to 'advanced' tab - depends on particular ar variant whther this tab is visible or not. -->
	<contribution configuration-id="system.uiStructure" if="((not (property system.webserver.disabled)) and (not (property system.html.disabled))) and (not (property system.browser.disabled))">
		<action parentName="advanced" name="htmlACR" text="AR web interface"
			iconName="browser48.png" 
			object="service:system.browser" methodName="openRelative" before="*"
			help-id="acr.overview"
			 >
			<parameter></parameter> <!-- intentionally blank -->
			<tooltip>Browse and execute AR and PLASTIC functions</tooltip>
		</action>
	</contribution>
	<!--  show a download link only if we're in webstart - otherwise people will have downloaded dev kit through teh installer -->
	<contribution configuration-id="system.uiStructure" if="not (property system.browser.disabled) and (class javax.jnlp.ServiceManager) ">
		<action parentName="advanced" name="downloadAR" text="Download AR development kit"
		iconName="downloadAR48.png"
			object="service:system.browser" methodName="openURL" after="*"
			help-id="acr.overview"
			 >
			<parameter>http://www2.astrogrid.org/desktop/download/acr-interface-${astrogrid.desktop.version}.zip</parameter> <!-- intentionally blank -->
			<tooltip>Download a development kit of examples and documentation</tooltip>
		</action>	
	</contribution>		
	
	<contribution configuration-id="system.helpmap">
		<item id="acr.api" url="http://software.astrogrid.org/astro-runtime-docs/apidocs/index.html" />
		<item id="acr.overview" url="http://www2.astrogrid.org/desktop/astro-runtime" />
	</contribution>

	
	<contribution configuration-id="system.uiStructure" if="(property acr.mode) or (property asr.mode)">
	<action parentName="help" name="about" text="About Astro Runtime.." onEventDispatchThread="true"
			object="instance:java.lang.String" methodName="concat" iconName="info16.png"
			after="*" > 
			<parameter><![CDATA[
			<html>
			<h1>Astro Runtime v${astrogrid.desktop.version}</h1>			
			http://www.astrogrid.org/desktop/astro-runtime

	<hr>
			<h2>Build Information</h2>
			Built: ${astrogrid.build.date}<br>
			At: ${astrogrid.build.location}<br>
			With ${astrogrid.build.jdk}<br>
			By: ${astrogrid.build.by}		
	<hr>
			</html>
			]]></parameter>
		</action>		
	</contribution>	
	

<!-- 
===========================
MYSPACE
 -->
	<service-point id="myspace" interface="org.astrogrid.desktop.modules.ag.MyspaceInternal">
		Myspace client
        <interceptor service-id="system.edt" />
		<interceptor service-id="system.throbber" />	
		<interceptor service-id="hivelock.core.authorization">
			<method pattern="*" roles="loggedin" />
		</interceptor>
		<invoke-factory model="session">
			<construct class="org.astrogrid.desktop.modules.ag.VospaceImpl" >
				<service>community</service>
				<service>ivoa.registry</service>
				<service>bundlePrefs</service>
				<service>system.ui</service>
				<event-listener service-id="community" />	
			</construct>
		</invoke-factory>	
	</service-point>
	
	<service-point id="bundlePrefs" visibility="private" interface="org.astrogrid.filemanager.common.BundlePreferences">
		configuration object for myspace client.
		<invoke-factory model="primitive">
			<construct class="org.astrogrid.desktop.modules.ag.HivemindBundlePreferences">
				<set property="fetchParents" value="${astrogrid.myspace.fetchParents}" />
				<set property="maxExtraNodesInt" value="${astrogrid.myspace.maxExtraNodes}" />
				<set property="prefetchDepthInt" value="${astrogrid.myspace.prefetchDepth}" />
			</construct>
		</invoke-factory>
	</service-point>
	
<contribution configuration-id="hivemind.FactoryDefaults">
		<default symbol="astrogrid.myspace.fetchParents" value="true" />
		<default symbol="astrogrid.myspace.maxExtraNodes" value="200" />
		<default symbol="astrogrid.myspace.prefetchDepth" value="3" />
	</contribution>
	
	<implementation service-id="myspace" if="property astrogrid.myspace.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	
	
	<!--  myspace vfs provider 	-->
	<service-point id="myspacevfs" interface="org.astrogrid.desktop.modules.ag.vfs.VfsFileProvider" >
		<invoke-factory model="session">
			<construct class="org.astrogrid.desktop.modules.ag.vfs.myspace.MyspaceProvider">
				<service>bundlePrefs</service>
				<service>myspace</service>
				<event-listener service-id="community" />
			</construct>
		</invoke-factory>
	</service-point>
	
	<service-point id="workspacevfs" interface="org.astrogrid.desktop.modules.ag.vfs.VfsFileProvider" >
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.vfs.WorkspaceProvider">
				<service>community</service>
			</construct>
		</invoke-factory>
	</service-point>
    	
	<contribution configuration-id="system.vfsProviders">
		<provider scheme="ivo"
			implementation="service:myspacevfs" />
		<provider scheme="workspace"
			implementation="service:workspacevfs" />
	</contribution><!-- 
==========================
COMMUNITY -->	<service-point id="community" interface="org.astrogrid.desktop.modules.auth.CommunityInternal">		Community and login.	
        <interceptor service-id="system.edt" >
            <exclude method="addUserLoginListener" />
            <exclude method="removeUserLoginListener" />
        </interceptor>                        
		<interceptor service-id="system.throbber" />		
		<interceptor service-id="hivelock.core.authorization">
			<!--   can't protect this - need it as part of upgrading credentials.
			it's an internal method anyhow.
			<method pattern="getSecurityGuard" roles="loggedin" />-->
			<method pattern="getUserInformation" roles="loggedin" />
			<method pattern="*" roles="*" />
		</interceptor>
		<invoke-factory model="session">
			<construct class="org.astrogrid.desktop.modules.auth.CommunityImpl" >
				<service>system.ui</service>
				<service>loginDialogue</service>
				<service>system.snitch</service>
				<string>${astrogrid.workdir}${file.separator}trusted-certificates</string>
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="community" if="property astrogrid.community.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	
		
		<contribution configuration-id="system.rmiListenerInterfaces">
		<service id="community">
			<listener interface="org.astrogrid.acr.astrogrid.UserLoginListener" />
		</service>
	</contribution>

<contribution configuration-id="hivemind.FactoryDefaults">
		<default symbol="astrogrid.community.register" value="mailto:astrogrid_signup@star.le.ac.uk?subject=New%20Account%20Request&amp;body=Name:%0D%0AInstitute:"/>
		<default symbol="astrogrid.community.defaultCommunity" value="uk.ac.le.star" />
	</contribution>	

	<!--
		Link between community service and hivemind user system.
	-->
	<implementation service-id="hivelock.core.PrincipalHelper">
		<invoke-factory model="primitive">
			<construct	class="org.astrogrid.desktop.modules.auth.PrincipalHelperImpl" >
				<service>builtin.sessionManager</service>
			</construct>
		</invoke-factory>
	</implementation>
	
	<!--  the session manager -->
	<implementation service-id="builtin.sessionManager">
		<invoke-factory>
			<construct	class="org.astrogrid.desktop.modules.auth.SessionManagerImpl" >
				<service>hivelock.core.SecurityService</service>
				<service>system.webserver</service>
				<service>community</service>
				<service>system.scheduler</service>
				<!--  this is a little tricksy. sessionManager is shared (not sessioned), but listens
				to callbacks from community (which is sessioned). it's listening to the instance in the default session to start with. -->
				<event-listener service-id="community" />
			</construct>
		</invoke-factory>
	</implementation>
	
		<contribution configuration-id="hivemind.EagerLoad">
		<load service-id="builtin.sessionManager" /> 
		</contribution>

<!-- 
===========================
LOGIN DIALOGUE -->

	<service-point id="loginDialogue" visibility="private" interface="org.astrogrid.desktop.modules.auth.LoginDialogue">
		<invoke-factory model="session"><!--  privacy fix - else values are shared. -->
			<construct  class="org.astrogrid.desktop.modules.auth.SwingLoginDialogue">
				<service>votech.vomon</service>
				<service>system.browser</service>
				<service>ivoa.registry</service>
				<string>${astrogrid.community.register}</string>
				<string>${astrogrid.community.defaultCommunity}</string>
			</construct>
		</invoke-factory>
	</service-point>
	
	<!-- alternative implementation of the login dialogue, when running in headless mode -->
	<implementation service-id="loginDialogue" if="property astrogrid.loginDialogue.disabled">
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.auth.HeadlessLoginDialogue">
				<string>LOGIN</string>
			</construct>
		</invoke-factory>
	</implementation>
<!-- 
=========================
STAP
 -->
	<service-point id="stap" interface="Stap">
		Client for STAP services.
        <interceptor service-id="system.edt" />        
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.StapImpl" >
				<service>ivoa.registry</service>
				<service>astrogrid.myspace</service>
			</construct>			
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="stap" if="property astrogrid.stap.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>			
<!-- 
============================
APPLICATIONS
 -->		
	<service-point id="applications" interface="org.astrogrid.desktop.modules.ag.ApplicationsInternal">
		Run remote applications.
		<interceptor service-id="system.deprecation">
			<include method="getQueryToListApplications" />
			<include method="getRegistryQuery" />
			<include method="getApplicationInformation" />
			<include method="listProvidersOf" />
			<exclude method="*" />
		</interceptor>
        <interceptor service-id="system.edt" >
            <!--  these themselves aren't expensive, but conditionally call expensive methods - which are themselves intercepted. -->
            <exclude method="createTemplateTool" />
            <exclude method="getCeaApplication" />
            <exclude method="getInfoFor" />
            <!--  a few more could be added here, if it bites -->
        </interceptor>        
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.ApplicationsImpl" >
				<service>processManager</service>
				<service>myspace</service>
				<service>ivoa.registry</service>
				<service>ivoa.adql</service>
				<object>cache:applicationResources</object>
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="applications" if="property astrogrid.applications.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		
	
	<contribution configuration-id="ivoa.caches">
 small cache of resources that have been treated as applications.
		 not entirely happy about thios one - will do for now.
		 makes workflow builder much more responsive.	
		<cache name="applicationResources"
			maxElementsInMemory="20"
			maxElementsOnDisk="100"
			overflowToDisk="true"
			diskPersistent="true"
			timeToLiveSeconds="${ivo.registry.cacheLife}"
			timeToIdleSeconds="345600"
		/>
	</contribution>

<!-- 
=============================
JOBS
 -->
	<service-point id="jobs" interface="org.astrogrid.desktop.modules.ag.JobsInternal">
		Workflow client
        <interceptor service-id="system.deprecation" />        
        <interceptor service-id="system.edt" />
		<interceptor service-id="system.throbber" />		
		<interceptor service-id="hivelock.core.authorization">
			<method pattern="*" roles="loggedin" />
		</interceptor>
		<invoke-factory model="session">
			<construct class="org.astrogrid.desktop.modules.ag.JobsImpl" >
				<service>community</service>
				<service>processManager</service>
				<event-listener service-id="community" />				
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="jobs" if="property astrogrid.jobs.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		
	
<contribution configuration-id="framework.preferences">
		<preference name="jes.job.controller.endpoint"  advanced="true" requires-restart="true" propagate-to-config="true"
			default-value="http://galahad.star.le.ac.uk:8080/astrogrid-jes/services/JobControllerService" >
			<ui-name>Job Execution Server</ui-name>
			<description>http url of the JES server</description>
			<units>url</units>
		</preference>
	</contribution>		
<!-- 
===========================
REMOTE PROCESS MANAGER
 -->
	<service-point id="processManager" interface="org.astrogrid.desktop.modules.ag.RemoteProcessManagerInternal">
		Manages and monitors execution of remote processes. Consumes the processStrategies configuration
        <interceptor service-id="system.edt" />        
		<interceptor service-id="system.throbber" />		
		<invoke-factory >
			<construct class="org.astrogrid.desktop.modules.ag.RemoteProcessManagerImpl" >
				<configuration>processStrategies</configuration>
				<service>myspace</service>
				<service>system.snitch</service>			
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="processManager" if="property astrogrid.processManager.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		
	
	<configuration-point id="processStrategies" schema-id="system.objects">
		list of strategies for running remote processes.		
		Each must implement  RemoteProcessStrategy
	</configuration-point>	
	
	<contribution configuration-id="system.rmiListenerInterfaces">
		<service id="processManager">
			<listener interface="org.astrogrid.acr.astrogrid.RemoteProcessListener" />
		</service>
	</contribution>		
    
    
    <!--  vfs view over remote processes and results. -->
    
    <service-point id="processManagerVfs" interface="org.astrogrid.desktop.modules.ag.vfs.VfsFileProvider" >
        <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.ag.vfs.task.RPProvider">
                <service>processManager</service>
            </construct>
        </invoke-factory>
    </service-point>
        
    <contribution configuration-id="system.vfsProviders">
        <provider scheme="task"
            implementation="service:processManagerVfs" />
    </contribution>
    



<!-- 
==========================
CERTIFICATE INSTALLER
 -->
	<service-point id="installCertificates" interface="java.lang.Runnable" visibility="private">
		Download and install any missing certificates.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.auth.InstallCertificates">
				<service>system.ui</service>
				<string>${astrogrid.workdir}${file.separator}trusted-certificates</string> <!-- must match with the dir passed into the community component -->
				<configuration>certificateLists</configuration>
			</construct>
		</invoke-factory>
	</service-point>

<!--  runs at startup -->
	<contribution configuration-id="hivemind.Startup">
		<startup object="service:installCertificates" />
	</contribution>		
	
<!--  list of anchors -->	
<configuration-point id="certificateLists">
		List of urls to download and parse for a list of anchors.
		<schema>
			<element name="url">
				the url of a certificate list
				<rules>
					<push-content />
					<invoke-parent method="addElement" />
				</rules>
			</element>
		</schema>
	</configuration-point>	
		
		
<!-- previous schema -  this is now the expected file content.
		<schema>
			<element name="index">
				just a container - ignored
				<element name="item">
					Gives the url of a certificate
					<rules>
						<push-content />
						<invoke-parent method="addElement" />
					</rules>
				</element>
			</element>
		</schema>
		-->
	
	<!-- contributions to existing configurations -->
	<contribution configuration-id="certificateLists">
	  	<url>http://wiki.astrogrid.org/pub/Astrogrid/TrustAnchorList/trust-anchor-list.xml</url>
	  	<!--  fallback list - unsure whether I should check this or not 
	  	<url>classpath:/org/astrogrid/desktop/hivemind/fallback-anchorlist.xml</url>
	  	-->
	</contribution>	
	
<!-- 
=========================
TRANSFORMERS (object -> stirng) for types introduced by this module
 -->
	<service-point id="toStringTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
		transforms by calling 'toString()' on the object
		<create-instance class="org.astrogrid.desktop.modules.ag.transformers.ToStringTransformer" />
	</service-point>

	<service-point id="castorTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
		transforms a castor object to it's document representation
		<create-instance class="org.astrogrid.desktop.modules.ag.transformers.CastorTransformer" />
	</service-point>	
	
	<service-point id="styledCastorTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
		transforms a castor object to it's document representation, then applies a stylesheet, if one matches the resulting document.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.transformers.StyledCastorTransformer" >
				<service>framework.stylesheetTransformer</service>
			</construct>
		</invoke-factory>
	</service-point>		
	
	<contribution configuration-id="framework.htmlResultTransformers">
		<strategy class="org.astrogrid.workflow.beans.v1.Workflow"
			object="service:styledCastorTransformer" />			
		<strategy class="org.astrogrid.workflow.beans.v1.Tool"
			object="service:styledCastorTransformer" />		
	</contribution>
	
	<contribution configuration-id="framework.rpcResultTransformers">
		<strategy class="org.astrogrid.workflow.beans.v1.execution.JobURN" 
			object="instance:org.astrogrid.desktop.modules.ag.transformers.JobURNTransformer" />
		<strategy class="org.astrogrid.store.Ivorn"
			object="service:toStringTransformer" />
		<strategy class="org.astrogrid.filemanager.common.Ivorn"
			object="service:toStringTransformer" />
		<strategy class="org.astrogrid.filemanager.common.NodeIvorn"
			object="service:toStringTransformer" />
		<strategy class="org.astrogrid.workflow.beans.v1.Workflow"
			object="service:castorTransformer" />			
		<strategy class="org.astrogrid.workflow.beans.v1.Tool"
			object="service:castorTransformer" />					
	</contribution>		
	
<!-- 
=========================
CONVERTORS (String-> object) for types introduced by this module
 -->
	<contribution configuration-id="framework.converters">
		<register output="org.astrogrid.workflow.beans.v1.Workflow" converter="instance:org.astrogrid.desktop.modules.ag.converters.CastorBeanUtilsConvertor" />
		<register output="org.astrogrid.workflow.beans.v1.Tool" converter="instance:org.astrogrid.desktop.modules.ag.converters.CastorBeanUtilsConvertor" />
		<register output="org.astrogrid.workflow.beans.v1.execution.JobURN" converter="instance:org.astrogrid.desktop.modules.ag.converters.JobURNConverter" />
	</contribution>
	
	
 </module>
 