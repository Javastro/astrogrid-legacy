<?xml version="1.0"?>
<!DOCTYPE module  [
	<!ENTITY descriptors SYSTEM "classpath:/org/astrogrid/desktop/hivemind/astrogrid-descriptors.xml">
	<!ENTITY anchors SYSTEM "fallback:httpclient://wiki.astrogrid.org/pub/Astrogrid/TrustAnchorList/trust-anchor-list.xml,classpath:/org/astrogrid/desktop/hivemind/fallback-anchorlist.xml">
	]>
<module id="astrogrid" version="1.0.0" package="org.astrogrid.acr.astrogrid">
	<dependency module-id="system"/>
	AstroGrid Services
	<!--  PREAMBLE -->

		<contribution configuration-id="framework.acrServices">
			<acrService id="registry" interface="Registry" />
			<acrService id="myspace" interface="Myspace" />
			<acrService id="community" interface="Community" />
			<acrService id="applications" interface="Applications" />
			<acrService id="jobs" interface="Jobs" />
			<acrService id="processManager" interface="RemoteProcessManager" />
			<acrService id="stap" interface="Stap"/>
	</contribution>

	<contribution configuration-id="framework.descriptors">
		<acr-module name="astrogrid" description="AstroGrid Services">
		&descriptors;
		</acr-module>
	</contribution>
	
	<!-- things to start eager -->	
	<contribution configuration-id="hivemind.EagerLoad">
		<load service-id="messaging" />
	</contribution>
	
<!-- 
===================
UI CONFIGURATION -->

	<!-- NEW ACTIONS -->
	<!-- add login and logout actions -->
	<contribution configuration-id="system.uiStructure">
		<action text="Login" name="login" parentName="file" iconName="connect_creating.png"
			object="service:community" methodName="guiLogin" before="close,exit,logout">
			<tooltip>Log in to AstroGrid</tooltip>
		</action>
		<action text="Logout" name="logout" parentName="file" iconName="connect_no.png"
			object="service:community" methodName="logout" after="login" before="close,exit">
			<tooltip>Log out of AstroGrid</tooltip>
		</action>
	</contribution>
	
	<!--  TODO - replace with a web link. -->
	<contribution configuration-id="system.uiStructure" if="not (property system.help.disabled)">
		<action text="Astro Runtime API Help" name="acrHelp"  parentName="help" iconName="java_lib_obj.gif"
			object="service:system.help" methodName="showHelpForTarget" 
			after="contents" visibleCondition="preference:acr.advanced">
					<tooltip>Concepts,  lists available functions, gives examples of their use</tooltip>
			<parameter>overview</parameter>
		</action>		
	</contribution>	
	
	<contribution configuration-id="system.uiStructure" if="((not (property system.webserver.disabled)) and (not (property system.html.disabled))) and (not (property system.browser.disabled))">
		<action parentName="advanced" name="htmlACR" text="AR web interface"
			iconName="overview48.gif" visibleCondition="preference:acr.advanced"
			object="service:system.browser" methodName="openRelative" after="*" >
			<parameter></parameter> <!-- intentionally blank -->
			<tooltip>Browse and execute AR and PLASTIC functions</tooltip>
		</action>
	</contribution>		
	
<!--  FLAVORING AS ASTRO-RUNTIME -->

	
	<contribution configuration-id="system.uiStructure" if="(property acr.mode) or (property asr.mode)">
	<action parentName="help" name="about" text="About Astro Runtime.."
			object="instance:java.lang.String" methodName="concat" iconName="info_obj.gif"
			after="*" > 
			<parameter><![CDATA[
			<html>
			<h1>Astro Runtime v${astrogrid.desktop.version}</h1>			
			http://www.astrogrid.org/desktop/astro-runtime

	<hr>
			<h2>Build Information</h2>
			Built: ${astrogrid.build.date}<br>
			At: ${astrogrid.build.location}<br>
			With ${astrogrid.build.jdk}<br>
			By: ${astrogrid.build.by}		
	<hr>
			</html>
			]]></parameter>
		</action>		
	</contribution>	
	
<!-- 
==========================
REGISTRY
 -->
	
	<service-point id="registry" interface="Registry">
		Registry
		<interceptor service-id="system.deprecation" />
		<interceptor service-id="system.throbber" />
		<create-instance class="org.astrogrid.desktop.modules.ag.RegistryImpl" />
	</service-point>

	<implementation service-id="registry" if="property astrogrid.registry.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		

<!-- 
===========================
MYSPACE
 -->
	<service-point id="myspace" interface="org.astrogrid.desktop.modules.ag.MyspaceInternal">
		Myspace client
		<interceptor service-id="system.throbber" />	
		<interceptor service-id="login" />			
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.VospaceImpl" >
				<service>community</service>
				<service>bundlePrefs</service>
				<event-listener service-id="community" />	
			</construct>
		</invoke-factory>	
	</service-point>
	
	<service-point id="bundlePrefs" visibility="private" interface="org.astrogrid.filemanager.common.BundlePreferences">
		configuration object for myspace client.
		<invoke-factory model="primitive">
			<construct class="org.astrogrid.desktop.modules.ag.HivemindBundlePreferences">
				<set property="fetchParents" value="${astrogrid.myspace.fetchParents}" />
				<set property="maxExtraNodesInt" value="${astrogrid.myspace.maxExtraNodes}" />
				<set property="prefetchDepthInt" value="${astrogrid.myspace.prefetchDepth}" />
			</construct>
		</invoke-factory>
	</service-point>
	
	
<contribution configuration-id="hivemind.FactoryDefaults">
		<default symbol="astrogrid.myspace.fetchParents" value="true" />
		<default symbol="astrogrid.myspace.maxExtraNodes" value="200" />
		<default symbol="astrogrid.myspace.prefetchDepth" value="3" />
	</contribution>
	
	<implementation service-id="myspace" if="property astrogrid.myspace.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	
	
	<!-- 
==========================
COMMUNITY -->	<service-point id="community" interface="org.astrogrid.desktop.modules.ag.CommunityInternal">		Community and login.	
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.CommunityImpl" >
				<service>system.ui</service>
				<service>loginDialogue</service>
				<service>system.snitch</service>
				<string>${trusted.cert.dir}</string>
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="community" if="property astrogrid.community.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	
		
		<contribution configuration-id="system.rmiListenerInterfaces">
		<service id="community">
			<listener interface="org.astrogrid.acr.astrogrid.UserLoginListener" />
		</service>
	</contribution>

<contribution configuration-id="hivemind.FactoryDefaults">
		<default symbol="astrogrid.community.register" value="mailto:astrogrid_signup@star.le.ac.uk?subject=New%20Account%20Request&amp;body=Name:%0D%0AInstitute:"/>
		<default symbol="astrogrid.community.defaultCommunity" value="uk.ac.le.star" />
	</contribution>	
	
	<contribution configuration-id="framework.preferences">
		<preference name="trusted.cert.dir" advanced="true" requires-restart="true"
			default-value="${user.home}${file.separator}.workbench${file.separator}trusted-certificates">
			<ui-name>Certificates Directory</ui-name>
			<description>Location of community certificates</description>
		</preference>
	</contribution>
<!-- 
===========================
LOGIN DIALOGUE -->

	<service-point id="loginDialogue" visibility="private" interface="org.astrogrid.desktop.modules.ag.LoginDialogue">
		<invoke-factory>
			<construct  class="org.astrogrid.desktop.modules.ag.SwingLoginDialogue">
				<service>votech.vomon</service>
				<service>system.browser</service>
				<service>ivoa.registry</service>
				<string>${astrogrid.community.register}</string>
				<string>${astrogrid.community.defaultCommunity}</string>
			</construct>
		</invoke-factory>
	</service-point>
	
	<!-- alternative implementation of the login dialogue, when running in headless mode -->
	<implementation service-id="loginDialogue" if="property astrogrid.loginDialogue.disabled">
		<invoke-factory>
			<construct class="org.astrogrid.desktop.alternatives.HeadlessLoginDialogue">
				<string>LOGIN</string>
			</construct>
		</invoke-factory>
	</implementation>
<!-- 
=========================
STAP
 -->
	<service-point id="stap" interface="Stap">
		Client for STAP services.
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.StapImpl" >
				<service>ivoa.registry</service>
				<service>astrogrid.myspace</service>
			</construct>			
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="stap" if="property astrogrid.stap.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>			
<!-- 
============================
APPLICATIONS
 -->		
	<service-point id="applications" interface="org.astrogrid.desktop.modules.ag.ApplicationsInternal">
		Run remote applications.
		<interceptor service-id="system.deprecation">
			<include method="getQueryToListApplications" />
			<include method="getRegistryQuery" />
			<include method="getApplicationInformation" />
			<include method="listProvidersOf" />
			<exclude method="*" />
		</interceptor>
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.ApplicationsImpl" >
				<service>processManager</service>
				<service>myspace</service>
				<service>ivoa.registry</service>
				<service>registry</service>
				<service>ivoa.adql074</service>
				<service>ivoa.cache</service>
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="applications" if="property astrogrid.applications.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		

<!-- 
=============================
JOBS
 -->
	<service-point id="jobs" interface="org.astrogrid.desktop.modules.ag.JobsInternal">
		Workflow client
		<interceptor service-id="system.throbber" />		
		<interceptor service-id="login" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.JobsImpl" >
				<service>community</service>
				<service>processManager</service>
				<event-listener service-id="community" />				
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="jobs" if="property astrogrid.jobs.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		
	
<contribution configuration-id="framework.preferences">
		<preference name="jes.job.controller.endpoint" requires-restart="true" propagate-to-config="true"
			default-value="http://galahad.star.le.ac.uk:8080/astrogrid-jes/services/JobControllerService" >
			<ui-name>Job Execution Server</ui-name>
			<description>http url of the JES server</description>
		</preference>
	</contribution>		
<!-- 
===========================
REMOTE PROCESS MANAGER
 -->
	<service-point id="processManager" interface="RemoteProcessManager">
		Manages and monitors execution of remote processes. Consumes the processStrategies configuration
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.RemoteProcessManagerImpl" >
				<service>recorder</service>
				<configuration>processStrategies</configuration>
				<service>myspace</service>
				<service>system.snitch</service>				
				<event-listener service-id="recorder" />
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="processManager" if="property astrogrid.processManager.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		
	
	<configuration-point id="processStrategies" schema-id="system.objects">
		list of strategies for running remote processes.		
		Each must implement  RemoteProcessStrategy
	</configuration-point>	
	
	<contribution configuration-id="system.rmiListenerInterfaces">
		<service id="processManager">
			<listener interface="org.astrogrid.acr.astrogrid.RemoteProcessListener" />
		</service>
	</contribution>		
<!--  infrastructure components -->
<!-- 
===========================
RECORDER
 -->
	<service-point id="recorder" interface="org.astrogrid.desktop.modules.ag.MessageRecorderInternal">
		Recorder of messages
		<interceptor service-id="login" />
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.MessageRecorderImpl" >
				<service>messaging</service>
				<service>store</service>
				<service>ivoa.registry</service>
				<event-listener service-id="community" />
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="recorder" if="property astrogrid.recorder.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	
	
<!-- 
=======================
MESSAGING
 -->
	<service-point id="messaging" interface="org.astrogrid.desktop.modules.ag.MessagingInternal">
		Internal component - messaging system.
		<create-instance class="org.astrogrid.desktop.modules.ag.MessagingImpl"/>
	</service-point>
	
	<implementation service-id="messaging" if="property astrogrid.messaging.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>			
<!-- 
===========================
STORE
 -->
	<service-point id="store" interface="org.astrogrid.desktop.modules.ag.StoreInternal">
		Store for remote process execution information.
		<interceptor service-id="login" />		
 	<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.StoreImpl" >
				<event-listener service-id="builtin.shutdown" />
				<service>community</service>
				<set property="workDir" value="${astrogrid.store.workdir}" />				
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="store" if="property astrogrid.store.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>					

<!-- 
================
REMOTE PROCESS LISTENER
 -->	
	<!-- harrumph - got myself all confused here.
	not sure whether this should be a remote process listerner, or a recorder listener.
	no time to fix now - will code read and try to add back in after japan
	also have to watch whether ti forces login behaviour
	<service-point id="trayRemoteProcessListener" visibility="private" interface="org.astrogrid.acr.astrogrid.RemoteProcessListener">						
		Display process events in systray.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.SysTrayRemoteProcessListener">
				<service>recorder</service>
				<service>system.systray</service>
				<event-listener service-id="recorder" />
			</construct>
		</invoke-factory>		
	</service-point>						
	-->
<!-- FIXME - needs testing 
	<contribution configuration-id="hivemind.EagerLoad"  if="(class org.jdesktop.jdic.tray.SystemTray ) and ( not ( property system.systray.disabled))">
		<load service-id="trayRemoteProcessListener"/>
	</contribution>
	-->
		
	
<!-- 
==========================
LOGIN INTERCEPTOR
 -->
	<service-point id="login" interface="org.apache.hivemind.ServiceInterceptorFactory">
		Causes login before accessing intercepted services.
		Keeps service code cleaner, as no need for 'forceLogin' calls.
		<invoke-factory model="primitive">>
			<construct class="org.astrogrid.desktop.modules.ag.LoginInterceptor">
				<service>community</service>
				<service>hivemind.ClassFactory</service>
			</construct>
		</invoke-factory>		
	</service-point>
<!-- 
==========================
CERTIFICATE INSTALLER
 -->
	<service-point id="installCertificates" interface="java.lang.Runnable" visibility="private">
		Download and install any missing certificates.
		<invoke-factory model="primitive">
			<construct class="org.astrogrid.desktop.modules.ag.InstallCertificates">
				<service>system.ui</service>
				<string>${trusted.cert.dir}</string> <!--  defined in community section of this module -->
				<configuration>trustAnchors</configuration>
			</construct>
		</invoke-factory>
	</service-point>

<!--  runs at startup -->
	<contribution configuration-id="hivemind.Startup">
		<startup object="service:installCertificates" />
	</contribution>		
	
<!--  list of anchors -->	
<configuration-point id="trustAnchors">
		List of urls to download and install in the user's trusted.cert.dir
		<schema>
			<element name="index">
				just a container - ignored
				<element name="item">
					Gives the url of a certificate
					<rules>
						<push-content />
						<invoke-parent method="addElement" />
					</rules>
				</element>
			</element>
		</schema>
	</configuration-point>	
	
	<!-- contributions to existing configurations -->
	<contribution configuration-id="trustAnchors">
	  	&anchors; 
	</contribution>	
	
<!-- 
=========================
TRANSFORMERS (object -> stirng) for types introduced by this module
 -->
	<service-point id="toStringTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
		transforms by calling 'toString()' on the object
		<create-instance class="org.astrogrid.desktop.modules.ag.transformers.ToStringTransformer" />
	</service-point>

	<service-point id="castorTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
		transforms a castor object to it's document representation
		<create-instance class="org.astrogrid.desktop.modules.ag.transformers.CastorTransformer" />
	</service-point>	
	
	<service-point id="styledCastorTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
		transforms a castor object to it's document representation, then applies a stylesheet, if one matches the resulting document.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.transformers.StyledCastorTransformer" >
				<service>framework.stylesheetTransformer</service>
			</construct>
		</invoke-factory>
	</service-point>		
	
	<contribution configuration-id="framework.htmlResultTransformers">
		<strategy class="org.astrogrid.workflow.beans.v1.Workflow"
			object="service:styledCastorTransformer" />			
		<strategy class="org.astrogrid.workflow.beans.v1.Tool"
			object="service:styledCastorTransformer" />		
	</contribution>
	
	<contribution configuration-id="framework.rpcResultTransformers">
		<strategy class="org.astrogrid.workflow.beans.v1.execution.JobURN" 
			object="instance:org.astrogrid.desktop.modules.ag.transformers.JobURNTransformer" />
		<strategy class="org.astrogrid.store.Ivorn"
			object="service:toStringTransformer" />
		<strategy class="org.astrogrid.filemanager.common.Ivorn"
			object="service:toStringTransformer" />
		<strategy class="org.astrogrid.filemanager.common.NodeIvorn"
			object="service:toStringTransformer" />
		<strategy class="org.astrogrid.workflow.beans.v1.Workflow"
			object="service:castorTransformer" />			
		<strategy class="org.astrogrid.workflow.beans.v1.Tool"
			object="service:castorTransformer" />					
	</contribution>		
	
<!-- 
=========================
CONVERTORS (String-> object) for types introduced by this module
 -->
	<contribution configuration-id="framework.converters">
		<register output="org.astrogrid.workflow.beans.v1.Workflow" converter="instance:org.astrogrid.desktop.modules.ag.converters.CastorBeanUtilsConvertor" />
		<register output="org.astrogrid.workflow.beans.v1.Tool" converter="instance:org.astrogrid.desktop.modules.ag.converters.CastorBeanUtilsConvertor" />
		<register output="org.astrogrid.workflow.beans.v1.execution.JobURN" converter="instance:org.astrogrid.desktop.modules.ag.converters.JobURNConverter" />
	</contribution>
	
	
 </module>
 