<?xml version="1.0"?>
<!DOCTYPE module  [
	<!ENTITY descriptors SYSTEM "classpath:/org/astrogrid/desktop/hivemind/astrogrid-descriptors.xml">
	]>

<module id="astrogrid" version="1.0.0" package="org.astrogrid.acr.astrogrid">
	<dependency module-id="system"/>
	AstroGrid Services
	<!--  PREAMBLE -->

		<contribution configuration-id="framework.acrServices">
			<acrService id="myspace" interface="Myspace" />
			<acrService id="community" interface="Community" />
			<acrService id="applications" interface="Applications" />
			<acrService id="processManager" interface="RemoteProcessManager" />
			<acrService id="stap" interface="Stap"/>
	</contribution>

	<contribution configuration-id="framework.descriptors">
		<acr-module name="astrogrid" description="AstroGrid Services">
		&descriptors;
		</acr-module>
	</contribution>



<!-- 
===========================
MYSPACE
 -->
	<service-point id="myspace" interface="org.astrogrid.desktop.modules.ag.MyspaceInternal">
		Myspace client
        <interceptor service-id="system.edt" />
		<interceptor service-id="system.throbber" />	
		<interceptor service-id="hivelock.core.authorization">
			<method pattern="*" roles="loggedin" />
		</interceptor>
		<invoke-factory model="session"><!--  session necessary as am listening to sessioned community. -->
			<construct class="org.astrogrid.desktop.modules.ag.VospaceImpl" >
				<service>community</service>
				<service>ivoa.registry</service>
				<service>bundlePrefs</service>
				<service>system.ui</service>
                <service>system.vfsCache</service>
				<event-listener service-id="community" />	
			</construct>
		</invoke-factory>	
	</service-point>
	
	<service-point id="bundlePrefs" visibility="private" interface="org.astrogrid.filemanager.common.BundlePreferences">
		configuration object for myspace client.
		<invoke-factory model="primitive">
			<construct class="org.astrogrid.desktop.modules.ag.HivemindBundlePreferences">
				<set property="fetchParents" value="${astrogrid.myspace.fetchParents}" />
				<set property="maxExtraNodesInt" value="${astrogrid.myspace.maxExtraNodes}" />
				<set property="prefetchDepthInt" value="${astrogrid.myspace.prefetchDepth}" />
			</construct>
		</invoke-factory>
	</service-point>
	
<contribution configuration-id="hivemind.FactoryDefaults">
		<default symbol="astrogrid.myspace.fetchParents" value="true" />
		<default symbol="astrogrid.myspace.maxExtraNodes" value="200" />
		<default symbol="astrogrid.myspace.prefetchDepth" value="3" />
	</contribution>
	
	<implementation service-id="myspace" if="property astrogrid.myspace.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	
	
	<!--  myspace vfs provider 	-->
	<service-point id="myspacevfs" interface="org.astrogrid.desktop.modules.ag.vfs.VfsFileProvider" >
		<invoke-factory model="primitive"><!--  has to be primitive, as vfs implementation casts it to implementation type. -->
			<construct class="org.astrogrid.desktop.modules.ag.vfs.myspace.MyspaceProvider">
				<service>bundlePrefs</service>
				<service>myspace</service>
				<!--  <event-listener service-id="community" /> problem - listening to a sessioned object here. 
                seems to work fine without this at the moment anyhow.-->
			</construct>
		</invoke-factory>
	</service-point>
	
	<service-point id="workspacevfs" interface="org.astrogrid.desktop.modules.ag.vfs.VfsFileProvider" >
		<invoke-factory model="primitive">
			<construct class="org.astrogrid.desktop.modules.ag.vfs.WorkspaceProvider">
				<service>community</service>
			</construct>
		</invoke-factory>
	</service-point>
    	
	<contribution configuration-id="system.vfsProviders">
		<provider scheme="ivo"
			implementation="service:myspacevfs" />
		<provider scheme="workspace"
			implementation="service:workspacevfs" />
	</contribution><!-- 
==========================
COMMUNITY -->	<service-point id="community" interface="org.astrogrid.desktop.modules.auth.CommunityInternal">		Community and login.	
        <interceptor service-id="system.edt" >
            <exclude method="addUserLoginListener" />
            <exclude method="removeUserLoginListener" />
            <exclude method="isLoggedIn" />
            <exclude method="getUserInformation" />
            <exclude method="guiLogin" /> <!-- as this just delegates to loginDialogue, which is edtInvoked anyhow. -->
            <exclude method="logout" /> <!--  as no webservice calls are involved. -->
        </interceptor>                        
		<interceptor service-id="system.throbber" />		
		<interceptor service-id="hivelock.core.authorization">
			<!--   can't protect this - need it as part of upgrading credentials.
			it's an internal method anyhow.
			<method pattern="getSecurityGuard" roles="loggedin" />-->
			<method pattern="getUserInformation" roles="loggedin" />
			<method pattern="*" roles="*" />
		</interceptor>
		<invoke-factory model="session">
			<construct class="org.astrogrid.desktop.modules.auth.CommunityImpl" >
				<service>system.ui</service>
				<service>loginDialogue</service>
				<service>system.snitch</service>
				<string>${astrogrid.workdir}${file.separator}trusted-certificates</string>
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="community" if="property astrogrid.community.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>	
		
		<contribution configuration-id="system.rmiListenerInterfaces">
		<service id="community">
			<listener interface="org.astrogrid.acr.astrogrid.UserLoginListener" />
		</service>
	</contribution>

<contribution configuration-id="hivemind.FactoryDefaults">
		<default symbol="astrogrid.community.default.ivorn" value="ivo://uk.ac.le.star/community" />
	</contribution>	

	<!--
		Link between community service and hivemind user system.
	-->
	<implementation service-id="hivelock.core.PrincipalHelper">
		<invoke-factory model="primitive">
			<construct	class="org.astrogrid.desktop.modules.auth.PrincipalHelperImpl" >
				<service>builtin.sessionManager</service>
			</construct>
		</invoke-factory>
	</implementation>
	
	<!--  the session manager -->
	<implementation service-id="builtin.sessionManager">
		<invoke-factory>
			<construct	class="org.astrogrid.desktop.modules.auth.SessionManagerImpl" >
				<service>hivelock.core.SecurityService</service>
				<service>system.webserver</service>
				<service>community</service>
				<service>system.scheduler</service>
				<!--  this is a little tricksy. sessionManager is shared (not sessioned), but listens
				to callbacks from community (which is sessioned). it's listening to the instance in the default session to start with. -->
				<event-listener service-id="community" />
			</construct>
		</invoke-factory>
	</implementation>
	
		<contribution configuration-id="hivemind.EagerLoad">
		<load service-id="builtin.sessionManager" /> 
		</contribution>

<!-- 
===========================
LOGIN DIALOGUE -->

	<service-point id="loginDialogue"  visibility="private" interface="org.astrogrid.desktop.modules.auth.LoginDialogue">
	<!-- duff implementation of the login dialogue, when running in headless mode -->
        <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.auth.HeadlessLoginDialogue">
                <string>LOGIN</string>
            </construct>
        </invoke-factory>
    </service-point>
    
    <implementation service-id="loginDialogue" if="(not(property astrogrid.loginDialogue.disabled)) and (not (property java.awt.headless))">    
        <interceptor service-id="system.edtInvoke" />	
        <invoke-factory model="session"><!--  privacy fix - else input field values are shared. -->
            <construct  class="org.astrogrid.desktop.modules.auth.SwingLoginDialogue" >
                <service>system.ui</service>
                <service>votech.vomon</service>
                <service>system.browser</service>
                <service>ivoa.registry</service>
                <service>community</service>
                <string>${astrogrid.community.default.ivorn}</string>
            </construct>
		</invoke-factory>
	</implementation>

<!-- 
=========================
STAP
 -->
	<service-point id="stap" interface="Stap">
		Client for STAP services.
        <interceptor service-id="system.edt" />        
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.StapImpl" >
				<service>ivoa.registry</service>
				<service>astrogrid.myspace</service>
			</construct>			
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="stap" if="property astrogrid.stap.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>			
<!-- 
============================
APPLICATIONS
 -->		
	<service-point id="applications" interface="org.astrogrid.desktop.modules.ag.ApplicationsInternal">
		Run remote applications.
		<interceptor service-id="system.deprecation">
			<include method="getQueryToListApplications" />
			<include method="getRegistryQuery" />
			<include method="getApplicationInformation" />
			<include method="listProvidersOf" />
			<exclude method="*" />
		</interceptor>
        <interceptor service-id="system.edt" >
            <!--  these themselves aren't expensive, but conditionally call expensive methods - which are themselves intercepted. -->
            <exclude method="createTemplateTool" />
            <exclude method="getCeaApplication" />
            <exclude method="getInfoFor" />
            <!--  a few more could be added here, if it bites -->
            <exclude method="getRegistryXQuery" /> 
        </interceptor>        
		<interceptor service-id="system.throbber" />		
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.ApplicationsImpl" >
				<service>processManager</service>
				<service>system.vfs</service>
				<service>ivoa.registry</service>
				<service>ivoa.adql</service>
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="applications" if="property astrogrid.applications.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		
	


<!-- 
===========================
REMOTE PROCESS MANAGER
 -->
	<service-point id="processManager" interface="org.astrogrid.desktop.modules.ag.RemoteProcessManagerInternal">
		Manages and monitors execution of remote processes. Consumes the processStrategies configuration
        <interceptor service-id="system.edt" />        
		<interceptor service-id="system.throbber" />		
		<invoke-factory >
			<construct class="org.astrogrid.desktop.modules.ag.RemoteProcessManagerImpl" >
				<configuration>processStrategies</configuration>
				<service>system.vfs</service>
				<service>system.snitch</service>			
			</construct>
		</invoke-factory>	
	</service-point>
	
	<implementation service-id="processManager" if="property astrogrid.processManager.disabled">
		<invoke-factory service-id="hivemind.lib.PlaceholderFactory" />	
	</implementation>		
	
	<configuration-point id="processStrategies" schema-id="system.objects">
		list of strategies for running remote processes.		
		Each must implement  RemoteProcessStrategy
	</configuration-point>	
	
	<contribution configuration-id="system.rmiListenerInterfaces">
		<service id="processManager">
			<listener interface="org.astrogrid.acr.astrogrid.RemoteProcessListener" />
		</service>
	</contribution>		
    
                
<!--  
===============================
CEA EXECUTION STRATEGY
 -->
    <service-point id="ceaStrategy"  visibility="private" interface="org.astrogrid.desktop.modules.ag.RemoteProcessStrategy">
        Strategy for executing remote cea applications.
        <invoke-factory>
            <construct class="org.astrogrid.desktop.modules.ag.CeaStrategyImpl" >
                <service>ivoa.registry</service>
                <service>votech.vomon</service>
                <service>applications</service>
                <service>community</service>
                <service>system.vfs</service>                
                <service>builtin.sessionManager</service>
                <service>system.scheduler</service>                                 
            </construct>
        </invoke-factory>   
    </service-point>

    <implementation service-id="ceaStrategy" if="property background.ceaStrategy.disabled">
        <invoke-factory service-id="hivemind.lib.PlaceholderFactory" /> 
    </implementation>                   

    <contribution configuration-id="processStrategies">
        <object>service:ceaStrategy</object> 
    </contribution>
    
<!-- 
==========================
CERTIFICATE INSTALLER
 -->
	<service-point id="installCertificates" interface="java.lang.Runnable" visibility="private">
		Download and install any missing certificates.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.auth.InstallCertificates">
				<service>system.ui</service>
				<string>${astrogrid.workdir}${file.separator}trusted-certificates</string> <!-- must match with the dir passed into the community component -->
				<configuration>certificateLists</configuration>
			</construct>
		</invoke-factory>
	</service-point>

<!--  runs at startup -->
	<contribution configuration-id="hivemind.Startup">
		<startup object="service:installCertificates" />
	</contribution>		
	
<!--  list of anchors -->	
<configuration-point id="certificateLists">
		List of urls to download and parse for a list of anchors.
		<schema>
			<element name="url">
				the url of a certificate list
				<rules>
					<push-content />
					<invoke-parent method="addElement" />
				</rules>
			</element>
		</schema>
	</configuration-point>	

	
	<!-- contributions to existing configurations -->
	<contribution configuration-id="certificateLists">
	  	<url>http://technology.astrogrid.org/raw-attachment/wiki/vodesktopResources/trust-anchor-list.xml</url>
	  	<!--  fallback list - unsure whether I should check this or not 
	  	<url>classpath:/org/astrogrid/desktop/hivemind/fallback-anchorlist.xml</url>
	  	-->
	</contribution>	
	
<!-- 
=========================
TRANSFORMERS (object -> stirng) for types introduced by this module
 -->
	<service-point id="toStringTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
		transforms by calling 'toString()' on the object
		<create-instance class="org.astrogrid.desktop.modules.ag.transformers.ToStringTransformer" />
	</service-point>

	<service-point id="castorTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
		transforms a castor object to it's document representation
		<create-instance class="org.astrogrid.desktop.modules.ag.transformers.CastorTransformer" />
	</service-point>	
	
	<service-point id="styledCastorTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
		transforms a castor object to it's document representation, then applies a stylesheet, if one matches the resulting document.
		<invoke-factory>
			<construct class="org.astrogrid.desktop.modules.ag.transformers.StyledCastorTransformer" >
				<service>framework.stylesheetTransformer</service>
			</construct>
		</invoke-factory>
	</service-point>		
	
	<contribution configuration-id="framework.htmlResultTransformers">		
		<strategy class="org.astrogrid.workflow.beans.v1.Tool"
			object="service:styledCastorTransformer" />		
	</contribution>
	
	<contribution configuration-id="framework.rpcResultTransformers">
		<strategy class="org.astrogrid.store.Ivorn"
			object="service:toStringTransformer" />
		<strategy class="org.astrogrid.filemanager.common.Ivorn"
			object="service:toStringTransformer" />
		<strategy class="org.astrogrid.filemanager.common.NodeIvorn"
			object="service:toStringTransformer" />		
		<strategy class="org.astrogrid.workflow.beans.v1.Tool"
			object="service:castorTransformer" />					
	</contribution>		
	
<!-- 
=========================
CONVERTORS (String-> object) for types introduced by this module
 -->
	<contribution configuration-id="framework.converters">
		<register output="org.astrogrid.workflow.beans.v1.Tool" converter="instance:org.astrogrid.desktop.modules.ag.converters.CastorBeanUtilsConvertor" />
		</contribution>
	
	
 </module>
 