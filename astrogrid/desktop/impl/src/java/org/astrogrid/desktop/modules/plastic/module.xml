<?xml version="1.0"?>
<module name="plastic">
	<description>PLatform for AStronomical Tools Inter Connection</description>
	<property>
		<key>system.ui.menu.links</key>
		<value>
			<link text="PLASTIC Home Page" icon="plastic.gif"
				toolTipText="Home Page for PLASTIC"
				url="http://plastic.sourceforge.net/"/>
		</value>
	</property>
	<property>
		<key>icon</key>
		<value>plastic.gif</value>
	</property>
	<property>
		<key>priority</key>
		<value>60</value>
	</property>
	
	<component name="hub"
		implementationClass="org.astrogrid.desktop.modules.plastic.PlasticHubImpl"
		interfaceClass="org.votech.plastic.PlasticHubListener">
		<description>Hub Operations</description>
		<property>
			<key>icon</key>
			<value>plasticeye.gif</value>
		</property>
		<method name="getHubId">
			<description>Get the ID of this Hub</description>
			<property>
				<key>icon</key>
				<value>info_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Get Hub ID</value>
			</property>
			<return>
				<description>This hub's ID</description>
			</return>
		</method>
		<method name="getRegisteredIds">
			<description>Get Ids of registered applications</description>
			<property>
				<key>icon</key>
				<value>properties.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Get registered application IDs</value>
			</property>
			<return>
				<description>Array of Ids</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<method name="registerXMLRPC">
			<description>Register an application that can be called back by
				XMLRPC</description>
			<property>
				<key>icon</key>
				<value>frgmt_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Register (xml-rpc)</value>
			</property>
			<parameter name="name">
				<description>Application's human-readable name</description>
			</parameter>
			<parameter name="messages">
				<description>Understood messages (comma separated)</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</parameter>
			<parameter name="callback">
				<description>xml-rpc callback URL</description>
			</parameter>
			<return>
				<description>id</description>
			</return>
		</method>
		<method name="registerNoCallBack">
			<description>Register an application that offers no callback
				mechanism</description>
			<property>
				<key>icon</key>
				<value>frgmt_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Register (No Callback)</value>
			</property>
			<parameter name="name">
				<description>Application's human-readable name</description>
			</parameter>
			<return>
				<description>id</description>
			</return>
		</method>
		<method name="unregister">
			<description>Unregister a PLASTIC-compliant app</description>
			<property>
				<key>icon</key>
				<value>frgmt_dis_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Unregister Application</value>
			</property>
			<parameter name="id">
				<description>The id of the app to unregister</description>
			</parameter>
		</method>
		<method name="request">
			<description>Send a message to all registered applications</description>
			<parameter name="name">
				<description>Sender</description>
			</parameter>
			<parameter name="message">
				<description>Message</description>
			</parameter>
			<parameter name="args">
				<description>Arguments (comma separated)</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</parameter>
			<return>
				<description>Responses</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<method name="requestAsynch">
			<description>Send a message to all registered applications asynchronously</description>
			<parameter name="name">
				<description>Sender</description>
			</parameter>
			<parameter name="message">
				<description>Message</description>
			</parameter>
			<parameter name="args">
				<description>Arguments (comma separated)</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</parameter>
		</method>
		<method name="requestToSubset">
			<description>Send a message to a subset of registered applications</description>
			<parameter name="name">
				<description>Sender</description>
			</parameter>
			<parameter name="message">
				<description>Message</description>
			</parameter>
			<parameter name="args">
				<description>Arguments (comma separated)</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</parameter>
			<parameter name="recipientIds">
				<description>Recipient IDs (comma separated)</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</parameter>			
			<return>
				<description>Responses</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<method name="requestToSubsetAsynch">
			<description>Send a message to a subset of registered applications asynchronously</description>
			<parameter name="name">
				<description>Sender</description>
			</parameter>
			<parameter name="message">
				<description>Message</description>
			</parameter>
			<parameter name="args">
				<description>Arguments (comma separated)</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</parameter>
			<parameter name="recipientIds">
				<description>Recipient IDs (comma separated)</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</parameter>				
		</method>					
		<method name="markUnresponsiveApps">
			<description>Ping all registered applications and mark those that don't
				respond</description>
			<property>
				<key>icon</key>
				<value>sleeping.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Mark unresponsive applications</value>
			</property>
			<return>
				<description>An array of marked ids</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<method name="purgeUnresponsiveApps">
			<description>Unregister any unresponsive applications from the
				hub</description>
			<property>
				<key>icon</key>
				<value>delete_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Purge marked applications</value>
			</property>
			<return>
				<description>An array of purged application ids</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
	</component>
	<component name="messenger"
		implementationClass="org.astrogrid.desktop.modules.plastic.MessengerImpl"
		interfaceClass="org.astrogrid.desktop.modules.plastic.MessengerInternal">
		<!--This means that the xml-rpc methods for this component will begin plastic.messenger rather
		than plastic.client as mandated in the Plastic Spec.  However, this is OK
		as this component is not accessed externally, and DOES implement the PlasticListener
		RMI interface correctly-->
		<description>Send messages to applications</description>
		<property>
			<key>icon</key>
			<value>loop_obj.gif</value>
		</property>
		<method name="getHubName">
			<description>Get Hub Name</description>
			<property>
				<key>icon</key>
				<value>info_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Get Hub Name</value>
			</property>
			<return>
				<description>This hub's Name</description>
			</return>
		</method>
		<method name="getHubIvorn">
			<description>Get Hub's IVORN</description>
			<property>
				<key>icon</key>
				<value>info_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Get Hub's IVORN</value>
			</property>
			<return>
				<description>This hub's IVORN</description>
			</return>
		</method>
		<method name="getHubPlasticVersion">
			<description>Get Hub's Plastic Version</description>
			<property>
				<key>icon</key>
				<value>info_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Get Hub's Plastic Version</value>
			</property>
			<return>
				<description>Version of Plastic supported by this hub</description>
			</return>
		</method>
		<method name="getNames">
			<description>List registered application names in the form id:
				name</description>
			<property>
				<key>icon</key>
				<value>properties.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>List Application Names</value>
			</property>
			<return>
				<description>The names</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<method name="getIvorns">
			<description>List registered application ivorns in the form id:
				ivorn</description>
			<property>
				<key>icon</key>
				<value>properties.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>List Application IVORNS</value>
			</property>
			<return>
				<description>The ivorns</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<method name="getPlasticVersions">
			<description>List registered application PLASTIC versions in the form id:
				version</description>
			<property>
				<key>icon</key>
				<value>properties.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>List Application Plastic Versions</value>
			</property>
			<return>
				<description>Version of Plastic supported</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<method name="echo">
			<description>Send the ECHO message to registered
				applications</description>
			<property>
				<key>icon</key>
				<value>update.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Send echo</value>
			</property>
			<parameter name="greeting">
				<description>The string for the application to echo</description>
			</parameter>
			<return>
				<description>The echoed messages</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<method name="sendNoArgMessage">
			<description>Send a no-arg message to registered
				applications</description>
			<property>
				<key>icon</key>
				<value>event_prop_arrow_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Send a no-arg message to all applications</value>
			</property>
			<parameter name="message">
				<description>The message to send</description>
			</parameter>
			<return>
				<description>The responses</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<method name="sendMessage">
			<description>Send a message to registered applications</description>
			<property>
				<key>icon</key>
				<value>event_prop_arrow_obj.gif</value>
			</property>
			<property>
				<key>system.ui.menu.entry</key>
				<value>Send a message to all applications</value>
			</property>
			<parameter name="message">
				<description>The message to send</description>
			</parameter>
			<parameter name="args">
				<description>Message arguments (comma-separated)</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</parameter>
			<return>
				<description>The responses</description>
				<property>
					<key>system.xmlrpc.type</key>
					<value>array</value>
				</property>
			</return>
		</method>
		<!--Don't want to expose this one-->
		<!--method name="perform">
		<description>Directly access the perform method</description>
		<property>
		<key>icon</key>
		<value>event_prop_arrow_obj.gif</value>
		</property>
		<property>
		<key>system.ui.menu.entry</key>
		<value>Perform on application</value>
		</property>
		<parameter name="sender">
		<description>sender</description>
		<property>
		<key>system.xmlrpc.type</key>
		
		</property>
		</parameter>
		<parameter name="message">
		<description>The message to send</description>
		<property>
		<key>system.xmlrpc.type</key>
		
		</property>
		</parameter>
		<parameter name="args">
		<description>The arguments</description>
		<property>
		<key>system.xmlrpc.type</key>
		<value>Array</value>
		</property>
		</parameter>									
		<return>
		<description>The response</description>
		<property>
		<key>system.xmlrpc.type</key>
		<value>Object</value>
		</property>
		</return>
		</method-->
	</component>
	
	
	<component name="namegen"
		implementationClass="org.astrogrid.common.namegen.InMemoryNameGen"
		interfaceClass="org.astrogrid.common.namegen.NameGen">
			<property>
				<key>hidden.component</key>
				<value>true</value>								
			</property>					
	</component>
</module>