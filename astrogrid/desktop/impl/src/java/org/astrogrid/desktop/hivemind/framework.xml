<?xml version="1.0"?>
<!DOCTYPE module [
	<!ENTITY version SYSTEM "fallback:classpath:/org/astrogrid/desktop/hivemind/version.xml,classpath:/org/astrogrid/desktop/hivemind/fallback-version.xml">
]>
<module id="framework" version="1.0.0" package="org.astrogrid.desktop.framework">
	Base module - defines ACR configuration points, fundamental config keys, configures hivemind.


	<contribution configuration-id="preferences">
		<preference name="acr.advanced" default-value="false">
			<ui-name>Show Advanced Features</ui-name>
			<description>Enables additional UI components for advanced use</description>
			<units>boolean</units>
		</preference>
		<preference name="acr.debug" default-value="false" advanced="true">
			<ui-name>Debugging Mode</ui-name>
			<description>Enables additional UI components for debugging and testing</description>
			<units>boolean</units>		
		</preference>
	</contribution>

	<!--  loads in version information, from file written externally during build -->
	<contribution configuration-id="hivemind.ApplicationDefaults">
		&version;
	</contribution>
	
	
	<!--  
	========================
	flavour-specific configuration -->

<!--  as PLASTIC HUB -->
	<contribution configuration-id="hivemind.ApplicationDefaults" if="property hub.mode">
		<default symbol="system.ui.title" value="AstroGrid PLASTIC Hub" />
		<default symbol="system.rmi.disableConnectionFile" value="true" /> <!-- as we've not got acr running, and plastic records connection details in it's own way -->
		<default symbol="system.webserver.disableConnectionFile" value="true" />
		<default symbol="app.mode" value="hub" />
	</contribution>
	<contribution configuration-id="preferenceClass" if="property hub.mode">
		<class>org.astrogrid.PlasticHub</class>
	</contribution>
	
	<!--  as ASR -->
	<contribution configuration-id="hivemind.ApplicationDefaults" if="property asr.mode">
		<default symbol="app.mode" value="asr" />
		<default symbol="system.ui.title" value="Astro Runtime" />		
	</contribution>
	<contribution configuration-id="preferenceClass" if="property asr.mode">
		<class>org.astrogrid.HeadlessAstroRuntime</class>
	</contribution>	
	
	<!--  as ACR -->
	<contribution configuration-id="hivemind.ApplicationDefaults" if="property acr.mode">
		<default symbol="app.mode" value="acr" />
		<default symbol="system.ui.title" value="Astro Runtime" />		
	</contribution>
	<contribution configuration-id="preferenceClass" if="property acr.mode">
		<class>org.astrogrid.AstroRuntime</class>
	</contribution>	
	
	<!--  as Workbench -->
	<contribution configuration-id="hivemind.ApplicationDefaults" if="property workbench.mode">
			<default symbol="app.mode" value="workbench" />
	</contribution>
	<contribution configuration-id="preferenceClass" if="property workbench.mode">
		<class>org.astrogrid.Workbench</class>
	</contribution>	
	
<!--  default -->
	<contribution configuration-id="hivemind.FactoryDefaults">	
		<default symbol="system.ui.title" value="AstroGrid Workbench" />
	</contribution>	
		
	
	
	<!--
	======================================
	  preferences system 
	  
	  although all configuraiton points are defined here, the 
	  actual preferences service is defined in 'system' - historical 
	  reasons - as that's where the previous 'configuraiton' serivce (whose
	  interface it still supports) was located.
	  -->

	
	<configuration-point id="preferenceClass" occurs="1">
		Defines the class key to store preferences under.
		<schema>
			<element name="class" content-translator="class">
			The name of the preference class
			<rules>
				<push-content />
				<invoke-parent method="addElement" />
			</rules>
			</element>
		</schema>
	</configuration-point>
	
	<configuration-point id="preferences">
		Defines the available preferences.
		<schema>
			<element name="preference" key-attribute="name">
				<attribute name="name" required="true" unique="true">
					The name of the preference
				</attribute>
				<attribute name="default-value" required="true">
					The default value
				</attribute>
				<attribute name="advanced" translator="boolean">
					true if this is an 'advanced' preference - not to be shown in all views.
				</attribute>
				<attribute name="requires-restart" translator="boolean">
					true if restart is required to effect changes to this preference
				</attribute>
				<attribute name="propagate-to-config" translator="boolean">
					true if the default value, and all modifications of this prefernece
					should be copied into the ag.commons.Config used by other 
					AG components (such as delegates).
					If false, this preference is not visible to such code.
				</attribute>
				<attribute name="help-id">
					An optional link to further help.
				</attribute>
				<element name="ui-name">
				Name to display in UI
					<rules>
						<push-content/>
					<invoke-parent method="setUiName" />
					</rules>
				</element>
				<element name="description">
				Description of this preference
					<rules>
						<push-content/>
					<invoke-parent method="setDescription" />
					</rules>				
				</element>
				<element name="units">
					Units / type of this value. Recognized values are 'boolean', 'file', 'url'
					'number','seconds'. Other values may also be used. 
					<rules>
						<push-content/>
					<invoke-parent method="setUnits" />
					</rules>						
				</element>
				<element name="alternative">
				  a suggested alternative value for this preference
				  	<rules>
						<push-content/>
						<invoke-parent method="addAlternative" />
					</rules>	
				 </element>
				<element name="option">
				enumerates one of the allowed values for this preference
				  	<rules>
						<push-content/>
						<invoke-parent method="addOption" />
					</rules>	
				 </element>				 
				<rules>
					<create-object class="org.astrogrid.desktop.modules.system.pref.Preference"/>
					<set-module property="module" />
					<read-attribute property="defaultValue" attribute="default-value" />
					<read-attribute property="name" attribute="name" />
					<read-attribute property="advanced" attribute="advanced" />
					<read-attribute property="propagateToConfig" attribute="propagate-to-config" />
					<read-attribute property="requiresRestart" attribute="requires-restart" />																						
					<read-attribute property="helpId" attribute="help-id" />
					<invoke-parent method="addElement"/>
				</rules>
			</element>
		</schema>
	</configuration-point>
	
	<!--  see system module for the 'configuration' service that consumes this -->

	<!--  symbol sources - as a service, as is referred to by preferences -->
	
	<service-point id="sysproperties" interface="org.apache.hivemind.SymbolSource">
		<create-instance model="primitive" class="org.apache.hivemind.impl.SystemPropertiesSymbolSource" />
	</service-point>
	
		<contribution  configuration-id="hivemind.SymbolSources">
		Enable hivemind system to access system properties
		<source 
			name="sysproperties" 
			before="*" 
			service-id="sysproperties" />
	</contribution>
	
	<!-- 
===========================
FUNDAMENTAL CONFIGURATION POINTS
 -->
	<configuration-point id="acrServices">
		Map of known ACR components / services.
		<schema>
			<element name="acrService" key-attribute="id">
				Describes a single acr service.
				<attribute name="id" required="true" translator="qualified-id">
					The service id of the component
				</attribute>
				<attribute name="interface" required="true" translator="class">
					The public interface class of the component (may be a superclass of the
					interface class used in definition of the service)
				</attribute>
				<rules>
					<create-object class="org.astrogrid.desktop.hivemind.ServiceBean" />
					<read-attribute property="id" attribute="id" />
					<read-attribute property="interface" attribute="interface" />
					<set-module property="module" />
					<invoke-parent method="addElement" />					
				</rules>
			</element>
		</schema>
	</configuration-point>
				
	<configuration-point id="descriptors">
		Module Descriptors - contain documentation about all the components and
		methods of the ACR. Content for this configuration is generated
		in the api project from original Javadoc, using JEX and XSLT
		<schema>			
			<element name="acr-module" key-attribute="name">
					<attribute name="name" required="true" unique="true" />
					<attribute name="description"/>
				<element name="component" >
					<attribute name="name" required="true"/>
					<attribute name="interface-class" required="true" translator="class" />
					<attribute name="description"/>										
					<element name="method" >
						<attribute name="name" required="true"/>
						<attribute name="description"/>
						<element name="return">
							<attribute name="type" translator="class"/>
							<attribute name="description"/>							
							<attribute name="uitype"/>					
							<conversion 
								class="org.astrogrid.acr.builtin.ValueDescriptor"
								parent-method="setReturnValue"/>	
						</element><!--end return -->
						<element name="param" >
							<attribute name="name" />
							<attribute name="type" translator="class"/>
							<attribute name="description"/>
							<attribute name="uitype"/>
							<conversion 
								class="org.astrogrid.acr.builtin.ValueDescriptor"
								parent-method="addParameter"/>								
						</element> <!-- end param -->
					<conversion 
						class="org.astrogrid.acr.builtin.MethodDescriptor" 
						parent-method="addMethod"/>						
					</element> <!-- end method -->
					<conversion 
						class="org.astrogrid.acr.builtin.ComponentDescriptor" 
						parent-method="addComponent"/>
				</element><!-- end component -->
				<conversion class="org.astrogrid.acr.builtin.ModuleDescriptor"/>
			</element><!-- end acr-module -->
		</schema>
	</configuration-point>
		
<!-- 
======================
DATA CONVERTORS - string -> object
 -->

	<service-point id="converter" interface="org.apache.commons.beanutils.Converter">
		Converts string inputs to the correct types
		<create-instance model="primitive" class="org.astrogrid.desktop.modules.system.converters.DefaultConverter" />
	</service-point>			
	

<!-- register converters with beanutils system -->
	<service-point id="registerConverters" visibility="private" interface="java.lang.Runnable">
	  <invoke-factory model="primitive">
	    <construct class="org.astrogrid.desktop.modules.system.converters.RegisterConverters">
	      <configuration>converters</configuration>
	    </construct>
	  </invoke-factory>
	</service-point>

	<!--  run this as startup -->
	<contribution configuration-id="hivemind.Startup">
	  <startup object="service:registerConverters" />
	</contribution>	
 
	<configuration-point id="converters">
	  Register list of string-to-object convertors
	  <schema>
	  	<element name="register">
	  	  <attribute name="output" required="true" translator="class">
	  	    Type of object this converter produces.
	  	  </attribute>
	  	  <attribute name="array" required="false" translator="boolean">
	  	  	true if this convertor outputs arrays of type output.
	  	  </attribute>
	  	  <attribute name="converter" required="true" translator="object">
	  	    The converter instance.
	  	  </attribute>
	  	  <conversion class="org.astrogrid.desktop.modules.system.contributions.ConverterContribution" />
	  	</element>
	  </schema>
	</configuration-point>
	<!-- setup initial set of convertors and transformers
	 -->
	<contribution configuration-id="converters">
		<register output="java.net.URI" converter="instance:org.astrogrid.desktop.modules.system.converters.URIConverter" />
		<register output="java.net.URL" converter="instance:org.astrogrid.desktop.modules.system.converters.URLConvertor" />
		<register output="org.w3c.dom.Document" converter="instance:org.astrogrid.desktop.modules.system.converters.DocumentConverter" />
		<register output="java.util.List" converter="instance:org.astrogrid.desktop.modules.system.converters.CollectionConvertor" />
		<register output="java.lang.Object" array="true" converter="instance:org.astrogrid.desktop.modules.system.converters.ArrayConvertor"/>
	</contribution>	
	

 
 <!-- 
 ======================
 RESULT TRANSFORMER - object -> string -->
 
 <!-- use the builtin strategy factory to assemble a strategy implementation from a configuratiobn
 for each of the three public result transformers.
 
  -->
 <service-point id="plainResultTransformer" interface="org.apache.commons.collections.Transformer">
 	<invoke-factory service-id="hivemind.lib.StrategyFactory">
 		<construct configuration-id="plainResultTransformers" />
 	</invoke-factory>
 </service-point>

 	<configuration-point id="plainResultTransformers" schema-id="hivemind.lib.StrategyRegistry">
	  Convertors for taking results to plain text.
	</configuration-point>

	<contribution configuration-id="plainResultTransformers">
		<strategy class="java.lang.Object" object="service:defaultPlainTransformer" />
		<strategy class="org.w3c.dom.Document" object="service:documentTransformer" />		
	</contribution>
	
	
  <service-point id="htmlResultTransformer" interface="org.apache.commons.collections.Transformer">
 	<invoke-factory service-id="hivemind.lib.StrategyFactory">
 		<construct configuration-id="htmlResultTransformers" />
 	</invoke-factory>
 </service-point>

		<configuration-point id="htmlResultTransformers" schema-id="hivemind.lib.StrategyRegistry">
	  Convertors for taking results to html text.
	</configuration-point>

		<contribution configuration-id="htmlResultTransformers">
		<strategy class="java.lang.Object" object="service:defaultHtmlTransformer" />
		<strategy class="org.w3c.dom.Document" object="service:stylesheetTransformer" />
	</contribution>
	 
  <service-point id="rpcResultTransformer" interface="org.apache.commons.collections.Transformer">
 	<invoke-factory service-id="hivemind.lib.StrategyFactory">
 		<construct configuration-id="rpcResultTransformers" />
 	</invoke-factory>
 </service-point>

	<configuration-point id="rpcResultTransformers" schema-id="hivemind.lib.StrategyRegistry">
	  Convertors for taking results to xmlrpc results
	</configuration-point>	

<contribution configuration-id="rpcResultTransformers">
		<strategy class="java.lang.Object" object="service:typeStructureTransformer" />
		<strategy class="org.w3c.dom.Document" object="service:documentTransformer" />		
	</contribution>	

<!--
=======================
BASIC TRANSFORMERS
 to start things off - private to this module.-->
<service-point id="typeStructureTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
	<invoke-factory>
		<construct class="org.astrogrid.desktop.modules.system.transformers.TypeStructureTransformer">
			<service>rpcResultTransformer</service><!-- 'recursive' call -->
		</construct>
	</invoke-factory>
</service-point>

<service-point id="defaultHtmlTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
	<invoke-factory>
		<construct class="org.astrogrid.desktop.modules.system.transformers.DefaultHtmlTransformer">
			<service>typeStructureTransformer</service>
		</construct>
		</invoke-factory>
</service-point>

<service-point id="defaultPlainTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
	<invoke-factory>
		<construct class="org.astrogrid.desktop.modules.system.transformers.DefaultPlainTransformer">
			<service>typeStructureTransformer</service>
		</construct>
		</invoke-factory>
</service-point>

<service-point id="documentTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
	<create-instance model="primitive" class="org.astrogrid.desktop.modules.system.transformers.DocumentTransformer"/>
</service-point>

<!-- 
==============
STYLESHEET TRANSFORMER
 -->
<service-point id="stylesheetTransformer"  interface="org.apache.commons.collections.Transformer">
	<invoke-factory model="primitive">
		<construct class="org.astrogrid.desktop.modules.system.transformers.Xml2XhtmlTransformer">
			<configuration>stylesheets</configuration>
		</construct>
	</invoke-factory>
</service-point>

	<configuration-point id="stylesheets">
		list of stylesheets to use to render xml results to html.
		<schema>
			<element name="stylesheet">
				<attribute name="regexp" required="true">
				  Pattern to match xml input against to determine whether this stylesheet is appropriate.
				</attribute>
				<attribute name="sheet" required="true">
				unqualified name of the stylesheet to apply. must be in the org.astorgird.desktop.modules.system.transformers package.
				</attribute>
				<conversion class="org.astrogrid.desktop.modules.system.contributions.StylesheetsContribution" />
			</element>
		</schema>
	</configuration-point>
	
	<contribution configuration-id="stylesheets">
		<stylesheet regexp=".*&lt;workflow" sheet="workflow.xsl" />
	<!-- stopped using this one - as doesn't work for all votables. fallback to xml verbatim instead.
		<stylesheet regexp=".*&lt;VOTABLE" sheet="VOTable2XHTML.xsl" /> -->
		<stylesheet regexp="." sheet="xmlverbatim.xsl" />
	</contribution>
		

	
 </module>
 