<?xml version="1.0"?>
<!DOCTYPE module [
	<!ENTITY version SYSTEM "fallback:classpath:/org/astrogrid/desktop/hivemind/version.xml,classpath:/org/astrogrid/desktop/hivemind/fallback-version.xml">
]>
<module id="framework" version="1.0.0" package="org.astrogrid.desktop.framework">
	Base module - defines fundamental configuration points and properties, and configures hivemind.


	<contribution configuration-id="preferences">
		<preference name="acr.advanced" default-value="false">
			<ui-name>Show advanced features</ui-name>
			<description>Enables additional UI components for advanced use</description>
			<units>boolean</units>
		</preference>
		<preference name="acr.debug" default-value="false" advanced="true">
			<ui-name>Debugging mode</ui-name>
			<description>Enables additional UI components for debugging and testing</description>
			<units>boolean</units>		
		</preference>
	</contribution>

	<!--  loads in version information, from file written externally during build -->
	<contribution configuration-id="hivemind.ApplicationDefaults">
		&version;
	</contribution>
	
	
	<!--  
	========================
	flavour-specific configuration -  might be obsolete now - but leaves it open to extenders-->

	<!--  as Workbench -->
	<contribution configuration-id="hivemind.ApplicationDefaults" if="property workbench.mode">
			<default symbol="app.mode" value="workbench" /><!--  unused? -->
	</contribution>
	<contribution configuration-id="preferenceClass" if="property workbench.mode">
		<class>org.astrogrid.Workbench</class>
	</contribution>	
	
<!--  default -->
	<contribution configuration-id="hivemind.FactoryDefaults">	
		<default symbol="system.ui.title" value="AstroGrid VO Desktop" />
	</contribution>	
		
	
	
	<!--
	======================================
	  preferences system 
	  
	  although all configuraiton points are defined here, the 
	  actual preferences service is defined in 'system' - historical 
	  reasons - as that's where the previous 'configuraiton' serivce (whose
	  interface it still supports) was located.
	  -->

	
	<configuration-point id="preferenceClass" occurs="1">
		Defines the key to store preferences under.
		<schema>
			<element name="class" content-translator="class">
			The name of the class to use as the key for the preference store.
			<rules>
				<push-content />
				<invoke-parent method="addElement" />
			</rules>
			</element>
		</schema>
	</configuration-point>
	
	<configuration-point id="preferences">
		Defines individual preference objects - name, value, description, etc
        See system.configuration, which is the service that consumes this configuration point.
		<schema>
			<element name="preference" key-attribute="name">
				<attribute name="name" required="true" unique="true">
					The name of the preference - used as it's key
				</attribute>
				<attribute name="default-value" required="true">
					The default value
				</attribute>
				<attribute name="advanced" translator="boolean">
					true if this is an 'advanced' preference - not to be shown in all views.
				</attribute>
				<attribute name="requires-restart" translator="boolean">
					true if restart is required to effect changes to this preference
				</attribute>
				<attribute name="propagate-to-config" translator="boolean">
					true if the default value, and all modifications of this prefernece
					should be copied into the legacy ag.commons.Config used by other 
					AG components (such as delegates).
					If false, this preference is not visible to such code.
				</attribute>
				<attribute name="help-id">
					An optional help-id that links to further help.
				</attribute>
				<element name="ui-name">
				Name to display in UI
					<rules>
						<push-content/>
					<invoke-parent method="setUiName" />
					</rules>
				</element>
				<element name="description">
				Description of this preference
					<rules>
						<push-content/>
					<invoke-parent method="setDescription" />
					</rules>				
				</element>
				<element name="units">
					Units / type of this value. Recognized values are 'boolean', 'file', 'url'
					'number','seconds'. Other values may also be used.  Recognized values might cause the UI to alter
                    to support input of these types.
					<rules>
						<push-content/>
					<invoke-parent method="setUnits" />
					</rules>						
				</element>
				<element name="alternative">
				  a suggested alternative value for this preference
				  	<rules>
						<push-content/>
						<invoke-parent method="addAlternative" />
					</rules>	
				 </element>
				<element name="option">
				enumerates one of the allowed values for this preference
				  	<rules>
						<push-content/>
						<invoke-parent method="addOption" />
					</rules>	
				 </element>				 
				<rules>
					<create-object class="org.astrogrid.desktop.modules.system.pref.Preference"/>
					<set-module property="module" />
					<read-attribute property="defaultValue" attribute="default-value" />
					<read-attribute property="name" attribute="name" />
					<read-attribute property="advanced" attribute="advanced" />
					<read-attribute property="propagateToConfig" attribute="propagate-to-config" />
					<read-attribute property="requiresRestart" attribute="requires-restart" />																						
					<read-attribute property="helpId" attribute="help-id" />
					<invoke-parent method="addElement"/>
				</rules>
			</element>
		</schema>
	</configuration-point>

	
	<service-point id="sysproperties" interface="org.apache.hivemind.SymbolSource">
        Symbol source - makes system properties appear as hivemind symbols.
		<create-instance model="primitive" class="org.apache.hivemind.impl.SystemPropertiesSymbolSource" />
	</service-point>
	
		<contribution  configuration-id="hivemind.SymbolSources">
		Enable hivemind system to access system properties
		<source 
			name="sysproperties" 
			before="*" 
			service-id="sysproperties" />
	</contribution>
	
	<!-- 
===========================
FUNDAMENTAL CONFIGURATION POINTS
 -->
	<configuration-point id="acrServices">
		Description of all AR services. Consumed by builtin.ACR
		<schema>
			<element name="acrService" key-attribute="id">
				Describes a single AR service.
				<attribute name="id" required="true" translator="qualified-id">
					The service id of the component
				</attribute>
				<attribute name="interface" required="true" translator="class">
					The public interface class of the component (may be a superclass of the
					interface class used in definition of the service, as there's often an
                    'internal' interface which extends the public interface)
				</attribute>
				<rules>
					<create-object class="org.astrogrid.desktop.hivemind.ServiceBean" />
					<read-attribute property="id" attribute="id" />
					<read-attribute property="interface" attribute="interface" />
					<set-module property="module" />
					<invoke-parent method="addElement" />					
				</rules>
			</element>
		</schema>
	</configuration-point>
				
	<configuration-point id="descriptors">
		Module Descriptors - contain documentation and type information for all the components and
		methods of the ACR. Content for this configuration is generated
		in the api project from original Javadoc, using JEL and XSLT.
        Used to generate documentation in the HTTP and XMLRPC bindings, 
        and to expose functions through the HTTP / XMLRPC / RMI bindings.
		<schema>			
			<element name="acr-module" key-attribute="name">
                    Describes a module of the AR
					<attribute name="name" required="true" unique="true" >
                    The unique id of the module.
                    </attribute>
					<attribute name="description">
                    Description of this module.
                    </attribute>
				<element name="component" >
                    Describes a component of the AR
					<attribute name="name" required="true">
                    The name of the component
                    </attribute>
					<attribute name="interface-class" required="true" translator="class" >
                    The public interface that this component implements.
                    </attribute>
					<attribute name="description">
                    A description of the component.
                    </attribute>										
					<element name="method" >
                        Describes a method of the component
						<attribute name="name" required="true">
                        The name of the method
                        </attribute>
						<attribute name="description">
                        A description of the method
                        </attribute>
						<element name="return">
                            The return of the method
							<attribute name="type" translator="class">
                            Type of the return value
                            </attribute>
							<attribute name="description">
                            Description of the return value
                            </attribute>							
							<attribute name="uitype">
                            Human-readable description of the return type. 
                            </attribute>					
							<conversion 
								class="org.astrogrid.acr.builtin.ValueDescriptor"
								parent-method="setReturnValue"/>	
						</element><!--end return -->
						<element name="param" >
                            A parameter to the method
							<attribute name="name" >
                            The method name
                            </attribute>
							<attribute name="type" translator="class">
                            The type of the parameter
                            </attribute>
							<attribute name="description">
                            Description of the parameter
                            </attribute>
							<attribute name="uitype">
                            Human-readable description of the parameter type.
                            </attribute>
							<conversion 
								class="org.astrogrid.acr.builtin.ValueDescriptor"
								parent-method="addParameter"/>								
						</element> <!-- end param -->
					<conversion 
						class="org.astrogrid.acr.builtin.MethodDescriptor" 
						parent-method="addMethod"/>						
					</element> <!-- end method -->
					<conversion 
						class="org.astrogrid.acr.builtin.ComponentDescriptor" 
						parent-method="addComponent"/>
				</element><!-- end component -->
				<conversion class="org.astrogrid.acr.builtin.ModuleDescriptor"/>
			</element><!-- end acr-module -->
		</schema>
	</configuration-point>
		
<!-- 
======================
DATA CONVERTORS - string -> object
 -->

	<service-point id="converter" interface="org.apache.commons.beanutils.Converter">
		Converts string inputs to the correct types. Used to process parameters of method-calls
        over XMLRPC and HTTP bindings.
		<create-instance model="primitive" class="org.astrogrid.desktop.modules.system.converters.DefaultConverter" />
	</service-point>			
	
	<service-point id="registerConverters" visibility="private" interface="java.lang.Runnable">
      Register a series of conversion classes with the commons.beanUtils Convertor framework.
      Consumes the 'converters' contribution. The beanUtils.Convertor framework is used within the 'convertor' service.
	  <invoke-factory model="primitive">
	    <construct class="org.astrogrid.desktop.modules.system.converters.RegisterConverters">
	      <configuration>converters</configuration>
	    </construct>
	  </invoke-factory>
	</service-point>

	<!--  run this as startup -->
	<contribution configuration-id="hivemind.Startup">
	  <startup object="service:registerConverters" />
	</contribution>	
 
	<configuration-point id="converters">
	  Register various string-to-object convertor classes. Consumed by 'registerConverters' which
      assists with the implementation of 'converter'
	  <schema>
	  	<element name="register">
	  	  <attribute name="output" required="true" translator="class">
	  	    Type of object this converter produces.
	  	  </attribute>
	  	  <attribute name="converter" required="true" translator="object">
	  	    The converter instance.
	  	  </attribute>
	  	  <conversion class="org.astrogrid.desktop.modules.system.contributions.ConverterContribution" />
	  	</element>
	  </schema>
	</configuration-point>
	<!-- setup initial set of convertors and transformers
	 -->
	<contribution configuration-id="converters">
		<register output="java.net.URI" converter="instance:org.astrogrid.desktop.modules.system.converters.URIConverter" />
		<register output="org.w3c.dom.Document" converter="instance:org.astrogrid.desktop.modules.system.converters.DocumentConverter" />
		<register output="java.util.List" converter="instance:org.astrogrid.desktop.modules.system.converters.CollectionConvertor" />
		<register output="[Ljava.lang.Object;"  converter="instance:org.astrogrid.desktop.modules.system.converters.ArrayConvertor"/>
        <register output="[Ljava.net.URI;"  converter="instance:org.astrogrid.desktop.modules.system.converters.URIArrayConvertor"/>
    </contribution>	
	

 
 <!-- 
 ======================
 RESULT TRANSFORMER - object -> string 
 inverse of convertors - which goes string -> object
 -->
 
 <!-- use the builtin strategy factory to assemble a strategy implementation from a configuratiobn
 for each of the three public result transformers.
 
  -->
 <service-point id="plainResultTransformer" interface="org.apache.commons.collections.Transformer">
    Transformer service which converts from object to plain result string. Used when serializing results in the 
    HTTP binding.
 	<invoke-factory service-id="hivemind.lib.StrategyFactory">
 		<construct configuration-id="plainResultTransformers" />
 	</invoke-factory>
 </service-point>

 	<configuration-point id="plainResultTransformers" schema-id="hivemind.lib.StrategyRegistry">
	  Individual transformers which convert result objects into plain text.
	</configuration-point>

	<contribution configuration-id="plainResultTransformers">
		<strategy class="java.lang.Object" object="service:defaultPlainTransformer" />
		<strategy class="org.w3c.dom.Document" object="service:documentTransformer" />		
	</contribution>
	
	
  <service-point id="htmlResultTransformer" interface="org.apache.commons.collections.Transformer">
    Transformer service which converts from object to html result string. Used when serializing results in the 
    HTTP binding.
 	<invoke-factory service-id="hivemind.lib.StrategyFactory">
 		<construct configuration-id="htmlResultTransformers" />
 	</invoke-factory>
 </service-point>

		<configuration-point id="htmlResultTransformers" schema-id="hivemind.lib.StrategyRegistry">
	  Individual transformers for taking result results to html text.
	</configuration-point>

		<contribution configuration-id="htmlResultTransformers">
		<strategy class="java.lang.Object" object="service:defaultHtmlTransformer" />
		<strategy class="org.w3c.dom.Document" object="service:stylesheetTransformer" />
	</contribution>
	 
  <service-point id="rpcResultTransformer" interface="org.apache.commons.collections.Transformer">
  Transformer service which converts a result object into a datastructure (maps and vectors) suitable for returning
  via the XMLRPC binding.
 	<invoke-factory service-id="hivemind.lib.StrategyFactory">
 		<construct configuration-id="rpcResultTransformers" />
 	</invoke-factory>
 </service-point>

	<configuration-point id="rpcResultTransformers" schema-id="hivemind.lib.StrategyRegistry">
	  Individual transformers for taking result objects to xmlrpc structures.
	</configuration-point>	

<contribution configuration-id="rpcResultTransformers">
		<strategy class="java.lang.Object" object="service:typeStructureTransformer" />
		<strategy class="org.w3c.dom.Document" object="service:documentTransformer" />		
	</contribution>	

<!--
=======================
BASIC TRANSFORMERS
 to start things off - private to this module.-->
<service-point id="typeStructureTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
    Default implementation to convert objects to XMLRPC-friendly structures. Recursively calls other transformers to convert primitive types.
	<invoke-factory>
		<construct class="org.astrogrid.desktop.modules.system.transformers.TypeStructureTransformer">
			<service>rpcResultTransformer</service><!-- 'recursive' call -->
		</construct>
	</invoke-factory>
</service-point>

<service-point id="defaultHtmlTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
    Default implementation to convert objects to a html document. Recursively calls other transformers to convert primitive types.
	<invoke-factory>
		<construct class="org.astrogrid.desktop.modules.system.transformers.DefaultHtmlTransformer">
			<service>typeStructureTransformer</service>
		</construct>
		</invoke-factory>
</service-point>

<service-point id="defaultPlainTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
    Default implementation to convert objects to plain text. Recursively calls other transformers to convert primitive types.
	<invoke-factory>
		<construct class="org.astrogrid.desktop.modules.system.transformers.DefaultPlainTransformer">
			<service>typeStructureTransformer</service>
		</construct>
		</invoke-factory>
</service-point>

<service-point id="documentTransformer" visibility="private" interface="org.apache.commons.collections.Transformer">
    Transformer that serializes a DOM XML document to a string.
	<create-instance model="primitive" class="org.astrogrid.desktop.modules.system.transformers.DocumentTransformer"/>
</service-point>

<!-- 
==============
STYLESHEET TRANSFORMER
 -->
<service-point id="stylesheetTransformer"  interface="org.apache.commons.collections.Transformer">
    Transformer that converts a DOM XML document to HTML by applying an XSLT
	<invoke-factory model="primitive">
		<construct class="org.astrogrid.desktop.modules.system.transformers.Xml2XhtmlTransformer">
			<configuration>stylesheets</configuration>
		</construct>
	</invoke-factory>
</service-point>

	<configuration-point id="stylesheets">
		list of stylesheets to use to render xml results to html.
		<schema>
			<element name="stylesheet">
				<attribute name="regexp" required="true">
				  Pattern to match xml input against to determine whether this stylesheet is appropriate.
				</attribute>
				<attribute name="sheet" required="true">
				unqualified name of the stylesheet to apply. must be in the org.astorgird.desktop.modules.system.transformers package.
				</attribute>
				<conversion class="org.astrogrid.desktop.modules.system.contributions.StylesheetsContribution" />
			</element>
		</schema>
	</configuration-point>
	
	<contribution configuration-id="stylesheets">
	<!-- stopped using this one - as doesn't work for all votables. fallback to xml verbatim instead.
		<stylesheet regexp=".*&lt;VOTABLE" sheet="VOTable2XHTML.xsl" /> -->
		<stylesheet regexp="." sheet="xmlverbatim.xsl" />
	</contribution>
		

	
 </module>
 