<?xml version="1.0"?>
<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:jsl="jelly:jsl" xmlns:jxml="jelly:xml"  xmlns:artifact="artifact">

         <goal name="astrogrid-build-artifact" prereqs="setup,javaapp,dist:build-bin"/>
<goal name="astrogrid-install-artifact" prereqs="setup,javaapp:install,dist-install" />
		
		<!--overridable goal, to zap appropriate settings (necessary when running in multiproject mode -->
		<goal name="setup">
			<j:set var="ifBuildingASR" value="true" />
		</goal>
	
			<postGoal name="java:jar-resources">
		<attainGoal name="astrogrid.version" />
	</postGoal>
		
		<goal name="astrogrid.version">
			<echo file="${maven.build.dest}/org/astrogrid/desktop/hivemind/astrogrid.version">
			astrogrid.desktop.version=${astrogrid.desktop.version}
			astrogrid.build.date=${maven.jar.manifest.attribute.BuildDate}
			astrogrid.build.location=${maven.jar.manifest.attribute.BuildLocation}
			astrogrid.build.by=${user.name}
			astrogrid.build.jdk=${java.version}
			</echo>
		</goal>
	<!-- do the final tweaks to the javaapp process -->
		    <!-- work around: javaapp unzips all dependent jars before making one big jar.
		    this doesn't work on MacOS, as packages named EDU... and edu... get mapped to the
		    same folder - which then results in a 'class not found' exception.
		    Concurrent is the only one that uses non-standard capitalization, that falls foul of this
		    so exclude it from the javaaapp process, and stuff it in later ourseleves using a maven 
		    post goal.
		    -->	
	<postGoal name="javaapp:jar">
   <j:forEach var="lib" items="${pom.artifacts}">
      <j:set var="dep" value="${lib.dependency}"/>     
      <j:if test="${dep.getProperty('nww.bundle.later')=='true'}">
		<jar update="true" destfile="${maven.javaapp.final.name}"
			filesetmanifest="skip" duplicate="fail">
			<zipfileset src="${lib.path}" />
		</jar>
	  </j:if>
    </j:forEach>
	</postGoal>
	
	
    <goal name="dist-install" prereqs="dist:build-bin">
             <artifact:install
        artifact="${maven.dist.dir}/${maven.final.name}.zip"
        type="zip"
        project="${pom}"
        /> 
        </goal>
         



</project>

