<?xml version="1.0"?>
<!-- extension maven script -->
<project   xmlns:j="jelly:core" xmlns:maven="jelly:maven" xmlns:artifact="artifact">
	
	<goal name="astrogrid-install-artifact" prereqs="jar:install,dist-install"
	description="Installs interface jar, distribution zip in the local maven repository"
	/>

	<goal name="astrogrid-deploy-artifact" prereqs="jar:deploy,dist:deploy-bin,site:deploy"
	description="Deploys interface jar and distribution zip to astrogrid maven repository, and uploads api docs to technology.a.o" />


	<goal name="astrogrid-build-artifact" prereqs="dist:build-bin"
	description="Build the interface jar, distribution zip, and leave all in the target directory"
	/>

    
	
	<goal name="astrogrid-clean" prereqs="clean" 
	description="Clean the api project"/>

	<!-- add  dependent libs into distro -->
	<postGoal name="dist:prepare-bin-filesystem">
		<mkdir dir="${maven.dist.bin.assembly.dir}/rmi-lib"/>
		<move file="${maven.dist.bin.assembly.dir}/${maven.final.name}.jar"
			todir="${maven.dist.bin.assembly.dir}/rmi-lib" />
		<j:forEach var="lib" items="${pom.artifacts}">
			<j:set var="dep" value="${lib.dependency}"/>			
			<j:if test="${dep.getProperty('rmi.bundle')=='true'}">
				<j:choose>
					<copy todir="${maven.dist.bin.assembly.dir}/rmi-lib" 
					      file="${lib.path}"/>			
				</j:choose>
			</j:if>
         </j:forEach>	
		<mkdir dir="${maven.dist.bin.assembly.dir}/xmlrpc-lib"/>
		<j:forEach var="lib" items="${pom.artifacts}">
			<j:set var="dep" value="${lib.dependency}"/>			
			<j:if test="${dep.getProperty('xmlrpc.bundle')=='true'}">
				<j:choose>
					<copy todir="${maven.dist.bin.assembly.dir}/xmlrpc-lib" 
					      file="${lib.path}"/>			
				</j:choose>
			</j:if>
         </j:forEach>	                  
         <copy todir="${maven.dist.bin.assembly.dir}">
         	<fileset dir="${basedir}">
         		<include name="README" />
         	</fileset>
        </copy>	
	</postGoal>	
	
	    <goal name="dist-install" prereqs="dist:build-bin">
             <artifact:install
        artifact="${maven.dist.dir}/${maven.final.name}.zip"
        type="zip"
        project="${pom}"
        /> 
        </goal>
        

    <preGoal name="site:run-reports">
        <attainGoal name="jar:jar" />
    </preGoal>
        
 <!--  documentation and api descriptor generation 
  -->
	
	<preGoal name="jar:jar">
		<attainGoal name="xmldescriptors"/>
	</preGoal>	
<!-- hack for xsl purposes -->
   ${systemScope.setProperty('javax.xml.transform.TransformerFactory','com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl')}

	
	<!-- generate xmlrpc documentation and descriptiors -->
	<goal name="xmldescriptors" description="extract xml description of api, then process into module descriptors">
        <!--  take a copy of the default (documentation-producing) configuration, 
        before we zap it. -->
        <j:set var="maven.javadoc.doclet.orig" value="${maven.javadoc.doclet}" />
        <j:set var="maven.javadoc.docletpath.orig" value="${maven.javadoc.docletpath}" />
        <j:set var="maven.javadoc.additionalparam.orig" value="${maven.javadoc.additionalparam}" />
        <j:set var="maven.javadoc.excludepackagenames.orig" value="${maven.javadoc.excludepackagenames}" />
        
        <!-- configure for the jel doclet. -->		
		<j:set var="maven.javadoc.doclet" value="com.jeldoclet.JELDoclet" />
		<j:set var="maven.javadoc.docletpath" value="${pom.getDependencyPath('jeldoclet')}" />
		<j:set var="maven.javadoc.additionalparam" value="-d ${basedir}/target/jel" />
        <j:set var="maven.javadoc.excludepackagenames" value="" />
        <!--  run javadoc -->
		<mkdir dir="${basedir}/target/jel" />
		<attainGoal name="javadoc" />

        <!--  expand inline javadoc tags. 
        -->
        <attainGoal name="expandJavadoc" />
                       
		<!-- splitting stylesheet. -->
		<mkdir dir="${basedir}/target/classes/org/astrogrid/desktop/hivemind" />
		<xslt style="${basedir}/build/split.xsl"
		      in="${basedir}/target/jel/jel.xml"
		      out="${basedir}/target/dummy"
		      >
			<param name="outputDir" expression="${basedir}/target/classes/org/astrogrid/desktop/hivemind/"/>
		</xslt>
		<!-- restore doclet values - as later documentation-producing doclet can run -->
        <j:set var="maven.javadoc.doclet" value="${maven.javadoc.doclet.orig}" />
        <j:set var="maven.javadoc.docletpath" value="${maven.javadoc.docletpath.orig}" />
        <j:set var="maven.javadoc.additionalparam" value="${maven.javadoc.additionalparam.orig}" />
        <j:set var="maven.javadoc.excludepackagenames" value="${maven.javadoc.excludepackagenames.orig}" />
         
        <!--  hack - we know this needs to be set to true for javaodc -->
        <j:set var="maven.javadoc.usestandardparameters" value="true" />
        
	</goal>
    
    <goal name="expandJavadoc" description="expand javadoc tags into html">        
        <!-- run some regexps to replace @javadoc tags with html markup 
            - need a separate pass for each tag.
            - need to double-escape substitutions, which is a bit ugly.
        -->
        <replaceregexp file="${basedir}/target/jel/jel.xml" 
            match="\{@link\s#?([^\}]+)\}" 
            replace="&amp;lt;tt&amp;gt;\1&amp;lt;/tt&amp;gt;" flags="g"/>
        <replaceregexp file="${basedir}/target/jel/jel.xml" 
            match="\{@code\s([^\}]+)\}" 
            replace="&amp;lt;tt&amp;gt;\1&amp;lt;/tt&amp;gt;" flags="g"/>
        <replaceregexp file="${basedir}/target/jel/jel.xml" 
            match="\{@stickyNote\s([^\}]+)\}" 
            replace="&amp;lt;blockquote&amp;gt;&amp;lt;b&amp;gt;Note: &amp;lt;/b&amp;gt;\1&amp;lt;/blockquote&amp;gt;" 
            flags="g"/>
        <replaceregexp file="${basedir}/target/jel/jel.xml" 
            match="\{@stickyWarning\s([^\}]+)\}" 
            replace="&amp;lt;blockquote&amp;gt;&amp;lt;b&amp;gt;Warning: &amp;lt;/b&amp;gt;\1&amp;lt;/blockquote&amp;gt;" 
            flags="g"/>                      
            <!--  todo: find a way for source, example to ignore nested } -->
        <replaceregexp file="${basedir}/target/jel/jel.xml" 
            match="\{@(textdiagram|source)\s([^\}]+)\}" 
            replace="&amp;lt;pre&amp;gt;\2&amp;lt;/pre&amp;gt;" 
            flags="g"/>            
        <replaceregexp file="${basedir}/target/jel/jel.xml" 
            match="\{@example\s([^\}]+)\}" 
            replace="&amp;lt;pre&amp;gt;&amp;lt;b&amp;gt;Example: &amp;lt;/b&amp;gt;\1&amp;lt;/pre&amp;gt;" 
            flags="g"/>
            
    </goal>


</project>

