<?xml version="1.0"?>
<!-- extension maven script -->
<project   xmlns:j="jelly:core" xmlns:maven="jelly:maven" xmlns:artifact="artifact">
	
	<goal name="astrogrid-install-artifact" prereqs="jar:install,dist-install"
	description="Installs interface jar, distribution zip in the local maven repository"
	/>

	<goal name="astrogrid-deploy-artifact" prereqs="jar:deploy,dist:deploy-bin"
	description="Deploys interface jar and distribution zip to central astrogrid maven repository" />

	<goal name="astrogrid-build-artifact" prereqs="jar:jar,dist:build-bin"
	description="Build the interface jar, distribution zip, and leave all in the target directory"
	/>

	
	<goal name="astrogrid-clean" prereqs="clean" 
	description="Clean the api project"/>

	<!-- add  dependent libs into distro -->
	<postGoal name="dist:prepare-bin-filesystem">
		<mkdir dir="${maven.dist.bin.assembly.dir}/rmi"/>
		<move file="${maven.dist.bin.assembly.dir}/${maven.final.name}.jar"
			todir="${maven.dist.bin.assembly.dir}/rmi" />
		<j:forEach var="lib" items="${pom.artifacts}">
			<j:set var="dep" value="${lib.dependency}"/>			
			<j:if test="${dep.getProperty('rmi.bundle')=='true'}">
				<j:choose>
					<copy todir="${maven.dist.bin.assembly.dir}/rmi" 
					      file="${lib.path}"/>			
				</j:choose>
			</j:if>
         </j:forEach>	
		<mkdir dir="${maven.dist.bin.assembly.dir}/xmlrpc"/>
		<j:forEach var="lib" items="${pom.artifacts}">
			<j:set var="dep" value="${lib.dependency}"/>			
			<j:if test="${dep.getProperty('xmlrpc.bundle')=='true'}">
				<j:choose>
					<copy todir="${maven.dist.bin.assembly.dir}/xmlrpc" 
					      file="${lib.path}"/>			
				</j:choose>
			</j:if>
         </j:forEach>	         
         <copy todir="${maven.dist.bin.assembly.dir}">
         	<fileset dir="${basedir}">
         		<include name="examples/**" />
         		<include name="contrib/**" />
         		<include name="README" />
         	</fileset>
        </copy>	
	</postGoal>	
	
	    <goal name="dist-install" prereqs="dist:build-bin">
             <artifact:install
        artifact="${maven.dist.dir}/${maven.final.name}.zip"
        type="zip"
        project="${pom}"
        /> 
        </goal>
        
        
 <!--  documentation and api descriptor generation 
  -->
	
	<preGoal name="jar:jar">
		<attainGoal name="xmlrpcdoc"/>
	</preGoal>	
	
	<!-- generate xmlrpc documentation -->
	<goal name="xmlrpcdoc" description="extract xml description of api, then process into module descriptors and xmlrpc documentation">		
		<j:set var="maven.javadoc.doclet" value="com.jeldoclet.JELDoclet" />
		<mkdir dir="${basedir}/target/xmlrpcdoc" />
		<j:set var="maven.javadoc.additionalparam" value="-d ${basedir}/target/xmlrpcdoc" />
		<j:set var="maven.javadoc.docletpath" value="${pom.getDependencyPath('jeldoclet')}" />
		<attainGoal name="javadoc" />
		<!-- hack from mailing list to fix Maven XLST bug -->
		${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
				
		<xslt style="${basedir}/xmlrpcdoc.xsl" 
		      in="${basedir}/target/xmlrpcdoc/jel.xml"
		      out="${basedir}/target/generated-xdocs/xmlrpc.xml" 
		      force="true"
		      >
			<outputproperty name="method" value="xml"/>			
			<outputproperty name="standalone" value="yes"/>
  			<outputproperty name="indent" value="yes"/>
		</xslt>
		
		
		<!-- splitting stylesheet. -->
		<mkdir dir="${basedir}/target/classes/org/astrogrid/desktop/hivemind" />
		<xslt style="${basedir}/split.xsl"
		      in="${basedir}/target/xmlrpcdoc/jel.xml"
		      out="${basedir}/target/dummy"
		      >
			<param name="outputDir" expression="${basedir}/target/classes/org/astrogrid/desktop/hivemind/"/>
		</xslt>
		<!-- reset doclet values - as later standard doclet will be run. - can't find a nicer way to set back to null. -->
		${context.setVariable('maven.javadoc.doclet',null)}
		${context.setVariable('maven.javadoc.docletpath',null)}
		${context.setVariable('maven.javadoc.additionalparam',null)}
	</goal>
	
</project>

