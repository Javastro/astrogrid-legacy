<?xml version="1.0"?>
<!-- extension maven script -->
<project   xmlns:j="jelly:core" xmlns:maven="jelly:maven" xmlns:artifact="artifact">

	<goal name="astrogrid-install-artifact" prereqs="javadoc:install,jar:install,dist-install,javahelp-install"/>

	<goal name="astrogrid-deploy-artifact" prereqs="javadoc:deploy,jar:deploy,dist:deploy-bin" />

	<goal name="astrogrid-build-artifact" prereqs="javadoc,jar:jar,dist:build-bin,javahelp-jar">
	</goal>
	
	<goal name="astrogrid-clean" prereqs="clean,javahelp-clean" />

	<!-- add  dependent libs into distro -->
	<postGoal name="dist:prepare-bin-filesystem">
		<j:forEach var="lib" items="${pom.artifacts}">
			<j:set var="dep" value="${lib.dependency}"/>			
			<j:if test="${dep.getProperty('dist.bundle')=='true'}">
				<j:choose>
					<copy todir="${maven.dist.bin.assembly.dir}" 
					      file="${lib.path}"/>			
				</j:choose>
			</j:if>
                </j:forEach>		
	</postGoal>	
	
	    <goal name="dist-install" prereqs="dist:build-bin">
             <artifact:install
        artifact="${maven.dist.dir}/${maven.final.name}.zip"
        type="zip"
        project="${pom}"
        /> 
        </goal>
        
        
        <!-- javahelp stuff -->
	
	<preGoal name="jar:jar">
		<attainGoal name="xmlrpcdoc"/>
	</preGoal>	
	<goal name="javahelp-install">
		<maven:maven goals="jar:install" descriptor="${basedir}/javahelp/project.xml" />
	</goal>
	<goal name="javahelp-deploy">
		<maven:maven goals="jar:deploy" descriptor="${basedir}/javahelp/project.xml" />
	</goal>
	<goal name="javahelp-jar">
		<maven:maven goals="jar:jar" descriptor="${basedir}/javahelp/project.xml" />
	</goal>	
	<goal name="javahelp-clean">
		<maven:maven goals="clean:clean" descriptor="${basedir}/javahelp/project.xml" />
	</goal>
	
	<!-- generate xmlrpc documentation -->
	<goal name="xmlrpcdoc">		
		<j:set var="maven.javadoc.doclet" value="com.jeldoclet.JELDoclet" />
		<mkdir dir="${basedir}/target/xmlrpcdoc" />
		<j:set var="maven.javadoc.additionalparam" value="-d ${basedir}/target/xmlrpcdoc" />
		<j:set var="maven.javadoc.docletpath" value="${pom.getDependencyPath('jeldoclet')}" />
		<attainGoal name="javadoc" />
		<!-- hack from mailing list to fix Maven XLST bug -->
		${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
				
		<xslt style="${basedir}/xmlrpcdoc.xsl" 
		      in="${basedir}/target/xmlrpcdoc/jel.xml"
		      out="${basedir}/target/generated-xdocs/xmlrpc.xml" 
		      force="true"
		      >
			<outputproperty name="method" value="xml"/>			
			<outputproperty name="standalone" value="yes"/>
  			<outputproperty name="indent" value="yes"/>
		</xslt>
		
		
		<!-- splitting stylesheet. -->
		<mkdir dir="${basedir}/target/classes/org/astrogrid/desktop/hivemind" />
		<xslt style="${basedir}/split.xsl"
		      in="${basedir}/target/xmlrpcdoc/jel.xml"
		      out="${basedir}/target/dummy"
		      >
			<param name="outputDir" expression="${basedir}/target/classes/org/astrogrid/desktop/hivemind/"/>
		</xslt>
		<!-- reset doclet values - as later standard doclet will be run. - can't find a nicer way to set back to null. -->
		${context.setVariable('maven.javadoc.doclet',null)}
		${context.setVariable('maven.javadoc.docletpath',null)}
		${context.setVariable('maven.javadoc.additionalparam',null)}
	</goal>
	
</project>

