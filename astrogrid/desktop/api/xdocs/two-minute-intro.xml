<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<properties> 
		<author email="noel.winstanley@manchester.ac.uk">Noel Winstanley</author>
		<title>Two Minute Introduction</title>
	</properties>
	<body>
		<section name="2 Minute Introduction">
			<subsection name="Astro Runtime">
			<p>
				The Astro Runtime (AR) is middleware that makes calling
				Virtual Observatory services simple. It
				<ul>
					<li>
						is a platform-independent executable that, in
						it's typical configuration, runs in the
						background on the user's desktop
					</li>
					<li>
						hides the complexity of the emerging VO system
						behind a simple, stable, consistent, self-contained
						<a
							href="http://c2.com/cgi/wiki?FacadePattern">
							facade
						</a>
						.
					</li>

					<li>
						exposes an API of high-level VO functions. These
						functions
						<ul>
							<li>
								can be invoked in a variety of ways from
								other programs
							</li>
							<li>
								are implemented using efficient,
								error-tolerant clients that call to VO
								web services through SOAP and HTTP
							</li>
						</ul>
					</li>
					<li>
						simplifies VO programming. Developers can start
						to address their problem immediately using the
						API.
						<ul>
							<li>
								There's no need to learn, configure and
								code to SOAP toolkits or XML parsers!
							</li>
							<li>
								Less in-depth knowledge of VO standards is required
							</li>
						</ul>
					</li>
					<li>
						provides a single point of configuration and
						upgrade
					</li>
					<li>
					manages credentials for single sign-on</li>
					<li>caches often-requested data,</li>
					<li>processes background tasks</li>

					<li>
						can be used for inter-application messaging (
						<a href="http://plastic.sourceforge.net">
							PLASTIC
						</a>
						)
					</li>
					<li>is both configurable and embeddable.</li>
				</ul>
			</p>
			<p>

				The Astro Runtime is available as a stand-alone executable, and
				also as part of the AstroGrid Workbench (which is a
				suite of GUI tools built upon AR - we believe in
				eating our own dogfood). These can be downloaded from
				<a href="http://www.astrogrid.org/desktop">
					www.astrogrid.org/desktop
				</a>
			</p>
			</subsection>
			<subsection name="AR API">
			<p>
				The AR API
				<ul>
					<li>
						is accessible from almost all programming
						languages:
						<ul>
							<li>direct method call from in-JVM Java</li>
							<li>
								remote method call from another JVM
								process (JavaRMI)
							</li>
							<li>
								remote method call from any other
								process (XMLRPC)
							</li>
							<li>simple REST-style interface</li>
						</ul>
					</li>
					<li>
						Aims to support and track all service standards,
						plus other popular services.
					</li>
					<li>
						is designed to present a suitable level of
						abstraction for client programmers. A single API
						function may involve one or more SOAP calls to
						VO services, plus work with local caches and
						configuration. This complexity is hidden.
					</li>
					<li>
						is deliberately procedural, not object-oriented.
					</li>
					<li>
						provides helper methods for building
						datastructures and processing common VO data
						formats (e.g. VOTABLE)
					</li>
					<li>
						provides reusable GUI dialogues (e.g. file
						chooser, registry browser) that can be called
						from client code
					</li>
				</ul>
			</p>
			</subsection>
		</section>

	</body>
</document>