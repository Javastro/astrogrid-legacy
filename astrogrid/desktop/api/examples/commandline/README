Python Commandline Scripts
========================

This folder contains simple python scripts that show how to connect
to the AR and perform useful tasks.

Many of these scripts are useful as-is - they can be composed and invoked from 
unix shell scripts to perform larger tasks.

many of these scripts will display help when passed the '--help' option, and will 
show some examples of use when passed the '--examples' option.


(alternately, the series of tasks could be written in a single long python script - 
whatever the user is most comfortable with).

Available Scripts.
==========

DAL
-----
cone.py - perform cone search against catalogues,
	 format result in range of ways, send to plastic, browser, etc.
siap.py - same for image services, also allows downloading of images.

Databases
------------
adql.py - query a DSA database using adql/s

Resolving
----------
sesame.py - resolve an object name to position (or display fuller information)

Applications Interop
-----------------------
plastic.py - send a file or URL (votable, fits, spectrum) to a plastic application. 

Myspace
----------
vols.py - list a myspace directory
voget.py - retrieve a file from myspace
voput.py - upload a file to myspace
vorm.py - delete a myspace file

CEA Remote Tasks
----------------------
app.py - run remote tasks using commandline args

misc/app-list-providers.py - lists the servers that provide a particular remote application
misc/app-submit.py - submit a new application invocation
misc/app-tool-template.py - build a template invocation document for a particular application
obsolete/app-info.py - shows formatted information about a remote application (CEA)


Registry
---------
xquery.py - run an xquery (from a file) against the registry.

misc/reg.py - retrieve a registry entry by name.
misc/reg-resolve.py - resolve a service IVOID to endpoint
obsolete/reg-search.py - perform an ADQL / XQuery search of the registry


Utility
------
login.py - login to AstroGrid
logout.py - logout of AstroGrid

misc/openURL.py - display a URL in the system webbrowser
misc/config-get.py - shows the value of an AR configuration key
misc/config-list.py - lists the AR configuration key
misc/config-set.py - change the value of an AR configuration key
misc/ui-show.py - show the main UI
misc/ui-hide.py  - hide the main UI
misc/ui-login.py - show the UI login dialogue

JES Workflows
-----------------
obsolete/jobs-list.py - list the current user's jobs
obsolete/jobs-submit.py - submit a new workflow
obsolete/jobs-get.py - retrieve the execution transcript for a job
obsolete/jobs-cancel.py - cancel a running job
obsolete/jobs-delete.py - delete a job


Connecting to AR
==========--
 The same boilerplate is used at the
start of each script to parse in the connection settings file and create an xmlrpc client
(confusingly called a Server):

> import xmlrpclib 
> import os
> fname = os.path.expanduser("~/.astrogrid-desktop")
> assert os.path.exists(fname),  'No AR running: Please start your AR and rerun this script'
> prefix = file(fname).next().rstrip()
> acr = xmlrpclib.Server(prefix + "xmlrpc")

The xmlrpc client can call all the methods exposed in the html server. It also provides
three additional methods.

acr.system.listMethods()
        will produce a list of all available methods on the server

acr.system.methodHelp(methodName)
        will produce documentation on a method

acr.system.methodSignature(methodName)
        will display the types of the inputs and outputs of the method


Example:

>> print acr.system.methodHelp('astrogrid.registry.resolveIdentifier')

Module astrogrid
        Astrogrid Components
Component registry
        Interrogate and browse the registry
Method resolveIdentifier
        Resolve a service ivorn to a web service
                                endpoint
ivorn : string
identifier of the service to resolve
unknown : string
url of endpoint
