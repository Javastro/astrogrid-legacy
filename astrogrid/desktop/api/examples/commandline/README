Python Commandline Scripts
========================

This folder contains simple python scripts that show how to connect
to the AR and perform simple tasks.

Many of these scripts are useful as-is - they can be composed and invoked from 
unix shell scripts to perform larger tasks.

(alternately, the series of tasks could be written in a single long python script - 
whatever the user is most comfortable with).

Available Scripts.
==========

Registry
---------
reg.py - retrieve a registry entry by name.
reg-search.py - perform an ADQL / XQuery search of the registry
reg-resolve.py - resolve a service IVOID to endpoint
xquery.py - run an xquery (from a file) against the registry.

DAL
-----
cone.py - perform cone search against catalogues,
	 format result in range of ways, send to plastic, browser, etc.
siap.py - same for image services, also allows downloading of images.


Resolving
----------
sesame.py - resolve an object name to position (or display fuller information)

Applications Interop
-----------------------
plastic.py - send a file or URL (votable, fits, spectrum) to a plastic application. 

Myspace
----------
vols.py - list a myspace directory
voget.py - retrieve a file from myspace
voput.py - upload a file to myspace
vorm.py - delete a myspace file

CEA Remote Tasks
----------------------
lsapps.py - list details of all remote applications known to the registry
app-info.py - shows formatted information about a remote application (CEA)
app-list-providers.py - lists the servers that provide a particular remote application
app-tool-template.py - build a template invocation document for a particular application
app-submit.py - submit a new application invocation

Utility
------
config-get.py - shows the value of an AR configuration key
config-list.py - lists the AR configuration key
config-set.py - change the value of an AR configuration key
login.py - login to AstroGrid
logout.py - logout of AstroGrid
ui-show.py - show the main UI
ui-hide.py  - hide the main UI
ui-login.py - show the UI login dialogue
openURL.py - display a URL in the system webbrowser

JES Workflows
-----------------
jobs-list.py - list the current user's jobs
jobs-submit.py - submit a new workflow
jobs-get.py - retrieve the execution transcript for a job
jobs-cancel.py - cancel a running job
jobs-delete.py - delete a job


Connecting to AR
==========--
 The same boilerplate is used at the
start of each script to parse in the connection settings file and create an xmlrpc client
(confusingly called a Server):

> import xmlrpclib as x
> import os
> prefix = file(os.path.expanduser("~/.astrogrid-desktop")).next().rstrip()
> s = x.Server(prefix + "xmlrpc")

The xmlrpc client can call all the methods exposed in the html server. It also provides
three additional methods.

s.system.listMethods()
        will produce a list of all available methods on the server

s.system.methodHelp(methodName)
        will produce documentation on a method

s.system.methodSignature(methodName)
        will display the types of the inputs and outputs of the method


Example:

>> print s.system.methodHelp('astrogrid.registry.resolveIdentifier')

Module astrogrid
        Astrogrid Components
Component registry
        Interrogate and browse the registry
Method resolveIdentifier
        Resolve a service ivorn to a web service
                                endpoint
ivorn : string
identifier of the service to resolve
unknown : string
url of endpoint
