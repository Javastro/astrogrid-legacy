#!/usr/bin/env python
# sample of building and running an application
import xmlrpclib as x
import sys
import os
import time
prefix = file(os.path.expanduser("~/.astrogrid-desktop")).next().rstrip()
s = x.Server(prefix + "xmlrpc")

#
# this example programatically creates and dispatches a cea application
# it's assumed that the user previously browsed the registry / list of 
# applications to select the app to call, find out it's parameter list, etc
# - the script can't do this by itself yet :)
#


# create a template tool document
tool = s.astrogrid.applications.getToolTemplate("ivo://uk.ac.cam.ast/INT-WFS/images/CEA-application","default")
print tool
#convert tool document into an struct for ease of processing
# (alternately, could just load a tool document previously saved to disk)	
struct = s.astrogrid.applications.convertToolToStruct(tool)
print struct
#fill in parameters in struct
# - hopefully this should be nicer from any language than working with the xml.
	
inputs = struct['input']
inputs['POS']['value'] = "180.0,0.0"
inputs['SIZE']['value'] = "1.0"
inputs['FORMAT']['value'] = "image/fits"
	
# setup a new timestamped file in myspace.
home = s.astrogrid.myspace.home()	
newFile = home + "/int-wfs-results" + str(time.time()) +".vot"
# send the output to this file	  
struct['output']['IMAGES']['value'] = newFile
struct['output']['IMAGES']['indirect'] = True
print struct
	
# convert struct back to a tool document.
tool1 = s.astrogrid.applications.convertStructToTool(struct)
print tool1

#submit.
#work-around here - there's 2 app servers registered for this app, but need to specify 	
#this one, as the other seems to be misconfigured, and always fails.	
execId = s.astrogrid.applications.executeOn(tool1,'ivo://uk.ac.cam.ast/INT-WFS/images/CEC')
print execId
	
#add execId to the job monitor, and display the monitor.
s.userInterface.jobMonitor.addApplication("scripted application",execId)
s.userInterface.jobMonitor.displayApplicationTab()	
s.userInterface.jobMonitor.show()
# give it a refresh to find the status.
s.userInterface.jobMonitor.refresh()
	

# :)
