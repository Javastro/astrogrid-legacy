<?xml version="1.0" encoding="UTF-8"?>
<!--+
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/filemanager/server/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: clq2 $</cvs:author>
    | <cvs:date>$Date: 2005/03/11 13:37:06 $</cvs:date>
    | <cvs:version>$Revision: 1.4 $</cvs:version>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:deploy="deploy"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:artifact="artifact"
    xmlns:filemanager="org.astrogrid.filemanager"
    default="astrogrid-rebuild-snapshot"
    >


        <!-- ================ Mandatory goals ================ -->

    <!--+
        | Clean our build target.
        +-->
    <goal name="astrogrid-clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean:clean"/>
    </goal>

    <!--+
        | Build and install our artifact jar.
        +-->
    <goal name="astrogrid-install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Build our artifact jar.
            +-->
        <attainGoal name="war:install"/>
    </goal>

    <!--+
        | Build and install our snapshot jar(s).
        +-->
    <goal name="astrogrid-install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>

        <attainGoal name="war:install-snapshot"/>
    </goal>

    <!--+
        | Build and deploy our artifact jar.
        +-->
    <goal name="astrogrid-deploy-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our artifact jar.
            +-->
        <attainGoal name="war:deploy"/>
    </goal>

    <!--+
        | Build and deploy our snapshot jar(s).
        +-->
    <goal name="astrogrid-deploy-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>

        <attainGoal name="war:snapshot-deploy"/>
    </goal>

    <!-- ================ Optional goals ================ -->

    <!--+
        | Clean, build and install our snapshot jar.
        +-->
    <goal name="astrogrid-rebuild-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean"/>
        <attainGoal name="astrogrid-install-snapshot"/>
    </goal>

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>



    <!-- ================ Boilerplate ================ -->

   <!--+
           | After the war has been initialised, but before it gets zipped, we need to extract
       | what we need from the contracts jar, and stuff it in
       +-->
   <postGoal name="war:init">
                <attainGoal name="configure-webapp"/>
   </postGoal>

   <!-- Grab the contracts jar, and extract the bits we need-->
   <goal name="grab-resources">
        <echo>Grabbing resources from jars.  Getting contract version ${astrogrid.contracts.version}</echo>
        <mkdir dir="${working.dir}" />
        <deploy:copy-deps todir="${working.dir}"/>
        <unjar dest="${working.dir}/wsdd" overwrite="true">
                <fileset dir="${working.dir}">
                        <include name="${astrogrid.contracts.jar}-${astrogrid.contracts.version}.jar" />
                </fileset>
                <patternset>
                        <include name="${astrogrid.contracts.filemanager.wsdd}" />
                        <!--include name="schema/**" /-->
                        <!--include name="wsdl/**" /-->
                </patternset>
        </unjar>
        <!-- now set correct implementation class -->
        <replace file="${working.dir}/wsdd/${astrogrid.contracts.filemanager.wsdd}"
                token="org.astrogrid.filemanager.common.FileManagerBindingImpl"
                value="org.astrogrid.filemanager.server.TheFileManager"
                summary="true"
        />
   </goal>

   <goal name="configure-webapp" prereqs="grab-resources" >
        <!-- run the admin client over processed wsdd -->
        <mkdir dir="${maven.war.webapp.dir}/WEB-INF"/>
        <java classname="org.apache.axis.utils.Admin" dir="${maven.war.webapp.dir}/WEB-INF"
                classpathref="maven.dependency.classpath" fork="yes" failonerror="true">
                <arg value="server" />
                <arg value="${working.dir}/wsdd/${astrogrid.contracts.filemanager.wsdd}" />
        </java>
   </goal>
   <goal name="foo">
           <!--+
            | Deploy our services.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Deploying WebServices ..."/>
        <filemanager:service.deploy service.name="FileManager"/>
    </goal>

    <!--+
        | Prepare for the java:compile task.
        | Generates the WSDL, WSDD and Java stubs for our service interface(s).
        +-->
    <preGoal name="old-java:compile">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for java:compile ...."/>
        <!--+
            | Initialise our Axis tools
            +-->
        <attainGoal name="init.tools"/>
        <!--+
            | Create our output directories.
            +-->
        <ant:mkdir dir="${wsdlDir}"/>
        <ant:mkdir dir="${tempDir}"/>
        <ant:mkdir dir="${javaDir}"/>
        <!--+
            | Generate our FileStore WSDL and stubs.
            +-->
        <filemanager:service.generate
            service.name="FileManager"
            service.wsdd="org/astrogrid/filemanager/common/deploy.wsdd"
            service.class="org.astrogrid.filemanager.server.FileManagerImpl"
            service.interface="org.astrogrid.filemanager.common.FileManager"
            service.namespace="urn:common.filemanager.astrogrid.org"
            />
        <!--+
            | Add the Java files to our project source path.
            +-->
        <ant:path id="astro.includes" location="${javaDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="astro.includes"/>
    </preGoal>

    <!--+
        | Prepare the files for the jar goal.
        | Adds the generated WSDL and WSDD files into the jar META-INF.
        | Adds the database configuration files to the classpath.
        +-->
    <preGoal name="old-jar:jar">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for jar:jar ...."/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Create the META-INF directory.
            +-->
        <ant:mkdir dir="${maven.build.dest}/META-INF"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdl"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdd"/>
        <!--+
            | Copy our WSDL service descriptions.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}/META-INF/wsdl">
            <ant:fileset dir="${wsdlDir}">
                <include name="**/*.wsdl"/>
            </ant:fileset>
        </ant:copy>
        <!--+
            | Copy our WSDD service deployment files.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}/META-INF/wsdd">
            <ant:fileset dir="${wsddDir}">
                <include name="**/*.wsdd"/>
            </ant:fileset>
        </ant:copy>
    </preGoal>

    <!--+
        | Prepare our test resources.
        +-->
    <preGoal name="test:test-resources">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing test-resources ...."/>
    </preGoal>

    <!--+
        | Deploy our WebServices into our local Axis WebApp.
        +-->
    <preGoal name="old-test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing services for tests"/>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Check the JUnit test settings.
            +-->
        <ant:echo message=""/>
        <ant:echo message="JUnit fork VM - ${maven.junit.fork}"/>
        <ant:echo message="JUnit test directory : ${maven.junit.dir}"/>
        <!--+
            | Deploy our services.
            +-->
        <filemanager:service.deploy service.name="FileManager"/>
        <ant:echo message=""/>
        <!--+
            | Create our test repository.
            +-->
        <ant:mkdir dir="${org.astrogrid.filemanager.repository}"/>
    </preGoal>

    <!--+
        | Clean up after our tests.
        +-->
    <postGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Cleaning up after JUnit tests ...."/>
    </postGoal>

        <!-- ================ Custom tag library ================ -->

    <!--+
        | Define our local tag library.
        +-->
    <define:taglib uri="org.astrogrid.filemanager">
        <!--+
            | Test tag, debug only.
            | Attrib : message - The debug message to print.
            |
            +-->
        <define:tag name="debug.tag">
            <ant:echo message="Message ${message}"/>
        </define:tag>

        <!--+
            | Generate the WSDL and stubs for a WebService.
            | Attrib : service.name      eg. SecurityManager
            | Attrib : service.wsdd      eg. org/astrogrid/community/common/security/manager/deploy.wsdd
            | Attrib : service.class     eg. org.astrogrid.community.server.security.manager.SecurityManagerImpl
            | Attrib : service.interface eg. org.astrogrid.community.common.security.manager.SecurityManager
            | Attrib : service.namespace eg. urn:manager.security.common.community.astrogrid.org
            |
            +-->
        <define:tag name="service.generate">
            <!--+
                | Generate our WSDL.
                +-->
            <ant:echo message=""/>
            <ant:echo message="Generating WSDL for ${service.name}"/>
            <ant:axis.java2wsdl
                output="${wsdlDir}/${service.name}.wsdl"
                classname="${service.interface}"
                location="${axisUrl}/services/${service.name}"
                namespace="${service.namespace}"
                style="RPC"
                >
                <classpath>
                    <ant:path refid="maven.dependency.classpath"/>
                    <ant:pathelement path="${maven.build.dest}"/>
                </classpath>
            </ant:axis.java2wsdl>
            <!--+
                | Generate our stubs.
                +-->
            <ant:echo message=""/>
            <ant:echo message="Generating Java stubs for ${service.name}"/>
            <ant:axis.wsdl2java
                verbose="false"
                serverside="true"
                skeletondeploy="false"
                output="${tempDir}"
                url="file:///${wsdlDir}/${service.name}.wsdl"
                >
            </ant:axis.wsdl2java>
            <!--+
                | Modify the WSDD to use our implementation classes.
                +-->
            <ant:echo message=""/>
            <ant:echo message="Updating WSDD implementaion class for ${service.name}"/>
            <ant:xslt style="${project.base.root}/maven/src/xsl/wsdd-impl.xsl"
                in="${tempDir}/${service.wsdd}"
                out="${wsddDir}/${service.name}.wsdd">
                <outputproperty name="method" value="xml"/>
                <outputproperty name="indent" value="yes"/>
                <param name="service"   expression="${service.name}"/>
                <param name="classname" expression="${service.class}"/>
            </ant:xslt>
            <!--+
                | Modify the WSDD deployment scope
                +-->
            <ant:echo message=""/>
            <ant:echo message="Updating WSDD service scope for ${service.name}"/>
            <ant:xslt style="${project.base.root}/maven/src/xsl/wsdd-scope.xsl"
                in="${wsddDir}/${service.name}.wsdd"
                out="${wsddDir}/${service.name}.wsdd.tmp">
                <outputproperty name="method" value="xml"/>
                <outputproperty name="indent" value="yes"/>
                <param name="service" expression="${service.name}"/>
                <param name="scope"   expression="Application"/>
            </ant:xslt>
            <ant:move
                verbose="true"
                file="${wsddDir}/${service.name}.wsdd.tmp"
                toFile="${wsddDir}/${service.name}.wsdd"
                />
            <!--+
                | Copy the generated Java files we want to use.
                +-->
            <ant:echo message=""/>
            <ant:echo message="Copying generated Java for ${service.name}"/>
            <ant:copy verbose="false" toDir="${javaDir}">
                <fileset dir="${tempDir}">
                    <include name="**/${service.name}Service.java"/>
                    <include name="**/${service.name}ServiceLocator.java"/>
                    <include name="**/${service.name}SoapBindingStub.java"/>
                </fileset>
            </ant:copy>
        </define:tag>

        <!--+
            | Deploy a WebService into the local Axis config.
            | Attrib : service.name eg. SecurityManager
            +-->
        <define:tag name="service.deploy">
            <ant:echo message=""/>
            <ant:echo message="Deploying ${service.name}"/>
            <ant:echo message="  WSDD : ${wsddDir}/${service.name}.wsdd"/>
            <ant:java classname="org.apache.axis.utils.Admin"
                dir="${axisDir}/WEB-INF"
                classpathref="maven.dependency.classpath"
                fork="true"
                >
                <arg value="server"/>
                <arg value="${wsddDir}/${service.name}.wsdd"/>
            </ant:java>
        </define:tag>
    </define:taglib>
</project>
