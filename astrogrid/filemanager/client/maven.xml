<?xml version="1.0" encoding="UTF-8"?>
<!--+
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/filemanager/client/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: clq2 $</cvs:author>
    | <cvs:date>$Date: 2005/03/18 22:59:46 $</cvs:date>
    | <cvs:version>$Revision: 1.5 $</cvs:version>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:artifact="artifact"
    xmlns:filemanager="org.astrogrid.filemanager"
    xmlns:filemanager.client="org.astrogrid.filemanager.client"
    default="astrogrid-rebuild-snapshot"
    >


	<!-- ================ Mandatory goals ================ -->
   <goal name="astrogrid-install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="jar:install"/>
    </goal>

    <!--+
        | Build and install our snapshot jar(s).
        +-->
    <goal name="astrogrid-install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
		<attainGoal name="jar:install-snapshot"/>
    </goal>

    <!--+
        | Build and deploy our artifact jar.
        +-->
    <goal name="astrogrid-deploy-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
		<attainGoal name="jar:deploy"/>
    </goal>

    <!--+
        | Build and deploy our snapshot jar(s).
        +-->
    <goal name="astrogrid-deploy-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
		<attainGoal name="jar:deploy-snapshot"/>
    </goal>
    
    <goal name="astrogrid-deploy-site">
		<attainGoal name="site:deploy"/>
    </goal>

    <!-- ================ Optional goals ================ -->

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>
    <!--+
        | Clean, build and install our snapshot jar.
        +-->
    <goal name="astrogrid-rebuild-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean"/>
        <attainGoal name="astrogrid-install-snapshot"/>
    </goal>

    <!--+
        | Clean our build target.
        +-->
    <preGoal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
    </preGoal>

    <!--+
        | Build and install our artifact jar.
        +-->
 

    <!-- ================ Custom tags ================ -->

    <!--+
        | Define our local tag library.
        +-->
    <define:taglib uri="org.astrogrid.filemanager.client">
        <!--+
            | Register a service in the local registru config.
            | Attrib : service.name  eg. PolicyManager
            | Attrib : service.class eg. org.astrogrid.community.common.policy.manager.PolicyManager
            | Attrib : service.file  eg. local.manager.policy.xml
            +-->
        <define:tag name="register.service.local">
            <ant:echo message=""/>
            <ant:echo message="Registering local service"/>
            <ant:echo message="  Service name      : ${service.name}"/>
            <ant:echo message="  Service class     : ${service.class}"/>
            <ant:echo message="  Service authority : ${service.authority}"/>
            <ant:echo message="  Service resource  : ${service.resource}"/>
            <ant:echo message="  Service endpoint  : local:/${service.name}"/>
            <ant:echo message="  Service file      : ${service.file}"/>
            <!--+
                | Create the registry entry that points to the service WSDL.
                +-->
            <ant:xslt style="${basedir}/src/xsl/registry/service.entry.xsl"
                  in="${basedir}/src/config/registry/service.entry.xml"
                  out="${org.astrogrid.registry.data}/${service.file}">
                <outputproperty name="method" value="xml"/>
                <outputproperty name="indent" value="yes"/>
                <param name="service.authority" expression="${service.authority}"/>
                <param name="service.resource"  expression="${service.resource}"/>
                <param name="service.endpoint"  expression="local:/${service.name}"/>
            </ant:xslt>
            <!--+
                | Add the config property reference.
                +-->
            <ant:propertyfile file="${maven.build.dir}/config/astrogrid.properties">
                <entry
                    key="${service.authority}/${service.resource}"
                    value="file:///${org.astrogrid.registry.data}/${service.file}"/>
            </ant:propertyfile>
        </define:tag>
    </define:taglib>

    <!-- ================ Component goals ================ -->

    <!--+
        | Prepare for the java:compile task.
        | Generate the WSDL and Java stubs for our service interface(s).
        +-->
    <goal name="old-generate-stuff">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for java:compile ...."/>
        <!--+
            | Initialise our Axis tools
            +-->
        <attainGoal name="init.tools"/>
        <!--+
            | Create our output directories.
            +-->
        <ant:mkdir dir="${wsdlDir}"/>
        <ant:mkdir dir="${tempDir}"/>
        <ant:mkdir dir="${javaDir}"/>
        <!--+
            | Generate our FileManager WSDL and stubs.
        <filemanager:service.generate
            service.name="FileManager"
            service.wsdd="org/astrogrid/filemanager/common/deploy.wsdd"
            service.class="org.astrogrid.filemanager.common.FileManagerMock"
            service.interface="org.astrogrid.filemanager.common.FileManager"
            service.namespace="urn:common.filemanager.astrogrid.org"
            />
            +-->
        <filemanager:service.generate
            service.name="FileManager"
            service.wsdd="org/astrogrid/filemanager/common/deploy.wsdd"
            service.class="org.astrogrid.filemanager.client.FileManagerTestMock"
            service.interface="org.astrogrid.filemanager.common.FileManager"
            service.namespace="urn:common.filemanager.astrogrid.org"
            />
        <!--+
            | Add the Java files to our project source path.
            +-->
        <ant:path id="astro.includes" location="${javaDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="astro.includes"/>
    </goal>

    <!--+
        | Deploy our WebServices into our local Axis WebApp.
        +-->
    <preGoal name="old-test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing services for tests"/>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Check the JUnit test settings.
            +-->
        <ant:echo message=""/>
        <ant:echo message="JUnit fork VM - ${maven.junit.fork}"/>
        <ant:echo message="JUnit test directory : ${maven.junit.dir}"/>
        <!--+
            | Copy our config properties.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Copying config properties ..."/>
        <ant:mkdir dir="${maven.build.dir}/config"/>
        <ant:copy verbose="false" todir="${maven.build.dir}/config">
            <ant:fileset dir="${basedir}/src/config">
                <include name="astrogrid.properties"/>
            </ant:fileset>
        </ant:copy>
        <!--+
            | Deploy our service.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Deploying mock WebService ..."/>
        <filemanager:service.deploy
            service.name="FileManager"
            />
        <!--+
            | Register our service.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Registering mock WebService ..."/>
        <filemanager.client:register.service.local
            service.name="FileManager"
            service.class="org.astrogrid.filemanager.common.FileManager"
            service.authority="org.astrogrid.test"
            service.resource="filemanager"
            service.file="filemanager.xml"
            />
    </preGoal>

    <!--+
        | Clean up after our tests.
        +-->
    <postGoal name="old-test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Cleaning up after JUnit tests"/>
    </postGoal>

    <!--+
        | Prepare the files for the jar goal.
        | Adds the generated WSDL files into the jar META-INF.
        +-->
    <preGoal name="old-jar:jar">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for jar:jar ...."/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Create the META-INF directory.
            +-->
        <ant:mkdir dir="${maven.build.dest}/META-INF"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdl"/>
        <!--+
            | Copy our WSDL service descriptions.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}/META-INF/wsdl">
            <ant:fileset dir="${wsdlDir}">
                <include name="**/*.wsdl"/>
            </ant:fileset>
        </ant:copy>
    </preGoal>

</project>
