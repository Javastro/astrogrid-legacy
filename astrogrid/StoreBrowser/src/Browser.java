/**
 * A simple servlet which stores all names entered and displays
 * them each time it is called.
 *
 * This file was automatically generated by
 * Omnicore CodeGuide.
 */

import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.astrogrid.community.User;
import org.astrogrid.store.Agsl;
import org.astrogrid.store.Ivorn;
import org.astrogrid.store.Msrl;
import org.astrogrid.store.VoSpaceClient;
import org.astrogrid.store.delegate.StoreClient;
import org.astrogrid.store.delegate.StoreDelegateFactory;
import org.astrogrid.store.delegate.StoreFile;
import java.net.URISyntaxException;

/**
 * The servelet class.
 */
public class Browser extends HttpServlet {
   /** Holds the file tree on the server */
   private StoreFile root = null;
   
   private final static String STORE_KEY = "store";
   private final static String SELECTED_PATH_KEY = "path";
   
   private DateFormat dateFormat = new SimpleDateFormat("dd-MM-yy HH:mm:ss");
   
   private final static String refRoot = "Browser?";
   
   private final static String pageBg = "#AAAAAA";
   private final static String navBg = "#CC9966";
   private final static String textBg = "#BBBBBB";
   
   /** post = get */
   public void doPost(HttpServletRequest request, HttpServletResponse response)
      throws IOException, ServletException  {
      doGet(request, response);
   }
   
   public User getUser() {
      return User.ANONYMOUS;
   }
   
   /**
    * Returns the currently selected path
    */
   private String getSelectedPath(HttpServletRequest request) {
      return getParameter(request, SELECTED_PATH_KEY);
   }
   
   /**
    * Returns the currently selected StoreFile
    *
    private String getSelectedFile(HttpServletRequest request) {
    String path = getSelectedPath(request);
    //rather poor search, anyway...
    
    }
   
    /**
    * Returns the relevent storeclient for the store
    */
   public StoreClient getStoreClient(HttpServletRequest request) throws IOException {
      
      String storeUri = getParameter(request, STORE_KEY);
      
      if (storeUri == null) {
         return null;
      }
      
      if (Msrl.isMsrl(storeUri)) {
         return StoreDelegateFactory.createDelegate(getUser(), new Agsl(new Msrl(storeUri)));
      }
      else if (Ivorn.isIvorn(storeUri)) {
         try {
            VoSpaceClient voClient = new VoSpaceClient(getUser());
            return voClient.getDelegate(new Ivorn(storeUri));
         }
         catch (URISyntaxException e) {
            throw new IllegalArgumentException("Malformed IVORN:"+e);
         }
      }
      else {
         return StoreDelegateFactory.createDelegate(getUser(), storeUri);
      }
   }
   
   /** Gets parameter - looks in request first, if it's not there looks in request */
   public String getParameter(HttpServletRequest request, String key) {
      String value = request.getParameter(key);
      if (value == null) {
         value = (String) request.getSession().getValue(key);
         
      }
      return value;
   }
   
   /** Gets multiple parameter - looks in request first, if it's not there looks in request */
   public String[] getParameterValues(HttpServletRequest request, String key) {
      String[] values = request.getParameterValues(key);
      if (values == null) {
         values = (String[]) request.getSession().getValue(key);
      }
      return values;
   }
   
   public String getStyle() {
      return "";
   }

   /**
    * One day I'll work out how to do this as a popup
    */
   public void writeMessageBox(HttpServletResponse response, String title, String header, String message) throws IOException {
      response.getWriter().print(
         "<html>"+
         "<head><title>"+title+"</title></head>"+
         "<body>"+
         "<h1>"+header+"</h1>"+
         message+
         "</body>"+
         "</html>"
      );
   }
   
   /**
    * Confirms with the user and then deletes the currently selected file
    */
   public void confirmDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {
      delete(request, response);
   }
   
   /**
    * deletes the currently selected file
    */
   public void delete(HttpServletRequest request, HttpServletResponse response) throws IOException {
      StoreFile file = getStoreClient(request).getFile(getSelectedPath(request));
      if (file.listFiles().length>0) {
         //directory with children - refuse to delete until contents are deleted.  Temporary safety measure
         writeMessageBox(response, "Delete Refused", "Folder contains files",
                         "Folder "+file+" contains "+file.listFiles().length+" files.  They must be deleted before the folder can be deleted");
      }
      else {
         //delete
         getStoreClient(request).delete(getSelectedPath(request));
         writeBrowser(request, response);
      }
   }

   /**
    * Asks the user to enter a new file and some text
    */
   public void newFileForm(HttpServletRequest request, HttpServletResponse response) throws IOException {

      StoreFile file = getStoreClient(request).getFile(getSelectedPath(request));
      //      if ((getSelectedPath(request) == null) ||
//          (getSelectedPath(request).endsWith("/"))) {
      if (true) {
         //selected path is a folder
         response.getWriter().write(
            "<html>"+
            "<head><title>Browser - New File Form</title></head>\n"+
            "<body>"+
            "<h1>New File</h1>\n"+
            "<form action='Browser?newFile=true' method='post'>Filename: <pre>");
         if (getSelectedPath(request)!=null) {
            response.getWriter().write(getSelectedPath(request));
         } else {
            response.getWriter().write("/");
         }
         response.getWriter().write(
            "</pre>"+
            "<input type='text' name='Filename'><p>\n"+
            "<textarea name='contents' cols=60 rows=20>Type or cut and paste the contents of the new file in here</textarea><p>\n"+
            "<input type='submit' name='Browser?NewFile=true' value='NewFile'>"+
            "</form>"+
            "</body></html>"
         );
      }
      else {
         writeMessageBox(response, "New File", "New File Form",
                           "The file '"+getSelectedPath(request)+"' is currently selected<p>"+
                           "Please go back and select the directory you want the new file to be created in");
      }
   }

   /**
    * Creates new file on the client given inputs from above
    */
   public void newFile(HttpServletRequest request, HttpServletResponse response) throws IOException {
      String parentPath = getSelectedPath(request);
      if (parentPath == null) {
         parentPath="";
      }
      
      getStoreClient(request).putString(request.getParameter("contents"),
                                        parentPath+"/"+request.getParameter("Filename"),
                                        false);

      writeBrowser(request, response);
   }
   
   /**
    * Asks the user for a target ready to copy a file to
    */
   public void copy(HttpServletRequest request, HttpServletResponse response) throws IOException {
      throw new UnsupportedOperationException();
   }

   /**
    * Asks the user for a target ready to copy a file to
    */
   public void newFileFolder(HttpServletRequest request, HttpServletResponse response) throws IOException {
      throw new UnsupportedOperationException();
   }

   /** Called when someone accesses the servlet - ie the main entry point for the servlet. */
   public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException  {
      
      try {
         if (request.getParameter("delete") != null) {
            confirmDelete(request, response);
         }
         else if (request.getParameter("copy") != null) {
            copy(request, response);
         }
            
         else if (request.getParameter("newFileForm") != null) {
            newFileForm(request, response);
         }
         else if (request.getParameter("newFile") != null) {
            newFile(request, response);
         }
         else if (request.getParameter("newFolder") != null) {
            newFileFolder(request, response);
         }
         else {
            writeBrowser(request, response);
         }
      }
      catch (Throwable th) {
         response.getWriter().write("Exception: "+th+"<br><pre>");
         th.printStackTrace(new PrintWriter(response.getWriter()));
         response.getWriter().write("</pre>");
      }
   }
   
   
   /** Writes the full HTML page for the whole browser page */
   public void writeBrowser(HttpServletRequest request, HttpServletResponse response) throws IOException  {
      String store = getParameter(request, STORE_KEY);
      
      String path = getParameter(request, SELECTED_PATH_KEY);
      
      response.getWriter().print(
         "<html>"+
            "<head>"+
            "<title>Store File Browser</title>"+
            getStyle()+
            "</head>"+
            "<body bgcolor='"+pageBg+"'>");
      writeToolBar(request, response);
      writeNavBar(request, response);
      writeFileView(request, response);
      response.getWriter().print("<div id='footer' style='bottom'>"+
                                    "<hr>"+
                                    "AstroGrid 2002-2004"+
                                    "</div>"+
                                    "</body>"+
                                    "</html>");
      
      response.getWriter().println("<hr><h2>Debug</h2><pre>"+
                                      STORE_KEY+": "+request.getParameter(STORE_KEY)+" ("+request.getSession().getValue(STORE_KEY)+")\n"+
                                      SELECTED_PATH_KEY+": "+request.getParameter(SELECTED_PATH_KEY)+" ("+request.getSession().getValue(SELECTED_PATH_KEY)+")\n"
                                  );
      String[] openPaths = (String[]) request.getSession().getValue("openPaths");
      
      for (int i = 0; i < openPaths.length; i++) {
         response.getWriter().println("open: "+openPaths[i]);
      }
      response.getWriter().println("</pre>");
      
      //store in session
      request.getSession().putValue(STORE_KEY, store);
      request.getSession().putValue(SELECTED_PATH_KEY, path);
   }
   
   public String toolButtonHtml(String href, String img, String alt) {
      return "<a href='"+href+"'>"+
         "<img src='../"+img+"' alt='"+alt+"' border='0'/>"+
         "</a>";
   }
   
   public void writeToolBar(HttpServletRequest request, HttpServletResponse response) throws IOException {
      String bg=textBg;
      response.getWriter().print(
         "<div id='toolbar' style='top'>"+
            "<table border='1' bgcolor='"+bg+"'><tr><td>"+
            "<table bgcolor='"+bg+"'><tr>"+
            "  <td>"+toolButtonHtml("", "Back.gif", "Back")+"</td>"+
            "  <td>"+toolButtonHtml("", "Forward.gif", "Forward")+"</td>"+
            "  <td>"+toolButtonHtml(refRoot+"closeCurrent=true", "Up.gif", "Up")+"</td>"+
            "</tr></table>  "+
            "</td><td>"+
            "<table bgcolor='"+bg+"'><tr>"+
            "  <td>"+toolButtonHtml(refRoot+"copy='"+getParameter(request, SELECTED_PATH_KEY)+"'", "Copy.gif", "Copy")+"</td>"+
            "  <td>"+toolButtonHtml(refRoot+"move='"+getParameter(request, SELECTED_PATH_KEY)+"'", "Move.gif", "Move")+"</td>"+
            "  <td>"+toolButtonHtml(refRoot+"delete='"+getParameter(request, SELECTED_PATH_KEY)+"'", "Delete.gif", "Delete")+"</td>"+
            "  <td>"+toolButtonHtml(refRoot+"newFileForm=true'", "NewFile.gif", "New File")+"</td>"+
            "  <td>"+toolButtonHtml(refRoot+"newFolderForm=true'", "NewFolder.gif", "New Folder")+"</td>"+
            "</tr></table>  "+
            "</td><td>"+
            "<table bgcolor='"+bg+"'><tr>"+
            "  <td>"+toolButtonHtml(refRoot+"refresh=true'", "Refresh.gif", "Refresh")+"</td>"+
            "</tr></table>  "+
            "</td><td>"+
               "<table><tr>"+
               "<td>Current Path</td>"+
               "<td bgcolor='#FFFFFF'>"+getParameter(request, SELECTED_PATH_KEY)+"</td>"+
               "<td>in</td>"+
               "<td bgolor='#FFFFFF'>"+getParameter(request, STORE_KEY)+"</td>"+
               "</tr></table>"+
            "</td></tr></table>"+
            "</div>");
   }
   
   
   public void writeNavBar(HttpServletRequest request, HttpServletResponse response) throws IOException {
      response.getWriter().print(
         "<div id='view' style='float:left'>"+
            "<table border=1 bgcolor='"+navBg+"'><tr><td>"+
            "   <table border=0 cellspacing=4>"+
            "   <tr><td align='center'><a href='Browser?store=file://'>Disk</a></td></tr>"+
            "   <tr><td align='center'><a href='Browser?store=myspace:"+new URL("http", request.getServerName(), request.getServerPort(), request.getContextPath()).toString() +"/services/Manager'>This</a></td></tr>"+
            "   <tr><td align='center'><a href='Browser?store=myspace:http://cadairidris.star.le.ac.uk:8080/astrogrid-mySpace-Itn05_release/services/Manager'>Cadairidris Itn05</a></td></tr>"+
            "   <tr><td align='center'><a href='Browser?store=myspace:http://twmbarlwm.star.le.ac.uk:8888/astrogrid-mySpace-SNAPSHOT/services/Manager'>Twmbarlwm Snapshot</a></td></tr>"+
            "   <tr><td align='center'><a href='Browser?store=myspace:http://twmbarlwm.star.le.ac.uk:8080/astrogrid-mySpace-SNAPSHOT/services/Manager'>Twmbarlwm 8080</a></td></tr>"+
            "   <tr><td align='center'>VoSpace</td></tr>"+
            "   <tr><td align='center'>MySpace</td></tr>"+
            "   <tr><td align='center'>Storepoints</td></tr>"+
            "   <tr><td><form action='Browser'>"+
                  "<input type='text' name='store'/>"+
                  "<input type='submit' value='Go'/>"+
               "</form></td></tr>"+
               "</table>"+
            "</td></tr></table>"+
        "</div>");
   }
   
   /** The panel that contains the list of files */
   public void writeFileView(HttpServletRequest request, HttpServletResponse response) throws IOException {
      
      response.getWriter().print("\n<div id='files' style='full'>\n"+
                                    "<table align='left' border='1'>\n"+
                                    "<tr bgcolor='"+textBg+"'>"+
                                    "  <th align='left'>Name</th>"+
                                    "  <th>Size</th>"+
                                    "  <th>Type</th>"+
                                    "  <th>Created</th>"+
                                    "  <th>Modified</th>"+
                                    "</tr>\n");
      
      response.getWriter().flush();
      
      String[] openPaths = (String[]) request.getSession().getValue("openPaths");
      if (openPaths == null) { openPaths = new String[] { }; }
      String selectedPath = getParameter(request, SELECTED_PATH_KEY);
      String storepoint = getParameter(request, STORE_KEY);
      User user = User.ANONYMOUS;
      
      //interpret command
      if (request.getParameter("open") != null) {
         //add path to open paths
         String[] newPaths = new String[openPaths.length+1];
         for (int i = 0; i < openPaths.length; i++) {
            newPaths[i] = openPaths[i];
         }
         newPaths[openPaths.length] = request.getParameter("open");
         openPaths = newPaths;
      }
      
      //interpret command
      if (request.getParameter("close") != null) {
         //remove path from open paths
         Vector newPaths = new Vector();
         String closePath = request.getParameter("close");
         for (int i = 0; i < openPaths.length; i++) {
            if (!openPaths[i].startsWith(closePath)) {
               newPaths.add(openPaths[i]);
            }
         }
         openPaths = (String[]) newPaths.toArray(new String[] {} );
      }

      request.getSession().putValue("openPaths", openPaths);

      //refresh file tree if refresh pressed or store has changed
      if ((request.getParameter("refresh") != null)  ||
          (root == null) ||
             (request.getParameter(STORE_KEY) != null) &&
             (!request.getParameter(STORE_KEY).equals(request.getSession().getValue(STORE_KEY)))) {
         
         StoreClient client = getStoreClient(request);

         if (client == null) {
            response.getWriter().println("</table>No Store Given</div>");
            return;
         }
            
         root = client.getFiles("*");
      }
      
      if ((root == null) || (root.listFiles() == null)) {
         response.getWriter().println("</table>No entries to list from "+storepoint+"</div>");
         return;
      }
      else {
         //write root's children
         for (int i=0;i<root.listFiles().length;i++) {
            writeFile(root.listFiles()[i], openPaths, selectedPath, response.getWriter());
         }
      }
      
      response.getWriter().print("</table></div>\n");
      
   }
   
   //creates an indent string for the given file
   public String getIndent(StoreFile file) {
      StringBuffer indent = new StringBuffer();
      while ((file.getParent() != null) && (file.getParent().getParent() != null)) {
         indent.append("&nbsp;&nbsp;&nbsp;");
         //indent.append("___");
         file=file.getParent();
      }
      return indent.toString();
   }
   
   
   //prints out a single StoreFile
   public void writeFile(StoreFile file, String[] openPaths, String selectedPath, Writer out) throws IOException {
      
      String cellColour = "#FFFFFF";
      String inkColour = "#000000";
      //if ((selectedPath != null) && (selectedPath.startsWith(file.getPath()))) {
      if ((selectedPath != null) && (selectedPath.equals(file.getPath()))) {
         cellColour = "#0000FF";
         inkColour = "#FFFFFF";
      }
      
      if (file.isFolder()) {
         
         //is it open?
         boolean isOpen = false;
         if (file.getPath().length()==0) {
            //root
            isOpen = true;
         }
         else {
            for (int i = 0; i < openPaths.length; i++) {
               if (openPaths[i].startsWith(file.getPath())) {
                  isOpen = true;
               }
            }
         }
         if (isOpen) {
            if (file.getPath().length()>0) {
               out.write("<tr bgcolor='"+cellColour+"' fgcolor='"+inkColour+"'>"+
                            "<td><pre>"+
                            getIndent(file)+
                            "<a href=\""+refRoot+"close="+file.getPath()+"\">"+
                            "<img ref='OpenFolder.gif' alt='(-)' border='0'/>"+
                            "</a>"+
                            " <a href=\""+refRoot+"path="+file.getPath()+"\">"+
                            file.getName()+
                            "</a></pre></td>"+
                            "<td></td>"+
                            "<td>Folder</td>"+
                            "<td></td>"+
                            "<td></td>"+
                            "</tr>\n");
            }
            for (int i=0;i<file.listFiles().length;i++) {
               writeFile(file.listFiles()[i], openPaths, selectedPath, out);
               out.write("\n");
            }
         }
         else {
            //folder is closed
            out.write("<tr bgcolor='"+cellColour+"' fgcolor='"+inkColour+"'>"+
                         "<td><pre>"+
                         getIndent(file)+
                         "<a href=\""+refRoot+"open="+file.getPath()+"\">"+
                         "<img ref='ClosedFolder.gif' alt='(+)' border='0'/>"+
                         "</a>"+
                         " <a href=\""+refRoot+"path="+file.getPath()+"\">"+
                         "<font color='"+inkColour+"'>"+
                         file.getName()+
                         "</font>"+
                         "</a>"+
                         "</pre></td>"+
                         "<td></td>"+
                         "<td>Folder</td>"+
                         "<td></td>"+
                         "<td></td>"+
                         "</tr>\n");
            
         }
      }
      else {
         //it's a file
         out.write("<tr bgcolor='"+cellColour+"' fgcolor='"+inkColour+"'>"+
                      "<td>"+"<pre> "+
                      "&nbsp;&nbsp;&nbsp;"+getIndent(file)+
                      "<a href=\""+refRoot+"path="+file.getPath()+"\">"+
                      file.getName() +
                      "</a></pre></td>"+
                      "<td align='right'>"+ file.getSize() + "</td>"+
                      "<td>"+ emptyNull(file.getMimeType())+"</td>"+
                      "<td>"+ date(file.getCreated()) + "</td>"+
                      "<td>"+ date(file.getModified())+"</td>"+
                      "</tr>\n");
      }
   }
   
   
   public String emptyNull(String s) {
      if (s==null) {
         return "";
      }
      else {
         return s;
      }
   }
   
   public String date(Date d) {
      if (d==null) {
         return "";
      }
      else {
         return dateFormat.format(d);
      }
   }
}
