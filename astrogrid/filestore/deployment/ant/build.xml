<project name="install" default="info" basedir=".">
	<property file="default.properties"/>
	<property name="temporary.dir" value="tmp"/>
	<property name="filestore.war" value="${maven.local.repo}/${astrogrid.groupId}/wars/${filestore.war.name}"/>
	<property name="local.filestore.war" value="${basedir}/filestore.war"/>

		
	
	<!--Public Targets-->

	<target name="save-config" description="Save this configuration for future use">
        <input addProperty="input.saveProperties.file" defaultvalue="${antigen.home}/filestore-installer.properties">
            Enter a file name for saving your current settings
        </input>
        <echoproperties destfile="${input.saveProperties.file}" prefix="input." description="This file can then be reused for hands-free operation"/>
    	<property name="properties.saved" value="true"/>
    </target>
	
	<target name="load-config" description="Load a previously saved configuration">
    	<input addProperty="input.loadProperties.file" defaultvalue="${user.home}/filestore-installer.properties">
            Enter the filename of your previously saved settings
        </input>
    	<property file="${input.loadProperties.file}"/>
    </target>

	<target name="setup-repository" description="Initialise the FileStore repository" depends="get-working-dir">
		<input addproperty="input.eraseworking" validargs="Do it,Abort">This will erase the contents of ${input.filestore.working.dir}.  Are you sure?</input>
		<condition property="setup-repository.donterase" value="true">
        	<equals arg1="${input.eraseworking}" arg2="Abort"/>
		</condition>
		<fail if="setup-repository.donterase">Please restart and don't select 'Initialise the FileStore repository'</fail>
		<delete dir="${input.filestore.working.dir}"/>
		<!--in AGINAB data and repository folders are created, but only the latter seems to be used-->
		<mkdir dir="${input.filestore.working.dir}"/>		
		<!--mkdir dir="${input.filestore.working.dir}/data"/-->
		<!--mkdir dir="${input.filestore.working.dir}/repository"/-->
	</target>

	<target name="install-filestore" description="Install FileStore" depends="checkTomcat, download, deploy, check-installed-ok">
	        <echo>***The FileStore has been successfully installed***</echo>
	    	<property name="filestore.installed" value="true"/>
    </target>		
	
	<target name="register-filestore" description="Register this FileStore" depends="checkRegistry, get-registry-keys,set-context-path">
		<echo>Registering the FileStore...</echo>
		<echo>Registering ${input.filestore.regkey} under authority ${input.filestore.regauthority} with service URL ${filestore.service.url}</echo>
        <tempfile property="filestore.regentry"/>
		<filterset id="regfilter">
            <filter token="REGAUTHORITY"   value="${input.filestore.regauthority}"/>
            <filter token="REGKEY" value="${input.filestore.regkey}"/>
            <filter token="SERVICEURL" value="${filestore.service.url}"/>
        </filterset>

		<copy file="registryentries/filestore-v10.xml" tofile="${filestore.regentry}">
			<filterset refid="regfilter"/>
		</copy>
		<register-entry registry="${astrogrid.registry.update.endpoint}" data="${filestore.regentry}"/>
		<echo>This FileStore has been registered in ${astrogrid.registry.endpoint}</echo>
	</target>
	
	<target name="remove-filestore" description="Remove FileStore (does not remove the FileStore repository)" depends="checkTomcat,  undeploy, check-uninstalled-ok">
    	<sleep seconds="10" description="Allow Tomcat to catch up"/>
        <echo>***The FileStore has been successfully removed***</echo>
    	<property name="filestore.uninstalled" value="true"/>
	</target>
	
	
	<!--Private Targets -->

	<target name="info">
		<echo>FileStore installation script</echo>
	</target>
	
	<target name="get-working-dir">
		<input addproperty="input.filestore.working.dir" defaultvalue="${antigen.home}/filestore/repository">Please enter the location of your FileStore repository</input>
	</target>
		
    <target name="checkTomcat" depends="fail-if-no-tomcat,get-tomcat-url">
        <input addProperty="input.tomcat.manager.user" defaultvalue="tomcat"> Please enter the Tomcat manager username </input>
        <input addProperty="input.tomcat.manager.pass" defaultvalue="tomcat"> Please enter the Tomcat manager password </input>
        <echo>Attempting to contact Tomcat Manager...</echo>
        <tempfile property="page.check"/>
        <property name="tomcat.manager.url" value="${input.tomcat.url}/manager"/>
        <get src="${tomcat.manager.url}" dest="${page.check}" username="${input.tomcat.manager.user}" password="${input.tomcat.manager.pass}"/>
        <echo>...OK</echo>
    </target>	
	
	<target name="get-tomcat-url">
		<input addProperty="input.tomcat.url" defaultvalue="http://127.0.0.1:8080">Please enter the URL of Tomcat on your system </input>
	</target>

	<target name="fail-if-no-tomcat">
		<input addProperty="input.tomcat.present" validargs="yes,no"> Is Tomcat running on your system with the Manager app enabled? </input>
        <condition property="tomcat.present.true">
	            <equals arg1="${input.tomcat.present}" arg2="yes"/>
        </condition>
        <fail message="Please start Tomcat and retry the installation" unless="tomcat.present.true"/>
	</target>
	
    <target name="download">
    	<echo>Downloading FileStore software....this may take some time...</echo>
    	<mkdir dir="${maven.local.repo}/${astrogrid.groupId}/wars/"/>
<!--        <get src="${astrogrid.repo}/${astrogrid.groupId}/wars/${filestore.war.name}" dest="${filestore.war}" verbose="true" usetimestamp="true"/>-->
		<!--Due to firewall, assume war bundled with installer-->
    	<copy file="${filestore.war.name}" toFile="${filestore.war}"/>   	
    </target>
	
    <target name="deploy" depends="createTmpDir,checkTomcat,download,update-war,set-context-path">
        <tomcat-deploy update="true" url="${tomcat.manager.url}" username="${input.tomcat.manager.user}" password="${input.tomcat.manager.pass}" 
            path="${input.filestore.contextpath}" war="${local.filestore.war}" />
    </target>
	
	<target name="set-context-path" depends="get-tomcat-url">
		<input addproperty="input.filestore.contextpath" defaultvalue="/astrogrid-filestore">Please enter the context path on the webserver for filestore</input>
		<property name="filestore.url" value="${input.tomcat.url}${input.filestore.contextpath}/filestore"/><!--Don't know what the purpose of this is-->
		<property name="filestore.service.url" value="${input.tomcat.url}${input.filestore.contextpath}/services/FileStore"/>
	</target>
	
    <target name="undeploy" depends="checkTomcat,set-context-path">
        <tomcat-remove url="${tomcat.manager.url}" username="${input.tomcat.manager.user}" password="${input.tomcat.manager.pass}" 
            path="${input.filestore.contextpath}"  />
    </target>   

    <target name="update-war" depends="download, input-filestore-settings, set-context-path, get-registry-keys,get-working-dir">
        <filterset id="myfilter">
            <filter token="FILESTORE_NAME"   value="${input.filestore.name}"/>
            <filter token="FILESTORE_WEBAPP" value="${input.filestore.contextpath}"/>
            <filter token="FILESTORE_IVORN"   value="${filestore.ivorn}"/>
            <filter token="FILESTORE_URL" value="${filestore.url}"/>
            <filter token="FILESTORE_REPO" value="${input.filestore.working.dir}"/>        	
        </filterset>
    	<echo>This filestore is being installed with the following settings:</echo>
    	<echo>Name: ${input.filestore.name}</echo>
    	<echo>Webapp: ${input.filestore.contextpath}</echo>
    	<echo>IVORN: ${filestore.ivorn}</echo>
    	<echo>Service URL: ${filestore.url}</echo>    		
    	<echo>File Store Repository ${input.filestore.working.dir}</echo>
        <copy todir="${temporary.dir}/filestore">
            <filterset refid="myfilter"/>
            <fileset dir="filestore" />
        </copy>
        <copy file="${filestore.war}" tofile="${local.filestore.war}"/>
    	<!--update the context.xml-->
        <war update="yes" destfile="${local.filestore.war}">
            <metainf dir="${temporary.dir}/filestore" />
        </war>
    </target>
<!--	
	# The identifier for FileStore one.
	org.astrogrid.filestore-one.service.ivorn=ivo://@REGAUTHORITY@/filestore-one
	#
	# The access URL for FileStore one.
	org.astrogrid.filestore-one.service.url=@TOMCATROOT@/astrogrid-filestore-one-@VERSION@/filestore
	#
	# The local repository for FileStore one.
	org.astrogrid.filestore-one.repository=@WORKDIR@/filestore-one/repository
-->
	<target name="get-registry-keys">
		<input addproperty="input.filestore.regauthority" defaultvalue="org.astrogrid.localhost">Please enter the Authority under which this FileStore is/will be registered.</input>
		<input addproperty="input.filestore.regkey" defaultvalue="filestore">Please enter the registry key for this filestore</input>
		<property name="filestore.ivorn" value="ivo://${input.filestore.regauthority}/${input.filestore.regkey}"/>
		<echo>IVORN for this filestore is ${filestore.ivorn}</echo>
	</target>

	<target name="input-filestore-settings">
		<input addproperty="input.filestore.name" defaultvalue="org.astrogrid.filestore">Please enter the name of this filestore</input>
	</target>
	    
    <target name="checkRegistry">
        <input addProperty="input.astrogrid.registry.endpoint" defaultvalue="http://127.0.0.1:8080/astrogrid-registry-SNAPSHOT/">Please enter the URL of your registry</input>
    	<property name="astrogrid.registry.endpoint" value="${input.astrogrid.registry.endpoint}"/>
    	<property name="astrogrid.registry.update.endpoint" value="${astrogrid.registry.endpoint}${astrogrid.registry.update.offset}"/>
        <echo>Attempting to contact the registry...</echo>
        <tempfile property="page.check"/>
        <get src="${astrogrid.registry.update.endpoint}" dest="${page.check}"/>
        <echo>...OK</echo>
    </target>
    
    	
	<target name="check-installed-ok" depends="checkTomcat">
    	<waitfor maxwait="30" maxwaitunit="second" checkevery="2000" timeoutproperty="installation.failed">
    	    <http url="${input.tomcat.url}${input.filestore.contextpath}"/>
    	</waitfor>
    	<fail if="installation.failed">Installation failed for some reason.  Please retry</fail>
	</target>
	
	<target name="check-uninstalled-ok" depends="checkTomcat">
    	<waitfor maxwait="6" maxwaitunit="second" checkevery="2000" timeoutproperty="uninstallation.failed">
    	    <http url="${input.tomcat.url}${input.filestore.contextpath}"/>
    	</waitfor>
    	<fail unless="uninstallation.failed">Uninstallation failed for some reason.  Please retry</fail>
	</target>	
	    
    <target name="createTmpDir">
        <delete dir="${temporary.dir}"/>
        <mkdir dir="${temporary.dir}"/>
    </target>
 

	
	<!-- Configure the custom Ant tasks for the Manager application -->
    <taskdef name="tomcat-deploy" classname="org.apache.catalina.ant.DeployTask" />
    <taskdef name="tomcat-install" classname="org.apache.catalina.ant.InstallTask" />
    <taskdef name="tomcat-list" classname="org.apache.catalina.ant.ListTask" />
    <taskdef name="tomcat-reload" classname="org.apache.catalina.ant.ReloadTask" />
    <taskdef name="tomcat-remove" classname="org.apache.catalina.ant.RemoveTask" />
    <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" />
    <taskdef name="tomcat-roles" classname="org.apache.catalina.ant.RolesTask" />
    <taskdef name="tomcat-start" classname="org.apache.catalina.ant.StartTask" />
    <taskdef name="tomcat-stop" classname="org.apache.catalina.ant.StopTask" />
    <taskdef name="tomcat-undeploy" classname="org.apache.catalina.ant.UndeployTask" />
    <taskdef name="register-entry" classname="org.astrogrid.deployment.RegistryLoaderTask"/>
</project>