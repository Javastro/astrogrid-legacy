<?xml version="1.0" encoding="UTF-8"?>
<!--+
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/filestore/webapp/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2004/08/18 19:00:01 $</cvs:date>
    | <cvs:version>$Revision: 1.4 $</cvs:version>
    | <cvs:log>
    |   $Log: maven.xml,v $
    |   Revision 1.4  2004/08/18 19:00:01  dave
    |   Myspace manager modified to use remote filestore.
    |   Tested before checkin - integration tests at 91%.
    |
    |   Revision 1.3.20.2  2004/08/04 15:39:08  dave
    |   Added servlet mapping
    |
    |   Revision 1.3.20.1  2004/08/04 06:35:02  dave
    |   Added initial stubs for servlet ....
    |
    |   Revision 1.3  2004/07/15 13:24:28  dave
    |   Merged development branch, dave-dev-200407141515, into HEAD
    |
    |   Revision 1.2.2.1  2004/07/15 11:13:19  dave
    |   Refactored Filestore build scripts to use the artifact:deploy plugin
    |
    |   Revision 1.2  2004/07/14 13:50:29  dave
    |   Merged development branch, dave-dev-200406301228, into HEAD
    |
    |   Revision 1.1.2.1  2004/07/13 11:51:57  dave
    |   Added webapp goals
    |
    | </cvs:log>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:artifact="artifact"
    xmlns:filestore="org.astrogrid.filestore"
    default="astrogrid-rebuild-snapshot"
    >

    <!--+
        | Import the goals from our parent project.
        | Looks like this gets included anyway, possibly because our project inherits from ../maven.project.xml ?
    <core:import inherit="true" file="${maven.build.dir}/../../maven/maven.xml"/>
        +-->

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>

   <!-- ================ Reactor goals ================ -->

    <!--+
        | Clean, build and install our snapshot jar.
        +-->
    <goal name="astrogrid-rebuild-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean"/>
        <attainGoal name="astrogrid-install-snapshot"/>
    </goal>

    <!--+
        | Clean our build target.
        +-->
    <goal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean:clean"/>
    </goal>

    <!--+
        | Build and install our artifact war.
        +-->
    <goal name="astrogrid-install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Build our artifact war.
            +-->
        <attainGoal name="war:war"/>
        <!--+
            | Rename our war to include the version.
            +-->
        <ant:move
            file="${maven.build.dir}/${maven.war.final.name}"
            toFile="${maven.build.dir}/${maven.final.name}.war"
            />
        <!--+
            | Install our artifact war.
            +-->
        <artifact:install
            artifact="${maven.build.dir}/${maven.final.name}.war"
            project="${pom}"
            type="war"
            />
    </goal>

    <!--+
        | Build and install our snapshot war(s).
        +-->
    <goal name="astrogrid-install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot name.
            +-->
        <maven:snapshot project="${pom}"/>
        <core:set var="maven.final.name" value="${snapshotSignature}"/>
        <!--+
            | Build our war.
            +-->
        <attainGoal name="war:war"/>
        <!--+
            | Rename our war to include the version.
            +-->
        <ant:move
            file="${maven.build.dir}/${maven.war.final.name}"
            toFile="${maven.build.dir}/${maven.final.name}.war"
            />
        <!--+
            | Install our snapshot war(s).
            +-->
        <artifact:install-snapshot
            artifact="${maven.build.dir}/${maven.final.name}.war"
            project="${pom}"
            type="war"
            />
    </goal>

    <!--+
        | Build and deploy our artifact war.
        +-->
    <goal name="astrogrid-deploy-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our artifact jar.
            +-->
        <attainGoal name="astrogrid-install-artifact"/>
        <!--+
            | Deploy our artifact war.
            +-->
        <artifact:deploy
            artifact="${maven.build.dir}/${maven.final.name}.war"
            project="${pom}"
            type="war"
            />
    </goal>

    <!--+
        | Build and deploy our snapshot war(s).
        +-->
    <goal name="astrogrid-deploy-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot war.
            +-->
        <attainGoal name="astrogrid-install-snapshot"/>
        <!--+
            | Deploy our snapshot war(s).
            +-->
        <artifact:deploy-snapshot
            artifact="${maven.build.dir}/${maven.final.name}.war"
            project="${pom}"
            type="war"
            />
    </goal>

    <!-- ================ Component goals ================ -->

    <!--+
        | Initialise the webapp files.
        +-->
    <preGoal name="war:webapp">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Pre-processing for webapp task"/>
        <!--+
            | Initialise the Axis webapp.
            +-->
        <attainGoal name="init.axis"/>
        <!--+
            | Modify the war:webapp property to use our Axis webapp instead.
            +-->
        <ant:echo message="Modifying war:webapp location"/>
        <ant:echo message="  Before : ${pom.getPluginContext('maven-war-plugin').getVariable('maven.war.webapp.dir')}"/>
        <core:expr value="${pom.getPluginContext('maven-war-plugin').setVariable('maven.war.webapp.dir', axisDir)}"/>
        <ant:echo message="  After  : ${pom.getPluginContext('maven-war-plugin').getVariable('maven.war.webapp.dir')}"/>
    </preGoal>

    <!--+
        | Post-process our webapp.
        +-->
    <postGoal name="war:webapp">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Post-processing for webapp task"/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Locate our filestore server jar.
            +-->
        <core:set var="serverJarIdent" value="${pom.groupId}:astrogrid-filestore-server"/>
        <ant:echo message="Looking for server jar : ${serverJarIdent}"/>
        <core:forEach var="artifact" items="${pom.getArtifacts()}">
            <core:if test="${artifact.getDependency().getId().equals(serverJarIdent)}">
                <ant:echo message="Found filestore server jar"/>
                <ant:echo message="Name     : ${artifact.getName()}"/>
                <ant:echo message="Path     : ${artifact.getPath()}"/>
                <core:set var="serverJarPath" value="${artifact.getPath()}"/>
            </core:if>
        </core:forEach>
        <!--+
            | Unpack our service WSDD files.
            +-->
        <ant:unzip
            src="${serverJarPath}"
            dest="${tempDir}">
            <patternset>
                <include name="META-INF/wsdd/*.wsdd"/>
            </patternset>
        </ant:unzip>
        <ant:copy toDir="${wsddDir}" flatten="true">
            <fileset dir="${tempDir}">
                <include name="**/*.wsdd"/>
            </fileset>
        </ant:copy>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Deploy our services.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Deploying WebServices ..."/>
        <filestore:service.deploy service.name="FileStore"/>
        <!--+
            | Deploy our servlet.
            +-->
        <attainGoal name="servlet-deploy"/>

    </postGoal>

    <!--+
        | Setup our JUnit tests.
        +-->
    <preGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing services for tests"/>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Check the JUnit test settings.
            +-->
        <ant:echo message=""/>
        <ant:echo message="JUnit fork VM - ${maven.junit.fork}"/>
        <ant:echo message="JUnit test directory : ${maven.junit.dir}"/>
        <ant:echo message=""/>
    </preGoal>

    <!--+
        | Deploy our servlet.
        +-->
    <goal name="servlet-deploy">
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Patch the web.xml to fix the DTD
            +-->
        <ant:replace
            token="web-app_2.2.dtd"
            value="web-app_2_2.dtd"
            file="${axisDir}/WEB-INF/web.xml"/>
        <!--+
            | Update the webapp web.xml
            +-->
        <ant:xslt style="${basedir}/src/xsl/servlet.xsl"
            in="${axisDir}/WEB-INF/web.xml"
            out="${axisDir}/WEB-INF/mod.xml">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="servlet.class" expression="org.astrogrid.filestore.server.servlet.FileStoreServlet"/>
            <param name="servlet.desc"  expression="FileStore http access servlet"/>
            <param name="servlet.name"  expression="FileStoreServlet"/>
            <param name="servlet.url"   expression="/filestore/*"/>
        </ant:xslt>
        <!--+
            | Move the new web.xml over the old one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${axisDir}/WEB-INF/mod.xml"
            tofile="${axisDir}/WEB-INF/web.xml"
            />
    </goal>

</project>
