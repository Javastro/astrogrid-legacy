package org.astrogrid.security;

import com.microsoft.www.MsComServicesLocator;
import com.microsoft.www.MsComServicesSoap;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import junit.framework.TestCase;
import javax.xml.namespace.QName;
import javax.xml.rpc.Call;
import javax.xml.rpc.Service;
import javax.xml.rpc.ServiceFactory;
import org.apache.axis.client.Stub;

/**
 * Test client-side security handling by authenticating
 * to Microsoft's test site. Uses WSSE username and clear-text
 * password. The password has to be generated by registering
 * at Microsoft's site.
 *
 * The test exercises the handler chain for messages sent from
 * a client to a service. Specifically, it tests the interoperability
 * of the username/password header in the SOAP message.
 *
 * This class includes a main method and should be run from the
 * command line. The username and password are the first and
 * second arguments respectively.
 *
 * @author Guy Rixon
 */
public class MsPasswordTest extends TestCase {

  /**
   * Username generated and registered at www.microsoft.com.
   */
  protected static final String username = "OS5VIjQG+lzEgDqzQsY1mXXOdXGYi32q";

  /**
   * Password registered at www.microsoft.com.
   */
  protected static final String password = "Foo-Bar";

  /**
   * URL for invoking the service.
   */
  protected String serviceUrl
      = "http://ws.microsoft.com/mscomservice/mscom.asmx";

  /**
   * URL providing WSDL for the service.
   */
  protected URL wsdlUrl;

  /**
   * Name of the service.
   */
  protected QName serviceName;

  /**
   * Name of the WSDL port.
   */
  protected QName portName;

  /**
   * Name of the operation.
   */
  protected QName operationName;

  /**
   * URI to go in the HTTP header "SoapAction".
   * MS' service requries this header. The value is
   * basically the QName for the operation concatenated
   * into a URI.
   */
  protected static final String soapActionUri
    = "http://www.microsoft.com/GetVersion";


  /**
   * Constructs the test. Sets all the URLs and QNames; these cannot
   * be set statically because their constructors may throw Exceptions.
   */
  public MsPasswordTest () throws Exception {
    this.wsdlUrl
        = new URL("http://ws.microsoft.com/mscomservice/mscom.asmx?WSDL");
    this.serviceName
        = new QName("http://www.microsoft.com", "MsComServices");
    this.portName
        = new QName("http://www.microsoft.com", "MsComServicesSoap");
    this.operationName
        = new QName("http://www.microsoft.com", "GetVersion");
  }


  /**
   * Tests username/password authentication using a JAX-RPC Service
   * and Call.
   */
  public void testWithCall () throws Exception {

    // Record the credentials.
    ClientSecurityGuard sg = new ClientSecurityGuard();
    sg.setUsername(this.username);
    sg.setPassword(this.password);

    // Create a service proxy and associate with it the credentials.
    ServiceFactory factory = ServiceFactory.newInstance();
    Service service = factory.createService(this.wsdlUrl, this.serviceName);
    sg.mountGuard(service, this.portName);

    // Create a SOAP call to MS' version service.
    Call call = (Call)service.createCall();
    call.setTargetEndpointAddress(this.serviceUrl);
    call.setPortTypeName(this.portName);
    call.setOperationName(this.operationName);
    call.setProperty(Call.SOAPACTION_URI_PROPERTY, this.soapActionUri);

    // Invoke the action and print a result.
    System.out.print((String)call.invoke(new Object[] {}));
  }


  /**
   * Tests username/password authentication using an Axis Stub
   * as generated by WSDL2Java in Axis.
   */
  public void testWithStub () throws Exception {

    // Record the credentials.
    ClientSecurityGuard sg = new ClientSecurityGuard();
    sg.setUsername(this.username);
    sg.setPassword(this.password);

    // Invoke the service using an Axis locator and JAX-RPC Stub.
    // The locator implements the JAX-RPC Service interface.
    MsComServicesLocator locator = new MsComServicesLocator();
    sg.mountGuard(locator, this.portName);
    MsComServicesSoap proxy = locator.getMsComServicesSoap();
    Stub stub = (Stub) proxy;
    System.out.println("Port name on stub: " + stub.getPortName());
    stub.setPortName(this.portName);
    System.out.println((String)proxy.getVersion());
  }

}