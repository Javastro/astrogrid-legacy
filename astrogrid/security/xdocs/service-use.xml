<?xml version="1.0"?>



<document>



  <title>Use of security facade from an Axis service</title>

  

  <body>
  	
  	<section name="Use of the security facade from an Axis service">
  	
  		<subsection name="Background">
  			<p>
  				The implementation of the facade for Axis uses WSS4J to check signatures on
  				incoming messages. The check is made with a certificate chain contained in
  				the message header and a set of trust-anchor certificates configured into the
  				service. The service provider knows and trusts the certificate authorities 
  			  represented by the trust anchors but need not know <i>a priori</i> the names
  			  of individual users.</p>
  			
  				<p>The signatures are checked by an Axis
  				handler, and a special sub-class of <i>SecurityGuard</i>,
  				<i>AxisClientSecurityGuard</i> is provided by which the authenticated identity
  				can be extracted from that handler.
  				Axis requires that the security handler be created when its 'Axis engine' in
  				the service is first created.
  			</p>
  		</subsection>
  		
  		<subsection name="Setting the trust anchors">
  			<p>
  				The service must be provided with a set of trust-anchor certificates written in
  				PEM format. Each certificate is stored in a <i>.pem</i> file. There is a naming
  				convention: the name of each file must be the hash value of the certificate it contains,
  				suffixed with <i>.0</i>. In the unlikely event of certificates having the same
  				has value, one should instead be given the suffix <i>.1</i>, <i>.2</i>, etc. as
  				necessary to produce unique names.
  			</p>
  			<p>
  				The certificates should be grouped in directories. Ideally, just one directory contains 
  				all the trust anchors. Grid conventions,
  				set by the Globus toolkit, say that the directory should be <i>/etc/grid-security/certificates</i>.
  			</p>
  		</subsection>
  		
  		<subsection name="Configuring the Axis handler">
  			<p>
  			The handler should be declared in the WSDD deployment-descriptor for the service. This is an
  			example of a service configured with the handler.
  			</p>
  			<pre>  			
<![CDATA[<service name="SamplePort" provider="java:RPC">
  <parameter name="className" value="org.astrogrid.security.sample.SampleImpl"/>
  	<requestFlow>
  		<handler type="java:org.astrogrid.security.AxisServiceCredentialHandler"/>
  	</requestFlow>
  </service>]]>
  			</pre>
  			<p>
  				The type (class) of the handler must be exactly as shown above. 
  			</p>
  		</subsection>
  		
  		<subsection name="Supporting jars">
  			<p>
   			  Your service will need a number of additional jars in order to operate the security handlers.
  			</p>
  			<dl>
  				<dt>astrogrid-security.jar</dt>
  				<dd>Contains the security facade including the handler 
  					<i>org.astrogrid.security.AxisServiceCredentialHandler</i> which you declared in the WSDD file.</dd>
  				<dt>xmlsec.jar (version 1.2.1 or later)</dt>
  				<dd>Contains the code for digital signature on XML.</dd>
  				<dt>bcprov.jar ("the bouncy-castle jar"; version jdk13-128)</dt>
  				<dd>Contains the cryptographic algorithms used in digital signature.</dd>
  		
  				<dt>cog-jglobus.jar (version 1.2)</dt>
  				<dd>Contains the code from the Java CoG kit for checking certificate chains.</dd>
  			</dl>
  		</subsection>
  			
  		<subsection name="Authentication semantics">
  			<p>Once configured as above, the service attempts to authenticate the sender of
  			each incoming message. It is not possible to apply authentication to a sub-set
  				of operations on the service.
  			</p>
  			<p>
  				If a request is authenticated, then the authenticated identity is logged and stored for the
  				use of authorization code. If authentication fails, or if the request is anonymous, then the
  				situation is logged and no fault is thrown. I.e. the handler does not reject requests because
  				of failed authentication.
  			</p>

  		</subsection>
  		
  		<subsection name="Retrieving the authenticated identity">
  			<p>
  				Authorization code can retrieve the results of authentication by asking for a service
  				security-guard.
  			</p>
  			<pre>
 import javax.security.auth.x500.X500Principal;
 import org.astrogrid.security.AxisServiceSecurityGuard;
 AxisServiceSecurityGuard guard = AxisServiceSecurityGuard.getInstanceFromContext();
 if (guard.isAnonymous()) {
   ...
 }
 else {
   X500Principal p = guard.getX500Principal();
   ...
 }
  			</pre>
  		</subsection>
  	</section>

  </body>

  

 </document>

