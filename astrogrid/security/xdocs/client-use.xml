<?xml version="1.0"?>

<document>

  <title>Use of security facade from a client programme</title>
  
  <body>
  
    <section name="Client APIs">
    
      <p>
      A client should use the ClientSecurityGuard class to do authentication:
      this is the client-side facade.
      The client may also need to use the classes representing credentials:
      Password, AccountName and NonceToken.
      The client should not call directly the other classes of the security
      package; they are only for internal use.
      </p>
      
      <p>
      The ClientSecurityGuard holds credentials for the application and
      makes them available in SOAP messages.
      A client should create a ClientSecurityGuard and populate it with
      credentials, as described in the following sections. The client may
      use one ClientSecurityGuard for any number of messages, or may
      use a different guard for each message. The former case is the
      most common; the latter case applies if the application wishes to
      use different credentials (possibly a different identity) in each
      message.
      </p>
    
    </section>
    
    <section name="Creating and sharing ClientSecurityGuards">
    
      <p>
      A client creates a ClientSecurityGuard using its
      no-argument constructor. After construction, the guard is
      empty, holding no identities and no credentials.
      </p>
      <p>
      The client must add identities and credentials to the guard
      before using it to secure messages. This is normally done by 
      setting a username and single-sign-on password, as described
      in the following section. The guard can then sign on to
      the grid and acquire other credentials for itself.  
      </p>
      <p>
      Alternatively,
      the client may set credentials and identities directly. The convenience
      method getSubject() returns the JAAS subject in which the guard
      stores all identities and credentials. Changing this Subject
      changes the way in which the guard secures message.  Please
      refer to the JAAS documentation for details of the Subject.
      The current implemenation of the security facade uses 
      AccountNames as JAAS Principals and NonceTokens as private
      credentials. No public credentials are used. The textual
      value of an AccountName must match the standard for an IVORN.
      </p>
      <p>
      The client may use the same ClientSecurityGuard from multiple
      threads.
      </p>
    </section>
    
    <section name="Signing on">
    
      <p>
      To sign on to the grid, a client should call signOn() on the 
      ClientSecurityGuard, passing a usename and a Password object.
      The username must be an IVORN referring to a user in a
      Community, as understood by the AstroGrid community service.
      The password argument should be an unencrypted Password (q.v.); 
      i.e. a Password constructed by the Password(String, false)
      constructor.
      </p>
      <p>
      Calling signOn() contacts the community service for the named
      user; the security system works out for itself which service
      must be contacted. If the user is known to the community, and
      if the password is correct, a NonceToken is returned and
      retained in the ClientSecurityGuard as a credential.
      The application may retrieve this security token, but in general
      it does not need to do so. The token need not be extracted
      from the guard for it to be used in messaging.
      </p>
      
    </section>
    
    <section name="Mounting guard">
    
      <p>
      To apply the credentials to messages, an application calls
      mountGuard() on the ClientSecurityGuard, passing a JAX-RPC Service
      object as an argument. All messages sent by Call objects subsequently
      generated by that Service will then be annotated with the credentials
      in the ClientSecurityGuard.
      </p>
      <p>
      Stubs generated by WSDL2Java implements the Service interface, so can
      be used with the ClientSecurityGuard. To make this work, the application
      must set the name of the WSDL port on the stub before calling mountGuard()
      on the ClientSecurityGuard. If this is not done, the handlers for the
      credentials are not triggered.
      </p>
      
    </section>
  
  </body>
  
 </document>
