<?xml version="1.0"?>

<document>

  <title>Use of security facade from an Axis client</title>
  
  <body>
  	
  	<section name="Use of the security facade from an Axis client">
  		
  		<subsection name="Background">
  			<p>
  				The implementation of the facade for Axis signs request
  				messages to services. The signatures are created in the client by an Axis
  				handler, and a special sub-class of <i>SecurityGuard</i>,
  				<i>AxisClientSecurityGuard</i> is provided to pass credentials into the handlers.
  				Axis requires that the security handler be created when its 'Axis engine' in
  				the client is first created. This means that the handler must set up when
  				constructing the client-side stub for the service.
  			</p>
  			<p>
  				The grid credentials used to make the signatures are set by
  				accessor methods on the <i>SecurityGuard</i>. Typically, the
  				calling code will get credentials by an exchange with a 
  				community service such as <i>MyProxy</i>.
  				(This is a change from
  				earlier versions of this component in which credentials were read
  				from file or obtained directly from a community service by the
  				facade classes themselves.) The following credentials are required
  				for the signature.
  			</p>
  			<ul>
  				<li><strong>A certificate chain:</strong> one or more X.509 certificates
  				arranged as a chain in which the signature of each certificate is validated
  				using the public key contained in the following certificate. All the certificates
  				must be of type X.509v3. IETF RFC3820 governs their use and arrangement. The
  				trust anchor (i.e. the self-signed, implicitly-trusted certificate that is
  				logically at the end of the chain) is not used in signing a message and
  				should not be included in the chain itself. The chain may be added to the
  				security-guard object either by adding a <i>java.security.cert.certPath</i>
  				to its JAAS subject or by calling the convenience function <i>setCertificateChain</i>
  					which accepts an array of certificates.</li>
  				<li><strong>A private key:</strong> a key with which to sign the message. The
  				private key must match the public key in the <em>first</em> certificate 
  				in the chain. The key
  				is represented as a <i>java.security.PrivateKey</i>.</li>
  			</ul>
  			<p>
  				The private key is used, by the security-facade
  				classes, actually to sign the message, and it is not sent with the message.
  				The certificate chain is not needed to derive the cryptographic value of
  				the signature, but is sent with the
  				messages in order that the receiving service may verify the signature.
  			</p>
  			<p>
  				Some aspects of the client-side facade are thus specialized
  				to Axis and the specialization shows in the APIs. Other parts
  				are independent of Axis. If a delegate class is provided to 
  				operate the basic messaging mechansim, then this delegate will
  				necessarily be Axis-specific and can encapsulate the Axis-specific
  				calls to the security facade. The other, portable calls to the facade can
  				be left in the code that calls the delagate. Alternatively,
  				the entire client can be specific to Axis. This document describes an
  				Axis-specific delegate in an Axis-independent client.
  			</p>
  		</subsection>
  		
  		<subsection name="Configuring Axis handlers">
  			<p>
  			The Axis handler for signing the message must be configured when the
  			<i>AxisEngine</i> for the client is configured. Axis' handler chains
  			are effectively immutable and the security handler cannot easily be
  			injected later.
  			</p>
  			<p>
  				The handler mechanism is specific to Axis; it is not the standard,
  				JAX-RPC mechanism. Therefore, the handler should be set up in the
  				delegate where Axis-specific code is normal.
  			</p>
  			<p>
  				If the client stub-classes, called by the delegate, are the kind created
  				by Axis' WSDL2J, then the handlers should be configured when constructing
  				the 'locator' object for the service in question.
  			</p>
  			<pre>
import org.astrogrid.security.AxisClientSecurityGuard;
XyzLocator locator = new XyzLocator(AxisClientSecurityGuard.getEngineConfiguration());
  			</pre>
  			<p>
  				Note the use of a static method on <i>AxisClientSecurityGuard</i> to provide the
  				configuration object. This configures the 'java', 'local' and 'http' transports 
  				with the signature handler and no other special handlers.
  			</p>
  			<p>
  				With the locator configured in this way, all proxy objects created from the locator
  				will have the signature handler.
  			</p>
  			<p>
  				If the client's <i>AxisEngine</i> is being configured from a WSDD document, then the method
  				above does not work. Instead, the WSDD document should declare 
  				<i>org.astrogrid.security.AxisClientCredentialHandler</i> as a request handler.
  			</p>
  		</subsection>
  		
  		<subsection name="Creating a security-guard object">
  			<p>
  				The portable code of the client (that part that is not specific to Axis)
  				should instantiate the generic
  				<i>SecurityGuard</i> class. This object will be used to gather
  				the credentials.
  			</p>
  			<pre>
import org.astrogrid.security.SecurityGuard;
SecurityGuard guard = new SecurityGuard();
  			</pre>
  			<p>
  			One <i>SecurityGuard</i>
  			is needed per user identity but that same object can and should be
  			reused for all delegates created by the client.
  				</p>
  		</subsection>
  		
  		<subsection name="Setting credentials">
  			<p>
  				The client application should obtain a certificate chain and matching
  				private key. These may be had, in exchange for a user name and password,
  				from the community services. The security facade does not, currently,
  				interact with the community services on behalf of the application.
  			</p>
  			<pre>
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
X509Certificate[] chain = ...;
PrivateKey key = ...;
  			</pre>
  			<p>
  				The client application should store the credentials in the SecurityGuard.
  			</p>
  			<pre>
guard.setCertificateChain(chain);
guard.setPrivateKey(key);
  		  </pre>
  		</subsection>
  		
  		<subsection name="Passing grid credentials to the handler">
  			<p>
  				The Axis-specific code is assumed to be encapsulated in a delegate class.
  				The client application should create the delegate and pass to it the
  				generic security guard.
  			</p>
  			<pre>
XyzDelegate delegate = ...
delegate.setCreadentials(guard);
  			</pre>
  			<p>
  			To get the grid credentials into the signature handler, the client must
  			embed them in an instance of <i>AxisClientSecurityGuard</i>. This
  				object should be created from the generic <i>SecurityGuard</i> inside the
  				delegate.
  			</p>
  			<pre>
import org.astrogrid.security.AxisClientSecurityGuard;
AxisClientSecurityGuard axisGuard = new AxisClientSecurityGuard(guard);
  			</pre>
  			<p>
  				The Axis-specific guard must then be told to pass its credentials to
  				the handler.
  			</p>
  			<pre>
XyzPortType proxy = locator.getXyzPort(endpoint);
axisGuard.configureStub((org.apache.axis.client.Stub)proxy);
  			</pre>
  			<p>
  				In this example, the locator and proxy classes are those created by WSDL2Java.
  				Once the proxy is configured, all outgoing messages are signed, by the handler,
  				with the credentials in the security-guard object.
  			</p>
  			<p>
  				If the client application uses the Axis stubs directly, without a delegate layer,
  				then the application can create the <i>AxisSecurityGuard</i> directly instead of
  				creating a generic <i>SecurityGuard</i>. The <i>setCertificateChain</i> and
  				<i>setPrivateKey</i> methods can then be used on the Axis guard. 
  			</p>
  		</subsection>
 
  		<subsection name="Supporting jars">
  			<p>
  				Your client will need a number of additional jars in order to operate the security handlers.
  			</p>
  			<dl>
  				<dt>astrogrid-security.jar</dt>
  				<dd>Contains the security facade including the handler 
  					<i>org.astrogrid.security.AxisClientCredentialHandler</i>.
  				  Also contains the necessary classes from Apache WSS4J.</dd>
  				<dt>xmlsec.jar (version 1.2.1 or later)</dt>
  				<dd>Contains the code for digital signature on XML.</dd>
  				<dt>bcprov.jar ("the bouncy-castle jar"; version jdk13-128 or later)</dt>
  				<dd>Contains the cryptographic algorithms used in digital signature.</dd>
  				<dt>cog-jglobus.jar (version 1.2)</dt>
  				<dd>The Java CoG kit, from which are drawn the classes supporting RFC3820.</dd>
  				<dt>cog-puretls.jar (version 1.2)</dt>
  				<dd>Supports cog-jglobus.jar.</dd>
  			</dl>
  		</subsection>
  	</section>
  
  </body>
  
 </document>
