<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="maven-project.xsd">

  <extend>../maven-base/project.xml</extend>
  
  <id>astrogrid-security</id>
  <name>AstroGrid security facade</name>

  <shortDescription>A collection of APIs abstracting security in web services.</shortDescription>
  
  <description>
    <![CDATA[
    <p>
    The security-facade package implements a single-sign-on (SSO) authentication 
    system between SOAP clients and SOAP services. Messages sent with the aid of 
    this package are annotated with SSO credentials in the SOAP headers. Messages
    received by services using this package are authenticated using the credentials
    in the message.
    </p>
    <p>
    The facade hides details of the authentication from the client and service code.
    Clients use a helper class, ClientSecurityGuard, to set up SSO credentials and
    to configure service proxies to use the credentials. Services use a matching
    helper class, ServiceSecurityGuard, to determine the results of authentication
    and to extract credentials after successful authentication. Encoding of 
    credentials to SOAP, parsing of credentials from SOAP and validation of
    credentials at authentication are all done automatically on exchange of messages
    by JAX-RPC handlers.
    </p>
    <p>
    The implementation behind the facade may use an external service to issue and
    validate SSO credentials. The current implementation uses the AstroGrid
    Community service, and the SSO credentials are NonceTokens.
    </p>
    <p>
    This package ties together several Java standards:
    </p>
    <ul>
      <li>SOAP with Attachments API for Java (SAAJ) for handling the messages;</li>
      <li>JAX-RPC for the handlers that encode and parse the credentials;</li>
      <li>Java Authentication and Authorization System (JAAS) for authentication.</li>
    </ul>
    <p>
    Therefore, implementations of these standards must be provided to use the package.
    SUN's JDK provides JAAS. Apache-Axis provides SAAJ and JAX-RPC. In fact, the
    current implemenation <em>requires</em> Axism rather than another implementation,
    on the server side.
    </p>
    ]]>
  </description>
  
  <dependencies>
    
    <dependency>
      <groupId>org.astrogrid</groupId>
      <type>jar</type>
      <artifactId>astrogrid-common</artifactId>
      <version>${pom.currentVersion}</version>
    </dependency>
  
    <dependency>
      <groupId>org.astrogrid</groupId>
      <type>jar</type>
      <artifactId>astrogrid-community-client</artifactId>
      <version>${pom.currentVersion}</version>
    </dependency>

    <dependency>
      <groupId>org.astrogrid</groupId>
      <type>jar</type>
      <artifactId>astrogrid-community-common</artifactId>
      <version>${pom.currentVersion}</version>
    </dependency>

    <dependency>
      <groupId>org.astrogrid</groupId>
      <type>jar</type>
      <artifactId>astrogrid-community-resolver</artifactId>
      <version>${pom.currentVersion}</version>
    </dependency>

    <dependency>
      <groupId>org.astrogrid</groupId>
      <type>jar</type>
      <artifactId>astrogrid-registry-client</artifactId>
      <version>${pom.currentVersion}</version>
    </dependency>

    <dependency>
      <groupId>org.astrogrid</groupId>
      <type>jar</type>
      <artifactId>astrogrid-registry-common</artifactId>
      <version>${pom.currentVersion}</version>
    </dependency>
  
    <dependency>
      <groupId>axis</groupId>
      <type>jar</type>
      <artifactId>axis</artifactId>
      <version>1.1</version>
    </dependency>

    <dependency>
      <groupId>saaj</groupId>
      <type>jar</type>
      <artifactId>saaj</artifactId>
      <version>unknown</version>
      <jar>saaj.jar</jar>
    </dependency>

    <dependency>
      <groupId>commons-logging</groupId>
      <type>jar</type>
      <artifactId>commons-logging</artifactId>
      <version>1.0.3</version>
    </dependency>

    <dependency>
      <groupId>commons-discovery</groupId>
      <type>jar</type>
      <artifactId>commons-discovery</artifactId>
      <version>20030211.213356</version>
    </dependency>
    
    <dependency>
      <groupId>castor</groupId>
      <type>jar</type>
      <artifactId>castor-xml</artifactId>
      <version>0.9.5</version>
      <jar>castor-0.9.5-xml.jar</jar>
    </dependency>
    
    <dependency>
      <groupId>jaxrpc-api</groupId>
      <type>jar</type>
      <artifactId>jaxrpc-api</artifactId>
      <version>1.0.3</version>
    </dependency>
    
    <dependency>
      <groupId>xml-apis</groupId>
      <type>jar</type>
      <artifactId>xml-apis</artifactId>
      <version>2.0.2</version>
    </dependency>
    
    <dependency>
      <groupId>wsdl4j</groupId>
      <type>jar</type>
      <artifactId>wsdl4j</artifactId>
      <version>1.0</version>
    </dependency>

    <dependency>
      <groupId>log4j</groupId>
      <type>jar</type>
      <artifactId>log4j</artifactId>
      <version>1.2.8</version>
    </dependency>
      
    <!-- DOM4J is used in the test classes. -->
    <dependency>
      <groupId>dom4j</groupId>
      <type>jar</type>
      <artifactId>dom4j</artifactId>
      <version>1.4</version>
    </dependency>
    
  </dependencies>

  <build>
    <sourceDirectory>src/java</sourceDirectory>
    <unitTestSourceDirectory>test/java</unitTestSourceDirectory>

    <unitTest>
      <includes>
        <include>**/*Test.java</include>
      </includes>

      <resources>
        <resource>
          <directory>${basedir}/test/java</directory>
          <includes>
            <include>**/*.xml</include>
	    <include>**/*.properties</include>
          </includes>
        </resource>
      </resources>
    </unitTest>

  </build>


</project>
