/*$Id: ValidatorTest.java.DONTUSE,v 1.2 2006/08/21 15:39:44 clq2 Exp $
 * Created on 28-Nov-2003
 *
 * Copyright (C) AstroGrid. All rights reserved.
 *
 * This software is published under the terms of the AstroGrid
 * Software License version 1.2, a copy of which has been included
 * with this distribution in the LICENSE.txt file.
 *
 **/
package org.astrogrid.xml;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import javax.xml.parsers.ParserConfigurationException;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import org.astrogrid.xml.Validator;
import org.xml.sax.SAXException;

/**
 * tests the xml validator
 *
 */
public class ValidatorTest extends TestCase  {
   
   /** Checks that the catalog is valid */
   public void testCatalog1() throws IOException, SAXException {
      URL cat = Validator.class.getResource("catalog.xml");

      assert cat != null : "Catalog not found";  //throws error rather than fail
      
      // This throws an exception if invalid
      Validator.isValid(cat.openStream());
      /*
      if (Validator.isValid(cat.openStream()) != null) {
         throw new SAXException("Catalog is invalid");
      }
      */
   }
   public void testCatalog2() throws IOException, SAXException {
      URL cat = Validator.class.getResource("catalog.xml");

      assert cat != null : "Catalog not found";  //throws error rather than fail
      
      // This throws an exception if invalid
      ErrorRecorder recorder = Validator.analyseValidity(cat.openStream());
      if (recorder != null) {
         throw new SAXException("Catalog is invalid");
      }
   }
   
   
   /** checks that valid votable parses OK */
   public void testValid1() throws IOException, SAXException {
      
      URL okVoTable = ValidatorTest.class.getResource("valid.vot.xml");
      assert okVoTable != null : "Test votable not found"; //throws error rather than fail
      
      //assertNull("Validator incorrectly finds errors in "+okVoTable, Validator.isValid(okVoTable.openStream()));
      Validator.isValid(okVoTable.openStream());
   }
   public void testValid2() throws IOException, SAXException {
      
      URL okVoTable = ValidatorTest.class.getResource("valid.vot.xml");
      assert okVoTable != null : "Test votable not found"; //throws error rather than fail
      assertNull("Validator incorrectly finds errors in "+okVoTable, Validator.analyseValidity(okVoTable.openStream()));
   }

   
   /** checks that invalid votable fails */
   public void testInvalid1() throws IOException, SAXException {
      
      URL badVoTable = ValidatorTest.class.getResource("invalid.vot.xml");
      
      assert badVoTable != null : "Test votable not found"; //throws error rather than fail
      
     // assertNotNull("Validator incorrectly finds no errors in invalid xml document at "+badVoTable, Validator.isValid(badVoTable.openStream()));
     try {
        Validator.isValid(badVoTable.openStream());
        fail("Validator incorrectly finds no errors in invalid xml document at "+badVoTable); 
     }
     catch (Exception e) {
         //OK, found the errors
     }
   }
   public void testInvalid2() throws IOException, SAXException {
      
      URL badVoTable = ValidatorTest.class.getResource("invalid.vot.xml");
      
      assert badVoTable != null : "Test votable not found"; //throws error rather than fail
      
     assertNotNull("Validator incorrectly finds no errors in invalid xml document at "+badVoTable, Validator.analyseValidity(badVoTable.openStream()));
   }
   
   /** checks that badly formed votable fails */
   public void testBadForm() throws IOException {
      
      URL badVoTable = ValidatorTest.class.getResource("badform.vot.xml");
      
      assert badVoTable != null : "Test votable not found"; //throws error rather than fail
      
      try {
         Validator.isWellFormed(badVoTable.openStream());
         
         fail("Validator incorrectly passes "+badVoTable);
      }
      catch (SAXException se) {
         //that's ok, expected that
         System.out.println("Good, found deliberate error: "+se); //for visual checks that we got it right.
      }
   }
   
   public static void main(String[] args) {
      junit.textui.TestRunner.run(suite());
   }
   
    public static Test suite() {
        // Reflection is used here to add all the testXXX() methods to the suite.
        return new TestSuite(ValidatorTest.class);
    }
   
}



