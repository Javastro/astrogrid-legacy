<?xml version="1.0" ?>
<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:maven="jelly:maven" xmlns:deploy="deploy"  xmlns:ag="org.astrogrid.objects" default="jar:jar">
    <j:import inherit="true" file="./mavendefinitions.xml"/>
    
<!-- location of generated source tree -->
<property name="generated.src" location="${basedir}/gen/java" />
<property name="generated.dir" location="${basedir}/gen" />

<!-- goals for nightly build -->
<goal name="astrogrid-clean" prereqs="clean"/>

<goal name="astrogrid-deploy-site" prereqs="schemadoc,site,site:deploy" />

<goal name="astrogrid-deploy-snapshot" prereqs="jar:deploy-snapshot"/>

<goal name="astrogrid-deploy-artifact" prereqs="jar:deploy" />
<goal name="astrogrid-install-artifact" prereqs="jar:install" />

<goal name="astrogrid-install-snapshot" prereqs="jar:install-snapshot"/>



<!-- hooks into existing goals -->
  <path id="generated.src.path" location="${generated.src}"/>
  <preGoal name="java:compile"><!-- generate classes from schema and wsdl first -->
     <maven:addPath id="maven.compile.src.set" refid="generated.src.path"/>  <!-- declares new src tree to maven -->
     <mkdir dir="${basedir}/target/classes" />     <!-- Clover fails if this dir is not present -->
  </preGoal>
 
<!-- add the extra paths for site generate too -->  
  <preGoal name="site:generate" >
     <maven:addPath id="maven.compile.src.set" refid="generated.src.path"/>  <!-- declares new src tree to maven -->
 </preGoal>
  

<!-- new goals -->
<!-- re-run all code generation -->
<goal name="regenerate-all" description="regenerate all sources" prereqs="run-castor,run-wsdl2java" />
<!-- castor object model generation -->
  <goal name="run-castor" description="generate classes from schema using castor" prereqs="castor-cleanout,castor-generate"/>

  <goal name="castor-cleanout">
	<!-- this is cleaning everything at the moment.... -->
          <delete>
                <fileset dir="${generated.src}">
                        <include name="**/*.java" />
                </fileset>
        </delete>
  </goal>


  <goal name="castor-generate">
     <ag:CastorGenerate name="AGParameterDefinition.xsd" />
     <ag:CastorGenerate name="Credentials.xsd" />
     <ag:CastorGenerate name="AGApplicationBase.xsd" />
     <ag:CastorGenerate name="CEATypes.xsd" />
     <ag:CastorGenerate name="CEAImplementation.xsd" />
     <ag:CastorGenerate name="ExecutionRecord.xsd" />
     <ag:CastorGenerate name="Workflow.xsd" />
     <ag:CastorGenerate name="VOCEA.xsd" />
     <ag:CastorGenerate name="VOCEA-v0.2.xsd" />
	<!--external-->
     <ag:CastorGenerate name="externalSchema/VOTable.xsd" /> 
        <!--standard registry ones-->
		<!--v0.9-->
     <ag:CastorGenerate name="externalSchema/VOResource-v0.9.xsd" />
     <ag:CastorGenerate name="externalSchema/VORegistry-v0.2.xsd" />
     <ag:CastorGenerate name="externalSchema/VODataService-v0.4.xsd" />
     <ag:CastorGenerate name="externalSchema/ConeSearch-v0.3.xsd" />                        
     <ag:CastorGenerate name="externalSchema/SIA-v0.6.xsd" />                        
     <!--v0.10-->
     <ag:CastorGenerate name="externalSchema/v10/VOResource-v0.10.xsd" />
     <ag:CastorGenerate name="externalSchema/v10/VORegistry-v0.3.xsd" />
     <ag:CastorGenerate name="externalSchema/v10/VODataService-v0.5.xsd" />
     <ag:CastorGenerate name="externalSchema/v10/ConeSearch-v0.3.xsd" />                        
     <ag:CastorGenerate name="externalSchema/v10/SIA-v0.7.xsd" /> 
     <ag:CastorGenerate name="externalSchema/v10/RegistryInterface-v0.1.xsd" /> 
	                        

                       
  </goal>
  
  <goal name="castor-new" description="do a castor-generate with the new schema">
  	       <!-- new registry ones-->
  </goal>

  <goal name="generate-mapping" prereqs="java:compile">
              <java fork="yes" classname="GenerateMapping" classpathref="maven.dependency.classpath">
                <classpath>
                        <pathelement location="${basedir}/build" />
                        <pathelement location="${basedir}/target/classes" />
                        <path refid="maven.dependency.classpath" />
                </classpath>
                <arg file="${basedir}/sampleDocuments/mapping.xml"/>
                </java>

  </goal>

<!-- wsdl2java tooling -->
        <!-- all sources generated by wsdl2java (rather than castor) -->
        <patternset id="generated-by-wsdl2java">
           <include name="**/axis/**/*.java" />
           <include name="org/astrogrid/jes/delegate/v1/**/*.java" />
           <include name="org/astrogrid/jes/types/v1/**/*.java" />
           <include name="org/astrogrid/jes/service/v1/**/*.java" />
           <include name="org/astrogrid/applications/service/v1/**/*.java" />

        </patternset>

        <goal name="run-wsdl2java" description="generate classes from wsdl"
                prereqs="axis-declare-tasks,wsdl-cleanout,controller-wsdl,monitor-wsdl,cec-wsdl,results-wsdl,wsdd-postprocess,source-postprocess" />

        <goal name="wsdl-cleanout">
                <delete>
                        <fileset dir="${generated.src}">
                                <patternset refid="generated-by-wsdl2java" />
                        </fileset>
                </delete>
        </goal>

        <goal name="controller-wsdl" prereqs="axis-declare-tasks">
          <axis-wsdl2java output="${generated.src}"             verbose="true"
            serverside="true"
            skeletondeploy="false"
            deployscope="Application"
            testcase="false"
        url="${basedir}/wsdl/JobController.wsdl"
        namespacemappingfile="${basedir}/build/axis-namespace-mappings.properties"
        />
        <move file="${generated.src}/org/astrogrid/jes/delegate/v1/jobcontroller/deploy.wsdd"
                tofile="${generated.src}/org/astrogrid/jes/delegate/v1/jobcontroller/JobController-deploy.wsdd" />
        </goal>


   <goal name="monitor-wsdl" prereqs="axis-declare-tasks">
          <axis-wsdl2java output="${generated.src}"             verbose="true"
            serverside="true"
            skeletondeploy="false"
            deployscope="Application"
            testcase="false"
        url="${basedir}/wsdl/JobMonitor.wsdl"
        namespacemappingfile="${basedir}/build/axis-namespace-mappings.properties"
        />
       <move file="${generated.src}/org/astrogrid/jes/delegate/v1/jobmonitor/deploy.wsdd"
                tofile="${generated.src}/org/astrogrid/jes/delegate/v1/jobmonitor/JobMonitor-deploy.wsdd" />
   </goal>

  <goal name="cec-wsdl" prereqs="axis-declare-tasks">
          <axis-wsdl2java output="${generated.src}"             verbose="true"
            serverside="true"
            skeletondeploy="false"
            deployscope="Application"
            testcase="false"
        url="${basedir}/wsdl/CommonExecutionConnnector.wsdl"
        namespacemappingfile="${basedir}/build/axis-namespace-mappings.properties"
        />

         <move file="${generated.src}/org/astrogrid/applications/service/v1/cea/deploy.wsdd"
                tofile="${generated.src}/org/astrogrid/applications/service/v1/cea/CommonExecutionConnector-deploy.wsdd" />

   </goal>

  <goal name="results-wsdl" prereqs="axis-declare-tasks">
          <axis-wsdl2java output="${generated.src}"             verbose="true"
            serverside="true"
            skeletondeploy="false"
            deployscope="Application"
            testcase="false"
        url="${basedir}/wsdl/CEAResultsListener.wsdl"
        namespacemappingfile="${basedir}/build/axis-namespace-mappings.properties"
        />

         <move file="${generated.src}/org/astrogrid/jes/service/v1/cearesults/deploy.wsdd"
                tofile="${generated.src}/org/astrogrid/jes/service/v1/cearesults/CEAResultsListener-deploy.wsdd" />

   </goal>

   <goal name="wsdd-postprocess" description="apply xslt to fix generation bugs">
           <!--declare the transformer factory to use -->
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <xslt basedir="${generated.src}"
              includes="**/*-deploy.wsdd" style="${basedir}/build/clean-wsdd.xsl"
              destdir="${basedir}/wsdd" extension=".wsdd">
                <outputproperty name="encoding" value="iso8859_1"/>
                <outputproperty name="indent" value="yes"/>
                <!-- makes combining wsdd files easier if they've got no header declaration -->
                <outputproperty name="omit-xml-declaration" value="yes" />

        </xslt>
        <copy todir="${basedir}/wsdd">
                <fileset dir="${basedir}/wsdd">
                        <include name="**/*-deploy.wsdd" />
                </fileset>
                <mapper type="flatten" />
        </copy>
        <delete dir="${basedir}/wsdd/org"/>

   </goal>

   <goal name="source-postprocess">
             <!-- first delete the remaining undeploy wsdd files in source tree
                     want to remove any *Impl.java files too-->
             <delete>
                     <fileset dir="${generated.src}">
                            <include name="**/*.wsdd" />
                             <include name="**/*Impl.java" />
                     </fileset>
             </delete>
        <!-- fix axis-wsdl bug - sometimes introduces spurious &gt; at start of strings -->
        <replaceregexp flags="sg" match='"&gt;([^"]+)"'        replace='"\1"' >
                  <fileset dir="${generated.src}">
                                  <patternset refid="generated-by-wsdl2java" />
                          </fileset>
        </replaceregexp>

   </goal>
<!-- end of generation stuff -->

<!-- some documentation generation -->
  <goal name="schemadoc">
        <delete  dir="${basedir}/xdocs/schema"/>
        <mkdir dir="${basedir}/xdocs/schema"/>
        <!-- move the xsl to the same directory as the schema - the lookups of included schema seem to be relative to the stylesheet directory rather than the base directory-->
        <copy file="${basedir}/build/xs3p.xsl" todir="${basedir}/schema" />
            <!--declare the transformer factory to use -->
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <xslt basedir="${basedir}/schema"
              includes="*.xsd"  style="${basedir}/schema/xs3p.xsl"
              destdir="xdocs/schema" extension=".html">
              <param name="searchIncludedSchemas" expression="true" />
              <param name="searchImportedSchemas" expression="true" />
              <param name="linksFile" expression="${basedir}/build/links.xml" />

        </xslt>

        <copy file="${basedir}/build/xs3p.xsl" todir="${basedir}/schema/externalSchema" />
         <xslt basedir="${basedir}/schema/externalSchema"
              includes="*.xsd" style="${basedir}/schema/externalSchema/xs3p.xsl"
              destdir="${basedir}/xdocs/schema/externalSchema" extension=".html">
              <param name="searchIncludedSchemas" expression="true" />
              <param name="searchImportedSchemas" expression="true" />
              <param name="linksFile" expression="${basedir}/build/linkse.xml" />

        </xslt>

        <copy file="${basedir}/build/xs3p.xsl" todir="${basedir}/schema/externalSchema/v10" />
         <xslt basedir="${basedir}/schema/externalSchema/v10"
              includes="*.xsd" style="${basedir}/schema/externalSchema/v10/xs3p.xsl"
              destdir="${basedir}/xdocs/schema/externalSchema/v10" extension=".html">
              <param name="searchIncludedSchemas" expression="true" />
              <param name="searchImportedSchemas" expression="true" />
              <param name="linksFile" expression="${basedir}/build/linkse.xml" />

        </xslt>

      <!-- cleanup -->
      <delete>
          <fileset  dir="${basedir}/schema/">
              <include name="**/xs3p.xsl" />
          </fileset>
      </delete>
  </goal>

  <goal name="jaxb-generate" description="use jaxb to generate sources" prereqs="jaxb-declare-tasks">
        <mkdir dir="jaxbsrc"/>
        <xjc target="jaxbsrc">
      <schema dir="schema" includes="**/*.xsd" excludes="**/stc/**,**/quantity/**"/>
      <arg value="-extension" />
    </xjc>
  </goal>
  
  <goal name="xmlbeans-generate" prereqs="xmlbeans-declare-tasks">
  	<mkdir dir="xmlbeansrc" />
  	<xmlbean srcgendir="xmlbeansrc" srconly="true">
     <fileset dir="schema" includes="**/*.xsd" excludes="**/stc/**,**/quantity/**"/>
    </xmlbean>
  </goal>
  

  <goal name="axis-declare-tasks">
     <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>

  <goal name="jaxb-declare-tasks">
        <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask"  classpathref="maven.dependency.classpath" >
  </taskdef>

  </goal>
  <goal name="xmlbeans-declare-tasks">
  	<taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean" classpath="/usr/local/lib/xbean.jar"/>
  </goal>



</project>
