<?xml version="1.0"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/portalB/Attic/build.xml,v $</cvs:source>
    | <cvs:date>$Author: dave $</cvs:date>
    | <cvs:author>$Date: 2003/06/12 18:19:38 $</cvs:author>
    | <cvs:version>$Revision: 1.1 $</cvs:version>
    | <cvs:log>
    | $Log: build.xml,v $
    | Revision 1.1  2003/06/12 18:19:38  dave
    | Initial import into cvs ...
    |
    | </cvs:log>
    |
    +-->
<project default="init" basedir=".">

	<!-- Project build properties -->
	<property name="project.home"    value="${basedir}"/>
	<property name="project.name"    value="ast-portal"/>
	<property name="project.version" value="2.0"/>

	<!--+
	    | Project site location.
	    | This can be either an absolute path on the local machine,
	    | or relative path from the Tomcat webapps directory.
	    +-->
	<property name="site.src"     value="${basedir}/src/site"/>
	<property name="site.build"   value="${basedir}/build/site"/>

	<!--+
	    | User preferences.
	    | This is where to put local properties eg.tomcat installation path.
	    | tomcat.home=/usr/java/servers/tomcat/jakarta-tomcat-4.1.24-LE-jdk14
	    +-->
	<property file="${user.home}/ant.properties"/>

	<!-- Tomcat installation path (default if not in ant.properties) -->
	<property name="tomcat.home"    value="/usr/java/servers/tomcat/jakarta-tomcat-4.1.24-LE-jdk14"/>
	<property name="tomcat.host"    value="localhost"/>
	<property name="tomcat.port"    value="8080"/>
	<property name="tomcat.server"  value="${tomcat.host}:${tomcat.port}"/>
	<property name="tomcat.url"     value="http://${tomcat.server}"/>
	<property name="tomcat.timeout" value="60"/>

	<!-- Tomcat manager properties (need to update with name and password from tomcat_users -->
	<property name="tomcat.manager.url"      value="${tomcat.url}/manager"/>
	<property name="tomcat.manager.username" value="astrogrid"/>
	<property name="tomcat.manager.password" value="please"/>

	<!-- JUnit installation path -->
	<property name="junit.src"    value="depends/junit/junit-3.8.1.zip"/>
	<property name="junit.build"  value="build/junit"/>
	<property name="junit.home"   value="build/junit/junit-3.8.1"/>

	<!-- Axis properties -->
	<property name="axis.src"     value="depends/axis/axis-1_1rc2.tar.gz"/>
	<property name="axis.build"   value="${basedir}/build/axis"/>
	<property name="axis.home"    value="${basedir}/build/axis/axis-1_1RC2"/>
	<property name="axis.servlet" value="axis"/>
	<property name="axis.webapp"  value="${basedir}/build/axis/axis-1_1RC2/webapps/axis"/>

	<property name="axis.host"   value="localhost"/>
	<property name="axis.port"   value="8080"/>
	<property name="axis.server" value="${axis.host}:${axis.port}"/>
	<property name="axis.url"    value="http://${axis.server}/${axis.servlet}"/>

	<!-- JAF properties -->
	<property name="jaf.src"   value="depends/jaf/jaf-1.0.2.zip"/>
	<property name="jaf.build" value="build/jaf"/>
	<property name="jaf.home"  value="build/jaf/jaf-1.0.2"/>

	<!-- Portal components -->
	<property name="portal.build" value="build/portal"/>

	<!-- ================ Project tasks ================ -->
	<!-- Initialise the build environment -->
	<target name="init">
		<!-- Prefix for system environment properties -->
		<property environment="env"/>

		<!-- Load the local Tomcat properties -->
		<property file="build/config/tomcat.properties"/>

		<!-- Build timestamp -->
		<tstamp>
			<format property="build.time" pattern="yyyy.MM.dd.HH.mm.ss"/>
			<format property="build.date" pattern="yyyy.MM.dd"/>
		</tstamp>

		<!-- Build name -->
		<property name="build.name" value="${project.name}-${project.version}"/>

		<!-- Display the current settings -->
		<echo message="os.name      : ${os.name}"/>
		<echo message="os.arch      : ${os.arch}"/>
		<echo message="os.version   : ${os.version}"/>
		<echo message=""/>

		<echo message="user.home    : ${user.home}"/>
		<echo message=""/>

		<echo message="java.home    : ${java.home}"/>
		<echo message="JAVA.HOME    : ${env.JAVA_HOME}"/>
		<echo message="java.version : ${java.version}"/>
		<echo message=""/>

		<echo message="ant.home     : ${ant.home}"/>
		<echo message="ant.version  : ${ant.version}"/>
		<echo message=""/>

		<echo message="junit.home   : ${junit.home}"/>
		<echo message=""/>

		<echo message="tomcat.home  : ${tomcat.home}"/>
		<echo message="tomcat.url   : ${tomcat.url}"/>
		<echo message=""/>

		<echo message="axis.home    : ${axis.home}"/>
		<echo message="axis.url     : ${axis.url}"/>
		<echo message=""/>

		<echo message="build.home   : ${basedir}"/>
		<echo message="build.file   : ${ant.file}"/>
		<echo message="build.date   : ${build.date}"/>
		<echo message="build.time   : ${build.time}"/>
	</target>

	<!-- ================ Tomcat tasks ================ -->
	<!-- Initialise the Tomcat classpath(s) -->
	<target name="tomcat.init" depends="">
		<!-- Call a target in the tomcat.xml ant file -->
		<ant antfile="${project.home}/src/ant/tomcat.xml" target="tomcat.init"/>
	</target>

	<!-- Define the Tomcat manager tasks -->
	<target name="tomcat.tasks" depends="">
		<taskdef name="tomcat.deploy"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.DeployTask"/>
		<taskdef name="tomcat.install"   classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.InstallTask"/>
		<taskdef name="tomcat.list"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ListTask"/>
		<taskdef name="tomcat.reload"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ReloadTask"/>
		<taskdef name="tomcat.remove"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RemoveTask"/>
		<taskdef name="tomcat.resources" classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ResourcesTask"/>
		<taskdef name="tomcat.roles"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RolesTask"/>
		<taskdef name="tomcat.start"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StartTask"/>
		<taskdef name="tomcat.stop"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StopTask"/>
		<taskdef name="tomcat.undeploy"  classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.UndeployTask"/>
	</target>

	<!-- Start Tomcat in a separate VM -->
	<target name="tomcat.start" depends="">
		<echo message=""/>
		<echo message="Starting Tomcat ...."/>
		<!-- Call a target in the tomcat.xml ant file -->
		<ant antfile="${project.home}/src/ant/tomcat.xml" target="tomcat.start"/>
	</target>

	<!-- Stop Tomcat (uses a forked VM) -->
	<target name="tomcat.stop" depends="">
		<!-- Call a target in the tomcat.xml ant file -->
		<ant antfile="${project.home}/src/ant/tomcat.xml" target="tomcat.stop"/>
	</target>

	<!-- Wait for Tomcat to respond -->
	<target name="tomcat.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Tomcat ...."/>
		<echo message="URL : ${tomcat.url}/"/>
		<waitfor maxwait="60" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.url}/"/>
		</waitfor>
	</target>

	<!-- Wait for Tomcat manager to respond -->
	<target name="tomcat.manager.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Tomcat manager ...."/>
		<echo message="URL : ${tomcat.manager.url}/"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.manager.url}/"/>
		</waitfor>
	</target>

	<!-- Delete the Tomcat working files -->
	<target name="tomcat.clean" depends="">
		<echo message=""/>
		<echo message="Cleaning Tomcat temp files ...."/>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tomcat.home}/work" includes="**"/>
		</delete>
		<echo message="Cleaning Tomcat log files ...."/>
		<delete failonerror="false">
			<fileset dir="${tomcat.home}/logs" includes="*"/>
		</delete>
	</target>

	<!-- ================ Ant tasks ================ -->
	<!-- The Ant libraries -->
	<path id="ant.classpath">
		<pathelement location="${ant.home}/lib/ant.jar"/>
		<pathelement location="${ant.home}/lib/optional.jar"/>
	</path>

	<!-- ================ JUnit tasks ================ -->
	<!-- The JUnit libraries -->
	<path id="junit.classpath">
		<pathelement location="${junit.home}/junit.jar"/>
	</path>

	<!-- Delete the JUnit files -->
	<target name="junit.delete" depends="">
		<delete dir="${junit.build}" failonerror="false"/>
	</target>

	<!-- Unpack the JUnit files --> 
	<target name="junit.unzip" depends="">
		<unzip src="${junit.src}" dest="${junit.build}"/>
	</target>

	<!-- ================ JAF tasks ================ -->
	<!--+
	    | We only need this to install activation.jar into the Tomcat endorsed directory for Axis.
	    | Once we have the dependencies sorted, this can go.
	    | Required with JDK 1.4.2
	    +-->
	<!-- Delete the JAF files -->
	<target name="jaf.delete" depends="">
		<delete dir="${jaf.build}" failonerror="false"/>
	</target>

	<!-- Unpack the JAF files --> 
	<target name="jaf.unzip" depends="">
		<unzip src="${jaf.src}" dest="${jaf.build}"/>
	</target>

	<!--+
	    | Patch the Tomcat endorsed classes to enable Axis.
	    | Copy activation.jar into the Tomcat endorsed directory.
	    | Required with JDK 1.4.2
	    +-->
	<target name="axis.endorsed" depends="jaf.unzip">
		<copy verbose="true" file="${jaf.home}/activation.jar" toDir="${tomcat.home}/common/endorsed"/>
	</target>

	<!-- ================ Axis tasks ================ -->

	<!-- Axis libraries -->
	<path id="axis.classpath">
		<pathelement location="${axis.home}/lib/axis.jar"/>
		<pathelement location="${axis.home}/lib/axis-ant.jar"/>
		<pathelement location="${axis.home}/lib/commons-discovery.jar"/>
		<pathelement location="${axis.home}/lib/commons-logging.jar"/>
		<pathelement location="${axis.home}/lib/jaxrpc.jar"/>
		<pathelement location="${axis.home}/lib/saaj.jar"/>
		<pathelement location="${axis.home}/lib/wsdl4j.jar"/>
	</path>

	<!-- Define the Axis manager tasks -->
	<target name="axis.tasks" depends="">
		<taskdef name="axis.admin"     classpathref="axis.classpath" classname="org.apache.axis.tools.ant.axis.AdminClientTask"/>
		<taskdef name="axis.wsdl2java" classpathref="axis.classpath" classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask"/>
	</target>

	<!-- Delete the Axis build -->
	<target name="axis.delete" depends="">
		<delete dir="${axis.build}" failonerror="false"/>
	</target>

	<!-- Unpack the axis web-app --> 
	<target name="axis.untar" depends="">
		<!-- Unpack the Axis tar file -->
		<untar src="${axis.src}" dest="${axis.build}" compression="gzip"/>
	</target>

	<!-- Install our Axis web-app -->
	<target name="axis.webapp.install" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our web-app -->
		<echo message=""/>
		<echo message="Installing Axis webapp ...."/>
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}" war="file://${axis.webapp}"/>
	</target>

	<!-- Start the Axis web-app -->
	<target name="axis.webapp.start" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Start our web-app -->
		<tomcat.start username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!-- Stop the Axis web-app -->
	<target name="axis.webapp.stop" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Stop our web-app -->
		<tomcat.stop username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!-- Reload the Axis web-app -->
	<target name="axis.webapp.reload" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Reload our web-app -->
		<tomcat.reload username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!-- Remove the Axis web-app -->
	<target name="axis.webapp.remove" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Remove our web-app -->
		<tomcat.remove username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!-- Build our Axis webapp from clean -->
	<target name="axis.REBUILD" depends="">
		<!-- Delete the Axis installation -->
		<antcall target="axis.delete"/>
		<!-- Unpack the Axis installation -->
		<antcall target="axis.untar"/>
		<!-- Add the endorsed classes to Tomcat -->
		<antcall target="axis.endorsed"/>
	</target>

	<!-- Install the Axis docs as a webapp -->
	<target name="axis.docs.install" depends="tomcat.tasks">
		<echo message=""/>
		<echo message="Installing Axis documentation ...."/>
		<!-- Copy the dummy web.xml file -->
		<copy file="src/docs/axis/WEB-INF/web.xml" todir="${axis.home}/docs/WEB-INF"/>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our web-app -->
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/axis-docs" war="file://${axis.home}/docs"/>
	</target>

	<!-- Remove the Axis docs webapp -->
	<target name="axis.docs.remove" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Remove our web-app -->
		<tomcat.remove username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/axis-docs"/>
	</target>

	<!--+
	    | Wait for Axis to respond.
	    | This just check that calling happyaxis.jsp responds, not the content.
	    | It would be nice to use something like HttpUnit to check that Axis really is happy.
	    +-->
	<target name="axis.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Axis webapp ...."/>
		<echo message="URL : ${axis.url}/happyaxis.jsp"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${axis.url}/happyaxis.jsp"/>
		</waitfor>
	</target>

	<!-- ================ Site tasks ================ -->
	<!-- Deploy our project site -->
	<target name="site.deploy" depends="">
		<!-- Copy our site files -->
		<copy toDir="${site.build}">
			<fileset dir="${site.src}"/>
		</copy>
		<!-- FIXME : Copy our project jar -->
		<!-- FIXME : Copy the Axis jars -->
	</target>

	<!-- Delete our project site -->
	<target name="site.delete" depends="">
		<delete dir="${site.build}" failonerror="false"/>
	</target>

	<!-- FIXME : Install our site WebApp -->
	<target name="site.install" depends="">
	</target>

	<!-- Wait for our site to respond -->
	<target name="site.wait" depends="">
		<echo message="Waiting for portal Site ...."/>
		<echo message="URL : ${tomcat.url}/astrogrid/"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.url}/astrogrid/"/>
		</waitfor>
	</target>

	<!-- Rebuild our project site -->
	<target name="site.REBUILD" depends="">
		<!-- Delete our project site -->
		<antcall target="site.delete"/>
		<!-- Deploy our project site -->
		<antcall target="site.deploy"/>
		<!-- Install our our project WebApp -->
		<antcall target="site.install"/>
	</target>

	<!-- ================ MySpace WebService tasks ================ -->
	<!-- Delete the server code for our mock MySpace service -->
	<target name="myspace.service.delete" depends="">
		<delete failonerror="false" dir="build/myspace/service"/>
	</target>

	<!--+
	    | Build the server side Java for the mock MySpace service
	    | This compiles the server side classes for the mock MySpace service.
	    | These classes then need to be installed into Axis as a WebService.
	    +-->
	<target name="myspace.service.javac" depends="" description="Compile our mock MySpace service">
		<!-- Create our build directories -->
		<mkdir dir="build/myspace/service/java"/>
		<mkdir dir="build/myspace/service/classes"/>
		<!-- Copy the server side source code -->
		<copy verbose="false" todir="build/myspace/service/java">
			<fileset dir="src/java">
				<include name="**/myspace/service/**/*.java"/>
			</fileset>
		</copy>
		<!-- Compile the server side components -->
		<javac srcdir="build/myspace/service/java"
		       destdir="build/myspace/service/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
		</javac>
	</target>

	<!--+
	    | Test the server side Java for the mock MySpace service
	    | This tests the public API of the mock MySpace service.
	    | It runs the off-line JUnit tests on the mock MySpace classes (outside Axis).
	    +-->
	<target name="myspace.service.junit" depends="" description="Run our MySpace JUnit tests">
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/service/junit"/>
		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our mock MySpace service classes -->
				<pathelement path="build/myspace/service/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- Plus the Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/service/junit">
				<fileset dir="build/myspace/service/classes">
					<include name="**/junit/**/JUnit*.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Deploy the server side components for our mock MySpace service
	    | This uses the Axis admin service to deploy the mock MySpace service.
	    | This only works if Axis is running on localhost.
	    +-->
	<target name="myspace.service.install" depends="axis.tasks">
		<!-- Create our wsdd directory -->
		<mkdir dir="build/myspace/service/wsdd"/>
		<!-- Copy our deployment descriptors -->
		<copy verbose="false" todir="build/myspace/service/wsdd">
			<fileset dir="src/java/org/astrogrid/portal/mock/myspace/service">
				<include name="*.wsdd" />
			</fileset>
		</copy>
		<!-- Copy our classes into the Axis WEB-INF/classes directory -->
		<copy verbose="false" todir="${axis.webapp}/WEB-INF/classes">
			<fileset dir="build/myspace/service/classes">
				<include name="**/*.class"/>
			</fileset>
		</copy>
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Deploy our WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="build/myspace/service/wsdd/deploy.wsdd"
			/>
	</target>

	<!-- Remove our mock MySpace test services --> 
	<target name="myspace.service.remove" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Remove our WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="build/myspace/service/wsdd/undeploy.wsdd"
			/>
		<!-- Tidy up any class files -->
		<delete failonerror="false">
			<fileset dir="${axis.webapp}/WEB-INF/classes">
				<include name="**/mock/myspace/*.*"/>
			</fileset>
		</delete>
	</target>

	<!--+
	    | Rebuild our mock MySpace service
	    | This re-builds the mock MySpace service from clean and then deploys it as a WebService in Axis.
	    +-->
	<target name="myspace.service.REBUILD" depends="">
		<!-- Remove the server build files -->
		<antcall target="myspace.service.delete"/>
		<!-- Compile the server side code -->
		<antcall target="myspace.service.javac"/>
		<!-- Test the server side code -->
		<antcall target="myspace.service.junit"/>
		<!-- Install the server side code -->
		<antcall target="myspace.service.install"/>
	</target>

	<!-- Delete the client code for our mock MySpace service -->
	<target name="myspace.client.delete" depends="">
		<delete failonerror="false" dir="build/myspace/client"/>
	</target>

	<!--+
	    | Generate the client stubs for our MySpace service.
	    | This uses the Axis Wsdl2Java tool to generate the client stubs.
	    | I've tested it with the mock MySpace service.
	    | In theory, change the ${axis.url} property to point to the live server,
	    | and it should generate the stubs for a live service as well.
	    +-->
	<target name="myspace.client.wsdl2java" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating client stubs from WSDL ...."/>
		<echo message="URL : ${axis.url}/services/myspace"/>
		<!-- Create our client directory -->
		<mkdir dir="build/myspace/client/java"/>
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Generate our client stubs -->
		<axis.wsdl2java
			verbose="true"
			output="build/myspace/client/java"
			url="${axis.url}/services/myspace?wsdl"
			>
			<mapping namespace="${axis.url}/services/myspace" package="org.astrogrid.portal.mock.myspace.client"/>
			<mapping namespace="http://service.myspace.mock.portal.astrogrid.org" package="org.astrogrid.portal.mock.myspace.client"/>
		</axis.wsdl2java>
	</target>

	<!--+
	    | Compile the client side Java for our mock MySpace service
	    | This compiles the stub classes genereated from the Axis Wsdl2Java tool
	    | along with our client side code which uses them.
	    +-->
	<target name="myspace.client.javac" depends="">
		<!-- Create our classes directory -->
		<mkdir dir="build/myspace/client/classes"/>
		<!-- Copy our client java code -->
		<copy verbose="false" todir="build/myspace/client/java">
			<fileset dir="src/java">
				<include name="**/mock/myspace/client/**/*.*"/>
			</fileset>
		</copy>
		<!-- Compile our client code -->
		<javac srcdir="build/myspace/client/java"
		       destdir="build/myspace/client/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<classpath>
				<path refid="axis.classpath"/>
			</classpath>
		</javac>
	</target>

	<!--+
	    | Run the client side JUnit tests for our MySpace service
	    | This runs the JUnit tests on the live, client side interface of the MySpace service.
	    | 
	    +-->
	<target name="myspace.client.junit" depends="myspace.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/client/junit"/>
		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- Plus the Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/client/junit">
				<fileset dir="build/myspace/client/classes">
					<include name="**/junit/**/JUnit*.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Rebuild our MySpace client code.
	    | This re-builds the MySpace client code from clean.
	    | It uses the Wsdl2Java task to re-genereta the client stubs from the MySpace WebService.
	    | So it needs to have the the MySpace service installed and running in Axis.
	    +-->
	<target name="myspace.client.REBUILD" depends="">
		<!-- Delete any existing client code -->
		<antcall target="myspace.client.delete"/>
		<!-- Build the client side stubs -->
		<antcall target="myspace.client.wsdl2java"/>
		<!-- Compile the client side java -->
		<antcall target="myspace.client.javac"/>
		<!-- Test the client side code (online) -->
		<antcall target="myspace.client.junit"/>
	</target>

	<!-- ================ Portal Java tasks ================ -->
	<!-- Clean our Java build -->
	<target name="portal.delete" depends="" description="Delete our java classes">
		<delete dir="${portal.build}" failonerror="false"/>
	</target>

	<!--+
	    | Compile our portal source code
	    +-->
	<target name="portal.javac" depends="" description="Compile our Java classes">
		<!-- Create our java source directory -->
		<mkdir dir="${portal.build}/java"/>
		<!-- Copy our java source code -->
		<copy toDir="${portal.build}/java">
			<fileset dir="src/java">
				<!-- Exclude any mock service classes -->
				<exclude name="**/mock/**"/>
			</fileset>
		</copy>
		<!-- Create our java classes directory -->
		<mkdir dir="${portal.build}/classes"/>
		<!-- Compile our java classes -->
		<javac srcdir="${portal.build}/java"
		       destdir="${portal.build}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
			</classpath>
		</javac>
	</target>

	<!-- Document our source code -->
	<target name="portal.javadoc" depends="" description="Build our JavaDoc documentation">
		<mkdir dir="build/doc/api"/>
		<javadoc sourcepath="src/java"
		         destdir="build/doc/api"
		         private="true"
		         version="true"
		         use="true">
			<fileset dir="src/java">
				<include name="**/**"/>
			</fileset>
		</javadoc>
	</target>

	<!--+
	    | Run our static (off-line) JUnit tests.
	    +-->
	<target name="portal.junit" depends="init, portal.javac" description="Run our JUnit tests">
		<!-- Create the reports directory -->
		<mkdir dir="${portal.build}/junit"/>
		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<classpath>
				<!-- Our Portal classes -->
				<pathelement path="build/portal/classes"/>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- Plus the Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="${portal.build}/junit">
				<fileset dir="${portal.build}/classes">
					<include name="**/junit/**/JUnit*.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- Build our jar file -->
	<target name="portal.jar" depends="portal.javac" description="Build our portal jar file">
		<mkdir dir="${portal.build}/lib"/>
		<jar jarfile="${portal.build}/lib/${project.name}-${project.version}.jar">
			<!-- Fails if docs are not there ...
			<zipfileset prefix="doc" dir="build/doc"/>
			-->
			<zipfileset prefix="" dir="${portal.build}/classes"/>
		</jar>
	</target>

	<!--+
	    | Deploy our jar file.
	    | FIXME : Deprecated, should use site.deploy instead.
	    +-->
	<target name="portal.deploy" depends="" description="Deploy our jar file">
		<copy verbose="false" toDir="${site.webapp}/WEB-INF/lib">
			<fileset dir="${portal.build}/lib">
				<include name="**.jar"/>
			</fileset>
		</copy>
	</target>

	<!-- Rebuild our portal java code -->
	<target name="portal.REBUILD" depends="init">
		<!-- Delete our portal components -->
		<antcall target="portal.delete"/>
		<!-- Build our portal components -->
		<antcall target="portal.javac"/>
		<!-- Test our portal components -->
		<antcall target="portal.junit"/>
		<!-- Deploy our portal components -->
<!-- FIXME : Deprecated, should use site.deploy
		<antcall target="portal.deploy"/>
-->
	</target>

	<!-- ================ Project tasks ================ -->

	<!--+
	    | Build all of our project components.
	    | Needs Tomcat already running.
	    | Needs Axis installed and running.
	    +-->
	<target name="project.BUILD" depends="init, tomcat.tasks">
		<!--+
		    | Rebuild our mock MySpace service
		    | This re-builds the mock MySpace service from clean and then deploys it as a WebService in Axis.
		    +-->
		<antcall target="myspace.service.REBUILD"/>
		<!--+
		    | Rebuild our MySpace client code.
		    | This re-builds the MySpace client code from clean.
		    | It uses the Wsdl2Java task to re-genereta the client stubs from the MySpace WebService.
		    | So it needs to have the the MySpace service installed and running in Axis.
		    +-->
		<antcall target="myspace.client.REBUILD"/>
		<!--+
		    | Rebuild our portal code.
		    | This re-builds the portal code from clean.
		    | It uses the client stubs generated by the Wsdl2Java task.
		    +-->
		<antcall target="portal.REBUILD"/>

	</target>

	<!--+
	    | Install our project WebApps ....
	    | Needs Tomcat already running.
	    +-->
	<target name="project.INSTALL" depends="init, tomcat.tasks">
		<!--+
		    | We don't need Axis to run the Portal itself.
		    | However, we do need it to test the WebServices calls.
		    +-->
		<!-- Install the Axis web-app -->
		<antcall target="axis.webapp.install"/>

		<!--+
		    | All this tests for is the jsp responds, not the content.
		    | It would be nice to check the content of the response to make sure Axis really is happy.
		    +-->
		<!-- Wait for Axis to startup -->
		<antcall target="axis.wait"/>

		<!--+
		    | Install the Axis documentation.
		    | This installs Axis documentation as a WebApp, useful when exploring and debugging WebServices.
		    +-->
		<antcall target="axis.docs.install"/>
		<echo message=""/>

		<!--+
		    | Build our site and java components
		    | This uses the Axis Wsdl2Java tasks to generate the client stubs
		    | from the live WebServices, so it needs Axis up and running.
		    +-->
		<antcall target="project.BUILD"/>

		<echo message="Ok ... Astrogrid portal is running."/>
	</target>

	<!--+
	    | Experimental task to install and run our project ....
	    | Use it if it helps, ignore it if it gets in the way.
	    | This task assumes Tomcat is NOT running.
	    | It will start Tomcat in a separate JVM, initiated from a separate thread.
	    | The task will not finish until Tomcat is stopped, either by Ctrl^C, or by running the tomcat.stop task from a separate shell.
	    +-->
	<target name="project.RUN" depends="init">

		<parallel>
			<!-- Start tomcat in a separate JVM -->
			<sequential>
				<!-- Clean the Tomcat working directories -->
				<antcall target="tomcat.clean"/>
				<!-- Start tomcat in a separate JVM -->
				<antcall target="tomcat.start"/>
			</sequential>

			<!-- Install our project services -->
			<sequential>
				<!-- Install all our WebApps -->
				<antcall target="project.INSTALL"/>
			</sequential>
		</parallel>
	</target>

	<!--+
	    | Re-build EVERYTHING from clean.
	    +-->
	<target name="project.REBUILD" depends="init">
		<!-- Delete everything -->
		<delete dir="build" failonerror="false"/>
		<!-- Unpack Axis binary -->
		<antcall target="axis.REBUILD"/>
		<!-- Unpack the JUnit binary -->
		<antcall target="junit.unzip"/>
		<!-- Start Tomcat and re-build everything -->
		<antcall target="project.RUN"/>
	</target>


</project>

