<?xml version="1.0"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/portalB/Attic/build.xml,v $</cvs:source>
    | <cvs:date>$Author: dave $</cvs:date>
    | <cvs:author>$Date: 2003/09/17 19:50:13 $</cvs:author>
    | <cvs:version>$Revision: 1.44 $</cvs:version>
    | <cvs:log>
    | $Log: build.xml,v $
    | Revision 1.44  2003/09/17 19:50:13  dave
    | 1) Updated build to add community config.
    | 2) Updated build to work with community.
    |
    | Revision 1.43  2003/09/12 11:20:05  KevinBenson
    | *** empty log message ***
    |
    | Revision 1.42  2003/09/10 02:34:05  dave
    | Removed build directory files from cvs
    |
    | Revision 1.41  2003/09/09 22:46:45  KevinBenson
    | *** empty log message ***
    |
    | Revision 1.40  2003/09/08 14:10:54  KevinBenson
    | *** empty log message ***
    |
    | Revision 1.39  2003/08/12 10:45:43  dave
    | Fixed JUnit classpath in javac tasks
    |
    | Revision 1.38  2003/07/31 14:24:24  KevinBenson
    | New build xml files works with the DataQuery that is integrated with cocoon and also now does unzip for axis and cocoon instead of untar.
    |
    | Revision 1.37  2003/07/31 10:18:24  KevinBenson
    | Change the build.xml file so it will work with the new DataQuery cocoon version.
    | Still had a small error in CreateRequest.java. And also got rid of the WS_FTP files.
    |
    | Revision 1.36  2003/07/03 10:44:43  dave
    | Fixed obscure comment in portal.javac
    |
    | Revision 1.35  2003/07/01 09:18:27  dave
    | Changed back to MySpace data.005
    |
    | Revision 1.34  2003/07/01 09:14:58  dave
    | Updates to release build
    |
    | Revision 1.33  2003/06/30 18:40:24  dave
    | Updated release build
    |
    | Revision 1.32  2003/06/30 18:10:52  dave
    | Added release task to REBUILD
    |
    | Revision 1.31  2003/06/30 17:43:16  dave
    | Added missing classes from data query release
    |
    | Revision 1.30  2003/06/30 17:36:30  dave
    | Added missing classes from data query release
    |
    | Revision 1.29  2003/06/30 17:10:43  dave
    | Fixed query release build
    |
    | Revision 1.28  2003/06/30 17:03:08  dave
    | Added script to build DataQuery release
    |
    | Revision 1.27  2003/06/30 16:17:23  dave
    | Added project release task
    |
    | Revision 1.26  2003/06/30 16:04:39  dave
    | First attempt at building cocoon war file
    |
    | Revision 1.25  2003/06/30 15:57:55  dave
    | Fixed user attribute name
    |
    | Revision 1.24  2003/06/30 00:39:54  dave
    | Removed experiments from build file
    |
    | Revision 1.23  2003/06/30 00:04:53  dave
    | Added initial astrogrid style
    |
    | Revision 1.22  2003/06/29 02:45:22  dave
    | Fixed display styles in explorer and add VOTable transform
    |
    | Revision 1.21  2003/06/27 02:43:18  dave
    | Added images to tree nodes
    |
    | Revision 1.20  2003/06/26 23:20:27  dave
    | Updated build to switch between Cocoon 2.0, Cocoon 2.1, Axis 1.0 and Axis 1.1
    |
    | Revision 1.19  2003/06/26 15:59:21  dave
    | Fixed Ant task for Cocoon blocks.properties
    |
    | Revision 1.18  2003/06/26 15:44:14  dave
    | Included test data for the MySpace client JUnit tests
    |
    | Revision 1.17  2003/06/26 15:26:29  dave
    | Added a local copy of the Cocoon blocks.properties
    |
    | Revision 1.16  2003/06/26 14:51:38  dave
    | Enabled cocoon.REBUILD
    |
    | Revision 1.15  2003/06/26 14:48:19  dave
    | Added explorer pages and actions to Cocoon
    |
    | Revision 1.14  2003/06/24 15:36:41  dave
    | Adding initial XSP pages
    |
    | Revision 1.13  2003/06/24 10:43:25  dave
    | Fixed bugs in DataTreeWalker and tree page
    |
    | Revision 1.12  2003/06/23 23:21:11  dave
    | Updated the page actions
    |
    | Revision 1.11  2003/06/22 22:29:48  dave
    | Added message, actions and page for move
    |
    | Revision 1.10  2003/06/22 19:22:25  dave
    | Included the generated stubs in the build
    |
    | Revision 1.9  2003/06/22 04:03:41  dave
    | Added actions and parsers for MySpace messages
    |
    | Revision 1.8  2003/06/18 23:28:23  dave
    | Added LookupResponseItem to LookupResponseParser
    |
    | Revision 1.7  2003/06/18 13:08:39  dave
    | Changed MySpace service URL
    |
    | Revision 1.6  2003/06/18 12:05:43  dave
    | Added debug and response status
    |
    | Revision 1.5  2003/06/18 01:48:25  dave
    | Removed extra tests
    |
    | Revision 1.4  2003/06/18 01:33:15  dave
    | Moved message parser into separate class and added service lookup to pages
    |
    | Revision 1.3  2003/06/17 15:40:15  dave
    | Fixed missing libraries in build sequence
    |
    | Revision 1.2  2003/06/17 15:17:34  dave
    | Added links to live MySpace, including initial XML parser for lookup results
    |
    | Revision 1.1  2003/06/12 18:19:38  dave
    | Initial import into cvs ...
    |
    | </cvs:log>
    |
    +-->
<project default="init" basedir=".">

	<!-- Project build properties -->
	<property name="project.home"    value="${basedir}"/>
	<property name="project.name"    value="ast-portal"/>
	<property name="project.version" value="2.0"/>

	<!--+
	    | Project site location.
	    +-->
	<property name="site.src"     value="${basedir}/src/site"/>
	<property name="site.build"   value="${basedir}/build/site"/>
	<property name="site.webapp"  value="${basedir}/build/site/webapp"/>
	<property name="site.cocoon"  value="${basedir}/build/site/cocoon"/>

	<!--+
	    | User preferences.
	    | This is where to put local properties eg.tomcat installation path.
	    | tomcat.home=/usr/java/servers/tomcat/jakarta-tomcat-4.1.24-LE-jdk14
	    +-->
	<property file="ant.properties"/>

	<!-- Tomcat installation path (default if not in ant.properties) -->
	<property name="tomcat.home"    value="/usr/java/servers/tomcat/jakarta-tomcat-4.1.24-LE-jdk14"/>
	<property name="tomcat.host"    value="localhost"/>
	<property name="tomcat.port"    value="8080"/>
	<property name="tomcat.server"  value="${tomcat.host}:${tomcat.port}"/>
	<property name="tomcat.url"     value="http://${tomcat.server}"/>
	<property name="tomcat.timeout" value="60"/>

	<!-- Tomcat manager properties (need to update with name and password from tomcat_users -->
	<property name="tomcat.manager.url"      value="${tomcat.url}/manager"/>
	<property name="tomcat.manager.username" value="astrogrid"/>
	<property name="tomcat.manager.password" value="please"/>

	<!-- JUnit installation path -->
	<property name="junit.src"    value="depends/junit/junit-3.8.1.zip"/>
	<property name="junit.build"  value="build/junit"/>
	<property name="junit.home"   value="build/junit"/>
	
	<!-- Community client jar -->
	<property name="community.policy.client.jar" value="depends/community/policy-client-1.0.jar" />
	<property name="community.home" value="depends/community/" />
	
	<!-- JConfig jar -->
	<property name="jconfig.jar" value="depends/jconfig/jconfig.jar" />
	<property name="jconfig.home" value="depends/jconfig/" />
	
	<!-- plugins location -->
	<property name="plugin.topcat.jar" value="depends/plugins/topcat-astrogrid.jar" />
	<property name="plugin.home" value="depends/plugins/" />
	<!-- Axis properties -->
<!--
	<property name="axis.tar"     value="depends/axis/axis-1_1rc2.tar.gz"/>
	<property name="axis.home"    value="${basedir}/build/axis/axis-1_1RC2"/>
-->
	<property name="axis.zip"     value="depends/axis/axis-1_1.zip"/>
	<property name="axis.build"   value="${basedir}/build/axis"/>
	<property name="axis.home"    value="${basedir}/build/axis/axis-1_1"/>
	<property name="axis.webapp"  value="${basedir}/build/axis/axis-1_1/webapps/axis"/>
	<property name="axis.servlet" value="axis"/>

	<property name="axis.host"   value="localhost"/>
	<property name="axis.port"   value="8080"/>
	<property name="axis.server" value="${axis.host}:${axis.port}"/>
	<property name="axis.url"    value="http://${axis.server}/${axis.servlet}"/>

	<!-- MySpace properties -->
	<property name="myspace.hydra"  value="http://143.210.36.120:8080"/>
	<property name="myspace.qin"    value="http://143.210.36.131:8080"/>
	<property name="myspace.local"  value="http://localhost:8080"/>
	<property name="myspace.server" value="${myspace.local}"/>
	<property name="myspace.data"   value="data.005"/>

	<!-- JAF properties -->
	<property name="jaf.src"   value="depends/jaf/jaf-1.0.2.zip"/>
	<property name="jaf.build" value="build/jaf"/>
	<property name="jaf.home"  value="build/jaf/jaf-1.0.2"/>

	<!-- Portal components -->
	<property name="portal.build" value="build/portal"/>

	<!-- ================ Project tasks ================ -->
	<!-- Initialise the build environment -->
	<target name="init">
		<!-- Prefix for system environment properties -->
		<property environment="env"/>

		<!-- Load the local Tomcat properties -->
		<property file="build/config/tomcat.properties"/>

		<!-- Build timestamp -->
		<tstamp>
			<format property="build.time" pattern="yyyy.MM.dd.HH.mm.ss"/>
			<format property="build.date" pattern="yyyy.MM.dd"/>
		</tstamp>

		<!-- Build name -->
		<property name="build.name" value="${project.name}-${project.version}"/>

		<!-- Display the current settings -->
		<echo message="os.name      : ${os.name}"/>
		<echo message="os.arch      : ${os.arch}"/>
		<echo message="os.version   : ${os.version}"/>
		<echo message=""/>

		<echo message="user.home    : ${user.home}"/>
		<echo message=""/>

		<echo message="java.home    : ${java.home}"/>
		<echo message="JAVA.HOME    : ${env.JAVA_HOME}"/>
		<echo message="java.version : ${java.version}"/>
		<echo message=""/>

		<echo message="ant.home     : ${ant.home}"/>
		<echo message="ant.version  : ${ant.version}"/>
		<echo message=""/>

		<echo message="junit.home   : ${junit.home}"/>
		<echo message=""/>

		<echo message="tomcat.home  : ${tomcat.home}"/>
		<echo message="tomcat.url   : ${tomcat.url}"/>
		<echo message=""/>

		<echo message="axis.build   : ${axis.home}"/>
		<echo message="axis.url     : ${axis.url}"/>
		<echo message=""/>

		<echo message="build.home   : ${basedir}"/>
		<echo message="build.file   : ${ant.file}"/>
		<echo message="build.date   : ${build.date}"/>
		<echo message="build.time   : ${build.time}"/>
	</target>

	<!-- ================ Plugin tasks ================ -->
	<!-- The Plugin libraries -->
	<path id="plugins.classpath">
		<pathelement location="${plugin.topcat.jar}"/>
	</path>
	
	<path id="jconfig.classpath">
		<pathelement location="${jconfig.jar}"/>
	</path>
	
	
	<!-- The Plugin libraries -->
	<path id="community.classpath">
		<pathelement location="${community.policy.client.jar}"/>
	</path>	


	<!-- ================ Ant tasks ================ -->
	<!-- The Ant libraries -->
	<path id="ant.classpath">
		<pathelement location="${ant.home}/lib/ant.jar"/>
		<pathelement location="${ant.home}/lib/optional.jar"/>
	</path>

	<!-- ================ JUnit tasks ================ -->
	<!-- The JUnit libraries -->
	<path id="junit.classpath">
		<pathelement location="${junit.home}/junit.jar"/>
	</path>

	<!-- Delete the JUnit files -->
	<target name="junit.delete" depends="">
		<delete dir="${junit.build}" failonerror="false"/>
	</target>

	<!-- Unpack the JUnit binary --> 
	<target name="junit.unzip" depends="">
		<unzip src="${junit.src}" dest="${junit.build}"/>
	</target>

	<!-- Install the JUnit library --> 
	<target name="junit.REBUILD" depends="">
		<antcall target="junit.unzip"/>
	</target>

	<!-- ================ JAF tasks ================ -->
	<!--+
	    | We only need this to install activation.jar into the Tomcat endorsed directory for Axis.
	    | Once we have the dependencies sorted, this can go.
	    | Required with JDK 1.4.2
	    +-->
	<!-- Delete the JAF files -->
	<target name="jaf.delete" depends="">
		<delete dir="${jaf.build}" failonerror="false"/>
	</target>

	<!-- Unpack the JAF files --> 
	<target name="jaf.unzip" depends="">
		<unzip src="${jaf.src}" dest="${jaf.build}"/>
	</target>

	<!--+
	    | Patch the Tomcat endorsed classes to enable Axis.
	    | Copy activation.jar into the Tomcat endorsed directory.
	    | Required with JDK 1.4.2
	    +-->
	<target name="axis.endorsed" depends="jaf.unzip">
		<copy verbose="false" file="${jaf.home}/activation.jar" toDir="${tomcat.home}/common/endorsed"/>
	</target>

	<!-- ================ Tomcat tasks ================ -->
	<!-- Initialise the Tomcat classpath(s) -->
	<target name="tomcat.init" depends="">
		<!-- Call a target in the tomcat.xml ant file -->
		<ant antfile="${project.home}/src/ant/tomcat.xml" target="tomcat.init"/>
	</target>

	<!-- Tomcat servlet libraries (required for Axis 1.0) -->
	<path id="tomcat.servlet.classpath">
		<pathelement location="${tomcat.home}/common/lib/servlet.jar"/>
	</path>

	<!-- Define the Tomcat manager tasks -->
	<target name="tomcat.tasks" depends="">
		<taskdef name="tomcat.deploy"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.DeployTask"/>
		<taskdef name="tomcat.install"   classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.InstallTask"/>
		<taskdef name="tomcat.list"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ListTask"/>
		<taskdef name="tomcat.reload"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ReloadTask"/>
		<taskdef name="tomcat.remove"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RemoveTask"/>
		<taskdef name="tomcat.resources" classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ResourcesTask"/>
		<taskdef name="tomcat.roles"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RolesTask"/>
		<taskdef name="tomcat.start"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StartTask"/>
		<taskdef name="tomcat.stop"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StopTask"/>
		<taskdef name="tomcat.undeploy"  classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.UndeployTask"/>
	</target>

	<!-- Start Tomcat in a separate VM -->
	<target name="tomcat.start" depends="">
		<echo message=""/>
		<echo message="Starting Tomcat ...."/>
		<!-- Call a target in the tomcat.xml ant file -->
		<ant antfile="${project.home}/src/ant/tomcat.xml" target="tomcat.start"/>
	</target>

	<!-- Stop Tomcat (uses a forked VM) -->
	<target name="tomcat.stop" depends="">
		<!-- Call a target in the tomcat.xml ant file -->
		<ant antfile="${project.home}/src/ant/tomcat.xml" target="tomcat.stop"/>
	</target>

	<!-- Wait for Tomcat to respond -->
	<target name="tomcat.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Tomcat ...."/>
		<echo message="URL : ${tomcat.url}/"/>
		<waitfor maxwait="60" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.url}/"/>
		</waitfor>
	</target>

	<!-- Wait for Tomcat manager to respond -->
	<target name="tomcat.manager.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Tomcat manager ...."/>
		<echo message="URL : ${tomcat.manager.url}/"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.manager.url}/"/>
		</waitfor>
	</target>

	<!-- Delete the Tomcat working files -->
	<target name="tomcat.clean" depends="">
		<echo message=""/>
		<echo message="Cleaning Tomcat temp files ...."/>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tomcat.home}/work" includes="**"/>
		</delete>
		<echo message="Cleaning Tomcat log files ...."/>
		<delete failonerror="false">
			<fileset dir="${tomcat.home}/logs" includes="*"/>
		</delete>
	</target>

	<!-- Clean the Tomcat endorsed libraries -->
	<target name="tomcat.RESET">
		<echo message="Cleaning Tomcat endorsed libraries ...."/>
		<delete verbose="false" failonerror="false">
			<fileset dir="${tomcat.home}/common/endorsed">
				<include name="*.jar"/>
				<include name="**.jar"/>
			</fileset>
		</delete>
	</target>

	<!-- ================ Axis tasks ================ -->

	<!-- The Axis libraries -->
	<path id="axis.classpath">
		<pathelement location="${axis.webapp}/WEB-INF/lib/axis.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/axis-ant.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/commons-discovery.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/commons-logging.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/jaxrpc.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/saaj.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/wsdl4j.jar"/>
	</path>

	<!-- Define the Axis manager tasks -->
	<target name="axis.tasks" depends="">
		<taskdef name="axis.admin" classname="org.apache.axis.tools.ant.axis.AdminClientTask">
			<classpath>
				<!-- Our Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
		</taskdef>
		<taskdef name="axis.wsdl2java" classpathref="axis.classpath" classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask"/>
	</target>

	<!-- Delete the Axis build -->
	<target name="axis.delete" depends="">
		<delete dir="${axis.build}" failonerror="false"/>
	</target>

	<!-- Unpack the axis web-app --> 
	<target name="axis.unzip" depends="">
		<!-- Unpack the Axis tar file -->
		<unzip src="${axis.zip}" dest="${axis.build}" />
	</target>

	<!-- Install our Axis web-app -->
	<target name="axis.webapp.install" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our web-app -->
		<echo message=""/>
		<echo message="Installing Axis webapp ...."/>
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}" war="file://${axis.webapp}"/>
	</target>

	<!-- Start the Axis web-app -->
	<target name="axis.webapp.start" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Start our web-app -->
		<tomcat.start username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!-- Stop the Axis web-app -->
	<target name="axis.webapp.stop" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Stop our web-app -->
		<tomcat.stop username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!-- Reload the Axis web-app -->
	<target name="axis.webapp.reload" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Reload our web-app -->
		<tomcat.reload username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!-- Remove the Axis web-app -->
	<target name="axis.webapp.remove" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Remove our web-app -->
		<tomcat.remove username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!-- Build our Axis webapp from clean -->
	<target name="axis.REBUILD" depends="">
		<!-- Delete the Axis installation -->
		<antcall target="axis.delete"/>
		<!-- Unpack the Axis installation -->
		<antcall target="axis.unzip"/>
		<!-- Add the Axis endorsed classes to Tomcat -->
		<antcall target="axis.endorsed"/>
	</target>

	<!-- Install the Axis docs as a webapp -->
	<target name="axis.docs.install" depends="tomcat.tasks">
		<echo message=""/>
		<echo message="Installing Axis documentation ...."/>
		<!-- Copy the dummy web.xml file -->
		<copy file="src/docs/axis/WEB-INF/web.xml" todir="${axis.home}/docs/WEB-INF"/>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our web-app -->
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/axis-docs" war="file://${axis.home}/docs"/>
	</target>

	<!-- Remove the Axis docs webapp -->
	<target name="axis.docs.remove" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Remove our web-app -->
		<tomcat.remove username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/axis-docs"/>
	</target>

	<!--+
	    | Wait for Axis to respond.
	    | This just check that calling happyaxis.jsp responds, not the content.
	    | It would be nice to use something like HttpUnit to check that Axis really is happy.
	    +-->
	<target name="axis.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Axis webapp ...."/>
		<echo message="URL : ${axis.url}/happyaxis.jsp"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${axis.url}/happyaxis.jsp"/>
		</waitfor>
	</target>

	<!-- ================ Cocoon 2.1 tasks ================ -->
	<!--+
	    | The following tasks build a specific version of Cocoon 2.1 from the Cocoon cvs.
	    +-->
	<!-- Checkout a specific version of the Cocoon 2.1 source from cvs --> 
	<target name="cocoon.2.1.source.fetch" depends="cocoon.init">
		<!-- Create the cocoon directory -->
		<mkdir dir="${cocoon.build}"/>
		<!-- Checkout a specific version of the Cocoon build --> 
		<cvs cvsRoot="${cocoon.cvsroot}"
		     command="checkout"
		     date="${cocoon.date}"
		     package="${cocoon.version}"
		     dest="${cocoon.build}"
		     />
	</target>

	<!-- Replace the Cocoon build.properties -->
	<target name="cocoon.2.1.build.properties" depends="cocoon.init">
		<!-- Install our own version of the build.properties -->
		<copy verbose="false" overwrite="true" toDir="${cocoon.source}">
			<fileset dir="src/cocoon">
				<include name="build.properties"/>
				<include name="blocks.properties"/>
			</fileset>
		</copy>
	</target>

	<!-- Delete the Cocoon build -->
	<target name="cocoon.2.1.delete" depends="cocoon.init">
		<delete dir="${cocoon.build}" failonerror="false"/>
	</target>

	<!-- Patch the Xerces version for the Cocoon web-app -->
	<target name="cocoon.2.1.endorsed">
		<!-- No longer required (JDK 1.4.2)
		<copy verbose="true" todir="${tomcat.home}/common/endorsed">
			<fileset dir="${cocoon.source}/lib/endorsed" includes="*.jar"/>
		</copy>
		-->
	</target>

	<!-- Re-build our Cocoon 2.1 webapp from clean -->
	<target name="cocoon.2.1.rebuild" depends="">
		<!-- Delete the Cocoon source -->
		<antcall target="cocoon.2.1.delete"/>
		<!-- Fetch the Cocoon source -->
		<antcall target="cocoon.2.1.source.fetch"/>
		<!-- Build the Cocoon webapp -->
		<antcall target="cocoon.2.1.build"/>
		<!-- Replace the Cocoon build.properties -->
		<antcall target="cocoon.2.1.build.properties"/>
		<!-- Call the build target in the Cocoon build.xml -->
		<ant antfile="build.xml" dir="${cocoon.source}" target="webapp"/>
		<!-- Add the endorsed libraries -->
		<antcall target="cocoon.2.1.endorsed"/>
	</target>

	<!-- ================ Cocoon 2.0 tasks ================ -->
	<!--+
	    | The following tasks install Cocoon 2.0 from a binary distribution.
	    +-->
	<!-- Unpack the Cocoon binary --> 
	<target name="cocoon.2.0.unzip" depends="cocoon.init">
		<!-- Create the Cocoon directory -->
		<mkdir dir="${cocoon.build}"/>
		<!-- Unpack the Cocoon tar file -->
		<unzip src="${cocoon.zip}" dest="${cocoon.build}" />
	</target>

	<!-- Unpack the Cocoon WebApp --> 
	<target name="cocoon.2.0.unwar" depends="cocoon.init">
		<!-- Create the webapp directory -->
		<mkdir dir="${cocoon.webapp}"/>
		<!-- Unpack the Cocoon war file -->
		<unwar src="${cocoon.war}" dest="${cocoon.webapp}"/>
	</target>

	<!-- Delete our Cocoon 2.0 installation -->
	<target name="cocoon.2.0.delete" depends="cocoon.init">
		<delete dir="${cocoon.build}" failonerror="false"/>
	</target>

	<!-- Re-build our Cocoon 2.0 webapp from clean -->
	<target name="cocoon.2.0.rebuild" depends="cocoon.init">
		<!-- Delete the Cocoon installation -->
		<antcall target="cocoon.2.0.delete"/>
		<!-- Unpack the Cocoon binary --> 
		<antcall target="cocoon.2.0.unzip"/>
		<!-- Unpack the Cocoon WebApp --> 
		<antcall target="cocoon.2.0.unwar"/>
		<!-- Add the endorsed libraries -->
		<!--+
		    | Not required for JDK 1.4.1
		    | Required for JDK 1.4.2
		<antcall target="cocoon.2.0.endorsed"/>
		    +-->
	</target>

	<!--+
	    | Patch the XML libraries for the Cocoon web-app
	    | This needs to be done before Tomcat is started.
	    +-->
	<target name="cocoon.2.0.endorsed" depends="cocoon.init">
		<copy verbose="false" todir="${tomcat.home}/common/endorsed">
			<fileset dir="${cocoon.webapp}/WEB-INF/lib">
				<include name="xalan-2.3.1.jar"/>
				<include name="xercesImpl-2.0.0.jar"/>
				<include name="xml-apis.jar"/>
				<include name="xmldb-api-20011111.jar"/>
			</fileset>
		</copy>
	</target>

	<!-- ================ Cocoon tasks ================ -->
	<!-- Install our Cocoon web-app -->
	<target name="cocoon.webapp.install" depends="tomcat.tasks, cocoon.init">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our web-app -->
		<echo message=""/>
		<echo message="Installing Cocoon ...."/>
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/cocoon" war="file://${basedir}/${cocoon.webapp}"/>
	</target>

	<!-- Start the Cocoon web-app -->
	<target name="cocoon.webapp.start" depends="tomcat.tasks, cocoon.init">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Start our web-app -->
		<tomcat.start username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/cocoon"/>
	</target>

	<!-- Stop the Cocoon web-app -->
	<target name="cocoon.webapp.stop" depends="tomcat.tasks, cocoon.init">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Stop our web-app -->
		<tomcat.stop username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/cocoon"/>
	</target>

	<!-- Reload the Cocoon web-app -->
	<target name="cocoon.webapp.reload" depends="tomcat.tasks, cocoon.init">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Reload our web-app -->
		<tomcat.reload username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/cocoon"/>
	</target>

	<!-- Remove the Cocoon web-app -->
	<target name="cocoon.webapp.remove" depends="tomcat.tasks, cocoon.init">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Remove our web-app -->
		<tomcat.remove username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/cocoon"/>
	</target>

	<!-- Patch the main sitemap with our matcher -->
	<target name="cocoon.sitemap.patch" depends="cocoon.init">
		<!-- Move the existing sitemap to backup xml file -->
		<move file="${cocoon.webapp}/sitemap.xmap" tofile="${cocoon.webapp}/sitemap.xml" overwrite="true"/>
		<!-- Apply our xslt transform -->
		<xslt style="src/cocoon/sitemap.xslt"
		      in="${cocoon.webapp}/sitemap.xml"
		      out="${cocoon.webapp}/sitemap.xmap">
			<outputproperty name="method" value="xml"/>
			<outputproperty name="indent" value="yes"/>
			<!-- Pass in the location of the astrogrid sitemap -->
			<param name="sitemap" expression="${site.cocoon}/sitemap.xmap"/>
		</xslt>
	</target>

	<!-- Wait for Cocoon to respond -->
	<target name="cocoon.wait" depends="">
		<echo message="Waiting for Cocoon ...."/>
		<echo message="URL : ${tomcat.url}/cocoon/"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.url}/cocoon/"/>
		</waitfor>
	</target>

	<!-- Clean the Cocoon logs -->
	<target name="cocoon.clean" depends="cocoon.init">
		<echo message=""/>
		<echo message="Cleaning Cocoon log files ...."/>
		<delete failonerror="false">
			<fileset dir="${cocoon.webapp}/WEB-INF/logs" includes="*"/>
		</delete>
	</target>

	<!-- Deploy our cocoon site -->
	<target name="cocoon.site.deploy" depends="cocoon.init">
		<!-- Copy our site files -->
		<copy verbose="false" toDir="${site.cocoon}">
			<fileset dir="src/cocoon">
				<exclude name="**/CVS/**"/>
				<exclude name="build.properties"/>
				<exclude name="blocks.properties"/>
				<exclude name="sitemap.xslt"/>
			</fileset>
		</copy>
		<!-- Copy our portal jar -->
		<copy verbose="false" toDir="${cocoon.webapp}/WEB-INF/lib">
			<fileset dir="${portal.build}/lib">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<!--+
		    | Copy the Axis client jars.
		    | FIXME : We probably don't need ALL of these,
		    | need to check which ones we really do need to run the client stubs.
		    +-->
		<copy verbose="false" toDir="${cocoon.webapp}/WEB-INF/lib">
			<fileset dir="${axis.webapp}/WEB-INF/lib">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
	</target>

	<!-- Install our Cocoon site -->
	<target name="cocoon.INSTALL" depends="init">
		<!-- Deploy our Cocoon site -->
		<antcall target="cocoon.site.deploy"/>
		<!-- Add our site to the sitemap -->
		<antcall target="cocoon.sitemap.patch"/>
		<!-- Install our Cocoon WebApp -->
		<antcall target="cocoon.webapp.install"/>
	</target>

	<!-- ================ Site tasks ================ -->
	<!-- Deploy our project site -->
	<target name="site.deploy" depends="">
		<!-- Create our WebApp directories -->
		<mkdir dir="${site.webapp}"/>
		<mkdir dir="${site.webapp}/WEB-INF"/>
		<mkdir dir="${site.webapp}/WEB-INF/lib"/>
		<!-- Copy our site files -->
		<copy verbose="false" toDir="${site.webapp}">
			<fileset dir="${site.src}">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
		<!-- Copy our portal jar -->
		<copy verbose="false" toDir="${site.webapp}/WEB-INF/lib">
			<fileset dir="${portal.build}/lib">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<!--+
		    | Copy the Axis client jars.
		    | FIXME : We probably don't need ALL of these,
		    | need to check which ones we really do need to run the client stubs.
		    +-->
		<copy verbose="false" toDir="${site.webapp}/WEB-INF/lib">
			<fileset dir="${axis.webapp}/WEB-INF/lib">
				<include name="axis.jar"/>
				<include name="axis-ant.jar"/>
				<include name="commons-discovery.jar"/>
				<include name="commons-logging.jar"/>
				<include name="jaxrpc.jar"/>
				<include name="saaj.jar"/>
				<include name="wsdl4j.jar"/>
			</fileset>
		</copy>
	</target>

	<!-- Delete our project site -->
	<target name="site.delete" depends="">
		<delete dir="${site.build}" failonerror="false"/>
	</target>

	<!-- Install our site WebApp -->
	<target name="site.install" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our web-app -->
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/astrogrid" war="file://${site.webapp}"/>
	</target>

	<!-- Wait for our site to respond -->
	<target name="site.wait" depends="">
		<echo message="Waiting for portal Site ...."/>
		<echo message="URL : ${tomcat.url}/astrogrid/"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.url}/astrogrid/"/>
		</waitfor>
	</target>

	<!-- Rebuild our project site -->
	<target name="site.REBUILD" depends="">
		<!-- Delete our project site -->
		<antcall target="site.delete"/>
		<!-- Deploy our project site -->
		<antcall target="site.deploy"/>
		<!-- Install our our project WebApp -->
		<antcall target="site.install"/>
	</target>

	<!-- ================ Mock MySpace WebService tasks ================ -->
	<!--+
	    | These tasks build a mockup of the MySpace WebService.
	    | This was used as an initial starting point for the project.
	    | Note : The mock service does not have the same API as the real service.
	    | The main project classes have now been re-designed to work with the real MySpace service.
	    | As a result, the main project classes will no longer connect to the mock service.
	    | At some point, the code for the mock sevice will be removed from the project.
	    +-->
	<!-- Delete the server code for our mock MySpace service -->
	<target name="myspace.mock.service.delete" depends="">
		<delete failonerror="false" dir="build/myspace/mock/service"/>
	</target>

	<!--+
	    | Build the server side Java for the mock MySpace service
	    | This compiles the server side classes for the mock MySpace service.
	    | These classes then need to be installed into Axis as a WebService.
	    +-->
	<target name="myspace.mock.service.javac" depends="" description="Compile our mock MySpace service">
		<!-- Create our build directories -->
		<mkdir dir="build/myspace/mock/service/java"/>
		<mkdir dir="build/myspace/mock/service/classes"/>
		<!-- Copy the server side source code -->
		<copy verbose="false" todir="build/myspace/mock/service/java">
			<fileset dir="src/java">
				<include name="**/mock/myspace/service/**/*.java"/>
			</fileset>
		</copy>
		<!-- Compile the server side components -->
		<javac srcdir="build/myspace/mock/service/java"
		       destdir="build/myspace/mock/service/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<classpath>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
			</classpath>
		</javac>
	</target>

	<!--+
	    | Test the server side Java for the mock MySpace service
	    | This tests the public API of the mock MySpace service.
	    | It runs the off-line JUnit tests on the mock MySpace classes (outside Axis).
	    +-->
	<target name="myspace.mock.service.junit" depends="" description="Run our MySpace JUnit tests">
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/mock/service/junit"/>
		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our mock MySpace service classes -->
				<pathelement path="build/myspace/mock/service/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/mock/service/junit">
				<fileset dir="build/myspace/mock/service/classes">
					<include name="**/junit/**/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Deploy the server side components for our mock MySpace service
	    | This uses the Axis admin service to deploy the mock MySpace service.
	    | This only works if Axis is running on localhost.
	    +-->
	<target name="myspace.mock.service.install" depends="axis.tasks">
		<!-- Create our wsdd directory -->
		<mkdir dir="build/myspace/mock/service/wsdd"/>
		<!-- Copy our deployment descriptors -->
		<copy verbose="false" todir="build/myspace/mock/service/wsdd">
			<fileset dir="src/java/org/astrogrid/portal/mock/myspace/service">
				<include name="*.wsdd" />
			</fileset>
		</copy>
		<!-- Copy our classes into the Axis WEB-INF/classes directory -->
		<copy verbose="false" todir="${axis.webapp}/WEB-INF/classes">
			<fileset dir="build/myspace/mock/service/classes">
				<include name="**/*.class"/>
			</fileset>
		</copy>
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Deploy our WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="build/myspace/mock/service/wsdd/deploy.wsdd"
			/>
	</target>

	<!-- Remove our mock MySpace test services --> 
	<target name="myspace.mock.service.remove" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Remove our WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="build/myspace/service/wsdd/undeploy.wsdd"
			/>
		<!-- Tidy up any class files -->
		<delete failonerror="false">
			<fileset dir="${axis.webapp}/WEB-INF/classes">
				<include name="**/mock/myspace/*.*"/>
			</fileset>
		</delete>
	</target>

	<!--+
	    | Rebuild our mock MySpace service
	    | This re-builds the mock MySpace service from clean and then deploys it as a WebService in Axis.
	    +-->
	<target name="myspace.mock.service.REBUILD" depends="">
		<!-- Remove the server build files -->
		<antcall target="myspace.mock.service.delete"/>
		<!-- Compile the server side code -->
		<antcall target="myspace.mock.service.javac"/>
		<!-- Test the server side code -->
		<antcall target="myspace.mock.service.junit"/>
		<!-- Install the server side code -->
		<antcall target="myspace.mock.service.install"/>
	</target>

	<!-- Delete the client code for our mock MySpace service -->
	<target name="myspace.mock.client.delete" depends="">
		<delete failonerror="false" dir="build/myspace/mock/client"/>
	</target>

	<!--+
	    | Generate the client stubs for our MySpace service.
	    | This uses the Axis Wsdl2Java tool to generate the client stubs.
	    | I've tested it with the mock MySpace service.
	    | In theory, change the ${axis.url} property to point to the live server,
	    | and it should generate the stubs for a live service as well.
	    +-->
	<target name="myspace.mock.client.wsdl2java" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating client stubs from WSDL ...."/>
		<echo message="URL : ${axis.url}/services/myspace"/>
		<!-- Create our client directory -->
		<mkdir dir="build/myspace/mock/client/java"/>
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Generate our client stubs -->
		<axis.wsdl2java
			verbose="true"
			output="build/myspace/mock/client/java"
			url="${axis.url}/services/myspace?wsdl"
			>
			<mapping namespace="${axis.url}/services/myspace" package="org.astrogrid.portal.mock.myspace.client"/>
			<mapping namespace="http://service.myspace.mock.portal.astrogrid.org" package="org.astrogrid.portal.mock.myspace.client"/>
		</axis.wsdl2java>
	</target>

	<!--+
	    | Compile the client side Java for our mock MySpace service
	    | This compiles the stub classes genereated from the Axis Wsdl2Java tool
	    | along with our client side code which uses them.
	    +-->
	<target name="myspace.mock.client.javac" depends="">
		<!-- Create our classes directory -->
		<mkdir dir="build/myspace/mock/client/classes"/>
		<!-- Copy our client java code -->
		<copy verbose="false" todir="build/myspace/mock/client/java">
			<fileset dir="src/java">
				<include name="**/mock/myspace/client/**/*.*"/>
			</fileset>
		</copy>
		<!-- Compile our client code -->
		<javac srcdir="build/myspace/mock/client/java"
		       destdir="build/myspace/mock/client/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<classpath>
				<path refid="axis.classpath"/>
				<path refid="junit.classpath"/>
			</classpath>
		</javac>
	</target>

	<!--+
	    | Run the client side JUnit tests for our MySpace service
	    | This runs the JUnit tests on the client side interface of the MySpace service.
	    +-->
	<target name="myspace.mock.client.junit" depends="myspace.mock.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/mock/client/junit"/>
		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/mock/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- The Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/mock/client/junit">
				<fileset dir="build/myspace/mock/client/classes">
					<include name="**/junit/**/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Rebuild our mock MySpace client code.
	    | This re-builds the MySpace client code from clean.
	    | It uses the Wsdl2Java task to re-genereta the client stubs from the MySpace WebService.
	    | So it needs to have the the MySpace service installed and running in Axis.
	    +-->
	<target name="myspace.mock.client.REBUILD" depends="">
		<!-- Delete any existing client code -->
		<antcall target="myspace.mock.client.delete"/>
		<!-- Build the client side stubs -->
		<antcall target="myspace.mock.client.wsdl2java"/>
		<!-- Compile the client side java -->
		<antcall target="myspace.mock.client.javac"/>
		<!-- Test the client side code (online) -->
		<antcall target="myspace.mock.client.junit"/>
	</target>

	<!-- ================ Portal Java tasks ================ -->
	<!-- Clean our Java build -->
	<target name="portal.delete" depends="" description="Delete our java classes">
		<delete dir="${portal.build}" failonerror="false"/>
	</target>

	<!--+
	    | Compile our portal source code.
	    | Needs to know where the Axis libraries are.
	    | Needs to know where the Cocoon libraries are.
	    +-->
	<target name="portal.javac" depends="cocoon.init" description="Compile our Java classes">
		<!-- Create our java source directory -->
		<mkdir dir="${portal.build}/java"/>
		<!-- Copy our java source code -->
		<copy toDir="${portal.build}/java">
			<fileset dir="src/java">
				<!-- Exclude any live service classes 	
				<exclude name="**/services/**"/>
				-->
				<exclude name="**/junit/**"/>
				<!-- Exclude any mock service classes -->
				<exclude name="**/mock/**"/>
				<!--+
				    | Exclude the generated classes. 
                        | Using the generated stubd can cause conflicts depending on the Axis version used to generate them.
                        | Now standardised on Axis 1.0, so no need to exclude them.
				    | <exclude name="**/generated/**"/>
				    +-->
			</fileset>
		</copy>
		<!-- Create our java classes directory -->
		<mkdir dir="${portal.build}/classes"/>
		<!-- Compile our java classes -->
		<javac srcdir="${portal.build}/java"
		       destdir="${portal.build}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<classpath>
				<!-- Our mock MySpace client classes -->
				<!-- DEPRECATED, causes conflicts with the live classes
				<pathelement path="build/myspace/mock/client/classes"/>
				-->
				<!-- Our live MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- Our Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- Our Cocoon libraries -->
				<path refid="cocoon.classpath"/>
				
				<path refid="plugins.classpath"/>
				
				<path refid="jconfig.classpath"/>
				
				<path refid="community.classpath" />
				<!-- Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
			</classpath>
		</javac>
	</target>
	
    <!-- Copy our java property files -->
    <target name="portal.properties" description="Copy our property files.">
        <copy toDir="${portal.build}/classes">
            <fileset dir="src/java">
                <!-- Include our query properties -->
                <include name="**/query/*.properties"/>
            </fileset>
        </copy>
    </target>	

	<!-- Document our source code -->
	<target name="portal.javadoc" depends="" description="Build our JavaDoc documentation">
		<mkdir dir="build/doc/api"/>
		<javadoc sourcepath="src/java"
		         destdir="build/doc/api"
		         private="true"
		         version="true"
		         use="true">
			<fileset dir="src/java">
				<include name="**/**"/>
			</fileset>
		</javadoc>
	</target>

	<!--+
	    | Run our static (off-line) JUnit tests.
	    +-->
	<target name="portal.junit" depends="init, portal.javac" description="Run our JUnit tests">
		<!-- Create the reports directory -->
		<mkdir dir="${portal.build}/junit"/>

		<!-- Copy the test data for the xml parser -->
		<copy toDir="build/portal/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/util/xml/sax/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<classpath>
				<!-- Our Portal classes -->
				<pathelement path="build/portal/classes"/>
				<!-- Our mock MySpace client classes -->
				<!--
				<pathelement path="build/myspace/mock/client/classes"/>
				-->
				<!-- Our live MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- The Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="${portal.build}/junit">
				<fileset dir="${portal.build}/classes">
					<include name="**/junit/**/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- Build our jar file -->
	<target name="portal.jar" depends="portal.javac" description="Build our portal jar file">
		<mkdir dir="${portal.build}/lib"/>
		<jar jarfile="${portal.build}/lib/${project.name}-${project.version}.jar">
			<!-- FIXME : Fails if docs are not there ...
			<zipfileset prefix="doc" dir="build/doc"/>
			-->
			<!-- Include our portal classes -->
			<zipfileset prefix="" dir="${portal.build}/classes"/>
			<!-- Include our mock myspace client stubs -->
			<!--
			<zipfileset prefix="" dir="build/myspace/mock/client/classes"/>
			-->
			<!-- Include our mock myspace client stubs
				<zipfileset prefix="" dir="build/myspace/live/client/classes"/>
			-->
		</jar>
	</target>

	<!--+
	    | Deploy our jar file.
	    | FIXME : Deprecated, should use site.deploy instead.
	    | This deploys our project jar into the site WebApp directory, which is then deleted when we re-build our site.
	    | Better to leave our project jar where it is, and use the site.deploy to copy it into the new site WebApp directory.
	    +-->
	<target name="portal.deploy" depends="" description="Deploy our jar file">
		<copy verbose="false" toDir="${site.webapp}/WEB-INF/lib">
			<fileset dir="${portal.build}/lib">
				<include name="**.jar"/>
			</fileset>
		</copy>
	</target>

	<!-- Build our portal java code -->
	<target name="portal.BUILD" depends="init">
		<!-- Compile our portal components -->
		<antcall target="portal.javac"/>
		
        <!-- Copy our portal property files -->
        <antcall target="portal.properties"/>
        		
		<!-- Test our portal components
		<antcall target="portal.junit"/>
		-->
		<!-- Build our portal jar -->
		<antcall target="portal.jar"/>
		<!--+
		    | Deploy our portal jar file
		    | FIXME : Deprecated, should use site.deploy instead
		<antcall target="portal.deploy"/>
		    +-->
	</target>

	<!-- Rebuild our portal java code -->
	<target name="portal.REBUILD" depends="init">
		<!-- Delete our portal components -->
		<antcall target="portal.delete"/>
		<!-- Build our portal components -->
		<antcall target="portal.BUILD"/>
	</target>

	<!-- ================ Live MySpace tasks ================ -->
	<!--+
	    | These tasks install and configure the client and server components for the real MySpace service.
	    | At the moment, these tasks just use a binary jar in our depends directory, collected from the MySpace project.
	    | At some point, these need to be updated to use the original source code foe the MySpace service from cvs.
	    +-->
	<!-- Compile server side classes for the MySpace service -->
	<target name="MYSPACE.service.javac" depends="">
		<!--+
		    | There isn't anything to de here yet.
		    | At some point we might integrate this with the build script for the MySPace service.
		    +-->
	</target>

	<!-- Unpack the local copy of the MySpace service -->
	<target name="MYSPACE.service.unjar" depends="">
		<!-- Unpack the classes into the Axis WEB-INF/classes directory -->
		<unjar src="depends/services/myspace/mySpace.jar" dest="${axis.webapp}/WEB-INF/classes">
			<patternset>
				<include name="**/*.class"/>
				<include name="**/*.properties"/>
			</patternset>
		</unjar>
		<!-- Create our wsdd directory -->
		<mkdir dir="build/myspace/live/service/wsdd"/>
		<!-- Unpack the wsdd files into our build directory -->
		<unjar src="depends/services/myspace/mySpace.jar" dest="build/myspace/live/service/wsdd">
			<patternset>
				<include name="*.wsdd"/>
			</patternset>
		</unjar>
	</target>

	<!--+
	    | Install the config files for the MySpace service.
	    | The MySpaceManager looks for its configuration file in a hard coded location.
	    | ${catalina.home}/conf/astrogrid/mySpace/....
	    +-->
	<target name="MYSPACE.service.config" depends="">
		<echo message=""/>
		<echo message="Configuring MySpaceManager ...."/>
		<!-- Create the conf, temp and data directories -->
		<mkdir dir="build/myspace/live/service/conf"/>
		<mkdir dir="build/myspace/live/service/temp"/>
		<mkdir dir="build/myspace/live/service/data"/>

		<!-- Copy the config files into our build directory  -->
		<copy verbose="true" todir="build/myspace/live/service/conf">
			<fileset dir="depends/services/myspace/conf">
				<!-- All the files -->
				<include name="*.*"/>
			</fileset>
		</copy>

		<!-- Modify the properties in statuscodes to fit our local settings -->
		<propertyfile file="build/myspace/live/service/conf/statuscodes.lis">
			<entry  key="REGISTRYCONF"   type="string" value="${tomcat.home}/conf/astrogrid/mySpace/example"/>
			<entry  key="TEMPPATHTO"     type="string" value="${basedir}/build/myspace/live/service/temp/"/>
			<entry  key="MYSPACEMANAGER" type="string" value="${axis.url}/services/MySpaceManager"/>
			<entry  key="SERVERMANAGER"  type="string" value="${axis.url}/services/ServerManager"/>
		</propertyfile>

		<!-- Create the Tomcat conf directory -->
		<mkdir dir="${tomcat.home}/conf/astrogrid/mySpace"/>
		<!-- Copy our modified config files into the Tomcat conf directory -->
		<copy verbose="true" todir="${tomcat.home}/conf/astrogrid/mySpace/">
			<fileset dir="build/myspace/live/service/conf">
				<!-- All the files -->
				<include name="*.*"/>
			</fileset>
		</copy>

		<!--+
		    | Copy the log4j properties into the Axis WebApp
		    | For this to be picked up you need to have deleted the existing log4j.properties in the Axis jar.
		    | FIXME : Need to add something to the Axis unjar task to delete the log4j.properties !!
		<copy verbose="true" file="depends/services/myspace/conf/log4j.properties" toFile="${axis.webapp}/WEB-INF/classes/log4j.properties"/>
		    +-->

	</target>

	<!--+
	    | Install a known set of data files for the MySpace service.
	    +-->
	<target name="MYSPACE.service.data" depends="">
		<echo message=""/>
		<echo message="Loading MySpaceManager data ...."/>

		<!-- Create the data directory  -->
		<mkdir dir="build/myspace/live/service/temp"/>
		<!-- Copy the data files  -->
		<copy overwrite="true" verbose="true" todir="build/myspace/live/service/temp">
			<fileset dir="depends/services/myspace/${myspace.data}">
				<!-- All the data files -->
				<include name="*"/>
				<!-- Not the registyr files -->
				<exclude name="*.reg"/>
			</fileset>
		</copy>

		<!-- Create the Tomcat conf directory -->
		<mkdir dir="${tomcat.home}/conf/astrogrid/mySpace"/>
		<!-- Copy our registry file -->
		<copy overwrite="true" verbose="true" todir="${tomcat.home}/conf/astrogrid/mySpace/">
			<fileset dir="depends/services/myspace/${myspace.data}">
				<!-- Just the registry file -->
				<include name="*.reg"/>
			</fileset>
		</copy>

	</target>

	<!--+
	    | Grab the current data files from a live MySpace
	    +-->
	<target name="MYSPACE.service.snapshot" depends="">
		<echo message=""/>
		<echo message="Copying MySpaceManager data ...."/>
		<!-- Copy the data files  -->
		<copy overwrite="true" verbose="true" todir="depends/services/myspace/${myspace.data}">
			<fileset dir="build/myspace/live/service/temp">
				<!-- All the data files -->
				<include name="*"/>
			</fileset>
		</copy>
		<!-- Copy the registry file -->
		<copy overwrite="true" verbose="true" todir="depends/services/myspace/${myspace.data}">
			<fileset dir="${tomcat.home}/conf/astrogrid/mySpace/">
				<!-- Just the registry file -->
				<include name="*.reg"/>
			</fileset>
		</copy>
	</target>

	<!--+
	    | Patch the Axis jar to remove the default log4j properties.
	    +-->
	<target name="MYSPACE.service.axis.patch" depends="">
		<!-- Remove the Axis WebApp -->
		<!-- Copy the Axis jar into our build directory -->
		<!-- Unpack the jar -->
		<!-- Remove the log4j properties -->
		<!-- Repack the jar -->
		<!-- Copy the jar back into the Axis WebApp -->
		<!-- Install the Axis WebApp -->
	</target>

	<!-- Delete the local copy of the MySpace service -->
	<target name="MYSPACE.service.delete" depends="">
		<!-- Delete our class files -->
		<delete verbose="false" failonerror="false">
			<fileset dir="${axis.webapp}/WEB-INF/classes">
				<include name="org/astrogrid/mySpace/**"/>
			</fileset>
		</delete>
		<!-- Delete our build files -->
		<delete verbose="false" failonerror="false" dir="build/myspace/live/service"/>
		<!-- Delete our Tomcat config files -->
		<delete verbose="false" failonerror="false" dir="${tomcat.home}/conf/astrogrid"/>
		<!-- Delete our log4j properties -->
		<delete verbose="false" failonerror="false" dir="${axis.webapp}/WEB-INF/classes/log4j.properties"/>
	</target>

	<!--+
	    | Deploy a local copy of the MySpace service
	    | This task uses the local ${axis.port} and ${axis.host} rather than the ${myspace.server}.
	    | This means that even if ${myspace.server} has been modifed to use an external server,
	    | this task won't try to install a service on the external server.
	    +-->
	<target name="MYSPACE.service.install" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Deploy the MySpaceManager WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="build/myspace/live/service/wsdd/deploy-msManager.wsdd"
			>
		</axis.admin>
		<!-- Deploy the MySpaceServer WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="build/myspace/live/service/wsdd/deploy-msServer.wsdd"
			/>
	</target>

	<!--+
	    | Remove the local copy of the MySpace service
	    | This task uses the local ${axis.port} and ${axis.host} rather than the ${myspace.server}.
	    | This means that even if ${myspace.server} has been modifed to use an external server,
	    | this task won't try to remove a service on the external server.
	    +-->
	<target name="MYSPACE.service.remove" depends="axis.tasks">
		<!-- Remove the MySpaceManager WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="build/myspace/live/service/wsdd/undeploy-msManager.wsdd"
			/>
		<!-- Remove the MySpaceServer WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="build/myspace/live/service/wsdd/undeploy-msServer.wsdd"
			/>
	</target>

	<!--+
	    | Wait for Axis on the MySpace server to respond.
	    | This task uses ${myspace.server} rather than ${axis.url} for the url to wait for.
	    | For a local service, this is the same as axis.wait.
	    | However, ${myspace.server} may point to a MySpace service running on an external server.
	    +-->
	<target name="MYSPACE.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Axis webapp ...."/>
		<echo message="URL : ${myspace.server}/axis/happyaxis.jsp"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${myspace.server}/axis/happyaxis.jsp"/>
		</waitfor>
	</target>

	<!--+
	    | Generate the client stubs from the MySpace service.
	    | This uses the Axis Wsdl2Java tool to generate the client stubs.
	    +-->
	<target name="MYSPACE.client.wsdl2java" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating client stubs from WSDL ...."/>
		<echo message="URL : ${myspace.server}/axis/services/MySpaceManager"/>
		<!-- Create our client directory -->
		<mkdir dir="build/myspace/live/client/java"/>
		<!-- Wait for the Axis service -->
		<antcall target="MYSPACE.wait"/>
		<!-- Generate our client stubs -->
		<axis.wsdl2java
			verbose="true"
			output="build/myspace/live/client/java"
			url="${myspace.server}/axis/services/MySpaceManager?wsdl"
			>
			<mapping namespace="${myspace.server}/axis/services/MySpaceManager"   package="org.astrogrid.portal.services.myspace.client"/>
			<mapping namespace="http://service.myspace.mock.portal.astrogrid.org" package="org.astrogrid.portal.services.myspace.client"/>
		</axis.wsdl2java>
	</target>

	<!--+
	    | Compile the client side Java for our MySpace service
	    | This compiles the stub classes genereated from the Axis Wsdl2Java tool
	    | along with our client side tests.
	    +-->
	<target name="MYSPACE.client.javac" depends="">
		<!-- Create our classes directory -->
		<mkdir dir="build/myspace/live/client/classes"/>
		<!-- Copy our client java code -->
		<copy verbose="false" todir="build/myspace/live/client/java">
			<fileset dir="src/java">
				<!-- Our XML utils -->
				<include name="**/util/xml/sax/**"/>
				<!-- Our client stubs -->
				<include name="**/services/myspace/client/**"/>
			</fileset>
		</copy>
		<!-- Compile our client code -->
		<javac srcdir="build/myspace/live/client/java"
		       destdir="build/myspace/live/client/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<classpath>
				<path refid="axis.classpath"/>
				<path refid="junit.classpath"/>
			</classpath>
		</javac>
	</target>

	<!--+
	    | Run the client side JUnit tests for our MySpace service
	    | This runs the JUnit tests on the client side interface for the MySpace service.
	    | WARNING : At the moment, the live MySpace service is not stable enough to survive this.
	    | If you make the WebService calls in the wrong order, the service corrupts it's registry file and returns null for everything.
	    +-->
	<target name="MYSPACE.client.junit" depends="MYSPACE.client.javac">
		<!-- Wait for the MySpace service -->
		<antcall target="MYSPACE.wait"/>

		<!-- Copy the test data for the xml parsers -->
		<copy verbose="true" toDir="build/myspace/live/client/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/myspace/client/**/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/live/client/junit"/>
		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/live/client/junit">
				<fileset dir="build/myspace/live/client/classes">
					<include name="**/myspace/client/**/junit/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Delete any existing files for the MySpace client.
	    +-->
	<target name="MYSPACE.client.delete" depends="">
		<delete failonerror="false" dir="build/myspace/live/client"/>
	</target>

	<!--+
	    | Build and run our test MySpace service ...
	    +-->
	<target name="MYSPACE.SERVICE" depends="">
		<!-- Delete any existing server files -->
		<antcall target="MYSPACE.service.delete"/>
		<!-- Unpack the binary dist -->
		<antcall target="MYSPACE.service.unjar"/>
		<!-- Patch the config -->
		<antcall target="MYSPACE.service.config"/>
		<!-- Install a known dataset -->
		<antcall target="MYSPACE.service.data"/>
		<!-- Install the WebService -->
		<antcall target="MYSPACE.service.install"/>
	</target>

	<!--+
	    | Reset the local MySpace service.
	    | At the moment some of the JUnit tests corrupt the server data files.
	    | When this happens, it is easier to remove and re-install the service.
	    | If Tomcat is just running the MySpace WebService, then stopping and starting Tomcat works.
	    | However, as our portal code is running in the same Tomcat instance, this would loose all of our portal session data.
	    | This task removes the MySpace WebService and re-installs it from clean.
	    +-->
	<target name="MYSPACE.RESET" depends="">
		<!-- Remove the MySpace service -->
		<antcall target="MYSPACE.service.remove"/>
		<!-- Reload the Axis WebApp -->
		<antcall target="axis.webapp.reload"/>
		<!-- Delete any existing server files -->
		<antcall target="MYSPACE.service.delete"/>
		<!-- Unpack the binary dist -->
		<antcall target="MYSPACE.service.unjar"/>
		<!-- Patch the config -->
		<antcall target="MYSPACE.service.config"/>
		<!-- Install a known dataset -->
		<antcall target="MYSPACE.service.data"/>
		<!-- Install the WebService -->
		<antcall target="MYSPACE.service.install"/>
	</target>

	<!--+
	    | Build and run our test MySpace client ...
	    +-->
	<target name="MYSPACE.CLIENT" depends="">
		<!-- Delete any existing client files -->
		<antcall target="MYSPACE.client.delete"/>
		<!-- Generate the client stubs -->
		<antcall target="MYSPACE.client.wsdl2java"/>
		<!-- Compile the client stubs -->
		<antcall target="MYSPACE.client.javac"/>
		<!--+
		    | Test the client stubs
		    | WARNING : At the moment, running all of the tests in one batch is likely to break the MySpace service.
		    | I'm working on a 'nice' set of tests which will treat the MySpace service gently.
		    | In the mean time, it is better to run the tests one at a time by hand.
		<antcall target="MYSPACE.client.junit"/>
		    +-->
	</target>

	<!--+
	    | Run a lookup query for '*'.
	    | This test may break the MySpace service if the selected path is not already in the registry.
	    +-->
	<target name="MYSPACE.client.junit.lookup" depends="MYSPACE.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="MYSPACE.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/live/client/junit"/>

		<!-- Copy the test data for the xml parsers -->
		<copy verbose="true" toDir="build/myspace/live/client/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/myspace/client/**/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- The Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/live/client/junit">
				<fileset dir="build/myspace/live/client/classes">
					<include name="**/myspace/client/actions/lookup/junit/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Run a lookup query for a specific item.
	    | This test may break the MySpace service if the data item is not already in the registry.
	    +-->
	<target name="MYSPACE.client.junit.details" depends="MYSPACE.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="MYSPACE.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/live/client/junit"/>

		<!-- Copy the test data for the xml parsers -->
		<copy verbose="true" toDir="build/myspace/live/client/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/myspace/client/**/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- The Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/live/client/junit">
				<fileset dir="build/myspace/live/client/classes">
					<include name="**/myspace/client/actions/details/junit/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Copy an item in the registry.
	    | This test may break the MySpace service if the source item is not already in the registry.
	    | This test may break the MySpace service if the source and destination are the same.
	    | This test may break the MySpace service if the destination path is not in the registry.
	    +-->
	<target name="MYSPACE.client.junit.copy" depends="MYSPACE.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="MYSPACE.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/live/client/junit"/>

		<!-- Copy the test data for the xml parsers -->
		<copy verbose="true" toDir="build/myspace/live/client/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/myspace/client/**/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- The Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/live/client/junit">
				<fileset dir="build/myspace/live/client/classes">
					<include name="**/myspace/client/actions/copy/junit/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Move an item in the registry.
	    | This test may break the MySpace service if the source item is not already in the registry.
	    | This test may break the MySpace service if the source and destination are the same.
	    | This test may break the MySpace service if the destination path is not in the registry.
	    +-->
	<target name="MYSPACE.client.junit.move" depends="MYSPACE.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="MYSPACE.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/live/client/junit"/>

		<!-- Copy the test data for the xml parsers -->
		<copy verbose="true" toDir="build/myspace/live/client/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/myspace/client/**/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- The Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/live/client/junit">
				<fileset dir="build/myspace/live/client/classes">
					<include name="**/myspace/client/actions/move/junit/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Upload an item into the registry.
	    | This is untested ....
	    +-->
	<target name="MYSPACE.client.junit.upload" depends="MYSPACE.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="MYSPACE.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/live/client/junit"/>

		<!-- Copy the test data for the xml parsers -->
		<copy verbose="true" toDir="build/myspace/live/client/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/myspace/client/**/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- The Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/live/client/junit">
				<fileset dir="build/myspace/live/client/classes">
					<include name="**/myspace/client/actions/upload/junit/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Delete an item from the registry.
	    | This test may break the MySpace service if the item does not exist.
	    | This test may break the MySpace service if the path refers to a container.
	    +-->
	<target name="MYSPACE.client.junit.delete" depends="MYSPACE.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="MYSPACE.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/live/client/junit"/>

		<!-- Copy the test data for the xml parsers -->
		<copy verbose="true" toDir="build/myspace/live/client/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/myspace/client/**/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- The Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/live/client/junit">
				<fileset dir="build/myspace/live/client/classes">
					<include name="**/myspace/client/actions/delete/junit/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>


	<!--+
	    | Export an item from the registry.
	    +-->
	<target name="MYSPACE.client.junit.export" depends="MYSPACE.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="MYSPACE.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/live/client/junit"/>

		<!-- Copy the test data for the xml parsers -->
		<copy verbose="true" toDir="build/myspace/live/client/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/myspace/client/**/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- The Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/live/client/junit">
				<fileset dir="build/myspace/live/client/classes">
					<include name="**/myspace/client/actions/export/junit/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Create a container in the registry.
	    | This test may break the MySpace service if there is already something with the same name.
	    +-->
	<target name="MYSPACE.client.junit.create" depends="MYSPACE.client.javac">
		<!-- Wait for the Axis service -->
		<antcall target="MYSPACE.wait"/>
		<!-- Create the reports directory -->
		<mkdir dir="build/myspace/live/client/junit"/>

		<!-- Copy the test data for the xml parsers -->
		<copy verbose="true" toDir="build/myspace/live/client/classes">
			<fileset dir="src/java">
				<!-- Include the XML test data -->
				<include name="**/myspace/client/**/junit/*.xml"/>
			</fileset>
		</copy>

		<!-- Run the JUnit tests -->
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes" fork="true">
			<!-- Use our local classes -->
			<classpath>
				<!-- Our MySpace client classes -->
				<pathelement path="build/myspace/live/client/classes"/>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- The JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- The Ant libraries (required since JDK 1.4.2) -->
				<path refid="ant.classpath"/>
				<!-- Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.servlet.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run our JUnit tests -->
			<batchtest todir="build/myspace/live/client/junit">
				<fileset dir="build/myspace/live/client/classes">
					<include name="**/myspace/client/actions/create/junit/JUnitTestCase.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>


	<!-- ================ Project tasks ================ -->
	<!--+
	    | Build all of our project components.
	    | Needs Tomcat already running.
	    | Needs Axis installed and running.
	    +-->
	<target name="project.BUILD" depends="init, tomcat.tasks">
		<!--+
		    | Rebuild our mock MySpace service
		    | This re-builds the mock MySpace service from clean and then deploys it as a WebService in Axis.
		    | Deprecated : Client code is no longer configured to use the mock service.
		<antcall target="myspace.mock.service.REBUILD"/>
		    +-->

		<!--+
		    | Rebuild our mock MySpace client code.
		    | This re-builds the MySpace client code from clean.
		    | It uses the Wsdl2Java task to re-genereta the client stubs from the MySpace WebService.
		    | So it needs to have the the MySpace service installed and running in Axis.
		    | Deprecated : Client code is no longer configured to use the mock service.
		<antcall target="myspace.mock.client.REBUILD"/>
		    +-->

		<!--+
		    | Rebuild our local MySpace service.
		    | This re-builds a local MySpace service from clean.
		    | FIXME : ONLY RUN THIS IF THE MYSPACE SERVICE IS ON LOCALHOST
		    +-->
		<antcall target="MYSPACE.SERVICE"/>

		<!--+
		    | Rebuild our live MySpace client code.
		    | This re-builds the MySpace client code from clean.
		    | It uses the Wsdl2Java task to re-genereta the client stubs from the live MySpace WebService.
		    | It uses ${myspace.server} rather than ${axis.url} for the service url, so the service can be located on an external system.
		    | It needs the MySpace service on ${myspace.server} installed and running.
		    +-->
		<antcall target="MYSPACE.CLIENT"/>

		<!--+
		    | Rebuild our portal code.
		    | This re-builds the portal code from clean.
		    | It uses the client stubs generated by the Wsdl2Java task.
		    +-->
		<antcall target="portal.REBUILD"/>

		<!--+
		    | Rebuild our portal site.
		    | This installs the project jar, site JSP pages and site WebApp.
		    +-->
		<antcall target="site.REBUILD"/>

	</target>

	<!--+
	    | Install our project WebApps ....
	    | Needs Tomcat already running.
	    +-->
	<target name="project.INSTALL" depends="init, tomcat.tasks">
		<!--+
		    | We don't need Axis to run the Portal itself.
		    | However, we do need it to test the WebServices calls.
		    +-->
		<!-- Install the Axis web-app -->
		<antcall target="axis.webapp.install"/>

		<!--+
		    | All this tests for is that the happyaxis JSP responds, not the content.
		    | It would be nice to check the content of the response to make sure Axis really is happy.
		    +-->
		<!-- Wait for Axis to startup -->
		<antcall target="axis.wait"/>

		<!--+
		    | Install the Axis documentation.
		    | This installs Axis documentation as a WebApp, useful when exploring and debugging WebServices.
		    +-->
		<antcall target="axis.docs.install"/>
		<echo message=""/>

		<!--+
		    | Build our site and java components
		    | This uses the Axis Wsdl2Java tasks to generate the client stubs from the live WebServices,
		    | so it needs the MySpace service on ${myspace.server} installed and running.
		    +-->
		<antcall target="project.BUILD"/>

		<!--+
		    | Install our Cocoon site components.
		    | This assumes that we have a ready built Cocoon WebApp to install.
		<antcall target="cocoon.INSTALL"/>
		<antcall target="cocoon.wait"/>
		    +-->

		<!-- Build our release WebApps
		   | This now includes the tasks to install the release versions of our war files.
		   +-->
		<antcall target="project.RELEASE"/>


		<echo message="Ok ... Astrogrid portal is running."/>
	</target>

	<!--+
	    | Experimental task to install and run our project ....
	    | Use it if it helps, ignore it if it gets in the way.
	    | This task assumes Tomcat is NOT running.
	    | It will start Tomcat in a separate JVM, and then install all of the services into it.
	    | The task will not finish until Tomcat is stopped, either by Ctrl^C, or by running the tomcat.stop task from a separate shell.
	    +-->
	<target name="project.RUN" depends="init">

		<parallel>
			<!-- Start tomcat in a separate JVM -->
			<sequential>
				<!-- Clean the Tomcat working directories -->
				<antcall target="tomcat.clean"/>
				<!-- Start tomcat in a separate JVM -->
				<antcall target="tomcat.start"/>
			</sequential>

			<!-- Install our project services -->
			<sequential>
				<!-- Install all our WebApps -->
				<antcall target="project.INSTALL"/>
			</sequential>
		</parallel>
	</target>

	<!--+
	    | Re-build EVERYTHING from clean.
	    +-->
	<target name="project.REBUILD" depends="init">
		<!-- Delete everything -->
		<delete dir="build" failonerror="false"/>
		<!-- Delete everything -->
		<antcall target="release.DELETE"/>
		<!-- Clear the Tomcat endorsed libraries -->
		<antcall target="tomcat.RESET"/>
		<!-- Unpack the Axis binary -->
		<antcall target="axis.REBUILD"/>
		<!-- Unpack the JUnit binary -->
		<antcall target="junit.REBUILD"/>
		<!-- Rebuild the Cocoon installation-->
		<antcall target="cocoon.REBUILD"/>
		<!-- Start Tomcat and build our project -->
		<antcall target="project.RUN"/>
	</target>

	<target name="COCOON.TEST" depends="init">
		<!-- Build our portal classes -->
		<antcall target="portal.BUILD"/>
		<!-- Remove our Cocoon WebApp -->
		<antcall target="cocoon.webapp.remove"/>
		<!-- Install our Cocoon WebApp -->
		<antcall target="cocoon.INSTALL"/>
	</target>

	<!-- Set the Cocoon properties -->
	<target name="cocoon.init" depends="">
		<!-- Cocoon 2.1 build properties -->
		<!--
		<property name="cocoon.cvsroot" value=":pserver:anoncvs@cvs.apache.org:/home/cvspublic"/>
		<property name="cocoon.version" value="xml-cocoon2"/>
		<property name="cocoon.date"    value="20 May 2003"/>
		<property name="cocoon.build"   value="build/cocoon"/>
		<property name="cocoon.source"  value="build/cocoon/${cocoon.version}"/>
		<property name="cocoon.webapp"  value="build/cocoon/${cocoon.version}/build/webapp"/>
		<path id="cocoon.classpath">
			<pathelement location="${cocoon.webapp}/WEB-INF/lib/cocoon-2.1-dev.jar"/>
			<pathelement location="${cocoon.webapp}/WEB-INF/lib/avalon-framework-4.1.3.jar"/>
		</path>
		-->
		<!-- Cocoon 2.0 build properties -->
		<property name="cocoon.version" value="cocoon-2.0.4"/>
		<property name="cocoon.zip"     value="depends/cocoon/cocoon-latest-vm14-bin.zip"/>
		<property name="cocoon.build"   value="build/cocoon"/>
		<property name="cocoon.war"     value="build/cocoon/${cocoon.version}/cocoon.war"/>
		<property name="cocoon.webapp"  value="build/cocoon/${cocoon.version}/webapp"/>
		<path id="cocoon.classpath">
			<pathelement location="${cocoon.webapp}/WEB-INF/lib/cocoon-2.0.4.jar"/>
			<pathelement location="${cocoon.webapp}/WEB-INF/lib/avalon-framework-20020627.jar"/>
			<pathelement location="${cocoon.webapp}/WEB-INF/lib/excalibur-pool-20020820.jar"/>
		</path>
	</target>

	<!-- Build our Cocoon webapp from clean -->
	<target name="cocoon.REBUILD" depends="init">
		<!-- Re-build the Cocoon webapp -->
		<antcall target="cocoon.2.0.rebuild"/>
	</target>

	<!-- Export our files for a manual installation into Cocoon -->
	<target name="cocoon.export.zip" depends="init">
		<!-- Delete the export directories -->
		<delete dir="build/export" failonerror="false"/>
		<!-- Create the export directories -->
		<mkdir dir="build/export"/>
		<mkdir dir="build/export/zip"/>
		<mkdir dir="build/export/libraries"/>
		<mkdir dir="build/export/explorer"/>
		<!-- Copy our explorer files across (excluding the sitemap) -->
		<copy verbose="false" toDir="build/export/explorer">
			<fileset dir="src/cocoon">
				<exclude name="**/CVS/**"/>
				<exclude name="build.properties"/>
				<exclude name="blocks.properties"/>
				<exclude name="sitemap.xslt"/>
				<exclude name="sitemap.xmap"/>
			</fileset>
		</copy>
		<!-- Copy our portal jar -->
		<copy verbose="false" toDir="build/export/libraries">
			<fileset dir="${portal.build}/lib">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<!-- Copy the Axis client jars -->
		<copy verbose="false" toDir="build/export/libraries">
			<fileset dir="${axis.webapp}/WEB-INF/lib">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<!-- Zip the explorer files -->
		<zip zipfile="build/export/zip/explorer-${build.time}.zip">
			<zipfileset prefix="" dir="build/export/explorer"/>
		</zip>
		<!-- Zip the library files -->
		<zip zipfile="build/export/zip/libraries-${build.time}.zip">
			<zipfileset prefix="" dir="build/export/libraries"/>
		</zip>
	</target>

	<!-- Build our new Cocoon web-app for release as a WAR file  -->
	<target name="cocoon.release" depends="init, cocoon.init">
		<!-- Delete the export directories -->
		<delete dir="build/release/cocoon" failonerror="false"/>
		<!-- Create the export directories -->
		<mkdir dir="build/release"/>
		<mkdir dir="build/release/cocoon"/>
		<mkdir dir="build/release/cocoon/webapp"/>
		<!-- Unpack the standard Cocoon war file -->
		<unwar src="${cocoon.war}" dest="build/release/cocoon/webapp"/>
		<!-- Create the astrogrid directory -->
		<mkdir dir="build/release/cocoon/webapp/astrogrid"/>
		<!-- Copy our explorer files across (excluding the sitemap) -->
		<copy verbose="false" toDir="build/release/cocoon/webapp/astrogrid">
			<fileset dir="src/cocoon">
				<exclude name="**/CVS/**"/>
				<exclude name="build.properties"/>
				<exclude name="blocks.properties"/>
				<exclude name="sitemap.xslt"/>
				<exclude name="sitemap.xmap"/>
				<exclude name="html/**"/>
				<exclude name="images/**"/>
			</fileset>
		</copy>
		<!-- Copy our portal jar -->
		<copy verbose="false" toDir="build/release/cocoon/webapp/WEB-INF/lib">
			<fileset dir="${portal.build}/lib">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<!-- Copy our plugin jar -->
		<copy verbose="false" toDir="build/release/cocoon/webapp/WEB-INF/lib">
			<fileset dir="${plugin.home}">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<!-- Copy our jconfig jar -->
		<copy verbose="false" toDir="build/release/cocoon/webapp/WEB-INF/lib">
			<fileset dir="${jconfig.home}">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<!-- Copy our Community jar -->
		<copy verbose="false" toDir="build/release/cocoon/webapp/WEB-INF/lib">
			<fileset dir="${community.home}">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<!-- Copy the Axis client jars -->
		<copy verbose="false" toDir="build/release/cocoon/webapp/WEB-INF/lib">
			<fileset dir="${axis.webapp}/WEB-INF/lib">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<!-- Copy the RAL files across (including the astrogrid sitemap) -->
		<copy verbose="false" toDir="build/release/cocoon/webapp/astrogrid">
			<fileset dir="src/ral">
				<exclude name="**/CVS/**"/>
				<exclude name="cocoon.xmap"/>
			</fileset>
		</copy>
		<!-- Replace the main cocoon sitemap -->
		<copy verbose="false" file="src/ral/cocoon.xmap" toFile="build/release/cocoon/webapp/sitemap.xmap"/>

		<!-- Copy the portal config -->
<!-- ZRQ Need to update the community name when we do this ....-->
		<mkdir dir="build/release/cocoon/webapp/WEB-INF/config"/>
		<copy verbose="false" file="src/config/config.xml" toDir="build/release/cocoon/webapp/WEB-INF/config"/>
		<!--+
			| Modify the Cocoon web.xml, adding our JNDI property
			| This will default to the settings for the current machine.
			| Real installs need to modify this to match their config.
			+-->
		<xslt style="src/build/config/webapp.xsl"
		      in="build/release/cocoon/webapp/WEB-INF/web.xml"
		      out="build/release/cocoon/webapp/WEB-INF/web.new">
			<outputproperty name="method" value="xml"/>
			<outputproperty name="indent" value="yes"/>
			<!-- Set the XSL params -->
			<param name="property.name"  expression="org.astrogrid.community.config"/>
			<param name="property.value" expression="${basedir}/build/release/cocoon/webapp/WEB-INF/config/config.xml"/>
		</xslt>
		<!-- Replace the web.xml with the new one -->
		<move  verbose="true"
			file="build/release/cocoon/webapp/WEB-INF/web.new"
			toFile="build/release/cocoon/webapp/WEB-INF/web.xml"
			/>

		<!-- Wrap everything up as a WAR fil -->
		<jar destfile="build/release/cocoon/cocoon.war"
		     manifest="build/release/cocoon/webapp/META-INF/MANIFEST.MF"
		     >
			<fileset dir="build/release/cocoon/webapp">
			</fileset>
		</jar>
	</target>

	<!-- Install the release webapp into Tomcat -->
	<target name="cocoon.release.install" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our web-app -->
		<echo message=""/>
		<echo message="Installing Cocoon ...."/>
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/cocoon" war="file://${basedir}/build/release/cocoon/webapp"/>
	</target>


	<!-- Install our source tree as a web-app -->
	<target name="project.webapp.install" depends="tomcat.tasks">
		<!-- Copy our WEB-INF directory -->
		<copy verbose="false" toDir="${basedir}">
			<fileset dir="src/webapp">
			</fileset>
		</copy>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our web-app -->
		<echo message=""/>
		<echo message="Installing source webapp ...."/>
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/source" war="file://${basedir}"/>
	</target>

	<!-- Remove our project webapps-->
	<target name="release.DELETE" depends="">
		<delete verbose="false" failonerror="false" dir="${tomcat.home}/webapps/cocoon"/>
		<delete verbose="false" failonerror="false" file="${tomcat.home}/webapps/cocoon.war"/>
		<delete verbose="false" failonerror="false" dir="${tomcat.home}/webapps/DataQuery"/>
		<delete verbose="false" failonerror="false" file="${tomcat.home}/webapps/DataQuery.war"/>
	</target>

	<!-- Release our project -->
	<target name="project.RELEASE" depends="">
		<antcall target="cocoon.release"/>
		<antcall target="project.webapp.install"/>
		<echo message="Installing project webapps ...."/>
		<copy verbose="false" file="build/release/cocoon/cocoon.war" toFile="${tomcat.home}/webapps/cocoon.war"/>
	</target>

</project>

