<?xml version="1.0" encoding="UTF-8"?>
<!--+
    | Maven build tasks for the AstroGrid registry webapp.
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:artifact="artifact"    
    xmlns:deploy="deploy"
    >

    <!--+
        | Primary goals are :
        |     clean
        |     install-artifact
        |     install-snapshot
        |     site
        +-->
        
    <!--+
        | Build and install our component war.
        | (required as a target goal for the reactor)
        +-->
    <goal name="astrogrid-install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Building component artifact ...."/>
        <attainGoal name="war:install"/>
    </goal>
        
        
    <!--+
        | Build and install our snapshot war.
        | (required as a target goal for the reactor)
        +-->
    <goal name="astrogrid-install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Building snapshot artifact ...."/>
        <attainGoal name="war:install-snapshot"/>
      -->
      <!--+
         | Create the war file.
      <attainGoal name="war:war"/>
         +-->
      <!--+
         | The rest is basically copy-paste from jar:deploy-snapshot.
      <maven:snapshot project="${pom}"/>
      <core:set var="artifactFile" value="${pom.artifactId}.war"/>
      <core:set var="snapshotFile" value="${pom.artifactId}-${snapshotVersion}.war"/>
      <ant:move file="${maven.build.dir}/${artifactFile}" toFile="${maven.build.dir}/${snapshotFile}"/>
      <ant:property name="jardir__" value="${maven.repo.local}/${pom.artifactDirectory}/jars"/>
      <ant:mkdir dir="${jardir__}"/>
      <ant:copy
         file="${maven.build.dir}/${artifactFile}"
         tofile="${jardir__}/${pom.artifactId}-SNAPSHOT.jar"
         overwrite="true"
         />
      <ant:copy
         file="${maven.build.dir}/${artifactFile}"
         tofile="${jardir__}/${maven.final.name}.jar"
         />
         +-->
    </goal>
        
    <!--+
        | Build and deploy our snapshot war(s).
        +-->
    <goal name="astrogrid-deploy-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot war.
            +-->
        <attainGoal name="astrogrid-install-snapshot"/>
        <!--+
            | Deploy our snapshot war(s).
            +-->
		<artifact:deploy-snapshot
			artifact="${maven.build.dir}/${maven.final.name}.war"
			project="${pom}"
			type="war"
			/>
    </goal>
    
    <!--+
        | Build and deploy our artifact war.
        +-->
    <goal name="astrogrid-deploy-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our artifact war.
            +-->
        <attainGoal name="astrogrid-install-artifact"/>
        <!--+
            | Deploy our artifact war.
            +-->
		<artifact:deploy
			artifact="${maven.build.dir}/${maven.final.name}.war"
			project="${pom}"
			type="war"
			/>
    </goal>
    
        

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>

    <!--+
        | Clean our build target.
        | (required as a target goal for the reactor)
        +-->
    <preGoal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Cleaning build target ...."/>
    </preGoal>



    <!--+
        | Initialise the webapp files.
        +-->
    <preGoal name="war:webapp">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Pre-processing for webapp task"/>
        <!--+
            | Initialise the eXist webapp.
            +-->
        <attainGoal name="init.exist"/>
        <!--+
            | Modify the war:webapp property to use our eXist webapp instead.
            +-->
        <ant:echo message="Modifying war:webapp location"/>
        <ant:echo message="  Before : ${pom.getPluginContext('maven-war-plugin').getVariable('maven.war.webapp.dir')}"/>
        <core:expr value="${pom.getPluginContext('maven-war-plugin').setVariable('maven.war.webapp.dir', existDir)}"/>
        <ant:echo message="  After  : ${pom.getPluginContext('maven-war-plugin').getVariable('maven.war.webapp.dir')}"/>
    </preGoal>

    <!--+
        | Post-process our webapp.
        +-->
    <postGoal name="war:webapp">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Post-processing for webapp task"/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Locate our registry server jar.
            +-->
        <core:set var="serverJarIdent" value="${pom.groupId}:astrogrid-exist-server"/>
        <core:forEach var="artifact" items="${pom.getArtifacts()}">
            <core:if test="${artifact.getDependency().getId().equals(serverJarIdent)}">
                <ant:echo message="Found registry server jar"/>
                <ant:echo message="Name     : ${artifact.getName()}"/>
                <ant:echo message="Path     : ${artifact.getPath()}"/>
                <core:set var="serverJarPath" value="${artifact.getPath()}"/>
            </core:if>
        </core:forEach>
        <!--+
            | Unpack our service WSDD files.
            +-->
        <ant:unzip
            src="${serverJarPath}"
            dest="${tempDir}">
            <patternset>
                <include name="META-INF/wsdd/*.wsdd"/>
            </patternset>
        </ant:unzip>
        <ant:copy toDir="${wsddDir}" flatten="true">
            <fileset dir="${tempDir}">
                <include name="**/*.wsdd"/>
            </fileset>
        </ant:copy>
		<!--
        <ant:copy verbose="false" todir="${axisDir}">
            <ant:fileset dir="jsp">
            </ant:fileset>
        </ant:copy>
		-->
		<!--
        <ant:mkdir dir="${axisDir}/WEB-INF/classes"/>
        <ant:copy verbose="false"
         file="${basedir}/log4j.properties"
         todir="${axisDir}/WEB-INF/classes"
         overwrite="true"
         />
        -->
        
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Deploy our Query service.
            +-->
        <ant:echo message="Deploying Registry Query WebService"/>
        <ant:java classname="org.apache.axis.utils.Admin"
            dir="${existDir}/WEB-INF"
            classpathref="maven.dependency.classpath"
            fork="true">
            <arg value="server"/>
            <arg value="${wsddDir}/existdeploy.wsdd"/>
        </ant:java>
        
    </postGoal>

</project>