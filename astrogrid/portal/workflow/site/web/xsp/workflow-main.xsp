<?xml version="1.0"?>

   <xsp:page language="java"
             create-session="true"
             xmlns:xsp="http://apache.org/xsp" 
             xmlns:xsp-session="http://apache.org/xsp/session/2.0"
             xmlns:xsp-request="http://apache.org/xsp/request/2.0"
             xmlns:util="http://apache.org/xsp/util/2.0">

   <xsp:structure>
      <xsp:include>java.util.Enumeration</xsp:include>
      <xsp:include>java.util.LinkedList</xsp:include>
      <xsp:include>org.astrogrid.util.DomHelper</xsp:include>      
      <xsp:include>org.astrogrid.portal.cocoon.workflow.design.DesignAction</xsp:include>
      <xsp:include>org.astrogrid.portal.workflow.intf.WorkflowManagerFactory</xsp:include>
      <xsp:include>org.astrogrid.portal.workflow.intf.WorkflowManager</xsp:include>
      <xsp:include>org.astrogrid.portal.workflow.intf.ApplicationRegistry</xsp:include>
      <xsp:include>org.astrogrid.portal.workflow.intf.ApplicationDescription</xsp:include>
      <xsp:include>org.astrogrid.portal.workflow.intf.ApplicationDescriptionSummary</xsp:include>
      <xsp:include>org.astrogrid.portal.workflow.intf.WorkflowInterfaceException</xsp:include>
      <xsp:include>org.astrogrid.portal.cocoon.workflow.WorkflowHelper</xsp:include>
      <xsp:include>org.astrogrid.applications.beans.v1.parameters.ParameterValue</xsp:include>
      <xsp:include>org.astrogrid.applications.beans.v1.ParameterRef</xsp:include>
      <xsp:include>org.astrogrid.applications.beans.v1.parameters.BaseParameterDefinition</xsp:include>
      <xsp:include>org.astrogrid.applications.beans.v1.Interface</xsp:include>      
      <xsp:include>org.astrogrid.workflow.beans.v1.AbstractActivity</xsp:include>
      <xsp:include>org.astrogrid.workflow.beans.v1.ActivityContainer</xsp:include>
      <xsp:include>org.astrogrid.workflow.beans.v1.Else</xsp:include>      
      <xsp:include>org.astrogrid.workflow.beans.v1.For</xsp:include>      
      <xsp:include>org.astrogrid.workflow.beans.v1.Flow</xsp:include>
      <xsp:include>org.astrogrid.workflow.beans.v1.If</xsp:include>
      <xsp:include>org.astrogrid.workflow.beans.v1.Parfor</xsp:include>              
      <xsp:include>org.astrogrid.workflow.beans.v1.Script</xsp:include>              
      <xsp:include>org.astrogrid.workflow.beans.v1.Sequence</xsp:include>
      <xsp:include>org.astrogrid.workflow.beans.v1.Scope</xsp:include>
      <xsp:include>org.astrogrid.workflow.beans.v1.Set</xsp:include> 
      <xsp:include>org.astrogrid.workflow.beans.v1.Step</xsp:include> 
      <xsp:include>org.astrogrid.workflow.beans.v1.Then</xsp:include>      
      <xsp:include>org.astrogrid.workflow.beans.v1.Tool</xsp:include>
      <xsp:include>org.astrogrid.workflow.beans.v1.Unset</xsp:include>      
      <xsp:include>org.astrogrid.workflow.beans.v1.While</xsp:include>               
      <xsp:include>org.astrogrid.workflow.beans.v1.Workflow</xsp:include>                            
   </xsp:structure>

   <xsp:logic>

      private static final boolean TRACE_ENABLED = false;
         
      private Workflow workflow = null;
      
      //=========================================================================================
      
      public static String getMessageString(String strValue) {
          if( TRACE_ENABLED ) trace( "workflow-main-xsp.getMessageString() entry");
    
          if(strValue == null)    
          {
              return "--";
          }
          
          StringBuffer objStringBuffer = new StringBuffer();
          int index = 0;
          int lineIndex = 0;
          for(int i = 0; i &lt; strValue.length(); i ++) 
          {
              index = strValue.indexOf('\n', i);
              if(index != -1) 
              {
                  objStringBuffer.append(strValue.substring(i,index));
                  objStringBuffer.append("&lt;BR&gt;");
                  i = index;
              }
              else 
              {
                  objStringBuffer.append(strValue.substring(i, strValue.length()));
                  break;
              }
            }

        return objStringBuffer.toString();
        
        }      
         
      //=========================================================================================
      private void displayTool( Tool tool ) throws SAXException {
         if( TRACE_ENABLED ) trace( "workflow-main-xsp.displayTool() entry");
         
         AttributesImpl xspAttr = new AttributesImpl();

         try {
	        WorkflowManagerFactory wmFactory = new WorkflowManagerFactory();
	        WorkflowManager workflowManager = wmFactory.getManager() ;
	        ApplicationRegistry applRegistry = workflowManager.getToolRegistry();
	        ApplicationDescription applDescription = applRegistry.getDescriptionFor( tool.getName() );
            String toolDesc = DomHelper.getNodeTextValue(applDescription.getOriginalVODescription(),"Description","vr");
            String toolTitle = DomHelper.getNodeTextValue(applDescription.getOriginalVODescription(),"Title","vr");
            if (toolTitle.length() &gt; 25)
            {
              toolTitle.substring(0,25) ;
              toolTitle += "..." ;
            }
               <xsp:element name="tool">
                  <xsp:attribute name="tool-name"><xsp:expr>tool.getName()</xsp:expr></xsp:attribute>
                  <xsp:attribute name="tool-title"><xsp:expr>toolTitle</xsp:expr></xsp:attribute>
                  <xsp:attribute name="tool-interface"><xsp:expr>tool.getInterface()</xsp:expr></xsp:attribute>
                  <xsp:attribute name="tool-documentation"><xsp:expr>toolDesc</xsp:expr></xsp:attribute>                                    
                  <xsp:logic>displayParamsList( tool );</xsp:logic>                                                                     
               </xsp:element>
         }
	     catch( WorkflowInterfaceException wix ) {
	         wix.printStackTrace();
	     } 
	     catch( Exception e) {
	         e.printStackTrace();
	     }	             
         finally {
            xspAttr = null;
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.displayTool() exit");
         }
      } // end of displayTool()


	  //=========================================================================================
	  public void displayParamsList ( Tool tool ) throws SAXException {
	     if( TRACE_ENABLED ) trace("workflow-main-xsp.displayParamsList() entry");
	
         Enumeration enumerator = null;
	     ParameterValue pv = null;
         ParameterRef pRef = null;
         BaseParameterDefinition pDef = null;
         AttributesImpl xspAttr = new AttributesImpl();         
	
	     try {
	        WorkflowManagerFactory wmFactory = new WorkflowManagerFactory();
	        WorkflowManager workflowManager = wmFactory.getManager() ;
	        ApplicationRegistry applRegistry = workflowManager.getToolRegistry();
	        ApplicationDescription applDescription = applRegistry.getDescriptionFor( tool.getName() );	        
            enumerator = tool.getInput().enumerateParameter() ;
	        while( enumerator.hasMoreElements() ) {
	            pv = (ParameterValue)enumerator.nextElement();
                pRef = WorkflowHelper.getParameterRef(applDescription, tool, pv);
                pDef = WorkflowHelper.getParameterDef(applDescription, tool, pv );                
                <xsp:element name="inputParam">
                   <xsp:attribute name="param-name"><xsp:expr>pv.getName()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-UI-name"><xsp:expr>getMessageString(pDef.getUI_Name())</xsp:expr></xsp:attribute>                   
                   <xsp:attribute name="param-UI-description"><xsp:expr>getMessageString(pDef.getUI_Description().getContent())</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-type"><xsp:expr>pDef.getType()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-subtype"><xsp:expr>pDef.getSubType()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-units"><xsp:expr>pDef.getUnits()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-ucd"><xsp:expr>pDef.getUCD()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-defaultValue"><xsp:expr>pDef.getDefaultValue()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-cardinality-max"><xsp:expr>pRef.getMaxoccurs()</xsp:expr></xsp:attribute>                                                      
                   <xsp:attribute name="param-cardinality-min"><xsp:expr>pRef.getMinoccurs()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-value"><xsp:expr>pv.getValue()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-indirect"><xsp:expr>pv.getIndirect()</xsp:expr></xsp:attribute>
                </xsp:element>

	        } // end while
            
            enumerator = tool.getOutput().enumerateParameter() ;
            while( enumerator.hasMoreElements() ) {
                pv = (ParameterValue)enumerator.nextElement();
                pRef = WorkflowHelper.getParameterRef(applDescription,tool,pv);
                pDef = WorkflowHelper.getParameterDef(applDescription, tool, pv );
                 
                <xsp:element name="outputParam">
                   <xsp:attribute name="param-name"><xsp:expr>pv.getName()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-UI-name"><xsp:expr>getMessageString(pDef.getUI_Name())</xsp:expr></xsp:attribute>                   
                   <xsp:attribute name="param-UI-description"><xsp:expr>getMessageString(pDef.getUI_Description().getContent())</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-type"><xsp:expr>pDef.getType()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-subtype"><xsp:expr>pDef.getSubType()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-units"><xsp:expr>pDef.getUnits()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-ucd"><xsp:expr>pDef.getUCD()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-defaultValue"><xsp:expr>pDef.getDefaultValue()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-cardinality-max"><xsp:expr>pRef.getMaxoccurs()</xsp:expr></xsp:attribute>                                                      
                   <xsp:attribute name="param-cardinality-min"><xsp:expr>pRef.getMinoccurs()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-value"><xsp:expr>pv.getValue()</xsp:expr></xsp:attribute>
                   <xsp:attribute name="param-indirect"><xsp:expr>pv.getIndirect()</xsp:expr></xsp:attribute>
                 </xsp:element> 
               
            } // end while
            	        
	     }
	     catch( WorkflowInterfaceException wix ) {
	         wix.printStackTrace();
	     }
	     finally {
	        xspAttr = null;
	        if( TRACE_ENABLED ) trace( "workflow-main-xsp.displayParamsList() exit");
	     }
	  } // end of displayParamsList() 


      //====================================================================
      public void toolList ( LinkedList tools ) throws SAXException {
         if( TRACE_ENABLED ) trace("workflow-main-xsp.toolList() entry");

         try { 
            for( int i=0; i &lt; tools.size(); i++ ) {          
                displayToolDetails( (ApplicationDescriptionSummary)tools.get(i) );
            }

         }
         catch(Exception e) {
             e.printStackTrace() ;         
             // some logging required
         }         
         finally {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.toolList() exit");
         }
      } // end of ToolList()      	


      //====================================================================
      private void displayToolDetails( ApplicationDescriptionSummary appDescSum ) throws SAXException {	
         if( TRACE_ENABLED ) trace( "workflow-main-xsp.displayToolDetails() entry");
         
         AttributesImpl xspAttr = new AttributesImpl();

		 try {
		     String UIName = appDescSum.getUIName();
            if (UIName.length() &gt; 35)
            {
              UIName.substring(0,32) ;
              UIName += "..." ;
            }		 
              <xsp:element name="toolsAvailable">
                 <xsp:attribute name="tool-name"><xsp:expr>appDescSum.getName()</xsp:expr></xsp:attribute>
                 <xsp:attribute name="tool-UIname">(<xsp:expr> UIName </xsp:expr>)</xsp:attribute>
                 <xsp:attribute name="tool-intCount"><xsp:expr>appDescSum.getInterfaceNames().length</xsp:expr></xsp:attribute>
                 <xsp:logic>
                 String[] intNames = appDescSum.getInterfaceNames() ;
                 for( int i=0; i &lt; appDescSum.getInterfaceNames().length ; i++ ) 
                 {         
                     displayInterface( intNames[i] );
                 }
                 </xsp:logic>                 	                                  												
              </xsp:element>
         }
         finally {
            xspAttr = null;
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.displayToolDetails() exit");
         }
      } // end of displayToolDetails()

      //====================================================================
      private void displayInterface(String intName) throws SAXException {	
         if( TRACE_ENABLED ) trace( "workflow-main-xsp.displayInterface() entry");
         
         AttributesImpl xspAttr = new AttributesImpl();

		 try {
              <xsp:element name="interface">
                 <xsp:attribute name="int-name"><xsp:expr>intName</xsp:expr></xsp:attribute>
              </xsp:element>
         }
         finally {
            xspAttr = null;
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.displayInterface() exit");
         }
      } // end of displayInterface()    
       

      //====================================================================
      private void displayTool( String tool ) throws SAXException {	
         if( TRACE_ENABLED ) trace( "workflow-main-xsp.displayTool() entry");
         
         AttributesImpl xspAttr = new AttributesImpl();

		 try {
              <xsp:element name="toolsAvailable">
                 <xsp:attribute name="tool-name"><xsp:expr>tool</xsp:expr></xsp:attribute>													
              </xsp:element>
         }
         finally {
            xspAttr = null;
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.displayTool() exit");
         }
      } // end of displayTool()     
      
      
      //====================================================================
      public void activityTree ( AbstractActivity activity ) throws SAXException {
         if( TRACE_ENABLED ) trace( "workflow-main-xsp.activityTree() entry") ; 
        
            try {
        	
               if( activity instanceof Sequence ) {
                  sequence( (Sequence)activity ) ;
               }
        	   else if( activity instanceof Flow ) {
                  flow( (Flow)activity ) ;
               }
               else if( activity instanceof Step ) {
                  step( (Step)activity) ;
               }
               else if( activity instanceof Script ) {
                  script( (Script)activity) ;
               }               
               else if( activity instanceof For ) {
                  forObj( (For)activity) ;
               }
               else if( activity instanceof If ) {
                  ifObj( (If)activity) ;
               } 
               else if( activity instanceof Parfor ) {
                  parForObj( (Parfor)activity) ;
               }
               else if( activity instanceof Scope ) {
                  scopeObj( (Scope)activity) ;
               }
               else if( activity instanceof Set ) {
                  setObj( (Set)activity) ;
               }                    
               else if( activity instanceof Unset ) {
                  unsetObj( (Unset)activity) ;
               }                        
               else if( activity instanceof While ) {
                  whileObj( (While)activity) ;
               }                                                            
               else {
                  debug( "unsupported Activity" ) ;
               } 
            }
        	finally {
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.activityTree() exit") ;
        	}
       } // end of activityTree()              
       

         //====================================================================
         private void sequence( Sequence aSequence) throws SAXException {  	
	        if( TRACE_ENABLED ) trace( "workflow-main-xsp.sequence() entry") ;
	        
            AttributesImpl xspAttr = new AttributesImpl();	        
		        	
		    try {
                 <xsp:element name="sequence">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( aSequence )</xsp:expr></xsp:attribute>
                    <xsp:logic>activityContainer( aSequence ) ;</xsp:logic>
                 </xsp:element>
		    }
            catch(Exception e) {
               e.printStackTrace() ;
            }		    
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.sequence() exit") ;
        	}
         } // end of sequence()
                  
 
       //====================================================================		
         private void forObj( For forObj ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.forObj() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="forObj">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( forObj )</xsp:expr></xsp:attribute>
                    <xsp:attribute name="for-item"><xsp:expr>forObj.getItems()</xsp:expr></xsp:attribute>
                    <xsp:attribute name="for-get"><xsp:expr>forObj.getVar()</xsp:expr></xsp:attribute>
                    <xsp:logic>activityTree( forObj.getActivity() ) ;</xsp:logic>
                 </xsp:element>                
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.forObj() exit") ;
            }		
         } // end of forObj()


       //====================================================================		
         private void parForObj( Parfor parForObj ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.parForObj() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="parForObj">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( parForObj )</xsp:expr></xsp:attribute>
                    <xsp:attribute name="parFor-item"><xsp:expr>parForObj.getItems()</xsp:expr></xsp:attribute>
                    <xsp:attribute name="parFor-var"><xsp:expr>parForObj.getVar()</xsp:expr></xsp:attribute>
                    <xsp:logic>activityTree( parForObj.getActivity() ) ;</xsp:logic>
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.parForObj() exit") ;
            }		
         } // end of parForObj()

         
          
       //====================================================================		
         private void ifObj( If ifObj ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.if() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="ifObj">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( ifObj )</xsp:expr></xsp:attribute>
                    <xsp:attribute name="if-test"><xsp:expr>ifObj.getTest()</xsp:expr></xsp:attribute>
                    <xsp:logic>
                    if(ifObj.getThen() != null)
                    {
                      activityThen( ifObj.getThen() ) ;
                    }
                    if(ifObj.getElse() != null)
                    {
                      activityElse( ifObj.getElse() ) ;
                    }                                        
                    </xsp:logic>
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.if() exit") ;
            }		
         } // end of if() 


       //====================================================================		
         private void activityElse( Else elseObj ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.activityElse() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="elseObj">
                    <xsp:attribute name="key">else</xsp:attribute>                    
                    <xsp:logic>activityTree( elseObj.getActivity() ) ;</xsp:logic>
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.activityElse() exit") ;
            }		
         } // end of activityElse()


       //====================================================================		
         private void activityThen( Then thenObj ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.activityThen() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="thenObj">
                    <xsp:attribute name="key">then</xsp:attribute>                    
                    <xsp:logic>activityTree( thenObj.getActivity() ) ;</xsp:logic>
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.activityThen() exit") ;
            }		
         } // end of activityThen()         

       //====================================================================		
         private void scopeObj( Scope scopeObj ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.scope() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="scopeObj">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( scopeObj )</xsp:expr></xsp:attribute>
                    <xsp:logic>activityTree( scopeObj.getActivity() ) ;</xsp:logic>         
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.scope() exit") ;
            }		
         } // end of scope()
         
         
         //====================================================================		
         private void setObj( Set setObj ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.set() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="setObj">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( setObj )</xsp:expr></xsp:attribute>
                    <xsp:attribute name="set-var"><xsp:expr>setObj.getVar()</xsp:expr></xsp:attribute>
                    <xsp:attribute name="set-value"><xsp:expr>setObj.getValue()</xsp:expr></xsp:attribute>                    
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.set() exit") ;
            }		
         } // end of set() 
        
        
         //====================================================================		
         private void unsetObj( Unset unsetObj ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.unset() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="unsetObj">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( unsetObj )</xsp:expr></xsp:attribute>
                    <xsp:attribute name="unset-var"><xsp:expr>unsetObj.getVar()</xsp:expr></xsp:attribute>                  
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.unset() exit") ;
            }		
         } // end of unset()          
 
 
       //====================================================================		
         private void whileObj( While whileObj ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.while() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="whileObj">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( whileObj )</xsp:expr></xsp:attribute>
                    <xsp:attribute name="while-test"><xsp:expr>whileObj.getTest()</xsp:expr></xsp:attribute>
                    <xsp:logic>activityTree( whileObj.getActivity() ) ;</xsp:logic>
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.while() exit") ;
            }		
         } // end of while() 
 
  
        
       //====================================================================		
         private void flow( Flow flow ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.flow() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="flow">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( flow )</xsp:expr></xsp:attribute>
                    <xsp:logic>activityContainer( flow ) ;</xsp:logic>
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.flow() exit") ;
            }		
         } // end of flow()
         
         
       //====================================================================		
         private void script( Script script ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.script() entry") ; 
            
            AttributesImpl xspAttr = new AttributesImpl();
        	
        	try {
                 <xsp:element name="script">
                    <xsp:attribute name="key"><xsp:expr>getXPathKey( script )</xsp:expr></xsp:attribute>
                    <xsp:attribute name="script-desc"><xsp:expr>script.getDescription()</xsp:expr></xsp:attribute>
                    <xsp:attribute name="script-body"><xsp:expr>script.getBody()</xsp:expr></xsp:attribute>
                 </xsp:element>
        	}
            catch(Exception e) {
               e.printStackTrace() ;
            }        	
        	finally {
        	   xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.script() exit") ;
            }		
         } // end of script()         
		
        
         //====================================================================
         private void step( Step step ) throws SAXException {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.step() entry") ; 
        	
            AttributesImpl xspAttr = new AttributesImpl();        	
        	
            try {    
               
               if (step.getTool() != null) 
               {
                 if (step.getResultVar() != null) 
                 {
                   <xsp:element name="step">
                      <xsp:attribute name="key"><xsp:expr>getXPathKey( step )</xsp:expr></xsp:attribute>
                      <xsp:attribute name="step-name"><xsp:expr>step.getName()</xsp:expr></xsp:attribute>
                      <xsp:attribute name="step-var"><xsp:expr>step.getResultVar()</xsp:expr></xsp:attribute>
                      <xsp:attribute name="step-description"><xsp:expr>step.getDescription()</xsp:expr></xsp:attribute>
                      <xsp:logic>displayTool( step.getTool() );</xsp:logic>                                         
                   </xsp:element>                        
                 }
                 else 
                 {
                   <xsp:element name="step">
                      <xsp:attribute name="key"><xsp:expr>getXPathKey( step )</xsp:expr></xsp:attribute>
                      <xsp:attribute name="step-name"><xsp:expr>step.getName()</xsp:expr></xsp:attribute>
                      <xsp:attribute name="step-description"><xsp:expr>step.getDescription()</xsp:expr></xsp:attribute>
                      <xsp:logic>displayTool( step.getTool() );</xsp:logic>                                         
                   </xsp:element>                   
                 }
               }
               else 
               { 
                 if (step.getResultVar() != null)
                 {              
                    <xsp:element name="step">
                       <xsp:attribute name="key"><xsp:expr>getXPathKey( step )</xsp:expr></xsp:attribute>
                       <xsp:attribute name="step-name"><xsp:expr>step.getName()</xsp:expr></xsp:attribute>
                       <xsp:attribute name="step-var"><xsp:expr>step.getResultVar()</xsp:expr></xsp:attribute>
                       <xsp:attribute name="step-description"><xsp:expr>step.getDescription()</xsp:expr></xsp:attribute>
                       <xsp:element name="tool">
                          <xsp:attribute name="tool-name">null</xsp:attribute>
                       </xsp:element>                                         
                    </xsp:element>
                  }
                  else
                  {
                    <xsp:element name="step">
                       <xsp:attribute name="key"><xsp:expr>getXPathKey( step )</xsp:expr></xsp:attribute>
                       <xsp:attribute name="step-name"><xsp:expr>step.getName()</xsp:expr></xsp:attribute>
                       <xsp:attribute name="step-description"><xsp:expr>step.getDescription()</xsp:expr></xsp:attribute>
                       <xsp:element name="tool">
                          <xsp:attribute name="tool-name">null</xsp:attribute>
                       </xsp:element>                                         
                    </xsp:element>                  
                  }               
               } 
            }
            catch(Exception e) {
               e.printStackTrace() ;
            }
            finally {
               xspAttr = null;
               if( TRACE_ENABLED ) trace( "workflow-main-xsp.step() exit") ;
      	    }		
         } // end of step()
		
        		
         //====================================================================
         private void activityContainer( ActivityContainer activityContainer ) 
                                                                              throws SAXException {
		    if( TRACE_ENABLED ) trace( "workflow-main-xsp.activityContainer() entry") ; 
        	
        	try {
        	
               AbstractActivity[]
                  activityArray = activityContainer.getActivity() ;
                  
               for( int i=0; i &lt; activityArray.length; i++ ){
                   activityTree( activityArray[i] ) ;
               }
					
            }
            catch(Exception e) {
                e.printStackTrace() ;
            }         
            finally {
                if( TRACE_ENABLED ) trace( "workflow-main-xsp.activityContainer() exit") ;
            }	
        } // end of activityContainer()
        
        
        //====================================================================
        private String getXPathKey( AbstractActivity activity ) {    
            if( TRACE_ENABLED ) trace( "workflow-main-xsp.getXPathKey() entry") ;  
            
            String xpath = "";
            
            try {
               if( workflow != null ) {
                  trace( "about to enter workflow.getXPathFor( activity )" ) ;
                  xpath = workflow.getXPathFor( activity );
               }   
               trace( "xpath: " + xpath ) ;
            }
            catch( Exception ex ) {
               ex.printStackTrace();
            }
            finally {
                if( TRACE_ENABLED ) trace( "workflow-main-xsp.getXPathKey() exit") ;  
            }
            
            return xpath;
      
        }
        
        
      //==========================================================
      private static void trace( String traceString ) {
         System.out.println( traceString );
      }

      private static void debug( String traceString ) {
         System.out.println( traceString );
      }

   </xsp:logic>

   <workflow>
      <xsp:logic>
         
         try{
            if( TRACE_ENABLED ) trace( "workflow-main-xsp: Retrieving workflow from session object start") ;
            //================================================================================
            workflow = (Workflow)<xsp-session:get-attribute name="workflow-tag" as="object"/> ;
                  
            //================================================================================
	
	        if (workflow != null){
	        
	           AttributesImpl xspAttr_1 = new AttributesImpl();
                
               <xsp:attribute name="template">not applicable</xsp:attribute>
               <xsp:attribute name="workflow-name"><xsp:expr>workflow.getName()</xsp:expr></xsp:attribute> 
               <xsp:attribute name="workflow-description"><xsp:expr>workflow.getDescription()</xsp:expr></xsp:attribute>
               <xsp:attribute name="workflow-submit-message"><xsp:expr>(String)session.getAttribute("workflow_submit_message")</xsp:expr></xsp:attribute>
               <xsp-session:set-attribute name="workflow_submit_message" value="null"/>
                              
            } 
         }
         catch(Exception e) {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp: Error retrieving workflow from session object:") ;
            e.printStackTrace() ;
         }         
         finally {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp: Retrieving workflow from session object finish ") ;
         }
	  
      </xsp:logic>
      
      <xsp:logic>
        if (workflow != null){      
        //========================================================================	      
          activityTree( workflow.getSequence() ) ;
        //========================================================================	
        }
      </xsp:logic>

   
      <xsp:logic>  
          	
         try{
            if( TRACE_ENABLED ) trace( "workflow-main-xsp: Retrieving Tool list from request object start") ; 	     
		    LinkedList toolArray = (LinkedList)<xsp-session:get-attribute name="tool-list" as="object"/>; 
	        toolList( toolArray );	        	        
         }
         catch(Exception e) {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp: Error retrieving Tool list from request object ") ;
            e.printStackTrace() ;
         }         
         finally {
            if( TRACE_ENABLED ) trace( "workflow-main-xsp: Retrieving Tool list from request object finish ") ;
         }	 		
            
      </xsp:logic>
   </workflow>
</xsp:page>