<?xml version="1.0" encoding="iso-8859-1"?>

<!--+
    | Author: Jeff Lusted "jl99@star.le.ac.uk"
    | Date: Thursday February  24 09:35 2005
    +-->

  <xsp:page language="java"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xsp="http://apache.org/xsp"
	xmlns:util="http://apache.org/xsp/util/2.0"
    xmlns:jpath="http://apache.org/xsp/jpath/1.0"
	xmlns:xsp-session="http://apache.org/xsp/session/2.0"
	xmlns:xsp-request="http://apache.org/xsp/request/2.0">
	
	
	
 <xsp:structure>
   <xsp:include>org.apache.cocoon.environment.Request</xsp:include>
   <xsp:include>org.apache.cocoon.environment.Session</xsp:include>		
   <xsp:include>org.astrogrid.portal.myspace.filesystem.Tree</xsp:include>	   
   <xsp:include>org.astrogrid.store.Ivorn</xsp:include>	     
</xsp:structure>

<xsp:logic>
		
		private static final boolean TRACE_ENABLED = true ;
		private static final boolean DEBUG_ENABLED = true ;
        
        <!--+
            * Returns the so-called path section of an Ivorn as a String.
            * In this instance of the account space. So, given an account space Ivorn
            * with string representation of ivo://star.le.ac.uk/jl99#something/something
            * it should return star.le.ac.uk/jl99
            +-->
		public String getAccountSpaceIvornPath() throws SAXException {
        	if( TRACE_ENABLED ) trace( "micro-top-controls-xsp.getAccountSpaceIvornPath() entry") ; 
        	
        	AttributesImpl xspAttr = new AttributesImpl() ;
            Session session = request.getSession(true) ; 
            Tree tree = null ;	                	                   	
        	Ivorn accountSpaceIvorn = null ;
        	String accountSpaceIvornPath = null ;

        	try {            
               tree = (Tree)<xsp-session:get-attribute name="AGO_MYSPACETREE"  as="object"/>;	                	                   	
        	   accountSpaceIvorn = tree.getAccountSpace() ;
        	   accountSpaceIvornPath = accountSpaceIvorn.getPath() ;
        	   if( DEBUG_ENABLED ) debug( "accountSpaceIvornPath: " + accountSpaceIvornPath ) ;
        	}
			catch(Exception e){
		       if( DEBUG_ENABLED) debug ( "Exception thrown: " + e.getMessage() ) ;
		    }
        	
        	finally {
        		if( TRACE_ENABLED ) trace( "micro-top-controls-xsp.getAccountSpaceIvornPath() exit") ; 
        	}
        	
        	return accountSpaceIvornPath ;
          
		} 
		
		
		public String getCurrentLocation() throws SAXException {
        	if( TRACE_ENABLED ) trace( "micro-top-controls-xsp.getCurrentLocation() entry") ; 
        	
        	AttributesImpl xspAttr = new AttributesImpl() ;
        	Session session = request.getSession() ;
        	String mode = request.getParameter( "requested-mode" ) ;
        	// I think the currentLocation request may be a bum steer!
        	String initialValue = request.getParameter( "currentLocation" ) ;
        	
        	if( mode == null || mode.length() == 0 || mode.indexOf( "main" ) != -1 ) {
        	    ;
        	}
            else if( mode.indexOf( "query-file" ) != -1) {
               // We have been invoked from the Query Editor...
               if( initialValue == null ) {
	               initialValue = (String)session.getAttribute( "AGO_QUERY_EDITOR_MB_VIEW" ) ;  
               }
            }
            else if( mode.indexOf( "workflow-file" ) != -1) {
               // We have been invoked from the Workflow Editor...
               if( initialValue == null ) {
	               initialValue = (String)session.getAttribute( "AGO_WORKFLOW_EDITOR_MB_VIEW" ) ;
	           }
            }
            else if( mode.indexOf( "choose-file-for-workflow" ) != -1) {
               // We have been invoked from the Workflow Editor when
               // choosing a file as parameter in a workflow...
               if( initialValue == null ) {
	               initialValue = (String)session.getAttribute( "AGO_PARAMETER_SELECTOR_MB_VIEW" ) ;
	           }
            }
            
            if( initialValue == null ) {
               initialValue = "home/" ;
            }        	
 
        	if( DEBUG_ENABLED ) debug( "currentLocation: " + initialValue ) ;
            return initialValue ;        
        }               				
		
		private static void trace( String traceString ) {
			System.out.println( traceString ) ;
		}
		
		private static void debug( String traceString ) {
			System.out.println( traceString ) ;
        }

</xsp:logic>  	
	

    <ag-div>
    
      <agPUBMessage>
          MySpace Microbrowser
      </agPUBMessage> 
      
      <ag-onload function="fcsOnMe();"/>

      <ag-link rel="stylesheet" type="text/css" href="/astrogrid-portal/mount/myspace/xmlTree.css"/>
      <ag-link rel="stylesheet" type="text/css" href="/astrogrid-portal/mount/myspace/myspace.css"/>
      <ag-link rel="stylesheet" type="text/css" href="/astrogrid-portal/mount/myspace/extras.css"/>   
         
      <ag-script type="text/javascript" src="/astrogrid-portal/mount/myspace/myspace.js"/>
      <ag-script type="text/javascript" src="/astrogrid-portal/mount/myspace/xmlTree.js"/>     
      

<script language="javascript">

var PARAM_ACTION = "myspace-action" ;
var PARAM_TARGET_NAME = "myspace-target-name" ;
var PARAM_TARGET_PATH = "myspace-target-path" ;
var PARAM_SOURCE_PATH = "myspace-source-path" ;
var PARAM_DIRECTORY_VIEW_PATH = "myspace-directory-view-path" ;

var ACTION_RENAME_FILE = "myspace-rename-file";
var ACTION_COPY_FILE = "myspace-copy-file";
var ACTION_MOVE_FILE = "myspace-move-file";
var ACTION_DELETE_FILE = "myspace-delete-file";
var ACTION_UPLOAD_FILE = "myspace-upload-file";
var ACTION_UPLOAD_URL = "myspace-upload-url";

var ACTION_RENAME_DIRECTORY = "myspace-rename-directory";
var ACTION_DELETE_DIRECTORY = "myspace-delete-directory";
var ACTION_NEW_DIRECTORY = "myspace-new-directory";

function highlightTD(td){
	td.style.border= "solid 1px #ffff00";
}

function dehighlightTD(td){
	var teedee = document.getElementById(td);
	teedee.style.border= "solid 1px #008800";
}


function closeMe(){
	parent.close();
}

function highlight(diese, tag){
	diese.style.background = "#ffffff";
//	if(helpopen == 1){
//		var t = tag + "TD";
//		var h = parent.editor.document.getElementById(t);
//		if(h != null){
//			h.style.display = "";
//		} else {
/*			alert(t + " is null");*/
//		}
//		var k = parent.editor.document.getElementById("defaultTD");
//		if(k != null){
//			k.style.display = "none";
//		}
//	}
}

function dehighlight(diese, tag){
	diese.style.background = "#dddddd";
//	if(helpopen == 1){
// /*		var editor = parent.document.getElementById('editor');*/
//		var h = parent.editor.document.getElementById(tag + "TD");
//		if(h != null){
//			h.style.display = "none";
//		}
//		/*
//		var k = parent.editor.document.getElementById("defaultTD");
//		if(k != null){
//			k.style.display = "";
//		}
//		*/
//	}
}

function dehighlightDir(diese, tag){
	diese.style.background = "#ddddff";
	if(helpopen == 1){
		var h = parent.editor.document.getElementById(tag + "TD");
		if(h != null){
			h.style.display = "none";
		}
		/*
		var k = parent.editor.document.getElementById("defaultTD");
		if(k != null){
			k.style.display = "";
		}
		*/
	}
}

function setClipboard( mode ) {
    if( isSelected() == false || isCurrent() == false )
       return ;
    if( isFile( getSelected()) == false )
       return ;

    var clipboard = document.getElementById('clipboard') ;
    var current = document.getElementById('currentLocation').value ;
    clipboard.value = current + getSelected() ;
    clipboard.title = "Source for '" + mode +"'" ;
}

function getClipboard() {
   return document.getElementById('clipboard').value ;
}

function resetClipboard() {
   document.getElementById('clipboard').value = "*** empty ***" ;
}


function triggerAction( action ) {

  // top.directory.document.getElementById( 'myspace-action' ).value = action ;
  var doc = top.directory.document;
  var form = doc.getElementById( 'myspace-action-form' ); 

  if(form) {
    if( action ) {
       if( action.length != 0) {
          top.directory.document.getElementById( PARAM_ACTION ).value = action ;
          top.directory.document.getElementById( PARAM_DIRECTORY_VIEW_PATH ).value = getCurrent() ;     
//          alert( "top.directory.document.getElementById( PARAM_DIRECTORY_VIEW_PATH ).value:\n" + 
//                  top.directory.document.getElementById( PARAM_DIRECTORY_VIEW_PATH ).value  ) ;     
       }
    }
    form.submit();
  }  
  window.close();
}




function navigateUp() {
    var mode ;
    var url ;
    var path = new String( document.getElementById('currentLocation').value ) ;
    path = path.substring( 0, path.lastIndexOf('/') ) ;
    path = path.substring( 0, path.lastIndexOf('/')+1 ) ;
    if( path.length == 0 )
       return ;
    setCurrent( path ) ;
    // document.getElementById('selected').value = "*** none ***" ;
    mode = document.getElementById( 'requested-mode' ).value ;
    url = "/astrogrid-portal/bare/mount/myspace/micro-directory-view.xml?requested-mode=" + mode + "\x26" + PARAM_DIRECTORY_VIEW_PATH + "=" + path ;
    window.open( url, "directory" ) ;   
}

function setCurrent( directory ){
    document.getElementById('currentLocation').value = directory ;
}

function getCurrent() {
    return document.getElementById('currentLocation').value ;
}

function isCurrent() {
    if( getCurrent().length == 0 ) {
       return false ;
    } 
    return true ;
}

function getSelected(){
    return document.getElementById('selected').value ;
}

function setSelected( item ){
    // alert( "setSelected:" + item ) ;
    document.getElementById('selected').value = item ;
}

function resetSelected(){
    // alert( "setSelected:" + item ) ;
    document.getElementById('selected').value = "*** none ***" ;
}


function isSelected() {
    var name = getSelected() ;
    // We do our best to detect "*** none ***" or some variant...
    if( name.length == 0 || name.indexOf("*") != -1 ) {
       return false ;
    } 
    if( parent.directory.matchItem( name ) ) {
       return true ;
    }
    return false ;
}

function isFile( name ) {
   if( parent.directory.matchedItemType( name ) == "File" ) 
      return true ;
   return false ;
}




function newFolder() {
    var folderName ;
    var reply ;
    var directoryDoc = getFrameDocument( "directory" ) ;

	folderName = newName( "New Folder"                       // option
	                    , "Supply a name for the new folder" // title
	                    , "NewFolder"                        // defaultName
	                    , "Folder" ) ;                       // type of source item 
	
	if( folderName ) {	              
       directoryDoc.getElementById( PARAM_TARGET_NAME ).value = folderName ;
       directoryDoc.getElementById( PARAM_TARGET_PATH ).value = getCurrent() ;
       triggerAction( ACTION_NEW_DIRECTORY ) ;       
    }	
    
} // end newFolder()

function goUploadFile() {

   var inputSource = document.getElementById("localFile").value ;
   var separator = '\\' ;   // Default to Window's separator
   var fileName ;
   
   // Lack of input we take to mean Cancel...
   if( inputSource.length == 0 ) 
       return ;
    
   // Establish the system separator by a simple heuristic...   
   if( inputSource.lastIndexOf( separator ) == -1 )
      separator = '/' ;
       
   // Find the file name...
   fileName = inputSource.substring( inputSource.lastIndexOf( separator ) + 1 ) ;
   // alert( fileName ) ;
   
   // Any problems and we assume Cancel...
   if( fileName.length == 0 ) 
       return ;
       
   fileName = newName( "Upload"                                    // option
	                 , "Supply a new name for the uploaded file"   // title
	                 , fileName                                    // defaultName
	                 , "File" ) ;                                  // type of source item 
	
	if( fileName ) { 
       top.directory.document.getElementById( PARAM_TARGET_NAME ).value = fileName ;
       top.directory.document.getElementById( PARAM_TARGET_PATH ).value = getCurrent() ;
       top.directory.document.getElementById( PARAM_SOURCE_PATH ).value = inputSource ;
       triggerAction( ACTION_UPLOAD_FILE ) ;    	
	}      
   
}


function goUploadURL() {
   //alert( "uploadURL" ) ;
   
   var inputSource = document.getElementById("URL").value ;
   var separator = '/' ;   
   var fileName ;
   
   // Lack of input we take to mean Cancel...
   if( inputSource.length == 0 ) 
       return ;
       
   // Find the file name...
   fileName = inputSource.substring( inputSource.lastIndexOf( separator ) + 1 ) ;
   //alert( fileName ) ;
   
   // Any problems and we assume Cancel...
   if( fileName.length == 0 ) 
       return ;
       
   fileName = newName( "Upload"                                    // option
	                 , "Supply a new name for the uploaded file"   // title
	                 , fileName                                    // defaultName
	                 , "File" ) ;                                  // type of source item 
	
	if( fileName ) { 
       top.directory.document.getElementById( PARAM_TARGET_NAME ).value = fileName ;
       top.directory.document.getElementById( PARAM_TARGET_PATH ).value = getCurrent() ;
       top.directory.document.getElementById( PARAM_SOURCE_PATH ).value = inputSource ;
       triggerAction( ACTION_UPLOAD_URL ) ;    	
	}         
   
}





function paste() {

    //alert( "paste" ) ;

    var clipboardElement = document.getElementById('clipboard') ;
    var clipboard = clipboardElement.value ;
    var option = "Copy" ;
    var separator = '/' ;  
    var sourceName ;
    var sourcePath ;
    var destinationName ;
    var destinationPath = document.getElementById( 'currentLocation' ).value ;
    
    // We do our best to detect "*** empty ***" or some variant...
    if( clipboard.length == 0 || clipboard.indexOf("*") != -1 ) {
       return ;
    }    
       
   if( clipboardElement.title.indexOf( "Move" ) != -1 ) {
      if( clipboardElement.title.indexOf( "Copy" ) == -1 )
   		option = "Move" ;
   }
   
   if( destinationPath.length == 0 )
      return ;
       
   // Find the source file name and path...
   sourceName = clipboard.substring( clipboard.lastIndexOf( separator ) + 1 ) ;
   sourcePath = clipboard.substring( 0, clipboard.lastIndexOf( separator ) + 1 ) ;
   
   // Any problems and we assume Cancel...
   if( sourceName.length == 0 || sourcePath.length == 0 ) 
      return ;
       
   destinationName = newName( option                                              // option
	                        , option +". Please supply a new name for the file."  // title
	                        , sourceName                                          // defaultName
	                        , "File" ) ;                                          // type of source item 
	
	if( destinationName ) { 
       top.directory.document.getElementById( PARAM_TARGET_NAME ).value = destinationName ;
       top.directory.document.getElementById( PARAM_TARGET_PATH ).value = getCurrent() ;
       top.directory.document.getElementById( PARAM_SOURCE_PATH ).value = clipboard ;
       if( option == "Copy" ) {
          triggerAction( ACTION_COPY_FILE ) ;
       } 
       else {
          if( getClipboard() == (getCurrent() + getSelected()) ) {
             resetSelected() ;
          }
          resetClipboard() ;          
          triggerAction( ACTION_MOVE_FILE ) ;      
       }   	
	}      
   
} // end of paste()



function deleteIt() {
    //alert( "delete" ) ;
    
    var reply ;
    var name = document.getElementById('selected').value ;
    var current = getCurrent() ;
    
    // We do our best to detect "*** none ***" or some variant...
    if( name.length == 0 || name.indexOf("*") != -1 ) {
       return ;
    } 
    
    // Check that the current location is still set...
    if( current.length == 0 ) {
       return ;
    }      
    
    if( !parent.directory.matchItem( name ) ) {
       return ;
    }
    
    // If it a folder, ...
    if( parent.directory.matchedItemType( name ) == "Folder" ) { 
    
       // Confirm deletion of folder...	  	   
       reply = confirm(
          "\n________________________________________________________________\n\n" +
          "*** Confirm Deletion ***\n" +
          "________________________________________________________________\n\n" +
          "Do you wish to delete folder " + name + " and all of its contents from the current location?\n" +
          "Press OK to continue with deletion." ) ;
       	      
       if( !reply ) 
          return ; 
      top.directory.document.getElementById( PARAM_TARGET_PATH ).value = current + name ;
      triggerAction( ACTION_DELETE_DIRECTORY ) ;    	                
    }
    else {
       // Confirm deletion of file...	  	   
       reply = confirm(
          "\n________________________________________________________________\n\n" +
          "*** Confirm Deletion ***\n" +
          "________________________________________________________________\n\n" +
          "Do you wish to delete file " + name + " from the current location?\n" +
          "Press OK to continue with deletion."  ) ;
       	      
       if( !reply ) 
          return ;  
       top.directory.document.getElementById( PARAM_TARGET_PATH ).value = current + name ;
       triggerAction( ACTION_DELETE_FILE ) ;    	            
    }
    resetSelected() ;
    if( getClipboard() == (current + name) ) {
       resetClipboard() ;
    }            
}


function showProperties() {
    if( isSelected() == false || isCurrent() == false )
       return ;
    if( isFile( getSelected() ) == false )
       return ;
    // alert( "showProperties" )  ;
    var path = getCurrent() + getSelected() ;
    window.open( "/astrogrid-portal/bare/mount/myspace/storefile-properties?" + PARAM_SOURCE_PATH + "=" + path, 'Properties', 'toolbar=no, directories=no, location=no, status=no, menubar=no, resizable=yes, scrollbars=no, width=650, height=400' ) ; 
    
}


function newName( option, title, defaultName, itemType ) {

    var name ;
    var reply ;
     
	name = prompt( 
       	       "\n______________________________________________________________\n\n" +	
       	       "*** " + title + " ***\n" +
        	   "______________________________________________________________\n\n" +       	                  
               "Certain characters (blanks @ \\ / chevrons) will be replaced by the underscore."
	           , defaultName ) ;
	           
    // name must exist...
    if( name.length == 0 ) 
       return ;
       
    // suppress leading and trailing white space...
    name = (name.replace(/^\s+/,'')).replace(/\s+$/,'') ;
    
    // name must exist...
    if( name.length == 0 ) 
       return ;
           
    // check on special characters...
    if( name.match(/[\s\\\/@]/) ) {
       name = name.replace(/[\s\\\/@]/g,'_') ; 
       reply = confirm(
       "\n______________________________________________________________\n\n" +
       "*** Name contains special characters ***\n" +
       "______________________________________________________________\n\n" +
       "The name has been converted to " + name + "\n" +
       "Press OK to confirm change or Cancel to abandon " + option + " option." ) ;
        	   
       if( !reply ) 
          return ;
    
    }
    
    
    // Check to see whether another file or folder has the same name... 	    	  
    if( getFrame("directory").matchItem( name ) ) {
    
       // If source or destination is a folder, overwrite is not allowed anyway...
       if( (itemType == "Folder")
           ||
           ( getFrame("directory").matchedItemType( name ) == "Folder" ) ) {
      
         alert(
            "\n_____________________________________________________________________\n\n" +
            "*** Name is matched by an existing item in the current location ***\n" +
            "_____________________________________________________________________\n\n" +
            option + " option abandoned. You must choose a different name."  ) ;
       	      
         return ;   
       } 
       else {
    
          // Confirm overwrite of file...	  	   
          reply = confirm(
             "\n________________________________________________________________\n\n" +
             "*** Name is matched by another file in the current location ***\n" +
             "________________________________________________________________\n\n" +
             "Do you wish to overwrite?"  ) ;
       	      
          if( !reply ) 
             return ;
    
       }       
         
    }
 
    return name ;	
    
} // end of newName()


function getFrameDocument( frameName ) {
    return getFrame( frameName ).document ;
}

function getFrame( frameName ) {
    for( var i=0; i!= top.frames.length; i++ ) {
        if( top.frames[i].name == frameName ) {
           return top.frames[i] ;
        }
    }
}


</script>
      

	    <form id="myspace-explorer-form" action="." >
	    
          <input name="myspace-accountspace-ivornpath" id="myspace-accountspace-ivornpath" type="hidden">
             <xsp:attribute name="value"><xsp:expr>getAccountSpaceIvornPath()</xsp:expr></xsp:attribute>
          </input>                  
          <input name="requested-mode" id="requested-mode" type="hidden">
             <xsp:attribute name="value"><xsp-request:get-parameter name="requested-mode" default="main" as="string"/></xsp:attribute>
          </input>       
      
          <div >
          
             <table cellpadding="0" cellspacing="0" class="compact" border="0" width="100%" bgcolor="#dddddd">
                <tr>
                   <td align="left" width="8%">
                       Location:&#160;
                   </td>
                   <td align="left">
                       <input name="currentLocation" id="currentLocation" size="60" style="background-color: #dddddd" >
                          <xsp:attribute name="value"><xsp:expr>getCurrentLocation()</xsp:expr></xsp:attribute>
                       </input>
                   </td>
                   <td align="right">
                   
                       <table class="compact" width="10%">
                           <tr>                              
                              <td id="upTD" align="center" class="naviButton"
                                  onmouseover="highlight(this, 'up')"
                                  onmouseout="dehighlight(this, 'up')" 
                                  onClick="navigateUp();"
                                  title="Navigate up one folder"
                                  nowrap="true">Up
                              </td>
                              <td id="newFolderTD" align="center" class="naviButton"
                                  onmouseover="highlight(this, 'newFolder')"
                                  onmouseout="dehighlight(this, 'newFolder')" 
                                  onClick="newFolder();"
                                  title="Create new folder in current location"
                                  nowrap="true">New folder
                              </td>
                           </tr>
                        </table>                   
                   
                   </td>
                </tr>         
             </table>
  
          </div>

        </form>
    </ag-div>   
    
  </xsp:page>
