<?xml version="1.0" encoding="UTF-8"?>
<!--+
    | This is the 'heart' of Cocoon. The sitemap maps URI space to 
    | resources. It consists basicaly of two parts: components and
    | pipelines. Pipelines are made out of components. There is such a
    | vast number of components available that it would be impossible to
    | describe them here, please refer to the accompanying
    | documentation. For specific components, have a look also at the
    | javadocs for them. Most pipelines are present to demonstrate some
    | feature or technique, often they are explained in more detail in 
    | the accompanying documentation. The sitemaps which come with each
    | sample and each block will help to explain.
    |
    | CVS $Id: sitemap.xmap,v 1.9 2004/04/22 14:22:12 gps Exp $
    +-->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

<!-- =========================== Components ================================ -->

  <map:components>

  <!--+
      | All pipelines consist at least of two components: a generator, that
      | produces the content, and a serialiser, that delivers the content to
      | the client.
      | 
      | More precisely: a generator generates SAX events and a serializer
      | consumes these events and produces a byte stream.
      | 
      | Some things to note here: each generator has a unique name, this
      | name is mapped to a java class, one name is declared as the default
      | generator. Each generator may have additional configurations as
      | child elements.
      | 
      | Additional attributes are targeted at the component manager. The optional
      | "label" attribute is relevant for the view concept below. The optional
      | "logger" attribute defines the logging category where messages produced
      | by a component should go. If there's no "logger" attribute, the category
      | used is the one defined for the "sitemap" component in cocoon.xconf.
      | 
      | We have chosen in this sitemap to use a different logging category
      | for each component, which allows fine-grained classification of log
      | messages. But you are free to use any category you want.
      | 
      | It is possible to have the same java class declared as different
      | generators by using different names. No configuration options are
      | shared between these instances, however.
      | 
      | All components follow this scheme.
      +-->
    <map:generators default="file">
      <!--+
          | AstroGrid Generators.
          +-->
<!--
      <map:generator name="myspace-holding-gen" src="org.astrogrid.portal.myspace.generation.MySpaceHoldingsGenerator"/>
-->
      <map:generator name="myspace-holding-gen" src="org.astrogrid.portal.myspace.generation.StorageFilesGenerator"/>
    </map:generators>

  <!--+
      | Transformers can be placed inside the pipeline between the generator
      | and the serializer. You may have as many transformers as you
      | like. Transformers consume SAX events and emit SAX events.
      |
      | The "xslt" transformer is an example of a component with additional
      | configuration.
      +-->
    <map:transformers default="xslt">
      <!--+
          | AstroGrid Transformers.
          +-->
      <map:transformer name="myspace-holding-trans" src="org.astrogrid.portal.myspace.transformation.MySpaceHoldingsTransformer"/>
    </map:transformers>

  <!--+
      | Serializers consume SAX events and produce a character stream. Every
      | pipeline needs to be terminated by a serializer.
      +-->
    <map:serializers default="html"/>

  <!--+
      | Readers circumvent the XML oriented SAX pipeline model, think of a reader
      | being a generator and a serializer at once thus a pipeline may not
      | contain any generator, transformer or serializer in addition to a
      | reader. They are useful for delivering binary content like images.
      +-->
    <map:readers default="resource"/>

  <!--+
      | Matchers are executed during pipeline setup. They decide if a
      | pipeline fragment is used within a pipeline. Usually, the decision
      | is based on a match on the requested URI but matchers exist, that
      | match different things as well. Most often the fragment contained in
      | a matcher has a generator as well as a serializer. This is not a
      | necessity, matchers can be nested while chaining does not work.
      +-->
    <map:matchers default="wildcard"/>

  <!--+
      | Selectors are executed during pipeline setup. They can be used to
      | determine which pipeline fragments should be combined. They are best
      | compared with a java switch statement.
      +-->
    <map:selectors default="browser"/>

  <!--+
      | Actions are executed during pipeline setup. Their purpose is to
      | execute some code that doesn't involve touching the stream of
      | pipeline events. Example usage is to update databases, check external 
      | resources, etc.. The execution may fail or complete successfully. Only 
      | if the execution of the action was successful, the pipeline fragment 
      | nested inside the action element is executed, otherwise, it's skipped
      | entirely and execution proceeds from the element right below the action.
      +-->
    <map:actions>
      <map:action name="myspace-action" src="org.astrogrid.portal.myspace.acting.MySpaceControlAction"/>
<!--
      <map:action name="myspace-change" src="org.astrogrid.portal.myspace.acting.ChangeAction"/>
      <map:action name="myspace-copy" src="org.astrogrid.portal.myspace.acting.CopyAction"/>
      <map:action name="myspace-delete" src="org.astrogrid.portal.myspace.acting.DeleteAction"/>
      <map:action name="myspace-rename" src="org.astrogrid.portal.myspace.acting.RenameAction"/>
      <map:action name="myspace-newcon" src="org.astrogrid.portal.myspace.acting.NewContainerAction"/>
      <map:action name="myspace-extend-lease" src="org.astrogrid.portal.myspace.acting.ExtendLeaseAction"/>
      <map:action name="myspace-chown" src="org.astrogrid.portal.myspace.acting.ChownAction"/>
      <map:action name="myspace-geturl" src="org.astrogrid.portal.myspace.acting.MySpaceURLAction"/>
      <map:action name="myspace-upload" src="org.astrogrid.portal.myspace.acting.URLUploadAction"/>
-->
    </map:actions>

  <!--+
      | The different pipe implementations
      | 
      | NON-CACHING:
      |   The non caching implementation of cocoon pipelines.
      | 
      | CACHING:
      |   Traditional longest cacheable key caching.
      | 
      | CACHING-POINT:
      |   The caching-point pipeline implements an extended             
      |   caching algorithm which is of particular benefit for use with 
      |   those pipelines that utilise cocoon-views and/or provide      
      |   drill-down functionality.                                     
      | 
      | The autoCachingPoint algorithim (if enabled) will automatically
      | cache common elements of the pipeline currently being processed - as well
      | as the entire cacheable pipeline according to the "longest cacheable key"
      | algorithm.
      | 
      | Consider the following simple pipeline, where generator G is labelled with
      | a cocoon-view enabling the pipeline to serialize data to either html or pdf 
      | depending on the value of cocoon-view (as provided by the request):
      | G - T -  S(html)
      | |__ T -  S(pdf)
      | 
      | If cocoon-view=html, then the caching-point algorithm will not only cache 
      | the longest cacheable path, which would be GTS(html) but also the
      | *common element* which in this case would be the results from G. If the
      | next request to this pipeline was cocoon-view=pdf, then there would be no
      | need to invoke the generator a second time, as it's value has already been
      | cached (provided G generates the same cache key)
      | 
      | Also note: One can switch "Off" autoCachingPoint and use "pipeline-hints" to
      | manually indicate that certain pipeline-components should be considered as
      | cache points.
      +-->
    <map:pipes></map:pipes>

  </map:components>

<!-- =========================== Views =================================== -->

  <!--+
      | Views provide different, well, views to resources. Views are
      | orthogonal to pipelines. Please refer to the docs.
      |
      | It would be wise to disable any unneeded views in a 
      | production environment in order to avoid exposing data
      | that you may not necessarily wish to.
      +-->
  <map:views></map:views>

<!-- =========================== Resources ================================= -->

  <!--+
      | Resources are pipeline fragments that may be used from different
      | pipeline fragments. For our needs, they behave exactly like
      | pipelines, only that they are not accessible from outside.
      | Hence I will explain what's inside below for pipelines.
      +-->
  <map:resources>
    <map:resource name="myspace-action-submit">
      <map:act type="myspace-action">
        <map:parameter name="username" value="anonymous"/>
        <map:parameter name="group" value="roe.ac.uk"/>
        <map:parameter name="token" value="mytoken"/>
      </map:act>
    </map:resource>
<!--
    <map:resource name="myspace-action-submit">
      <map:select type="request-parameter">
        <map:parameter name="parameter-name" value="myspace-action"/>
        
        <map:when test="Change">
          <map:act type="myspace-change">
            <map:parameter name="myspace-end-point" value="myspace-end-point"/>
          </map:act>
        </map:when>
        
        <map:when test="Copy">
          <map:act type="myspace-copy">
            <map:parameter name="myspace-end-point" value="myspace-end-point"/>
            <map:parameter name="username" value="user"/>
            <map:parameter name="community-id" value="community_name"/>
            <map:parameter name="credential" value="credential"/>

            <map:parameter name="myspace-old-name" value="myspace-old-name"/>
            <map:parameter name="myspace-new-name" value="myspace-new-name"/>
          </map:act>
        </map:when>
        
        <map:when test="Delete">
          <map:act type="myspace-delete">
            <map:parameter name="myspace-end-point" value="myspace-end-point"/>
            <map:parameter name="username" value="user"/>
            <map:parameter name="community-id" value="community_name"/>
            <map:parameter name="credential" value="credential"/>

            <map:parameter name="myspace-old-name" value="myspace-old-name"/>
          </map:act>
        </map:when>
        
        <map:when test="Rename">
          <map:act type="myspace-rename">
            <map:parameter name="myspace-old-name" value="myspace-old-name"/>
            <map:parameter name="myspace-end-point" value="myspace-end-point"/>
            <map:parameter name="username" value="user"/>
            <map:parameter name="community-id" value="community_name"/>
            <map:parameter name="credential" value="credential"/>

            <map:parameter name="myspace-new-name" value="myspace-new-name"/>
          </map:act>
        </map:when>
        
        <map:when test="NewContainer">
          <map:act type="myspace-newcon">
            <map:parameter name="myspace-end-point" value="myspace-end-point"/>
            <map:parameter name="username" value="user"/>
            <map:parameter name="community-id" value="community_name"/>
            <map:parameter name="credential" value="credential"/>

            <map:parameter name="myspace-new-name" value="myspace-new-name"/>
          </map:act>
        </map:when>
        
        <map:when test="ExtendLease">
          <map:act type="myspace-extend-lease">
            <map:parameter name="myspace-end-point" value="myspace-end-point"/>
            <map:parameter name="username" value="user"/>
            <map:parameter name="community-id" value="community_name"/>
            <map:parameter name="credential" value="credential"/>

            <map:parameter name="myspace-old-name" value="myspace-old-name"/>
            <map:parameter name="myspace-extension-days" value="myspace-extension-days"/>
          </map:act>
        </map:when>
        
        <map:when test="Chown">
          <map:act type="myspace-chown">
            <map:parameter name="myspace-end-point" value="myspace-end-point"/>
            <map:parameter name="username" value="user"/>
            <map:parameter name="community-id" value="community_name"/>
            <map:parameter name="credential" value="credential"/>

            <map:parameter name="myspace-old-name" value="myspace-old-name"/>
            <map:parameter name="myspace-chown" value="myspace-chown"/>
          </map:act>
        </map:when>
        
        <map:when test="View">
          !- *** HANDLED ELSEWHERE *** -
        </map:when>
        
        <map:when test="UploadURL">
          <map:act type="myspace-upload">
            <map:parameter name="myspace-end-point" value="myspace-end-point"/>
            <map:parameter name="username" value="user"/>
            <map:parameter name="community-id" value="community_name"/>
            <map:parameter name="credential" value="credential"/>

            <map:parameter name="myspace-name" value="myspace-new-name"/>
            <map:parameter name="myspace-upload-url" value="myspace-upload-url"/>
            <map:parameter name="myspace-upload-category" value="myspace-upload-category"/>
          </map:act>
        </map:when>

        <map:otherwise>
        </map:otherwise>
      </map:select>
    </map:resource>
    
    <map:resource name="myspace-geturl">
      <map:act type="myspace-geturl">
        <map:parameter name="myspace-end-point" value="myspace-end-point"/>
        <map:parameter name="username" value="user"/>
        <map:parameter name="community-id" value="community_name"/>
        <map:parameter name="credential" value="credential"/>
        <map:parameter name="myspace-name" value="myspace-old-name"/>
      </map:act>
    </map:resource>
-->
  </map:resources>

<!-- ========================== Action sets ================================ -->

 <!--+
     | Action sets group actions together. If some actions are often used
     | together in pipeline fragments, it's easier to group them and refer
     | to the group. For more info, please see the docs.
     +-->
  <map:action-sets></map:action-sets>

<!-- =========================== Pipelines ================================= -->

 <!--+
     | Pipelines. The beef. Pipelines specify how the processing of your
     | content is done. Usually, a pipeline consists of several fragments
     | that specify the generation, transformation, and serialization of
     | SAX events.
     |
     | Processing is done in two steps:
     |
     | 1) The top level elements are executed in order of appearance until
     |    one signals success. These top level elements are usually
     |    matchers.
     |
     |    Other components are called depth-first to determine what
     |    fragments make up the processing pipeline. When a component
     |    fails, no nested components are called but the next component on
     |    the same level.
     |
     | 2) Once it is determined which generator, which transformers and
     |    wich serializer is used, these components are executed. During
     |    this, the pipeline may not be changed.
     |
     | You may have as many pipelines in your sitemap as you like.
     +-->
  <map:pipelines>
    <map:component-configurations>
      <global-variables>
       <!--+
           | Define global parameters here:
           |   <skin>my_skin</skin>
           |   ...
           | You can access them by {global:*name*}, e.g. {global:skin}.
           | These values are inherited into sub-sitemaps and can
           | be extended there.
           +--></global-variables>
    </map:component-configurations>

  <!-- main pipeline -->
    <map:pipeline>
      <map:match pattern="myspace-explorer">
        <map:aggregate element="explorer">
          <map:part element="tree" src="cocoon:/myspace-tree.xml"/>
          <map:part element="select" src="cocoon:/myspace.xsp"/>
        </map:aggregate>
        
        <map:transform src="web/style/xsl/myspace-explorer.xsl"/>

        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="myspace-micro">

        <map:generate type="myspace-holding-gen">
          <map:parameter name="username" value="anonymous"/>
          <map:parameter name="group" value="roe.ac.uk"/>
          <map:parameter name="token" value="mytoken"/>
        </map:generate>
        
        <map:transform src="web/style/xsl/myspace-micro.xsl">
          <map:parameter name="use-request-parameters" value="true"/>
        </map:transform>
        
        <map:serialize type="html"/>
      </map:match>

      <map:match pattern="myspace-tree.xml">
        <map:call resource="myspace-action-submit"/>
        
        <map:generate type="myspace-holding-gen">
          <map:parameter name="username" value="anonymous"/>
          <map:parameter name="group" value="roe.ac.uk"/>
          <map:parameter name="token" value="mytoken"/>
        </map:generate>
        
        <map:transform src="web/style/xsl/myspace-holdings.xsl"/>
        <map:serialize type="xml"/>
      </map:match>

      <!-- xml -->
<!--
      <map:match pattern="webstart/**.xml">
        <map:act type="myspace-geturl">
          <map:parameter name="myspace-end-point" value="myspace-end-point"/>
          <map:parameter name="username" value="user"/>
          <map:parameter name="community-id" value="community_name"/>
          <map:parameter name="credential" value="credential"/>
          <map:parameter name="myspace-name" value="myspace-old-name"/>

          <map:generate type="file" src="webstart/{../1}.xml"/>
        
          <map:transform src="web/style/xsl/webstart.xsl">
            <map:parameter name="myspace-url" value="{myspace-url}"/>
          </map:transform>
        
          <map:serialize type="jnlp"/>
        </map:act>
      </map:match>
-->
      
      <map:match pattern="*.xml">
        <map:generate type="file" src="web/static/{1}.xml"/>
        <map:transform src="cocoon://xml2html.xsl"/>
        <map:serialize type="xml"/>
      </map:match>

      <!-- xsp -->
      <map:match pattern="myspace.xsp">
        <map:generate type="serverpages" src="web/dynamic/myspace.xsp"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="**.xsp">
        <map:generate type="serverpages" src="web/dynamic/{1}.xsp"/>
        <map:transform src="cocoon://xml2html.xsl"/>
        <map:serialize type="xhtml"/>
      </map:match>

    <!-- images -->
      <map:match pattern="*.gif">
        <map:read mime-type="images/gif" src="web/images/{1}.gif"/>
      </map:match>
      <map:match pattern="*.jpg">
        <map:read mime-type="images/jpeg" src="web/images/{1}.jpg"/>
      </map:match>
      <map:match pattern="*.png">
        <map:read mime-type="images/png" src="web/images/{1}.png"/>
      </map:match>

    <!-- CSS stylesheets -->
      <map:match pattern="*.css">
        <map:read mime-type="text/css" src="web/style/css/{1}.css"/>
      </map:match>

    <!-- logicsheets -->
      <map:match pattern="logicsheets/**.xsl">
        <map:generate type="file" src="web/logicsheets/{1}.xsl"/>
        <map:serialize type="xml"/>
      </map:match>

    <!-- XSLT stylesheets -->
      <map:match pattern="*.xsl">
        <map:generate type="file" src="web/style/xsl/{1}.xsl"/>
        <map:serialize type="xml"/>
      </map:match>

    <!-- JavaScript scripts -->
      <map:match pattern="*.js">
        <map:read mime-type="text/javascript" src="web/scripts/{1}.js"/>
      </map:match>
    </map:pipeline>
  </map:pipelines>

</map:sitemap>
