<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<properties>
		<author email="gtr@ast.cam.ac.uk">Guy Rixon</author>
		<title>Installation</title>
	</properties>
	<body>
		<section name="Installation">
		<p>This document describes the standard installation. Please see the reference guide for
			possible variations.</p>
		
		<subsection name="Java Runtime Environment">
                  <p>Use SUN Microsystem's implemenation of Java 5.
                  You only need the Java Runtime Environment package; you don't 
                  need the full Java Development Kit.</p>
		</subsection>
                   <subsection name="Web container (Apache-Tomcat)">
                   <p>Use Apache-Tomcat 5.5 as the web-container.</p>
                </subsection>   
	        <subsection name="Tomcat users and roles">
                  <p>In Tomcat's <i>tomcat-users.xml</i> file, make sure that
                  you have at least one user with the <i>manager</i> role.</p>
	        </subsection>
			<subsection name="Naming the web-application context">
				<p>
					You must choose a name for the "context" in which the web-application runs. This name will 
					become part of the URLs for your HTTP-CEC web-service and the web pages of your JC-CEC web-application. 
					E.g., if you name the web-application context "JC-CEC-1", the URLs will be of the form <pre>
http://your.server.address:8080/JC-CEC-1/
http://your.server.address:8080/JC-CEC-1/services/CommonExecutionConnectorService </pre>
					respectively.
				</p>
			</subsection>
			<subsection name="Java class for the applications">
				<p>
				For this kind of CEC, you must provide the applications as a compiled Java-class.
				When correctly configured, the CEC will present every <em>static</em> method of that class
				as a CEA application. The methods that become applications can only have primitive arguments
				or arguments of type <i>java.lang.String</i>: custom objects as arguments are not supported.
				Each such method should return its result in the Java sense (i.e. don't write the result
				to standard output). Don't include a <i>Main</i> method in the class; that will show up
				as a separate, broken application in the CEA. See the reference manual for more advice on
				providing Java-class applications.
				</p>
			</subsection>
			<subsection name="AstroGrid MySpace">
				<p> Your CEC works with AstroGrid's <i>FileManager</i> component to read and write files in
					AstroGrid MySpace. The details of which stores to use are set by the clients of the web-application
					in requests to the CEC web-service. You do not need to supply your own FileManager to operate
					the CEC web-application.</p>
                                <p>This version of the web-application cannot use IVOA-standard VOSpace.</p>
			</subsection>
			<subsection name="Registry">
				<p> Your web application uses an IVOA resource-registry to publicize its capabilities. You
					must have access to a registry in which you can publish your resources and a registry from
					which your CEC can search for resources at run-time. </p>
				<p> The publishing registry and the searchable registry may be the same service. In this
					case, you will typically use an external registry. As an alternative, you may choose to
					run a local publishing registry. This makes it easier to publish and maintain groups of
					services on your site and also helps you establish a "brand" for your services by
					associating them with your own publishing authority. If you want to run a publishing
					registry, then you should install and set up the AstroGrid registry component
					<em>before</em> setting up your CEC. </p>
			</subsection>
		<subsection name="Installation procedure">
				<ol>
				<li>Obtain a copy of the WAR file for the CEC from the AstroGrid software site. See the
					<a href="DOWNLOAD.html">guide to downloading</a> for details. </li>
				<li>Rename the WAR file to match the chosen name of the web-application context; e.g.
					JC-CEC-1.war if the context is JC-CEC-1 as in the example above. </li>
				<li>Copy your renamed WAR file into the <i>webapps</i> sub-directory of your Tomcat
					installation. Wait a few seconds. Tomcat notices the WAR file, unpacks the web-application
					into a sub-directory tree in the <i>webapps</i> directory and starts the
					web-application.</li>
				<li>
					Check that the web-application has started correctly by going, with a web-browser, to the
					root of the web application (http://your.server.address:8080/JC-CEC-1/ in the example above).
					If no web-page is returned, then there is a problem with the WAR.
				</li>
				<li>Add the classes for your Java application to Tomcat. If you have them as separate <i>.class</i>
				files then put them in the <i>common/classes</i> directory within Tomcat. If you have them
				in a JAR file, put the jar in the <i>common/lib</i> directory within Tomcat.</li>
				<li>Restart Tomcat so that it notices the new classes and jars.</li>
				<li>Now set up your web-application by following the instructions in the configuration guide.</li>
				</ol>
		</subsection>
		</section>
	</body>
</document>
