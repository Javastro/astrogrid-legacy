<project name="install" default="info" basedir=".">
	<property file="default.properties"/>

	<!-- This is the directory in which the WAR is unpacked to get at files such as 
		   the registration template. The directory is not used after the installation. -->
	<property name="cea.temporary.dir" value="cea-tmp"/>
	
	<property name="local.cea.war" value="${basedir}/cea.war"/>
	
	<!--Public Targets-->

	<target name="save-config" description="Save this configuration for future use">
        <input addProperty="input.saveProperties.file" defaultvalue="${user.home}/.cea-installer.properties">Enter a file name for saving your current settings</input>
        <echoproperties destfile="${input.saveProperties.file}" prefix="input." description="This file can then be reused for hands-free operation"/>
    	<property name="properties.saved" value="true"/>
    </target>
	
	<target name="load-config" description="Load a previously saved configuration">
    	<input addProperty="input.loadProperties.file" defaultvalue="${user.home}/.cea-installer.properties">Enter the filename of your previously saved settings</input>
    	<property file="${input.loadProperties.file}"/>
    </target>

	<target name="install" description="Install cea" depends="deploy, copy-java-app, set-registration-template, set-application-description, setup-working">
	        <echo>***The cea has been successfully installed***</echo>
	    	<property name="cea.installed" value="true"/>	
    </target>		
	
	<target name="register" description="Register this cea" depends="checkTomcat,set-context-path">
		<property name="cea.register.fullurl" value="${input.tomcat.url}${input.cea.contextpath}/${cea.register.url}"/>
		<property name="cea.viewregentry.fullurl" value="${input.tomcat.url}${input.cea.contextpath}/${cea.viewregentry.url}"/>
		<echo>Registering the cea using the built-in JSP page ${cea.register.fullurl}...</echo>
		<!--might need to pause for tomcat to sort itself out-->
		<waitfor checkevery="5" checkeveryunit="second" maxwait="120" maxwaitunit="second" timeoutproperty="error.could-not-register">
			<http url="${cea.register.fullurl}"/>
		</waitfor>
		<fail if="error.could-not-register" message="Failed to register.  Try accessing the ${cea.register.fullurl} page yourself in a browser"/>
		<property name="cea.registered" value="true"/>
	</target>
	
	<target name="remove" description="Remove cea" depends="checkTomcat, load-flavour-dependent-properties, undeploy">
    	<sleep seconds="10" description="Allow Tomcat to catch up"/>
        <echo>***The cea has been successfully removed***</echo>
    	<property name="cea.uninstalled" value="true"/>
	</target>
	
	<target name="install-and-register" depends="install,register" description="convenience target for AGINAB"/>
	
	<!--Private Targets -->
	<target name="choose-flavour" description="which cea to install?">
		<echo>The CEA comes in three flavours:</echo>
		<echo>   Java (manages applications written in Java)</echo>
		<echo>   commandline (manages command-line applications)</echo>
		<echo>   http (delegates to http services such as SIAP servers)</echo>		
		<input addproperty="input.cea.flavour" 
			validargs="commandline,http,Java" 
			defaultvalue="commandline">Which flavour of CEA do you wish to (un)install?</input>
	</target>
	
	<target name="set-flavour-dependent-properties" 
		depends="load-flavour-dependent-properties, choose-flavour, get-vanilla-inputs, get-commandline-inputs, get-http-inputs"/>
	
	<target name="load-flavour-dependent-properties" depends="choose-flavour">
		<condition property="cea.flavourdependentpropertiesfile" value="vanilla.properties">
			<equals arg1="${input.cea.flavour}" arg2="Java"/>
		</condition>
		<condition property="cea.flavourdependentpropertiesfile" value="commandline.properties">
			<equals arg1="${input.cea.flavour}" arg2="commandline"/>
		</condition>
		<condition property="cea.flavourdependentpropertiesfile" value="http.properties">
			<equals arg1="${input.cea.flavour}" arg2="http"/>
		</condition>		
		<property file="${cea.flavourdependentpropertiesfile}"/>
		<echo message="cea.flavour.iscommandline = ${cea.flavour.iscommandline}"/>
	</target>
	
	<!--anything vanilla specific-->
	<target name="get-vanilla-inputs" depends="load-flavour-dependent-properties" if="cea.flavour.isvanilla">
		<input addproperty="input.cea.mailserver" defaultvalue="localhost">Please enter the address of your smtp server</input>
		<input addproperty="input.cea.javaclass.server.class" defaultvalue="org.astrogrid.applications.javaclass.SampleJavaClassApplications">Please enter the fully qualified name of the java class containing the static methods that provide the interface to your application</input>
	</target>
	<target name="copy-java-app" if="cea.vanilla.docopy" depends="get-shouldicopy,update-war">
		<input addproperty="input.cea.vanilla.appjar.dir">Please select the folder containing the jar files for your application</input>
		<war update="yes" destfile="${local.cea.war}">
			<lib dir="${input.cea.vanilla.appjar.dir}"/>
		</war>
	</target>	
	<target name="get-shouldicopy" if="cea.flavour.isvanilla">
		<input addproperty="input.cea.install.java" defaultvalue="yes" validargs="yes,no">Do you wish to install a custom java application?</input>
		<condition property="cea.vanilla.docopy" value="yes">
			<equals arg1="${input.cea.install.java}" arg2="yes"/>
		</condition>
	</target>
	<target name="get-tomcat-location" if="cea.vanilla.docopy">
		<input addProperty="input.tomcat.location.dir" defaultvalue="/usr/local/tomcat">Enter the location of your Tomcat installation</input>		
	</target>	
	<!--anything http specific-->
	<target name="get-http-inputs" depends="load-flavour-dependent-properties" if="cea.flavour.ishttp">
		
	</target>
	<!--anything cmdline specific-->
	<target name="get-commandline-inputs" depends="load-flavour-dependent-properties" if="cea.flavour.iscommandline">
		<input addproperty="input.cea.config.file" 
			defaultvalue="${antigen.home}">Please give the location of the application-description file.</input>
		<property name="cea.has.app.description" value="true"/>
	</target>	
	
	
	
	<target name="setup-working" description="Initialise the cea working dir" depends="get-working-dir">
		<echo>setting up working directory</echo>
		<mkdir dir="${input.cea.working.dir}/config"/>	
		<mkdir dir="${input.cea.working.dir}/temp"/>		
		<mkdir dir="${input.cea.working.dir}/records"/>
    <chmod dir="${input.cea.working.dir}" perm="a+x">
      <include name="*.sh" />
      <include name="*.bat"/>
    </chmod>		
	</target>
			
	<target name="info">
		<echo>cea installation script</echo>
		<echoproperties></echoproperties>
	</target>
	

		
    <target name="checkTomcat" depends="fail-if-no-tomcat">
		<input addProperty="input.tomcat.url" defaultvalue="http://127.0.0.1:8080">Please enter the URL of Tomcat on your system </input>    	
        <input addProperty="input.tomcat.manager.user" defaultvalue="tomcat">Please enter the Tomcat manager username</input>
        <input addProperty="input.tomcat.manager.pass" defaultvalue="tomcat">Please enter the Tomcat manager password</input>
        <echo>Attempting to contact Tomcat Manager...</echo>
        <tempfile property="page.check"/>
        <property name="tomcat.manager.url" value="${input.tomcat.url}/manager"/>
        <get src="${tomcat.manager.url}" dest="${page.check}" username="${input.tomcat.manager.user}" password="${input.tomcat.manager.pass}"/>
        <echo>...OK</echo>
    </target>	

	<target name="fail-if-no-tomcat">
		<input addProperty="input.tomcat.present" validargs="continue,abort"> Please ensure that Tomcat is running on your system with the Manager app enabled</input>
        <condition property="tomcat.present.true">
	            <equals arg1="${input.tomcat.present}" arg2="continue"/>
        </condition>
        <fail message="Please start Tomcat and retry the installation" unless="tomcat.present.true"/>
	</target>
	
    <target name="download" unless="offline" depends="load-flavour-dependent-properties,set-war-location">
    	<echo>Downloading cea software....this may take some time...</echo>
    	<mkdir dir="${cea.war.dir}"/>
    	<property name="cea.continueifnodownload" value="false"/> <!--can be overridden in AGINAB to allow use of local files-->
        <get src="${astrogrid.repo}/${astrogrid.groupId}/wars/${cea.war.name}" dest="${cea.war}" verbose="true" usetimestamp="true" ignoreerrors="${cea.continueifnodownload}"/>
    </target>
	
	<target name="set-war-location" depends="load-flavour-dependent-properties">
		<property name="cea.war.dir" value = "${maven.local.repo}/${astrogrid.groupId}/wars"/>
		<property name="cea.war" value="${cea.war.dir}/${cea.war.name}"/>
	</target>

	
    <target name="deploy" depends="define-custom-tasks,createTmpDir,checkTomcat,fail-if-no-tomcat,update-war,set-context-path,copy-java-app">
        <tomcat-deploy update="true" url="${tomcat.manager.url}" username="${input.tomcat.manager.user}" password="${input.tomcat.manager.pass}" 
            path="${input.cea.contextpath}" war="${local.cea.war}" />
    </target>
	
	<target name="set-context-path" depends="load-flavour-dependent-properties">
		<input addproperty="input.cea.contextpath" defaultvalue="${cea.webapp.defaultcontext}">Please enter the context path on the webserver for cea</input>
	</target>
	
	<target name="get-input-properties" depends="checkTomcat,set-context-path,get-working-dir,checkRegistry,get-registry-key">
		<property name="cea.service.endpoint.url" value="${input.tomcat.url}${input.cea.contextpath}/services/CommonExecutionConnectorService"/>
		<property name="cea.ivorn" value="ivo://${input.cea.regauthority}/${input.cea.regkey}"/>
		<echo>IVORN for this cea is ${cea.ivorn}</echo>		
	</target>	
	
	<target name="get-registry-key">
		<input addproperty="input.cea.regauthority" defaultvalue="org.astrogrid.localhost">Please enter the Authority under which this CEA is/will be registered.</input>
		<input addproperty="input.cea.regkey" defaultvalue="${cea.regkey.default}">Please enter the registry key for this CEA server</input>
	</target>
	
	<target name="get-working-dir">
		<input addproperty="input.cea.working.dir" defaultvalue="${antigen.home}/cea/working">Please enter the location of your working directory</input>
	</target>

	
    <target name="undeploy" depends="define-custom-tasks,checkTomcat,set-context-path">
        <tomcat-remove url="${tomcat.manager.url}" username="${input.tomcat.manager.user}" password="${input.tomcat.manager.pass}" 
            path="${input.cea.contextpath}"  />
    </target>   

    <target name="update-war" 
    	depends="set-war-location,download, get-input-properties, set-flavour-dependent-properties, set-context-path, get-working-dir,checkRegistry,set-registration-template">
        <filterset id="myfilter">

          <filter token="CEA_WEBAPP" value="${input.cea.contextpath}"/>
          <filter token="CEA_WORKING" value="${input.cea.working.dir}"/>  
        	<!--Registry template file?-->
        	<filter token="REG_UPDATE" value="${astrogrid.registry.update.endpoint}"/>
        	<filter token="REG_QUERY" value="${astrogrid.registry.query.endpoint}"/>        
        	<filter token="CEACMDCONFIG" value="${input.cea.config.file}"/> <!-- Obsolete -->
        	<filter token="REGAUTHORITY" value="${input.cea.regauthority}"/>  
        	
        	<filter token="CEA_SERVICE_URL" value="${cea.service.endpoint.url}"/> <!-- Should refer to web-app URL -->
        	<filter token="MAILHOST" value="${input.cea.mailserver}"/> 
        	<filter token="JAVACLASS" value="${input.cea.javaclass.server.class}"/> 
        	
        </filterset>
        <copy todir="${cea.temporary.dir}/cea" overwrite="true">
            <filterset refid="myfilter"/>
            <fileset dir="${cea.context.dir}" />
        </copy>
        <copy file="${cea.war}" tofile="${local.cea.war}" overwrite="true"/>
    	<!--update the context.xml-->
        <war update="yes" destfile="${local.cea.war}">
            <metainf dir="${cea.temporary.dir}/cea" />
        </war>
    </target>

	    
    <target name="checkRegistry">
        <input addProperty="input.astrogrid.registry.endpoint" defaultvalue="http://galahad.star.le.ac.uk:8080/galahad-registry/">Please enter the URL of your registry</input>
    	<property name="astrogrid.registry.endpoint" value="${input.astrogrid.registry.endpoint}"/>
    	<property name="astrogrid.registry.update.endpoint" value="${astrogrid.registry.endpoint}${astrogrid.registry.update.offset}"/>
    	<property name="astrogrid.registry.query.endpoint" value="${astrogrid.registry.endpoint}${astrogrid.registry.query.offset}"/>
        <echo>Attempting to contact the registry...</echo>
        <tempfile property="page.check"/>
    	<waitfor checkevery="5" checkeveryunit="second" maxwait="120" maxwaitunit="second" timeoutproperty="error.could-not-getregistry">
    		<http url="${astrogrid.registry.update.endpoint}" />
    	</waitfor>
    	<fail if="${error.could-not-getregistry}" message="Unable to contact registry - please check that you can access the url ${astrogrid.registry.update.endpoint}"/>
        <echo>...OK</echo>
    </target>
    
    	
	    
    <target name="createTmpDir">
        <delete dir="${cea.temporary.dir}"/>
        <mkdir dir="${cea.temporary.dir}"/>
    </target>
	
	<target name="set-registration-template" 
		depends="set-war-location,download,get-working-dir,createTmpDir,get-registry-key">
		
		<echo>Extracting registration-template file from ${cea.war} to ${cea.temporary.dir}...</echo>
		<unwar src="${cea.war}" dest="${cea.temporary.dir}" overwrite="true">
		  <patternset>
		    <include name="registration-template.xml"/>
		  </patternset>
		</unwar>
		
		<input addproperty="input.cea.username" defaultvalue="John Taylor">Please enter the contact name you wish to put in the registry</input>
		<input addproperty="input.cea.useremail" defaultvalue="jdt@roe.ac.uk">Please enter the contact email you wish to put in the registry</input>		
		<tstamp>
			<format property="installation.time" pattern="yyyy-MM-dd"/>
		</tstamp>
		
		<!-- AFAIK, this filterset is not used - GTR
        <filterset id="regfilter">
          <filter token="REGAUTHORITY" value="${input.cea.regauthority}"/>
          <filter token="DefaultCEC" value="${input.cea.regkey}"/>  
          <filter token="CONTACT_NAME" value="${input.cea.username}"/>
          <filter token="CONTACT_EMAIL" value="${input.cea.useremail}"/> 
        	<filter token="TODAY" value="${installation.time}"/> 
        </filterset>
		-->

		<!-- Transform the temporary copy of the registration template into the working copy,
			   setting the important parameters. Some of the parameters from the dead filterset
		     above should be added to the XSL stylesheet. -->
		<xslt style="templatetransformer.xsl" 
			    in="${cea.temporary.dir}/registration-template.xml" 
			    out="${input.cea.working.dir}/config/registration-template.xml">
		   <param name="REGAUTHORITY" expression="${input.cea.regauthority}"/>
	     <param name="CECNAME" expression="${input.cea.regkey}"/>
		</xslt>
		<echo>Registration template has been installed at ${input.cea.working.dir}/config/registration-template.xml</echo>
	</target>

	<target name="set-application-description"
		      description="Copies the user-supplied application-description file to the standard location where the CEC expectes it."
		      if="cea.flavour.iscommandline"
		      depends="get-working-dir,setup-working,get-commandline-inputs">
		<copy file="${input.cea.config.file}" 
			tofile="${input.cea.working.dir}/config/app-description.xml"
			overwrite="true"/>
	</target>

	
	<!-- The reason for making these optional is that they might be already
	     set by an enclosing Maven script-->
	<target name="define-custom-tasks" unless="custom.tasks.defined">
		<!-- Configure the custom Ant tasks for the Manager application -->
	    <taskdef name="tomcat-deploy" classname="org.apache.catalina.ant.DeployTask" />
	    <taskdef name="tomcat-install" classname="org.apache.catalina.ant.InstallTask" />
	    <taskdef name="tomcat-list" classname="org.apache.catalina.ant.ListTask" />
	    <taskdef name="tomcat-reload" classname="org.apache.catalina.ant.ReloadTask" />
	    <taskdef name="tomcat-remove" classname="org.apache.catalina.ant.RemoveTask" />
	    <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" />
	    <taskdef name="tomcat-roles" classname="org.apache.catalina.ant.RolesTask" />
	    <taskdef name="tomcat-start" classname="org.apache.catalina.ant.StartTask" />
	    <taskdef name="tomcat-stop" classname="org.apache.catalina.ant.StopTask" />
	    <taskdef name="tomcat-undeploy" classname="org.apache.catalina.ant.UndeployTask" />
	</target>
</project>