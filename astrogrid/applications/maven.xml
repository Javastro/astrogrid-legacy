<?xml version="1.0" ?>
<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:maven="jelly:maven" xmlns:deploy="deploy" default="jar:jar">
<!-- location of generated source tree -->
<property name="generated.src" location="${basedir}/generated/java" />
<property name="generated.dir" location="${basedir}/generated" />
<!-- Tomcat properties -->
<property name="appint.webapp.name" value="${pom.artifactId}"/><!-- use the standard application id -->
<property name="appint.service.name" value="ApplicationControllerService"/>
<property name="tomcat.host" value="localhost"/>
<property name="tomcat.port" value="8080"/>

<property name="tomcat.url" value="http://${tomcat.host}:${tomcat.port}"/>
<property name="tomcat.manager.url" value="${tomcat.url}/manager"/>
 <!-- Axis properties-->
<property name="axis.base"     value="${basedir}/build/axis"/>
<property name="axis.webapp.srcdir"  value="${axis.base}/${appint.webapp.name}"/>
<property name="axis.url"     value="${tomcat.url}/${appint.webapp.name}"/>
<property name="axis.timeout" value="60"/>

<!-- this classpath comes from the files that are extracted from the axis distro / could this be shortened with a fileset?-->
    <path id="axis.classpath">
        <pathelement location="${axis.webapp.srcdir}/WEB-INF/lib/axis.jar"/>
        <pathelement location="${axis.webapp.srcdir}/WEB-INF/lib/axis-ant.jar"/>
        <pathelement location="${axis.webapp.srcdir}/WEB-INF/lib/saaj.jar"/>
        <pathelement location="${axis.webapp.srcdir}/WEB-INF/lib/wsdl4j.jar"/>
        <pathelement location="${axis.webapp.srcdir}/WEB-INF/lib/jaxrpc.jar"/>
        <pathelement location="${axis.webapp.srcdir}/WEB-INF/lib/commons-logging.jar"/>
        <pathelement location="${axis.webapp.srcdir}/WEB-INF/lib/commons-discovery.jar"/>
    </path>
    
<property name="maven.war.src" value="${axis.webapp.srcdir}"/> 
<property name="maven.war.webapp.dir" location="${maven.build.dir}/${pom.artifactId}" /> <!-- set this early to default - does not seem to be set n the war:webapp post goal -->

<goal name="astrogrid-deploy-site">
	    <attainGoal name="builddelegate" />
	    <attainGoal name="site" /><!-- NWW: added - necessary, as site:fsdeploy won't do it by itself -->
		<attainGoal name="site:fsdeploy" />
</goal>

<goal name="astrogrid-deploy-snapshot" prereqs="jar:deploy-snapshot,war:deploy-snapshot" />
<goal name="astrogrid-deploy-artifact" prereqs="jar:deploy,war:deploy"/>


	<preGoal name="war:init">
	   <!-- make sure that the latest axis is in place necessary for the maven install -->
	   <attainGoal name="axis.unpack" /> 
	</preGoal>
	<postGoal name="war:webapp">
	    <attainGoal name="delegatejar" />
		<echo message="copying cvs webapp stuff on top"/>
  <!-- make sure that the cvs maven stuff is put into the webapp - because the axis dir is regarded as source for the war goal-->
        <copy todir="${maven.war.webapp.dir}" overwrite="yes">
        <fileset dir="${basedir}/src/webapp"></fileset>
        </copy>
		<echo message="Copying generated site ${maven.docs.dest} across to webapp ${maven.war.webapp.dir}/maven"/>
		<copy todir="${maven.war.webapp.dir}/maven" overwrite="yes">
			<fileset dir="${maven.docs.dest}"/>
		</copy>
		<echo message="copying across a readme and Install"/>
		<copy todir="${maven.war.webapp.dir}" overwrite="yes">
			<fileset dir="${basedir}">
				<include name="INSTALL"/>
				<include name="README"/>
			</fileset>
			<fileset dir="${maven.build.dir}" includes="ApplicationControllerDelegate.jar" />
			<!-- need to do the sample config too -->
		</copy>
		<echo message="copying across xml schema"/>
		
		<copy todir="${maven.war.webapp.dir}/schema" overwrite="yes">
			<fileset dir="${basedir}/schema">
				
			</fileset>
		</copy>
		
		<echo message="copying across configuration utils and  database schema"/>
		
		<copy todir="${maven.war.webapp.dir}/config" overwrite="yes">
			<fileset dir="${basedir}/src/sql">
			</fileset>
		    <fileset dir="${basedir}/config" />	
		    <fileset dir="${basedir}/generated/">
		    <include name="wsdd/**" />
		    </fileset>	
			
			<fileset dir="${basedir}"> <include name="antutils.xml"/></fileset>
		</copy>
		
		<echo message="copying across a test application - ${maven.test.dest}"/>
		
		<copy todir="${maven.war.webapp.dir}/test" overwrite="yes">
		    <fileset dir="${basedir}/test">
		       <include name="app/**"/>
		       <include name="config/**"/>
		    </fileset>
		    <!-- also get the test.properties from the test area-->
		    <fileset dir="${maven.test.dest}">
		       <include name="Test.properties" />
		    </fileset>
		</copy>
	
	<!--quick hack to add the services deployment would be better to run -->
	 <path id="fullapppath">
	        <fileset dir="${maven.war.webapp.dir}/WEB-INF/lib/" includes="*.jar"/>
	        <dirset dir="${maven.war.webapp.dir}/WEB-INF/classes/"/>
	    
	 </path>
	 <java classname="org.apache.axis.utils.Admin"
            dir="${maven.war.webapp.dir}/WEB-INF"
            classpathref="fullapppath" fork="yes" failonerror="true">
        <arg value="server"/>
        <arg value="${generated.dir}/wsdd/ApplicationControllerService/deploy.wsdd"/>
	</java>
		
	<!-- hack from mailing list to fix Maven XLST bug -->
	${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
	<!-- <xslt in="${generated.dir}/wsdd/ApplicationControllerService/deploy.wsdd"
	      out="${maven.war.webapp.dir}/WEB-INF/server-config.wsdd"
	      extension=".wsdd"
	      style="${basedir}/src/xslt/server-config.xsl"
	/> -->
		
		<!-- TODO - need to add links to the actual applications -->
	</postGoal>

<!-- hooks into existing goals -->
  <preGoal name="java:compile"><!-- generate classes from schema and wsdl first -->
   <!-- don't generate in this project any longer - all in the workflow-objects folder.   
     <mkdir dir="${generated.src}" />
     <path id="generated.src.path" location="${generated.src}"/>
    <maven:addPath id="maven.compile.src.set" refid="generated.src.path"/>  
    -->
    <maven:addPath id="maven.dependency.classpath" refid="axis.classpath"/>
<!-- don't do this for now....
  	-->
  </preGoal>

<!-- add the extra paths for site generate too -->  
  <preGoal name="site:generate" >
    <maven:addPath id="maven.dependency.classpath" refid="axis.classpath"/>
  </preGoal>

<!-- set up the test environment -->
<preGoal name="test:test">
   <mkdir dir="${basedir}/build/workdir"/>
   <mkdir dir="${basedir}/build/db"/>
</preGoal>

<preGoal name="test:test-resources">
<echo message="creating the test properties file"/>
   <!-- need to generate the Test.properties file to put the correct paths in -->
<copy file="${basedir}/test/java/Test.preprop" tofile="${basedir}/test/java/Test.properties" overwrite="true"/>


<echo file="${basedir}/test/java/Test.properties" append="true">
DBCreationScript=${basedir}/src/sql/createcontroldb.sql
WorkingDirectory=${basedir}/build/workdir
ApplicationConfigFile=file://${basedir}/test/config/TestApplicationConfig.xml
RegistryTemplate=file://${basedir}config/RegistryTemplate.xml
</echo>
</preGoal>


<!-- new goals -mainly for wsdl and stub generation-->

  <goal name="generate-wsdl" description="generate the wsdl from the classes" prereqs="axis-declare-tasks, java-compile-for-wsdl">
    <maven:addPath id="maven.dependency.classpath" refid="axis.classpath"/>
  	<delete><!-- clean out to start with -->
  	     <!-- need to save the server side skeleton -->
		<fileset dir="${generated.src}" >
			<include name="**/*.java" />
			<include name="**/*.class" />
			<include name="**/*.wsdd" />
			<include name="**/*.wsdl" />
		</fileset>
	</delete>
  <mkdir dir="${generated.dir}/wsdl" />
	<attainGoal name="java2wsdl" />
	      
  </goal>
  <goal name="java-compile-for-wsdl" prereqs="clean">
     <echo message="${maven.build.dest}" />
     <mkdir dir="${maven.build.dest}"/>
     <javac srcdir="${basedir}/src/java"
            destdir="${maven.build.dest}"
            classpathref="maven.dependency.classpath"
            debug="on">
            <exclude name="**/delegate/**"/>
            <exclude name="**/avodemo/**"/> 
     </javac>
  </goal>

  <goal name="generate-delegate" description="generate classes from wsdl" prereqs="axis-declare-tasks">
  	<delete><!-- clean out to start with -->
  	     <!-- need to save the server side skeleton -->
		<fileset dir="${generated.src}" >
			<include name="**/*.java" />
			<include name="**/*.class" />
			<include name="**/*.wsdd" />
		</fileset>
	</delete>
	<attainGoal name="wsdl2java" />
   </goal>
   
   <goal name="java2wsdl" prereqs="axis-declare-tasks">
     <maven:addPath id="maven.dependency.classpath" refid="axis.classpath"/>
   <axis-java2wsdl output="${generated.dir}/wsdl/${appint.service.name}.wsdl"
            classname="org.astrogrid.applications.manager.ApplicationController"
            location="${axis.url}/services/${appint.service.name}"
            namespace="urn:manager.applications.astrogrid.org"
            namespaceimpl="urn:impl.manager.applications.astrogrid.org"
            implclass="org.astrogrid.applications.manager.CommandLineApplicationController"
            style="WRAPPED"
            use="LITERAL"
   >
            <!-- The classpath to find the applicationServerService classes -->
            <classpath>
                <path location="${maven.build.dest}"/>
                <path refid="maven.dependency.classpath"/> <!-- for things in the common jar -->
            </classpath>
            <mapping package="org.astrogrid.applications" namespace="urn:beans.applications.astrogrid.org" />
            <mapping package="org.astrogrid.applications.description" namespace="urn:beans.applications.astrogrid.org" />
            
   </axis-java2wsdl>
   </goal> 
     
   <property name="wsdl.file" value="${generated.dir}/wsdl/${appint.service.name}.wsdl"/>
   <goal name="wsdl2java" prereqs="axis-declare-tasks">
   <maven:addPath id="maven.dependency.classpath" refid="axis.classpath"/>
   <axis-wsdl2java output="${generated.src}"             verbose="true"
            serverside="false"
            skeletondeploy="false"
            testcase="true"
		url="${wsdl.file}">
           <mapping namespace="urn:manager.applications.astrogrid.org" package="org.astrogrid.applications.delegate"/>
           <mapping namespace="urn:impl.manager.applications.astrogrid.org"   package="org.astrogrid.applications.delegate.impl"/>
           <mapping namespace="urn:beans.applications.astrogrid.org"   package="org.astrogrid.applications.delegate.beans"/>
            <classpath>
                <path location="${maven.build.dest}"/>
                <path refid="maven.dependency.classpath"/> <!-- for things in the common jar -->
            </classpath>
		
	</axis-wsdl2java>
	<!-- generate the server side stuff -->
  	<axis-wsdl2java output="${generated.src}"             verbose="true"
            serverside="true"
            skeletondeploy="true"
            testcase="false"
		url="${wsdl.file}">
           <mapping namespace="urn:manager.applications.astrogrid.org" package="org.astrogrid.applications.service"/>
           <mapping namespace="urn:impl.manager.applications.astrogrid.org"   package="org.astrogrid.applications.service"/>
           <mapping namespace="urn:beans.applications.astrogrid.org"   package="org.astrogrid.applications.delegate.beans"/>
		
	</axis-wsdl2java>
	<delete>
	 <fileset dir="${generated.src}">
	    <include name="**/service/*Locator.java" />
	    <include name="**/service/*Stub.java" />
	    <include name="**/service/*Service.java" />
	 </fileset>
	</delete>
	<!-- do some tidying -->
	<mkdir dir="${basedir}/wsdd/${appint.service.name}"/>
	<move todir="${generated.dir}/wsdd/${appint.service.name}" flatten="true">
	  <fileset dir="${generated.src}">
	    <include name="**/*.wsdd" />
	  </fileset>
	</move>
   </goal>
   
   <goal name="service-prepare-dependencies" prereqs="jar">
   <!-- do not really need to to this with the maven war goal - use that instead....-->
   </goal>


<!-- stand - alone goals - not addons to main build -->
     <goal name="showconfig" description="A goal to show important configuration settings">
 		<echo message="tomcat.home    : ${tomcat.home}"/>
		<echo message="tomcat.manager.username     : ${tomcat.manager.username}"/>
		<echo message="tomcat.manager.password     : ${tomcat.manager.password}"/>
		<echo message="maven.war.src               : ${maven.war.src}"/>
		<echo message="maven.build.dir               : ${maven.build.dir}"/>
        <property name="project.class.path.string" refid="maven.dependency.classpath"/>
        <echo>maven.dependency.classpath=${project.class.path.string}</echo>

 		<echo message=""/>
    </goal>

<!-- tasks for deployment / distribution -->
    <goal name="axis.unpack" description="download the full axis distribution and ">
        <delete dir="${axis.base}"/>        
        <mkdir dir="${axis.base}"/>
        <!-- there must be a way to reference this directly surely? does it use the JSTL expression language? what is the key?-->
        <j:forEach var="deps" items="${pom.artifacts}">
         <j:if test="${deps.dependency.artifactId=='axisfull' &amp;&amp; deps.dependency.type=='zip'}">
         <echo message="found full axis distribution"/>
          <unzip src="${deps.path}" dest="${axis.base}" >
          <patternset>
            <include name="**/webapps/**" />
          </patternset>
          </unzip>
          </j:if>
        </j:forEach>
        <echo message="${axis.webapp.srcdir}" />
        <mkdir dir="${axis.webapp.srcdir}" />
        <!--move the webapps stuff into the correct place -->
         <move  todir="${axis.webapp.srcdir}" >
           <fileset dir="${axis.base}/axis-1_1/webapps/axis" >
                        <exclude name="**/samples/**"/>
           </fileset>
         </move>
            <!-- 
        -->
        
    </goal>
    
    <goal name="webapp.install" prereqs="tomcat-declare-tasks">
         <echo message="installing applications integration webapp (with axis)"/>
        <tomcat-install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${appint.webapp.name}" war="file://${maven.build.dir}/${appint.webapp.name}"/>
    </goal>
    
    <goal name="service-deploy" prereqs="axis-declare-tasks">
         <axis-admin
            port="${tomcat.port}"
            hostname="${tomcat.host}"
            servletpath="/${appint.webapp.name}/services/AdminService"
            debug="true"
            xmlfile="${generated.dir}/wsdd/${appint.service.name}/deploy.wsdd"
            />
    </goal>

   <goal name="builddelegate" >
   		<!--build and depoly the delegate jar - would really like to pass properties to this maven project to put the classes elsewhere, but it does not seem immediately possible from the -->
		<maven:maven descriptor="${basedir}/delegate-project.xml" goals="jar:deploy-snapshot"/>
   	
   </goal>

    <goal name="delegatejar" prereqs="java:compile,test:compile">
    	
    <!--This is now really obsolete - the separate project should be used
    	 would be nice to have -${pom.currentVersion} in name, but cannot with cvs tag stuff - need to think of something better-->
         <jar destfile="${maven.build.dir}/ApplicationControllerDelegate.jar">
            <fileset dir="${maven.build.dest}">
               <include name="**/delegate/**" />
            </fileset>
            <fileset dir="${maven.test.dest}">
               <include name="**/delegate/**" />
            </fileset>
            
         </jar>
    </goal>
    <goal name="webapp.patch" prereqs="java:compile">
        <copy todir="${maven.war.webapp.dir}/WEB-INF/classes">
          <fileset dir="${maven.build.dir}/classes"/>
        </copy>
        <copy todir="${maven.war.webapp.dir}/">
          <fileset dir="src/webapp">
          <exclude name="WEB-INF/**"/>
          </fileset>
        </copy>
        
    </goal>
<!-- boilerplate below here -->
 <!-- <goal name="dataserver-deploy" description="fire wsdd at axis to deploy dataserver"
  	prereqs="axis-declare-tasks">
  	<axis-admin xmlfile="wsdd/AxisDataServer-deploy.wsdd" />
  </goal>

  <goal name="dataserver-undeploy" description="fire wsdd at axis to undeploy dataserver"
   	prereqs="axis-declare-tasks">
  	<axis-admin xmlfile="wsdd/AxisDataServer-undeploy.wsdd" />
  </goal>
    <preGoal name="test:test">
    <j:thread>
      <attainGoal name="start_test_server"/>
    </j:thread>
    <sleep seconds="10"/>
  </preGoal>

  
-->
  <goal name="axis-declare-tasks">
     <taskdef resource="axis-tasks.properties"   inheritRefs="true" >
           <classpath>
                <path refid="maven.dependency.classpath"/> 
                <path refid="axis.classpath" />
            </classpath>    
     </taskdef>
  </goal>

<!-- tomcat tools -->
<goal name="tomcat-declare-tasks">
   <maven:addPath id="maven.dependency.classpath" refid="axis.classpath"/>
  
   <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="tomcat-deploy"    classname="org.apache.catalina.ant.DeployTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-install"   classname="org.apache.catalina.ant.InstallTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-list"      classname="org.apache.catalina.ant.ListTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-reload"    classname="org.apache.catalina.ant.ReloadTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-remove"    classname="org.apache.catalina.ant.RemoveTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-roles"     classname="org.apache.catalina.ant.RolesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-start"     classname="org.apache.catalina.ant.StartTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-stop"      classname="org.apache.catalina.ant.StopTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpathref="maven.dependency.classpath"/>
</goal>


</project>
