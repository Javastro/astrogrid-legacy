//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.3-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.08.28 at 09:20:09 PM BST 
//


package org.astrogrid.applications.description.execution;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 *               A list of parameter values
 *            
 * 
 * <p>Java class for ListOfParameterValues complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ListOfParameterValues">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice maxOccurs="unbounded" minOccurs="0">
 *         &lt;element name="parameter" type="{http://www.ivoa.net/xml/CEA/types/v1.1}ParameterValue"/>
 *         &lt;element name="parameterGroup" type="{http://www.ivoa.net/xml/CEA/types/v1.1}ParameterValueGroup"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * @author Paul Harrison (paul.harrison@manchester.ac.uk) 10 Mar 2008
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ListOfParameterValues", propOrder = {
    "parameterOrParameterGroup"
})
public class ListOfParameterValues {

    @XmlElements({
        @XmlElement(name = "parameter", type = ParameterValue.class),
        @XmlElement(name = "parameterGroup", type = ParameterValueGroup.class)
    })
    protected List<Object> parameterOrParameterGroup;

    /**
     * Gets the value of the parameterOrParameterGroup property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the parameterOrParameterGroup property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getParameterOrParameterGroup().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ParameterValue }
     * {@link ParameterValueGroup }
     * 
     * 
     */
    public List<Object> getParameterOrParameterGroup() {
        if (parameterOrParameterGroup == null) {
            parameterOrParameterGroup = new ArrayList<Object>();
        }
        return this.parameterOrParameterGroup;
    }

    /**
     * @param param
     * @deprecated this is too simplistic now - all code using it will be assuming that parameter values can only occur in simple arrays.
     */
    public void addParameter(ParameterValue param) {
	getParameterOrParameterGroup().add(param);
    }

    /**
     * 
     * @return
     * @deprecated possibly too simplistic - missing out parameter grouping.... however implemented as returning everything in the goup as well
     */
    public ParameterValue[] getParameter() {
	List<ParameterValue> vals = new ArrayList<ParameterValue>();
	for (Iterator iterator = getParameterOrParameterGroup().iterator(); iterator.hasNext();) {
	    Object vorg =iterator.next();
	    if (vorg instanceof ParameterValue) {
		ParameterValue pval = (ParameterValue) vorg;
		vals.add(pval);
		continue;
	    }
	    if (vorg instanceof ParameterValueGroup) {
		ParameterValueGroup vgroup = (ParameterValueGroup) vorg;
		vals.addAll(vgroup.getParameter());
		continue;
	    }
	    assert true: "List of parameter values contains unknown type="+vorg.getClass().getCanonicalName();  
	    
	}
	return vals.toArray(new ParameterValue[]{});
    }

    public ParameterValue findParameter(String name) {
	//IMPL - low efficiency should be made faster - possibly reimplement whole class
	//IMPL - only returns the first parameter of a particular type.
	ParameterValue retval = null;

	for (Iterator iterator = parameterOrParameterGroup.iterator(); iterator.hasNext();) {
	    Object vorg = (Object) iterator.next();
	    if (vorg instanceof ParameterValue) {
		ParameterValue pval = (ParameterValue) vorg;
		if(pval.getId().equals(name)){
		    retval = pval;
		    break;
		}
	    }
	    else if (vorg instanceof ParameterValueGroup) {
		ParameterValueGroup vgroup = (ParameterValueGroup) vorg;
		for (ParameterValue pval : vgroup.getParameter()) {
		    if(pval.getId().equals(name)){
			retval = pval;
			break;

		    }
		}
	    }
	    else {
		assert true: "List of parameter values contains unknown type="+vorg.getClass().getCanonicalName();  
	    }

	}
	return retval;
    }

    /**
     * @deprecated too simple really in new parameter model.
     * @param val
     */
    public void removeParameter(ParameterValue val) {
	// TODO Auto-generated method stub
	throw new  UnsupportedOperationException("ListOfParameterValues.removeParameter() not implemented");
    }

	

}
