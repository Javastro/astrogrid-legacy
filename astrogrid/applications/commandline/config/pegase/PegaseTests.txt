PEGASE version 2

PEGASE is a code which computes the spectral evolution of galaxies. 
The evolution of the stars, gas and metals is computed according to
user selected star formation laws and initial stellar mass function. 
The stellar evolutionary tracks extend from the main sequence to the 
white dwarf stage. The emission of the gas in HII regions is also taken into
account. The effect of extinction by dust is also modelled using a 
radiative transfer code. 

The code is available at http://www2.iap.fr/pegase/
It is necessary to obtain both the code (PEGASE.2.tar.gz)
and the stellar library file (stellibLCBcor.tar.gz).

Documentation for the code comes with the tarfile of the code. Below
I summarize the aspects relevant to the Galaxies science case scenario,
and incorporating it in the demo.

Scientific Aspects:

The basic input is a list of parameters for computing Simple Stellar 
Popultions, and a set of parameters to specify the desired star
formation scenario.

The basic output is a set of spectra or colours which can be compared
to observational spectra (SEDs) or colours.

Technical Aspects:

The code is written in FORTRAN 77, and is made up of 5 programs plus
a set of supporting files. There is no make file, each program needs 
to be compiled individually. 
Usually PEGASE is run via command line on a UNIX/LINUX system using
either a shell script, or the interactive prompt to input the parameters.
Also some of the supporting files may be editted to modify the 
behaviour of the code, for exaple the default set of ages to use
in the output. For our purposes, changing the input parameters to the
individual programs will probably be sufficient. Output files are in 
(a sometimes complicated) ascii format. 


Procedure:

The procedure to generate synthetic spectra with PEGASE has three main steps.
(A fully worked example with inputs and output files is described below)

1. Generate the isochrones of Simple Stellar Populations (SSPs) at different
   metallicities. 
   This is done with the SSPs program. The output is a file which includes
   all the details of the isochrones of the stellar population.

2. Specify the parameters of the star formation scenario, 
   i.e. a single instantaneous burst of star formation, or continuous star 
   formation, or other scenarios.
   This is done with the scenarios program. It basically generates an input 
   file that will be used in the next step.

3. Apply the scenario specified in the previous step to calculate the 
   integrated spectra of the stellar population as a function of time.
   This is done with the spectra program. The output is a file containing the
   spectra of the population at a series of (pre-specified) ages.


Example:

This is a simple example of a single instantaneous burst of star formation
using mostly default parameters, and represents a set of parameters which
generates sensible results and can be used for testing.

This example was done by manually insterting the parameters at the
input prompt of the programs. 

1. Run SSPs to generate the isochrones for a Simple Stellar Population

>  ./SSPs
  
 Initial mass function?
   1: IMF_Kennicutt.dat                                                       
   2: IMF_Kroupa.dat                                                          
   3: IMF_MillerScalo.dat                                                     
   4: IMF_Salpeter.dat                                                        
   5: IMF_Scalo86.dat                                                         
   6: IMF_Scalo98.dat                                                         
   7: lognormal IMF
   8: Rana & Basu (1992)
   9: Ferrini (1991)

4 

Lower mass (default=.100E+00 Msol)?

0.100E+00

Upper mass (default=.120E+03 Msol)?
 
120.0

SNII ejecta: model A, B or C of Woosley & Weaver (A/B [default]/C)?

B

Stellar winds (y [default]/n)?

y

Prefix?

SSP_run1  (a prefix which will prepend the output file names)

(at this point the calculation begins, and takes about 10 minutes)

When the computation is complete, it writes out the files:

SSP_run1_SSPs.dat           SSP_run1_tracksZ0.008.dat  
SSP_run1_tracksZ0.0001.dat  SSP_run1_tracksZ0.02.dat   
SSP_run1_tracksZ0.0004.dat  SSP_run1_tracksZ0.05.dat
SSP_run1_tracksZ0.004.dat   SSP_run1_tracksZ0.1.dat

The SSP_run1_SSPs.dat file simply lists all the output files
for the run, and will serve as the input in the final step.
The SSP_run1_tracksZ0...dat files contain the isochrones of the
stellar population for different metallicities 0.0001, 0.004 etc.

These are ascii files which provide the relative weights of the
various stellar population components, referenced by the index number
from the stellar library. It is not important to go into the details
here because these files are simply used as inputs for the final
step, and they shouldn't need to be parsed for any other purpose.
 

2. This step specifies the star formation scenario. 

 ./scenarios
 Press <RETURN> to use the default values
  
 Name of the input file to "spectra.f"?
my_scenario.dat

(here we have chosen a file to contain the scenario information, it
will be used as an input in the next step when we run the spectra
program)

============================================================
 Name of the file containing the SSPs properties?
SSP_run1_SSPs.dat

(here we input the file generated in step 1 which is basically
a list of all the step 1 output files)

============================================================
 Fraction of close binary systems (real in [0.,1.])?
 Default: 0.50000E-01
0.50000E-01
************************************************************
 Name of the output file (type "end" to stop)?
 Default: spectra1.dat
 
============================================================
 Metallicity (mass fraction) of the ISM at t=0 (real in [0.,1.])?
 Default: 0.00000E+00
0.00000E+00
============================================================
 Infall (y/n)?
 Default: n 
n
============================================================
 Type of star formation scenario?
 -2: file giving the SFR and the metallicity
 -1: file giving the SFR
  0: instantaneous burst
  1: SFR=p1 from t=0 to p2
  2: SFR=p2*exp(-t/p1)/p1
  3: SFR=(Mgas^p1)/p2
 10 or more: code of the SFR law you have implemented in "spectra.f"
 Default:   0
0
============================================================
 Consistent evolution of the stellar metallicity (y/n)?
 Default: y 
n
(Note that here we do not choose the default)
------------------------------------------------------------
 Stellar metallicity (real in [0.,1.])?
 Default: 0.20000E-01
0.20000E-01

(note the default is solar metalicity Z)

============================================================
 Mass fraction of substellar objects formed (real in [0.,1.])?
 Default: 0.00000E+00
0.00000E+00
============================================================
 Galactic winds (y/n)?
 Default: n 
n
============================================================
 Nebular emission (y/n)?
 Default: y 
y
============================================================
 Global extinction?
 0: No extinction
 1: Extinction for a spheroidal geometry
 2: Extinction for a disk geometry: inclination-averaged
 3: Extinction for a disk geometry: specific inclination
 Default:  0

0
************************************************************
 Name of the output file (type "end" to stop)?
 Default: spectra2.dat 
end

(here we type "end". There is the possibility of defining
more scenarios, but we do only one here for simplicity)

The file my_scenario.dat is written out


3. The final step is to generate the spectra using the Single 
   Stellar Population isochrones, and the star formation scenario 

[allen@GECKO PEGASE.2]$ ./spectra
 Name of the file containing the parameters of the star formation scenarios?
my_scenario.dat

(this takes about 5 minutes)

The output is the ascii file spectra1.dat. It contains the 
integrated spectra of the stellar population at a series of ages. 
The structure of this output file is described in detail in 
section 3.2.3 of the manual. Briefly, the file consists of parts
separated by asterisks for each scenario, since we have only one
scenario there is only one set of data in spectra1.dat. After the asteriks
is one line with the number of time steps, number of wavelenghts
in the continuum and the number of emission lines; (69, 1221, 61) in the
example spectra1.dat file. Following this is the list of the continuum
wavelenghts (5 per line), then the emission line wavelenghts (5 per line).
Following that are N_timestep blocks (69 in our example) whose first 2 lines
list a set of output parameters for that timestep, followed by blocks of
the normalized monochromatic luminosities (erg/s/Ang) for the continuum,
and a block of normalized luminosities (erg/s) for the lines.

The output file is a bit complicated, but it includes all the information
for reading its various parts sequentially by noting the number of timesteps,
and wavelength bins near the top of the file. The untis in erg/s/ang for the
continuum, and erg/s for the lines also introduces a further complication
for generating a spectrum which could be plotted with standard tools.
Note also that in scaling the output to compare with a real spectrum,
one needs to remember that the model represents the luminosities 
normalized to one solar mass. 

Users of PEGASE seems to generally visualise, and manipulate these
output files using customized programs. Fortran users can even modify the
code to more easily get to rlevant parts of the output data. 


3.1 Colours
In addition to synthetic spectra, PEGASE can also intergate the result
over a set a filter bandpasses and calculate a set of colours.

demo@rain pegase.2]$ ./colors
 Input filename (spectra) ?
spectra1.dat
 Output filename (colors) ?
colours1.dat

The output file colours1.dat contains the colours (and other parameters) 
as a function of the timesteps.
Note on the Interactive on-line version of PEGASE version 1.


The relevant output files from this example are:

SSP_run1_SSPs.da
SSP_run1_tracks...dat
my_scenario.dat
spectra1.dat
colours1.dat


There is a version of PEGASE online at
http://www-obs.univ-lyon1.fr/hypercat/fG.cgi?c=i&o=ets:
which runs version 1 of PEGASE using a form interface.
The input parameters are limited to a subset of those
available to the full program, and uses already built 
isochrones. It provides the outputs as FITS format
spectra (no colours available). While this is a user friendly
version of PEGASE it is not clear how it could be invoked
as a web service.

