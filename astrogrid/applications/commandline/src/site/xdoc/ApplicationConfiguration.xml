<?xml version="1.0" ?>
   <!--
      would be nice to get the doctype right so that we can have
      assisted editing for the type - need to have a dtd for the xdocs
      though!! <!DOCTYPE document PUBLIC "-//W3C//DTD XHTML 1.0
      Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
   -->
<!-- <!DOCTYPE document SYSTEM "../../xdocs/xdoc.dtd" > -->
<document>
   <properties>
      <author email="pah@jb.man.ac.uk">Paul Harrison</author>
      <title>CEA Command Line CEC Configuration</title>
   </properties>
   <body>
      <section name="Application Configuration">
      <p>The CEC has a model of a CEC that</p>
         <p>
            The UML model for an application is shown in the diagram
            below
            <img
               src="http://www.astrogrid.org/viewcvs/*checkout*/astrogrid/applications/design/ceaApplication.gif?rev=HEAD&amp;content-type=image/gif"
               alt="application model" />
         </p>
         <subsection name="Parameters">
            <subsubsection name="parameter types">
               <dl>
                  <dt>complex</dt>
                  <dd>if a complex value is to be passed</dd>
                  <dt>double</dt>
                  <dd>a double precision floating number should be
                     passed</dd>
                  <dt>boolean</dt>
                  <dd>a boolean value should be passed</dd>
                  <dt>anyURI</dt>
                  <dd>a URI should be passed</dd>
                  <dt>anyXML</dt>
                  <dd>this should probably not be here - too
                     loose...do not use if possible</dd>
                  <dt>VOTable</dt>
                  <dd>A VOTable is passed</dd>
                  <dt>RA</dt>
                  <dd>A value to be interpreted as a right ascension is
                     passed</dd>
                  <dt>Dec</dt>
                  <dd>A value to be interpreted as a declination is
                     passed</dd>
                  <dt>ADQL</dt>
                  <dd>Standard Astromical Data Query Language is
                     passed</dd>
                  <dt>FITS</dt>
                  <dd>A FITS file is passed</dd>
                  <dt>text</dt>
                  <dd>A general piece of alphanumeric data is passed -
                     should generally be what unix considers to be a
                     text file</dd>
                  <dt>binary</dt>
                  <dd>An arbitrary piece of binary data is passed</dd>
               </dl>
            </subsubsection>
         </subsection>
         <subsection name="Interfaces">
         </subsection>
         <subsection name="Configuration File">
            <p>
               This file should be of the same form as
               <a
                  href="http://www.astrogrid.org/viewcvs/*checkout*/astrogrid/applications/commandline/config/CeaApplicationConfig.xml?rev=HEAD&amp;content-type=text/xml"
               >this example configuration file</a>
               which has
               <a
                  href="http://www.astrogrid.org/viewcvs/*checkout*/astrogrid/workflow-objects/schema/AGApplicationBase.xsd?rev=HEAD&amp;content-type=text/plain"
               >AGApplicationBase.xsd</a>
               as its schema (with some automated documentation
               <a
                  href="http://www.astrogrid.org/maven/docs/HEAD/astrogrid-workflow-objects/schema/AGApplicationBase.html"
               >here</a>
               ).
            </p>
         </subsection>
         <p> &lt;CommandLineExecutionControllerConfig&gt; that contains &lt;Application&gt; elements (you will have one for each of your scripts) - each of the &lt;Applications&gt; has a set of &lt;Parameters&gt; and one or more &lt;Interfaces&gt;.</p>

    <p>
For this type of CEC we need to define a series of &lt;CmdLineParameterDefn&gt; elements corresponding to each of the command line parameters that there are.
For command line applications parameters are typically specified in one of 3 ways under unix
and the CEC can cope with any of these (theoretically in any combination, but I have not exhaustively tested this, and I doubt that I have covered everything)
</p>
<p>Each &lt;CmdLineParameterDef&gt; has a set of attributes that specify which of the above categories the parameter falls under, as well as some subelements that further specify the parameter.
</p>
<dl>
   
<dt>name</dt><dd>this is the name of the parameter - the default behaviour is that this name is the same as the string that is used to denote the parameter on the command line (if there is one) - however you can give the parameter any name you like (as long as it is unique for a particular application as you can specify the name that is used on the command line  using the commandSwitch attribute. Alternatively you can specify the position of the parameter with the commandPosition attribute if there is no switch.
</dd>
<dt>type</dt><dd><p> this specifies what type the parameter. This value should be set to be as close as possible to what the application expects the type of the parameter to be to allow for possible type checking. Note that amongst the values there are several types that can effectively be used as "catchall" types, which can be used if the application does not have any strong typing. You should look in the <a href="http://www.astrogrid.org/maven/docs/HEAD/astrogrid-workflow-objects/schema/AGParameterDefinition.html#type_parameterTypes">schema</a> for the up to date list, but a description of the meaning of the types is given below.
             </p>
         </dd>
  
<dt>fileRef</dt><dd>This specifies whether the application expects the parameter to refer to a file or simply a value that is passed on the command line</dd>
<dt>commandSwitch</dt><dd>This is the text of the command switch (without any hyphen or equals characters). If this is set to the special value "---" then it means that the parameter will not be added to the command line at all - this is useful sometimes in allowing a value to be passed to the java wrapper class.</dd>
<dt>commandPosition</dt><dd>This is specified as an integer index position that the parameter will be specified on the command line - if a value is specified for this attribute, then the parameter will be presented "bare" with no switch</dd>
<dt>switchType</dt><dd>this can be 'normal', in which case the switch will written in the -X val style or 'keyword' in which case the x=val style will be used.</dd>
<dt>OptionList</dt><dd>this can be used to specify a parameter that takes its value from a fixed set. Each of the possible values is specified by an <code>OptionVal</code> element</dd>
</dl>

<subsection name="The elements that can occur within the &lt;CmdLineParameterDef/&gt;">
<dl>
<dt>&lt;UI_Name/&gt;</dt> <dd>the name that will be used for display in the portal for the parameter</dd>
<dt>&lt;UI_Description/&gt;</dt> <dd>a description of the parameter that will be used in the portal</dd>
<dt>&lt;UCD/&gt;</dt> <dd>the ucd for the parameter if it has one - at the moment nothing uses this.</dd>
<dt>&lt;DefaultValue/&gt;</dt><dd> can be used to display a default value in the portal</dd>
<dt>&lt;Units/&gt;</dt> <dd>can be used to specify the units in the portal.</dd>
</dl>
<p>
An &lt;Interface&gt; is simply a collection of parameters - you might have a simple interface that consists of only one of the possible parameters and a complex one that consists of all the possible parameters. Each interface consists of a number of &lt;input&gt; and &lt;output&gt; parameters (designated by the pref element that points to the &lt;CmdLineParameterDef&gt; above) - This classification is particularly important in the case of parameters that specify MySpace file references, as this is how CEC knows whether to fetch the values of put them.
</p>
      
   </subsection>

   </section>
      <section name="CommandLine Application Configuration">
         <p>The Command line Execution Controller is a component
            that can be used to wrap legacy command line applications in
            a specialized CEA web service so that it can become part of
            the VO.</p>
         <subsection name="Command Line Application prerequisites">
            <p>For the CEA Command Line Execution Controller to be
               able to run an application, it must fit into the model of
               a command line application that the CLEC understands.
               Amongst other characteristics, it must be possible to run
               the application to completion with arguments supplied on
               the command line.</p>
            <p>Characteristics of the application that
               cannot be supported include</p>
            <ul>
               <li>requiring user input from a GUI</li>
               <li>requiring a GUI to display results</li>
               <li>requiring user input of any kind after
                  execution had been started</li>
            </ul>
            <p>The command line application parameters should be
               specified by one of the "standard" unix methods</p>
            <ul>
               <li>by position</li>
               <li>by a switch of the form -param value</li>
               <li>by a switch of the form param=value</li>
            </ul>
            <p>It is possible that an application that does not quite
               meet these requirements in a small fashion could be
               acommodated by writing an adapter class that extends the
               standard
               org.astrogrid.applications.commandline.CommandLineApplication
               model.</p>
         </subsection>
      </section>
    	<section name="Modifying default application behaviour">
		<p>It might be that it is necessary to modify the output of the commandline application in some fashion to make the application more "VO friendly", this can be done in two general ways</p>
        <ol>
            <li>Wrapping the application in a shell script and specifying the script rather than the application directly in the <code>ExecutionPath</code> element. A description of this method of customization is outside the scope of this documentation, but it is a valuable, and often quick-to-implement way to slightly alter the behaviour of an appliction.</li>
            <li>Writing a custom adapter class - it is possible to write a specific class to alter the way that an application is run and to specify the class name as the <code>instanceClass</code> attribute on an <code>Application</code> element. The <a href="AppProgGuide.html">CommandLine CEC Application Programmers Guide</a> contains information to aid in writing such a class.</li>
        </ol>
	</section>
    
</body>
</document>
