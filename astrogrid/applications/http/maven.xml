<?xml version="1.0"?>

<project xmlns:j="jelly:core" xmlns:maven="jelly:maven" xmlns:deploy="deploy" default="astrogrid-install-snapshot">
  
  <goal name="astrogrid-build-artifact"   prereqs="war" />
  <goal name="astrogrid-build-snapshot"   prereqs="war:snapshot" />
  <goal name="astrogrid-install-snapshot" prereqs="war:install-snapshot" />
  <goal name="astrogrid-install-artifact" prereqs="war:install" />
  <goal name="astrogrid-deploy-snapshot"  prereqs="war:deploy-snapshot" />
  <goal name="astrogrid-deploy-artifact"  prereqs="war:deploy" />
  <goal name="astrogrid-build-site"       prereqs="site" />
  <goal name="astrogrid-deploy-site"      prereqs="site:deploy" />
  
  
  <!-- Before building the WAR, compile the documents. -->
  <preGoal name="war:war">
    <attainGoal name="webapp-docs"/>
  </preGoal>
  
  <preGoal name="xdoc">
     <echo message="${pom.name} ${pom.currentVersion}" file="${maven.docs.dest}/about.txt" level="error" verbose="true"/>
  </preGoal>
  
  <!-- When building the WAR, add the documentation from the main site; 
       but do it selectively. -->
  <preGoal name="war:war">
    <attainGoal name="webapp-docs" />
  </preGoal>
  
   <goal name="webapp-docs">
     <j:set var="maven.docs.dest" value="${maven.war.webapp.dir}"/>
     <echo>Generating web-app's internal documentation into ${maven.docs.dest}</echo>
     <mkdir dir="${maven.docs.dest}"/>
   	
     <!-- Create the directory in which the document sources are accumulated. -->
     <property name="tmp.docs" location="${maven.build.dir}/webapp-docs" />
     <echo>Caching web-app's internal documentation in ${tmp.docs}</echo>
     <mkdir dir="${tmp.docs}" />
   	
   	 <!-- Copy the xdocs for the static web pages. These pages are the same as 
   	 	    those made by the site goal, but the static index page isn't used
   	 	    inside the web application.  This goal work differently depending
   	      on whether it is run directly or as a pre/post goal of war:war.
   	      In the latter case, the property maven.war.webapp.dir is set and the
   	      documents go into the nascent web application. In the former case,
   	      the property isn't set and Maven generates the documents into the
   	      default directory for the site documentation, not into the web app. -->
     <copy todir="${tmp.docs}" overwrite="false">
       <fileset dir="${basedir}/xdocs" >
         <exclude name="**/navigation.xml"/>
       </fileset>			 
     </copy>
   	
     <!-- Copy the xdocs that are provided specifically for the web application. -->
     <copy todir="${tmp.docs}" >
       <fileset dir="${basedir}/war-xdocs" />
     </copy>
   	
     <!-- set up properties -->
     <j:set var="maven.docs.dest" value="${maven.war.webapp.dir}" />
     <j:set var="maven.docs.src" value="${tmp.docs}" />
     <j:set var="maven.xdoc.poweredby.title" value="Provided by Astrogrid" />
     <j:set var="maven.xdoc.poweredby.url" value="http://www.astrogrid.org" />
     <j:set var="maven.xdoc.poweredby.image" value="http://www.astrogrid.org/images/AGlogo" />
     <j:set var="maven.xdoc.includeProjectDocumentation" value="no" />
     <attainGoal name="xdoc" />
   </goal>

<!-- boilerplate below here -->

  <goal name="axis-declare-tasks">
     <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>

<!-- tomcat tools -->
<goal name="tomcat-declare-tasks">
   <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="tomcat-deploy"    classname="org.apache.catalina.ant.DeployTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-install"   classname="org.apache.catalina.ant.InstallTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-list"      classname="org.apache.catalina.ant.ListTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-reload"    classname="org.apache.catalina.ant.ReloadTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-remove"    classname="org.apache.catalina.ant.RemoveTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-roles"     classname="org.apache.catalina.ant.RolesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-start"     classname="org.apache.catalina.ant.StartTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-stop"      classname="org.apache.catalina.ant.StopTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpathref="maven.dependency.classpath"/>
</goal>

</project>