<?xml version="1.0"?>
<!-- extension maven script -->
<project xmlns:j="jelly:core" xmlns:maven="jelly:maven" xmlns:deploy="deploy" default="jar:jar">


  <!-- standard goals -->
  <goal name="astrogrid-build-site" prereqs="site" />
  <goal name="astrogrid-build-artifact" prereqs="jar, war" />
  <goal name="astrogrid-build-snapshot" prereqs="jar:snapshot,war" />

  <goal name="astrogrid-install-snapshot" prereqs="jar:install-snapshot,war:install-snapshot" />
  <goal name="astrogrid-install-artifact" prereqs="jar:install,war:install" />

  <goal name="astrogrid-deploy-site">
    <mkdir dir="${maven.build.dest}" />
    <attainGoal name="site" />
    <attainGoal name="site:fsdeploy" />
  </goal>
  <goal name="astrogrid-deploy-snapshot" prereqs="jar:deploy-snapshot,war:deploy-snapshot" />
  <goal name="astrogrid-deploy-artifact" prereqs="jar:deploy.war:deploy" />


  <!-- war packaging -->
  <!-- this is the name of the goal that does the packaging in the parent project.
  it's hooked into the war build as a pregoal to war:war
  because of a quirk of inheritance, its necessary to redefine this goal, rather than
  adding a new hook - otherwise the inherited hook/goal will be run too, with hilarious concequences.
  -->
  <goal name="package-war">
        <attainGoal name="merge-common-webapp" />
        <attainGoal name="configure-webapp" />
        <attainGoal name="copy-resources" />
        <!-- defined in parent maven.xml - just adjust where things are going to go.. -->
        <property name="webapp.docs" value="${maven.war.webapp.dir}/provider" />
        <attainGoal name="webapp-docs"  />
  </goal>
  <goal name="merge-common-webapp" description="copy contents of existing war into the webapp directory">
     <deploy:copy-deps todir="${working.dir}" />
     <unwar dest="${maven.war.webapp.dir}">
        <fileset dir="${working.dir}"><!-- select the file to unzip -->
                <include name="astrogrid-cea-server-*.war" />
        </fileset>
        <patternset><!-- what to unzip -->
                <exclude name="WEB-INF/classes/*/**" />
                <exclude name="WEB-INF/lib/**" />
                <exclude name="provider/**" />
        </patternset>
     </unwar>
  </goal>

    <goal name="configure-webapp" description="patch jndi key in web.xml to point to commandline implementation of component manager">
 <!-- setting which transformer to use -->
   ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <!-- tailor the deployment descriptor to our system -->
        <xslt in="${maven.war.webapp.dir}/WEB-INF/web.xml"
         out="${maven.war.webapp.dir}/WEB-INF/web1.xml"
         extension=".xml"
         style="${basedir}/build/adjust-war-descriptor.xsl"
        />
        <!-- move it back -->
        <move file="${maven.war.webapp.dir}/WEB-INF/web1.xml"
                tofile="${maven.war.webapp.dir}/WEB-INF/web.xml"
        />
       <!-- also want to patch the log4j.properties - so it logs to a different file.-->
        <replace file="${maven.war.webapp.dir}/WEB-INF/classes/log4j.properties">
                <replacefilter token="cea" value="cea-http" />
                <replacefilter token="CEA" value="CEA_HTTP" />
        </replace>
  </goal>

  <goal name="copy-resources" description="add other stuff to webapp" >
  </goal>


  <!-- boilerplate below here -->
  <goal name="axis-declare-tasks">
    <taskdef resource="axis-tasks.properties" classpathref="maven.dependency.classpath" />
  </goal>
  <goal name="tomcat-declare-tasks">
    <!-- Configure the custom Ant tasks for the Manager application -->
    <taskdef name="tomcat-deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="maven.dependency.classpath" />
    <taskdef name="tomcat-install" classname="org.apache.catalina.ant.InstallTask" classpathref="maven.dependency.classpath" />
    <taskdef name="tomcat-list" classname="org.apache.catalina.ant.ListTask" classpathref="maven.dependency.classpath" />
    <taskdef name="tomcat-reload" classname="org.apache.catalina.ant.ReloadTask" classpathref="maven.dependency.classpath" />
    <taskdef name="tomcat-remove" classname="org.apache.catalina.ant.RemoveTask" classpathref="maven.dependency.classpath" />
    <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="maven.dependency.classpath" />
    <taskdef name="tomcat-roles" classname="org.apache.catalina.ant.RolesTask" classpathref="maven.dependency.classpath" />
    <taskdef name="tomcat-start" classname="org.apache.catalina.ant.StartTask" classpathref="maven.dependency.classpath" />
    <taskdef name="tomcat-stop" classname="org.apache.catalina.ant.StopTask" classpathref="maven.dependency.classpath" />
    <taskdef name="tomcat-undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="maven.dependency.classpath" />
  </goal>
</project>