/*
 * $Id: PersistenceEngine.java,v 1.4 2004/01/09 00:25:08 pah Exp $
 * 
 * Created on 05-Dec-2003 by Paul Harrison (pah@jb.man.ac.uk)
 *
 * Copyright 2003 AstroGrid. All rights reserved.
 *
 * This software is published under the terms of the AstroGrid 
 * Software License version 1.2, a copy of which has been included 
 * with this distribution in the LICENSE.txt file.  
 *
 */

package org.astrogrid.applications.manager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.astrogrid.applications.common.config.ApplicationControllerConfig;

/**
 * Controls the saving of execution information to the database. This is a singleton.
 * @author Paul Harrison (pah@jb.man.ac.uk)
 * @version $Name:  $
 * @since iteration4
 * @TODO need to add more of the details of each execution to the database
 */
public class PersistenceEngine {

   static private org.apache.commons.logging.Log logger =
      org.apache.commons.logging.LogFactory.getLog(PersistenceEngine.class);

   private static PersistenceEngine instance = null;
   private static DataSource ds;
   private ApplicationControllerConfig config;
   private PersistenceEngine() {

      config = ApplicationControllerConfig.getInstance();
      ds = config.getDataSource();

   }
   public static PersistenceEngine getInstance() {
      if (instance == null) {
         synchronized (PersistenceEngine.class) {
            if (instance == null) {
               instance = new PersistenceEngine();
            }
         }

      }
      return instance;
   }
   /**
    * Get a new executionID. Synchonized to attempt to stop the possibility of dupicate ids being returned to multiple threads. This method is currently hsqldb specific, 
    * the eternal problem of trying to get databases to return autogenerated keys in a uniform fashion.
    * @return a unique execution identifier.
    */
   public synchronized int getNewID() {

      logger.info("getting a new execution id form datasource=" + ds.toString());

      Connection conn = null;
      ResultSet rs;
      int id = -1;

      try {
         conn = ds.getConnection();
         logger.info("got new conncection");

         PreparedStatement stmt =
            conn.prepareStatement(
               "insert into exestat (program) values ('new');call IDENTITY();");
         if (stmt.execute()) {

            rs = stmt.getResultSet();
            if (rs.next()) {
               id = rs.getInt(1);
            }
         }
      }
      catch (SQLException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      }
      finally {
         try {
            if (conn != null) {

               conn.close();
            }
         }
         catch (SQLException e1) {
            logger.error("problem closing connection",e1);
         }
      }
      return id;

   }

}
