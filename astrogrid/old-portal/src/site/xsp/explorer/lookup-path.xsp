<?xml version="1.0" encoding="ISO-8859-1"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/old-portal/src/site/xsp/explorer/Attic/lookup-path.xsp,v $</cvs:source>
    | <cvs:date>$Author: dave $</cvs:date>
    | <cvs:author>$Date: 2003/06/03 13:16:47 $</cvs:author>
    | <cvs:version>$Revision: 1.1 $</cvs:version>
    | <cvs:log>
    | $Log: lookup-path.xsp,v $
    | Revision 1.1  2003/06/03 13:16:47  dave
    | Added initial iter 02 code
    |
    | Revision 1.1  2003/06/03 12:37:42  Dumbledore
    | Mid way through changes to the site structure
    |
    | </cvs:log>
    | 
    | XSP page to call the MySpace service and request details of elements matching a path.
    | 
    +-->
<xsp:page language="java"
		create-session="true"
		xmlns:xsp="http://apache.org/xsp"
		xmlns:xsp-session="http://apache.org/xsp/session/2.0"
		xmlns:xsp-request="http://apache.org/xsp/request/2.0"
		xmlns:xscript="http://apache.org/xsp/xscript/1.0"
		xmlns:soap="http://apache.org/xsp/soap/3.0">
		>

	<!-- Initialisation code here -->
	<xsp:structure>
		<xsp:include>java.util.Map</xsp:include>
		<xsp:include>java.util.Hashtable</xsp:include>
		<xsp:include>java.util.Iterator</xsp:include>
		<xsp:include>org.astrogrid.portal.session.AstPortalSession</xsp:include>
		<xsp:include>org.astrogrid.portal.explorer.AstPortalView</xsp:include>
	</xsp:structure>
	<!-- Class level code here -->
	<xsp:logic>
		<![CDATA[
		//
		// Our current AstSession.
		protected AstPortalSession root = null ;
		//
		// Our current AstView.
		protected AstPortalView view = null ;
		//
		// Local class for action handlers.
		protected abstract class ActionHandler
			{
			//
			// Public constructor.
			public ActionHandler(String name)
				{
				this.name  = name  ;
				}
			//
			// Our action name.
			protected String name ;
			//
			// Display our action.
			public abstract void display()
				throws SAXException, IOException, ProcessingException ;
			//
			// Handle our action.
			public abstract void perform()
				throws SAXException, IOException, ProcessingException ;
			}
		//
		// Our list of action handlers.
		protected Map handlers = new Hashtable() ;
		//
		// Add a new action handler.
		protected void addHandler(ActionHandler handler)
			{
			handlers.put(handler.name, handler) ;
			}
		//
		// Get a handler for an action.
		ActionHandler getHandler(String name)
			{
			return (ActionHandler) handlers.get(name) ;
			}
		//
		// Initialise our handlers.
		{
		addHandler(
			new ActionHandler("set-path")
				{
				public void display()
					throws SAXException, IOException, ProcessingException
					{
					setPathDisplay(this) ;
					}
				public void perform()
					throws SAXException, IOException, ProcessingException
					{
					setPathAction(this) ;
					}
				}
			) ;
		}

		//
		// Display our set-path action.
		public void setPathDisplay(ActionHandler handler)
			throws SAXException, IOException, ProcessingException
			{
			AttributesImpl xspAttr = new AttributesImpl();
			]]>
			<xsp:element name="action">
				<xsp:attribute name="name"><xsp:expr>handler.name</xsp:expr></xsp:attribute>
				<xsp:element name="params">
					<param type="text" name="path" value="*"/>
				</xsp:element>
			</xsp:element>
			<![CDATA[
			}

		//
		// Perform our set-path action.
		public void setPathAction(ActionHandler handler)
			throws SAXException, IOException, ProcessingException
			{
			//
			// If we have a view.
			if (null != view)
				{
				AttributesImpl xspAttr = new AttributesImpl();
				//
				// Get the path from the request params.
				String path = request.getParameter("path") ;
				//
				// If we got a path.
				if ((null != path) && (path.length() > 0))
					{
					view.setPath(path) ;
					]]>
					<xsp:element name="action">
						<xsp:attribute name="name"><xsp:expr>handler.name</xsp:expr></xsp:attribute>
						<params>
							<param name="path">
								<xsp:attribute name="value"><xsp:expr>path</xsp:expr></xsp:attribute>
							</param>
						</params>
						<result>
							<xsp:element name="view">
								<xsp:attribute name="ident"><xsp:expr>view.getIdent()</xsp:expr></xsp:attribute>
								<xsp:attribute name="path"><xsp:expr>view.getPath()</xsp:expr></xsp:attribute>
							</xsp:element>
						</result>
					</xsp:element>
					<![CDATA[
					}
				}
			}

		]]>
	</xsp:logic>
	<page>
		<!-- Request level code here -->
		<xsp:logic>
			<![CDATA[
				//
				// Load our AstSession from our HttpSession.
				root = (AstPortalSession) session.getAttribute(AstPortalSession.HTTP_SESSION_TAG) ;
				//
				// If we havn't got one yet.
				if (null == root)
					{
					//
					// Create a new AstSession.
					root = new AstPortalSession() ;
					//
					// Add it to our HttpSession.
					session.setAttribute(AstPortalSession.HTTP_SESSION_TAG, root) ;
					}
				//
				// If we have a valid session.
				if (null != root)
					{
					//
					// Get our query ident.
					String ident = parameters.getParameter("ident", null) ;
					//
					// Fetch our view from our session. 
					view = root.getView(ident) ;
					}
			]]>
		</xsp:logic>

		<!-- List of the available page actions -->
		<actions>
			<xsp:logic>
				<![CDATA[
				Iterator actions = handlers.values().iterator() ;
				while (actions.hasNext())
					{
					ActionHandler handler = (ActionHandler) actions.next() ;
					handler.display() ;
					}
				]]>
			</xsp:logic>
		</actions>

		<!-- Process the current request action -->
		<request>
			<xsp:logic>
				<![CDATA[
					//
					// Get our request action.
					String action = parameters.getParameter("action", null) ;
					//
					// If we have a request action.
					if (null != action)
						{
						//
						// Find a handler for our action.
						ActionHandler handler = getHandler(action) ;
						//
						// If we found a handler.
						if (null != handler)
							{
							//
							// Perform our action.
							handler.perform() ;
							}
						}
				]]>
			</xsp:logic>
		</request>

		<!-- Details of the current session -->
		<xsp:element name="session">
			<xsp:attribute name="ident"><xsp:expr>(null != root) ? root.getIdent() : null</xsp:expr></xsp:attribute>
			<!-- Details of the current view -->
			<xsp:logic>
				<![CDATA[
				if (null != view)
					{
					]]>
					<xsp:element name="view">
						<xsp:attribute name="ident"><xsp:expr>view.getIdent()</xsp:expr></xsp:attribute>
						<xsp:attribute name="path"><xsp:expr>view.getPath()</xsp:expr></xsp:attribute>

						<!-- A list of the tree nodes matching the current path -->
						<collections>
							<xsp:comment>SOAP call to list the elements for the current path</xsp:comment>
							<soap:call url="http://localhost:8080/cocoon/astrogrid/myspace/lookup">
								<!-- Who is asking -->
								<user>
									<user>frog</user>
									<community>xxxx</community>
								</user>
								<!-- What they want to match -->
								<query>
									<!-- Path of the matching items -->
									<path>
										<xsp:expr>view.getPath()</xsp:expr>
									</path>
									<!-- Type(s) of the matching items -->
									<types>
										<type>VO-TABLE</type>
										<type>AST-CONTAINER</type>
									</types>
								</query>
								<!-- What they want back -->
								<select>
									<filter>
										<!-- Type(s) of the matching items -->
										<types>
											<type>AST-CONTAINER</type>
										</types>
									</filter>
									<!-- The format of the response -->
									<format>AST-FORMAT-NESTED</format>
								</select>
							</soap:call>
						</collections>

						<!-- A list of the items in the current node -->
						<!-- Note : If no selected node, then default to the first in the list -->
						<!-- Note : If selected node is not available, then default to the first in the list -->
						<leaves>
							<xsp:comment>SOAP call to list the items in the current node</xsp:comment>
							<xsp:element name="request">
							</xsp:element>
							<xsp:comment>SOAP return listing the items in the current node</xsp:comment>
							<xsp:element name="response">
							</xsp:element>
						</leaves>

						<!-- The details for the current item -->
						<!-- Note : If no selected item, then default to the first in the list -->
						<!-- Note : If selected item is not available, then default to the first in the list -->
						<leaves>
							<xsp:comment>SOAP call to request the details of the current node</xsp:comment>
							<xsp:element name="request">
							</xsp:element>
							<xsp:comment>SOAP return containing the details of the current node</xsp:comment>
							<xsp:element name="response">
							</xsp:element>
						</leaves>

					</xsp:element>
					<![CDATA[
					}
				]]>
			</xsp:logic>
		</xsp:element>
	</page>
</xsp:page>
