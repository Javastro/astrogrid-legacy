Testsuite: org.astrogrid.adql.AdqlStoXTest
Tests run: 135, Failures: 0, Errors: 0, Time elapsed: 33.179 sec

------------- Standard Output ---------------

AdqlStoXTest. WARNING. Number of test methods does not match available test files.
   Methods count: 133
   File count: 139
   You may encounter failures within a test or complete absence of some tests.
   Please inspect AdqlStoXTest for test methods and your test files.

------------------------------------------------
Compiling 6dfExplicitThreeWayJoin.adqls
------------------------------------------------
== From: ===>
-- JBL Note: We are not currently supporting n-way explicit joins where n > 2

-- Joining 3 tables using the targetid parameter. 
-- In this example the TARGET, SPECTRA and TWOMASS tables are joined with parameters extracted from each table.
SELECT target.TARGETNAME, target.BMAG, target.RMAG, 
target.BMAG-target.RMAG AS colour, spectra.Z, twomass.K
FROM target INNER JOIN
spectra ON target.TARGETID = spectra.TARGETID INNER JOIN
twomass ON target.TARGETID = twomass.TARGETID
WHERE (target.BMAG - target.RMAG > 1.2) 
AND (spectra.QUALITY >= 3) AND (twomass.K > 12) ;
------------------------------------------------
Compiling 6dfExplicitThreeWayJoinWithBrackets.adqls
------------------------------------------------
== From: ===>
-- JBL Note: We are not currently supporting n-way explicit joins where n > 2
-- This example tries a 3-way join using brackets.

-- Joining 3 tables using the targetid parameter. 
-- In this example the TARGET, SPECTRA and TWOMASS tables are joined with parameters extracted from each table.
SELECT target.TARGETNAME, target.BMAG, target.RMAG,  
target.BMAG-target.RMAG AS colour, spectra.Z, twomass.K 
FROM target INNER JOIN ( spectra  INNER JOIN 
twomass ON target.TARGETID = twomass.TARGETID ) 
ON target.TARGETID = spectra.TARGETID 
WHERE (target.BMAG - target.RMAG > 1.2)  
AND (spectra.QUALITY >= 3) AND (twomass.K > 12) ;
------------------------------------------------
Compiling BADdelimitedIdentifier.adqls
------------------------------------------------
== From: ===>
select top 100  * from "!Catalogue_$£%^>>>"<<<&*(_   _ @#~?+-" as a ;
------------------------------------------------
Compiling BADduplicatedAliases.adqls
------------------------------------------------
== From: ===>
select 
	min(a.ra) as minra, 
	max(a.ra) as maxra, 
	min(a."dec") as minra, 
	max(a."dec") as maxra  
from cata as a
where a.signal >= 23 ;
------------------------------------------------
Compiling BADemptyFrom.adqls
------------------------------------------------
== From: ===>
select top 100 from ;

------------------------------------------------
Compiling BADemptyWhere.adqls
------------------------------------------------
== From: ===>
select top 100  * where ;
------------------------------------------------
Compiling BADextremelyComplexQuery.adqls
------------------------------------------------
== From: ===>
select
   df.tablespace_name                          "Tablespace",
   block_size                                  "Block Size",
   (df.totalspace - fs.freespace)              "Used MB",
   fs.freespace                               "Free MB",
   df.totalspace                               "Total MB",
   round(100 * (fs.freespace / df.totalspace)) "Pct. Free"
from
   dba_tablespaces                               ts,
   (select tablespace_name,
        round(sum(bytes) / 1048576) TotalSpace
      from dba_data_files
      group by tablespace_name)                  df,
   (select tablespace_name,
        round(sum(bytes) / 1048576) FreeSpace
      from dba_free_space
      group by tablespace_name)                 fs
where
   ts.tablespace_name = fs.tablespace_name
and
   df.tablespace_name = fs.tablespace_name(+) ;
------------------------------------------------
Compiling BADinnerJoinWithJoinCondition.adqls
------------------------------------------------
== From: ===>
select * from foo inner join bar on foo.y >= bar.x inner join flub on foo.y <= flub.z ;
------------------------------------------------
Compiling BADNestedBracketWithinConeSearch01.adqls
------------------------------------------------
== From: ===>
-- Last bracket removed from (a.POS_EQ_RA<100)
Select * From catalogue as a Where 
(a.POS_EQ_RA<100 
And  
( 
  ( a.POS_EQ_RA>100 )  
  And  
  ( 
    ACOS((
           ( SIN( a.POS_EQ_DEC ) * SIN( 100 ) ) 
           + 
           ( 
             COS(a.POS_EQ_DEC)  
             *  
             ( COS(100)  * COS( (a.POS_EQ_RA - 100) ) )  
           )
        )) <= 100
  ) 
)
------------------------------------------------
Compiling BADregularIdentifier.adqls
------------------------------------------------
== From: ===>
select top 100  * from Catalogue_$£One as a ;
------------------------------------------------
Compiling BADreservedWordAsTableName.adqls
------------------------------------------------
== From: ===>
select * from Ceiling as a ;
------------------------------------------------
Compiling BADselectEmptyAlias.adqls
------------------------------------------------
== From: ===>
select top 100  * from catalogue as ;
------------------------------------------------
Compiling BADMAselectList.adqls
------------------------------------------------
== From: ===>
select * from cata as a,, catb b, dbc.tabc as c ;
------------------------------------------------
Compiling BADselectOrderByDirOnly.adqls
------------------------------------------------
== From: ===>
select * from catalogue as a order by ASC ;
------------------------------------------------
Compiling BADthreeWayJoinAcrossArchives.adqls
------------------------------------------------
== From: ===>
SELECT las.sourceID, las.ra, las.dec, fsc.seqNo, fsc.ra, fsc.dec
FROM lasSource AS las, ROSAT..rosat_fsc AS fsc, lasSourceXrosat_fsc AS x
WHERE x.masterObjID=las.sourceID AND x.slaveObjID=fsc.seqNo AND 
x.distanceMins<0.1
------------------------------------------------
Compiling BADtop.adqls
------------------------------------------------
== From: ===>
select top 1,000,000  * from "!Catalogue_$£%^>>><<<&*(_   _ @#~?+-" as a ;
------------------------------------------------
Compiling ceilingFunction.adqls
------------------------------------------------
== From: ===>
select top 100 ceiling(a.col_1) from Catalogue as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:mathFunctionType" Name="CEILING" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col_1"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling comments01.adqls
------------------------------------------------
== From: ===>
-- Here is a comment before the Select statment
select 
-- Comment before the select all item
* from catalogue as a 
;

Compilation suceeded...
==== To: ===>
<!--+ Here is a comment before the Select statment
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <!--+ 
 Comment before the select all item
+-->
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling comments02.adqls
------------------------------------------------
== From: ===>
select 
-- Here is a comment before the allow (all/distinct)...
distinct
-- Here is a comment before the top...
top 10000 * from catalogue as a 
;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <!--+ 
 Here is a comment before the allow (all/distinct)...
+-->
    <v1:Allow Option="DISTINCT"/>
    <!--+
 Here is a comment before the top...
+-->
    <v1:Restrict Top="10000"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling comments03.adqls
------------------------------------------------
== From: ===>
select 
-- Comment about user_id
u.user_id, 
-- Comment about email
u.email, 
-- Comment about count(*)
count(*), 
-- Comment about max(posted)
max(c.posted)
from users as u, classified_ads as c
where u.user_id = c.user_id
group by u.user_id, u.email
order by u.email
-- Comment after order by 
;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <!--+ 
 Comment about user_id
+-->
        <v1:Item xsi:type="v1:columnReferenceType" Table="u" Name="user_id" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <!--+ 
 Comment about email
+-->
        <v1:Item xsi:type="v1:columnReferenceType" Table="u" Name="email" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <!--+ 
 Comment about count(*)
+-->
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="COUNT" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:allSelectionItemType"/>
        </v1:Item>
        <!--+ 
 Comment about max(posted)
+-->
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="MAX" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="posted"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="users" Alias="u" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="classified_ads" Alias="c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="u" Name="user_id"/>
            <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="user_id"/>
        </v1:Condition>
    </v1:Where>
    <v1:GroupBy>
        <v1:Column Table="u" Name="user_id"/>
        <v1:Column Table="u" Name="email"/>
    </v1:GroupBy>
    <v1:OrderBy>
        <v1:Item>
            <v1:Expression xsi:type="v1:columnReferenceType" Table="u" Name="email" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <v1:Order Direction="ASC"/>
        </v1:Item>
    </v1:OrderBy>
</v1:Select>
<!--+
 Comment after order by 
+-->
------------------------------------------------
Compiling commentsMultipleLines04.adqls
------------------------------------------------
== From: ===>
-- Here is a comment before the Select statment
select 
-- Comment before the select all item line 1
-- Comment before the select all item line 2
* from catalogue as a 
;

Compilation suceeded...
==== To: ===>
<!--+ Here is a comment before the Select statment
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <!--+ 
 Comment before the select all item line 1
 Comment before the select all item line 2
+-->
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling complexSelect01.adqls
------------------------------------------------
== From: ===>
select u.user_id, u.email, count(*), max(c.posted)
from users as u, classified_ads as c
where u.user_id = c.user_id
group by u.user_id, u.email
order by u.email ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="u" Name="user_id" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="u" Name="email" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="COUNT" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:allSelectionItemType"/>
        </v1:Item>
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="MAX" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="posted"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="users" Alias="u" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="classified_ads" Alias="c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="u" Name="user_id"/>
            <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="user_id"/>
        </v1:Condition>
    </v1:Where>
    <v1:GroupBy>
        <v1:Column Table="u" Name="user_id"/>
        <v1:Column Table="u" Name="email"/>
    </v1:GroupBy>
    <v1:OrderBy>
        <v1:Item>
            <v1:Expression xsi:type="v1:columnReferenceType" Table="u" Name="email" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <v1:Order Direction="ASC"/>
        </v1:Item>
    </v1:OrderBy>
</v1:Select>
------------------------------------------------
Compiling coneSearch01.adqls
------------------------------------------------
== From: ===>
Select * From catalogue as a Where 
(a.POS_EQ_RA<100)  
And  
( 
  ( a.POS_EQ_RA>100 )  
  And  
  ( 
    ACOS((
           ( SIN( a.POS_EQ_DEC ) * SIN( 100 ) ) 
           + 
           ( 
             COS(a.POS_EQ_DEC)  
             *  
             ( COS(100)  * COS( (a.POS_EQ_RA - 100) ) )  
           )
        )) <= 100
  ) 
)

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="100" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:intersectionSearchType">
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="100" xsi:type="v1:integerType"/>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;=">
                            <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="ACOS">
                                <v1:Arg xsi:type="v1:closedExprType">
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                                        <v1:Arg xsi:type="v1:closedExprType">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                                    <v1:Arg xsi:type="v1:atomType">
                                                        <v1:Literal Value="100" xsi:type="v1:integerType"/>
                                                    </v1:Arg>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:closedExprType">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:closedExprType">
                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                                            <v1:Arg xsi:type="v1:atomType">
                                                                <v1:Literal Value="100" xsi:type="v1:integerType"/>
                                                            </v1:Arg>
                                                        </v1:Arg>
                                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                                            <v1:Arg xsi:type="v1:closedExprType">
                                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                                                                    <v1:Arg xsi:type="v1:atomType">
                                                                        <v1:Literal Value="100" xsi:type="v1:integerType"/>
                                                                    </v1:Arg>
                                                                </v1:Arg>
                                                            </v1:Arg>
                                                        </v1:Arg>
                                                    </v1:Arg>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="100" xsi:type="v1:integerType"/>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling coneSearch02.adqls
------------------------------------------------
== From: ===>
Select * From catalogue as a Where 
(a.POS_EQ_DEC<5.01)  
And  
( 
  (a.POS_EQ_DEC>4.99)  
  And  
  ( (
     2.0 
     * 
     ASIN(
           SQRT(( 
                  POWER( 
                          SIN( ( (RADIANS(a.POS_EQ_DEC)  - 0.08726646259971647)   / 2.0)  ) 
                        , 2
                       )  
                  +  
                  ( 
                    ( 
                      COS(RADIANS(a.POS_EQ_DEC) )  
                      *  
                      ( 
                        COS(0.08726646259971647)  
                        * 
                        POWER( SIN( ( (RADIANS(a.POS_EQ_RA)  - 0.08726646259971647) / 2.0)  ) ,2 )

                      )  
                    )  
                  )  
              )) 
          ) 
    ) 
    <
    1.7453292519943296E+3
  ) 
)

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="5.01" xsi:type="v1:realType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:intersectionSearchType">
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="4.99" xsi:type="v1:realType"/>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                            <v1:Arg xsi:type="v1:closedExprType">
                                <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                    <v1:Arg xsi:type="v1:atomType">
                                        <v1:Literal Value="2.0" xsi:type="v1:realType"/>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="ASIN">
                                        <v1:Arg xsi:type="v1:mathFunctionType" Name="SQRT">
                                            <v1:Arg xsi:type="v1:closedExprType">
                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                                                    <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                                            <v1:Arg xsi:type="v1:closedExprType">
                                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                                                    <v1:Arg xsi:type="v1:closedExprType">
                                                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                                            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                                                                            </v1:Arg>
                                                                            <v1:Arg xsi:type="v1:atomType">
                                                                                <v1:Literal Value="0.08726646259971647" xsi:type="v1:realType"/>
                                                                            </v1:Arg>
                                                                        </v1:Arg>
                                                                    </v1:Arg>
                                                                    <v1:Arg xsi:type="v1:atomType">
                                                                        <v1:Literal Value="2.0" xsi:type="v1:realType"/>
                                                                    </v1:Arg>
                                                                </v1:Arg>
                                                            </v1:Arg>
                                                        </v1:Arg>
                                                        <v1:Arg xsi:type="v1:atomType">
                                                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                                        </v1:Arg>
                                                    </v1:Arg>
                                                    <v1:Arg xsi:type="v1:closedExprType">
                                                        <v1:Arg xsi:type="v1:closedExprType">
                                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                                                    <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                                                                    </v1:Arg>
                                                                </v1:Arg>
                                                                <v1:Arg xsi:type="v1:closedExprType">
                                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                                                            <v1:Arg xsi:type="v1:atomType">
                                                                                <v1:Literal Value="0.08726646259971647" xsi:type="v1:realType"/>
                                                                            </v1:Arg>
                                                                        </v1:Arg>
                                                                        <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                                                                            <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                                                                <v1:Arg xsi:type="v1:closedExprType">
                                                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                                                                        <v1:Arg xsi:type="v1:closedExprType">
                                                                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                                                                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                                                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                                                                                                </v1:Arg>
                                                                                                <v1:Arg xsi:type="v1:atomType">
                                                                                                    <v1:Literal Value="0.08726646259971647" xsi:type="v1:realType"/>
                                                                                                </v1:Arg>
                                                                                            </v1:Arg>
                                                                                        </v1:Arg>
                                                                                        <v1:Arg xsi:type="v1:atomType">
                                                                                            <v1:Literal Value="2.0" xsi:type="v1:realType"/>
                                                                                        </v1:Arg>
                                                                                    </v1:Arg>
                                                                                </v1:Arg>
                                                                            </v1:Arg>
                                                                            <v1:Arg xsi:type="v1:atomType">
                                                                                <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                                                            </v1:Arg>
                                                                        </v1:Arg>
                                                                    </v1:Arg>
                                                                </v1:Arg>
                                                            </v1:Arg>
                                                        </v1:Arg>
                                                    </v1:Arg>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="1745.3292519943295" xsi:type="v1:realType"/>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling decAsNonReservedWord.adqls
------------------------------------------------
== From: ===>
SELECT TOP 100 * FROM twomass_psc as o WHERE (o.ra > 56.25) AND (o.ra < 57.25) AND
(o.dec > 23.6167) and (o.dec < 24.6167) and (o.j_m - o.k_m) < 1.0

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="twomass_psc" Alias="o" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="o" Name="ra"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="56.25" xsi:type="v1:realType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:closedSearchType">
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="o" Name="ra"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="57.25" xsi:type="v1:realType"/>
                        </v1:Arg>
                    </v1:Condition>
                </v1:Condition>
                <v1:Condition xsi:type="v1:intersectionSearchType">
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="o" Name="dec"/>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="23.6167" xsi:type="v1:realType"/>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:intersectionSearchType">
                        <v1:Condition xsi:type="v1:closedSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="o" Name="dec"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="24.6167" xsi:type="v1:realType"/>
                                </v1:Arg>
                            </v1:Condition>
                        </v1:Condition>
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                            <v1:Arg xsi:type="v1:closedExprType">
                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="o" Name="j_m"/>
                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="o" Name="k_m"/>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="1.0" xsi:type="v1:realType"/>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling delimitedIdentifier.adqls
------------------------------------------------
== From: ===>
select top 100  * from "!Catalogue_$£%^&*(_   _ @#~?+-" as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="!Catalogue_$£%^&amp;*(_   _ @#~?+-" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling groupByOneColumn.adqls
------------------------------------------------
== From: ===>
select v.state_code, v.city_name, count(*) from villes as v group by v.state_code ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="v" Name="state_code" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="v" Name="city_name" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="COUNT" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:allSelectionItemType"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="villes" Alias="v" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:GroupBy>
        <v1:Column Table="v" Name="state_code"/>
    </v1:GroupBy>
</v1:Select>
------------------------------------------------
Compiling innerJoinWithJoinCondition.adqls
------------------------------------------------
== From: ===>
select * from foo as f inner join bar as b on f.y >= b.x ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:joinTableType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Qualifier>INNER</v1:Qualifier>
            <v1:Tables>
                <v1:fromTableType xsi:type="v1:tableType" Name="foo" Alias="f"/>
                <v1:fromTableType xsi:type="v1:tableType" Name="bar" Alias="b"/>
            </v1:Tables>
            <v1:Condition Comparison=">=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="f" Name="y"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="b" Name="x"/>
            </v1:Condition>
        </v1:Table>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling inPredicateWithConstantStringList.adqls
------------------------------------------------
== From: ===>
select * from personnel as p where p.city_name in ( 'New York', 'Chicago', 'Atlanta', 'Austin' ) ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="personnel" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:inclusiveSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Expression xsi:type="v1:columnReferenceType" Table="p" Name="city_name"/>
            <v1:Set xsi:type="v1:ConstantListSet">
                <v1:Item xsi:type="v1:stringType" Value="New York"/>
                <v1:Item xsi:type="v1:stringType" Value="Chicago"/>
                <v1:Item xsi:type="v1:stringType" Value="Atlanta"/>
                <v1:Item xsi:type="v1:stringType" Value="Austin"/>
            </v1:Set>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling inPredicateWithSubQuery.adqls
------------------------------------------------
== From: ===>
select * from personnel as p where p.city_name in ( select c.city_name from cities as c where c.state = 'NY' ) ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="personnel" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:inclusiveSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Expression xsi:type="v1:columnReferenceType" Table="p" Name="city_name"/>
            <v1:Set xsi:type="v1:subQuerySet">
                <v1:selection>
                    <v1:SelectionList>
                        <v1:Item xsi:type="v1:columnReferenceType" Table="c" Name="city_name"/>
                    </v1:SelectionList>
                    <v1:From>
                        <v1:Table xsi:type="v1:tableType" Name="cities" Alias="c"/>
                    </v1:From>
                    <v1:Where>
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="state"/>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal xsi:type="v1:stringType" Value="NY"/>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Where>
                </v1:selection>
            </v1:Set>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling leftOuterJoinWithJoinCondition.adqls
------------------------------------------------
== From: ===>
select * from tab1 as t1 left outer join tab2 as t2 on t1.a=t2.a where t1.a = 27 ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:joinTableType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Qualifier>LEFT_OUTER</v1:Qualifier>
            <v1:Tables>
                <v1:fromTableType xsi:type="v1:tableType" Name="tab1" Alias="t1"/>
                <v1:fromTableType xsi:type="v1:tableType" Name="tab2" Alias="t2"/>
            </v1:Tables>
            <v1:Condition Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="t1" Name="a"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="t2" Name="a"/>
            </v1:Condition>
        </v1:Table>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="t1" Name="a"/>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="27" xsi:type="v1:integerType"/>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling likeWithoutBracket.adqls
------------------------------------------------
== From: ===>
SElect * from people p where p.name like '%son' ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="people" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:likePredType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="name"/>
            <v1:Pattern>
                <v1:Literal xsi:type="v1:stringType" Value="%son"/>
            </v1:Pattern>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling likeWithBracket.adqls
------------------------------------------------
== From: ===>
SElect * from people p where ( p.name like '%son' ) 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="people" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:closedSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:likePredType">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="name"/>
                <v1:Pattern>
                    <v1:Literal xsi:type="v1:stringType" Value="%son"/>
                </v1:Pattern>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling MAInnerJoinWithJoinCondition.adqls
------------------------------------------------
== From: ===>
select * from arc1.foo as f inner join arc2.bar as b on f.y >= b.x ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:joinTableType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Qualifier>INNER</v1:Qualifier>
            <v1:Tables>
                <v1:fromTableType xsi:type="v1:tableType" Archive="arc1" Name="foo" Alias="f"/>
                <v1:fromTableType xsi:type="v1:tableType" Archive="arc2" Name="bar" Alias="b"/>
            </v1:Tables>
            <v1:Condition Comparison=">=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="f" Name="y"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="b" Name="x"/>
            </v1:Condition>
        </v1:Table>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling MALeftOuterJoinWithJoinCondition.adqls
------------------------------------------------
== From: ===>
select * from arc1.tab1 as t1 left outer join arc2.tab2 as t2 on t1.a=t2.a where t1.a = 27 ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:joinTableType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Qualifier>LEFT_OUTER</v1:Qualifier>
            <v1:Tables>
                <v1:fromTableType xsi:type="v1:tableType" Archive="arc1" Name="tab1" Alias="t1"/>
                <v1:fromTableType xsi:type="v1:tableType" Archive="arc2" Name="tab2" Alias="t2"/>
            </v1:Tables>
            <v1:Condition Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="t1" Name="a"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="t2" Name="a"/>
            </v1:Condition>
        </v1:Table>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="t1" Name="a"/>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="27" xsi:type="v1:integerType"/>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling MAThreeWayJoin.adqls
------------------------------------------------
== From: ===>
SELECT las.sourceID, las.ra, las."dec", fsc.seqNo, fsc.ra, fsc."dec"
FROM cat1.lasSource AS las, cat2.rosat_fsc AS fsc, cat3.lasSourceXrosat_fsc AS x
WHERE x.masterObjID=las.sourceID AND x.slaveObjID=fsc.seqNo AND 
x.distanceMins<0.1

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="las" Name="sourceID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="las" Name="ra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="las" Name="dec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="fsc" Name="seqNo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="fsc" Name="ra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="fsc" Name="dec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Archive="cat1" Name="lasSource" Alias="las" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Archive="cat2" Name="rosat_fsc" Alias="fsc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Archive="cat3" Name="lasSourceXrosat_fsc" Alias="x" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="x" Name="masterObjID"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="las" Name="sourceID"/>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="x" Name="slaveObjID"/>
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="fsc" Name="seqNo"/>
                </v1:Condition>
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="x" Name="distanceMins"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="0.1" xsi:type="v1:realType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling MAThreeWayJoinNonAliased.adqls
------------------------------------------------
== From: ===>
SELECT cat1.lasSource.sourceID, 
       cat1.lasSource.ra, 
       cat1.lasSource."dec", 
       cat2.rosat_fsc.seqNo, 
       cat2.rosat_fsc.ra, 
       cat2.rosat_fsc."dec"
FROM cat1.lasSource, cat2.rosat_fsc, cat3.lasSourceXrosat_fsc
WHERE cat3.lasSourceXrosat_fsc.masterObjID=cat1.lasSource.sourceID 
  AND cat3.lasSourceXrosat_fsc.slaveObjID=cat2.rosat_fsc.seqNo 
  AND cat3.lasSourceXrosat_fsc.distanceMins<0.1

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Archive="cat1" Table="lasSource" Name="sourceID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Archive="cat1" Table="lasSource" Name="ra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Archive="cat1" Table="lasSource" Name="dec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Archive="cat2" Table="rosat_fsc" Name="seqNo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Archive="cat2" Table="rosat_fsc" Name="ra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Archive="cat2" Table="rosat_fsc" Name="dec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Archive="cat1" Name="lasSource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Archive="cat2" Name="rosat_fsc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Archive="cat3" Name="lasSourceXrosat_fsc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Archive="cat3" Table="lasSourceXrosat_fsc" Name="masterObjID"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Archive="cat1" Table="lasSource" Name="sourceID"/>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                    <v1:Arg xsi:type="v1:columnReferenceType" Archive="cat3" Table="lasSourceXrosat_fsc" Name="slaveObjID"/>
                    <v1:Arg xsi:type="v1:columnReferenceType" Archive="cat2" Table="rosat_fsc" Name="seqNo"/>
                </v1:Condition>
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                    <v1:Arg xsi:type="v1:columnReferenceType" Archive="cat3" Table="lasSourceXrosat_fsc" Name="distanceMins"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="0.1" xsi:type="v1:realType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling naiveConeSearch.adqls
------------------------------------------------
== From: ===>
SELECT * FROM RASS_PHOTONS as r
WHERE 2 * ASIN( SQRT( SIN( (20-r."DEC")/2 ) 
   * SIN((20-r."DEC")/2) + COS(20) * COS(r."DEC") 
   * SIN((20 - r.RA)/2) * SIN((20 - r.RA)/2 ) ) ) <= 10 ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="RASS_PHOTONS" Alias="r" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="2" xsi:type="v1:integerType"/>
                </v1:Arg>
                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="ASIN">
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="SQRT">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                        <v1:Arg xsi:type="v1:closedExprType">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="DEC"/>
                                            </v1:Arg>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:atomType">
                                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                        <v1:Arg xsi:type="v1:closedExprType">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="DEC"/>
                                            </v1:Arg>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:atomType">
                                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                    <v1:Arg xsi:type="v1:atomType">
                                        <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                    </v1:Arg>
                                </v1:Arg>
                                <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="DEC"/>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                                <v1:Arg xsi:type="v1:closedExprType">
                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                        <v1:Arg xsi:type="v1:atomType">
                                                            <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                                        </v1:Arg>
                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="RA"/>
                                                    </v1:Arg>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                                <v1:Arg xsi:type="v1:closedExprType">
                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                        <v1:Arg xsi:type="v1:atomType">
                                                            <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                                        </v1:Arg>
                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="RA"/>
                                                    </v1:Arg>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
            </v1:Arg>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="10" xsi:type="v1:integerType"/>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling notLikeWithBracket.adqls
------------------------------------------------
== From: ===>
SElect * from people p where ( p.name not like '%son' ) ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="people" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:closedSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:notLikePredType">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="name"/>
                <v1:Pattern>
                    <v1:Literal xsi:type="v1:stringType" Value="%son"/>
                </v1:Pattern>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling notLikeWithoutBracket.adqls
------------------------------------------------
== From: ===>
SElect * from people p where p.name not like '%son' ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="people" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:notLikePredType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="name"/>
            <v1:Pattern>
                <v1:Literal xsi:type="v1:stringType" Value="%son"/>
            </v1:Pattern>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling notInPredicateWithConstantStringList.adqls
------------------------------------------------
== From: ===>
select * from personnel p where p.city_name not in ( 'New York', 'Chicago', 'Atlanta', 'Austin' ) ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="personnel" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:exclusiveSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Expression xsi:type="v1:columnReferenceType" Table="p" Name="city_name"/>
            <v1:Set xsi:type="v1:ConstantListSet">
                <v1:Item xsi:type="v1:stringType" Value="New York"/>
                <v1:Item xsi:type="v1:stringType" Value="Chicago"/>
                <v1:Item xsi:type="v1:stringType" Value="Atlanta"/>
                <v1:Item xsi:type="v1:stringType" Value="Austin"/>
            </v1:Set>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling notInPredicateWithSubQuery.adqls
------------------------------------------------
== From: ===>
select * from personnel p where p.city_name not in ( select c.city_name from cities as c where c.state = 'NY' ) ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="personnel" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:exclusiveSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Expression xsi:type="v1:columnReferenceType" Table="p" Name="city_name"/>
            <v1:Set xsi:type="v1:subQuerySet">
                <v1:selection>
                    <v1:SelectionList>
                        <v1:Item xsi:type="v1:columnReferenceType" Table="c" Name="city_name"/>
                    </v1:SelectionList>
                    <v1:From>
                        <v1:Table xsi:type="v1:tableType" Name="cities" Alias="c"/>
                    </v1:From>
                    <v1:Where>
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="state"/>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal xsi:type="v1:stringType" Value="NY"/>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Where>
                </v1:selection>
            </v1:Set>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling regularIdentifier.adqls
------------------------------------------------
== From: ===>
select top 100  * from Catalogue_$One2Three as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Catalogue_$One2Three" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling SDSSBasicSelectFromWhere.adqls
------------------------------------------------
== From: ===>
-- Returns 5261 objects in DR2 (5278 in DR1) in a few sec.

-- Find objects in a particular field.
-- A basic SELECT - FROM - WHERE query.

SELECT p.objID,                     -- Get the unique object ID,
    p.field, p.ra, p."dec" 	        -- the field number, and coordinates
FROM PhotoObj as p 	                -- From the photometric data
WHERE p.run=1336 and p.field = 11   -- that matches our criteria
;


Compilation suceeded...
==== To: ===>
<!--+ Returns 5261 objects in DR2 (5278 in DR1) in a few sec.

 Find objects in a particular field.
 A basic SELECT - FROM - WHERE query.
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="objID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <!--+                      Get the unique object ID,
+-->
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="field" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="ra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="dec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <!--+ 	         the field number, and coordinates
+-->
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="PhotoObj" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <!--+ 	                 From the photometric data
+-->
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="run"/>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="1336" xsi:type="v1:integerType"/>
                </v1:Arg>
            </v1:Condition>
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="field"/>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="11" xsi:type="v1:integerType"/>
                </v1:Arg>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
<!--+    that matches our criteria
+-->
------------------------------------------------
Compiling SDSSGalaxiesWithTwoCriteria.adqls
------------------------------------------------
== From: ===>
-- Returns 1000 objects in a few sec.

-- Find all galaxies brighter than r magnitude 22, where the local
-- extinction is > 0.175. This is a simple query that uses a WHERE clause,
-- but now two conditions that must be met simultaneously. However, this
-- query returns a lot of galaxies (29 Million in DR2!), so it will take a
-- long time to get the results back. The sample therefore includes a
-- "TOP 1000" restriction to make it run quickly.
-- This query also introduces the Galaxy view, which contains the
-- photometric parameters (no redshifts or spectra) for unresolved objects.

SELECT TOP 1000 g.objID
FROM Galaxy g
WHERE
    g.r < 22 	                -- r IS NOT deredenned
    and g.extinction_r > 0.175 	-- extinction more than 0.175 
;

Compilation suceeded...
==== To: ===>
<!--+ Returns 1000 objects in a few sec.

 Find all galaxies brighter than r magnitude 22, where the local
 extinction is > 0.175. This is a simple query that uses a WHERE clause,
 but now two conditions that must be met simultaneously. However, this
 query returns a lot of galaxies (29 Million in DR2!), so it will take a
 long time to get the results back. The sample therefore includes a
 "TOP 1000" restriction to make it run quickly.
 This query also introduces the Galaxy view, which contains the
 photometric parameters (no redshifts or spectra) for unresolved objects.
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="1000"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="g" Name="objID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Galaxy" Alias="g" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="g" Name="r"/>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="22" xsi:type="v1:integerType"/>
                </v1:Arg>
            </v1:Condition>
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="g" Name="extinction_r"/>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="0.175" xsi:type="v1:realType"/>
                </v1:Arg>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
<!--+ 	 extinction more than 0.175 
+-->
------------------------------------------------
Compiling SDSSGalaxiesWithMultipleCriteria.adqls
------------------------------------------------
== From: ===>
-- Find all galaxies with blue surface brightness between 23 and 25
-- mag per square arcseconds, and -10 < supergalactic latitude (sgb) < 10, and
-- declination less than zero. Currently, we have to live with ra/dec until we
-- get galactic coordinates. To calculate surface brightness per sq. arcsec,
-- we use (g + rho), where g is the blue magnitude, and rho= 5*log(r). This
-- query now has three requirements, one involving simple math.

SELECT gl.objID
FROM Galaxy as gl
WHERE 
   (gl.ra between 250 and 270)
   and 
   (gl."dec" > 50) 
   and 
   (gl.g + gl.gho between 23 and 25) ;

Compilation suceeded...
==== To: ===>
<!--+ Find all galaxies with blue surface brightness between 23 and 25
 mag per square arcseconds, and -10 < supergalactic latitude (sgb) < 10, and
 declination less than zero. Currently, we have to live with ra/dec until we
 get galactic coordinates. To calculate surface brightness per sq. arcsec,
 we use (g + rho), where g is the blue magnitude, and rho= 5*log(r). This
 query now has three requirements, one involving simple math.
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="gl" Name="objID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Galaxy" Alias="gl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:betweenPredType">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="gl" Name="ra"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="250" xsi:type="v1:integerType"/>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="270" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:closedSearchType">
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="gl" Name="dec"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="50" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Condition>
                </v1:Condition>
                <v1:Condition xsi:type="v1:closedSearchType">
                    <v1:Condition xsi:type="v1:betweenPredType">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="gl" Name="g"/>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="gl" Name="gho"/>
                        </v1:Arg>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="23" xsi:type="v1:integerType"/>
                        </v1:Arg>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="25" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling SDSSSpatialUnitVectors.adqls
------------------------------------------------
== From: ===>
-- Find galaxies in a given area of the sky, using a coordinate cut
-- in the unit vector cx,cy,cz that corresponds to RA beteen 40 and 100.
-- Another simple query that uses math in the WHERE clause.

SELECT glx.colc_g, glx.colc_r
FROM Galaxy as glx
WHERE (-0.642788 * glx.cx + 0.766044 * glx.cy>=0)
    and (-0.984808 * glx.cx - 0.173648 * glx.cy <0) ;

Compilation suceeded...
==== To: ===>
<!--+ Find galaxies in a given area of the sky, using a coordinate cut
 in the unit vector cx,cy,cz that corresponds to RA beteen 40 and 100.
 Another simple query that uses math in the WHERE clause.
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="glx" Name="colc_g" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="glx" Name="colc_r" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Galaxy" Alias="glx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                    <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                            <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="0.642788" xsi:type="v1:realType"/>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="glx" Name="cx"/>
                        </v1:Arg>
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="0.766044" xsi:type="v1:realType"/>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="glx" Name="cy"/>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="0" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                            <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="0.984808" xsi:type="v1:realType"/>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="glx" Name="cx"/>
                        </v1:Arg>
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="0.173648" xsi:type="v1:realType"/>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="glx" Name="cy"/>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="0" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling SDSSCataclysmicVariablesUsingColors.adqls
------------------------------------------------
== From: ===>
-- Search for Cataclysmic Variables and pre-CVs with White Dwarfs and
-- very late secondaries. Just uses some simple color cuts from Paula Szkody.
-- Another simple query that uses math in the WHERE clause

SELECT p.run,
    p.camCol, 
    p.rerun, 
    p.field, 
    p.objID, 
    p.u, p.g, p.r, p.i, p.z, 
    p.ra, p."dec"             -- Just get some basic quantities
FROM PhotoPrimary as p        -- From all primary detections, regardless of class
WHERE p.u - p.g < 0.4
    and p.g - p.r < 0.7 
    and p.r - p.i > 0.4 
    and p.i - p.z > 0.4       -- that meet the color criteria
    ;

Compilation suceeded...
==== To: ===>
<!--+ Search for Cataclysmic Variables and pre-CVs with White Dwarfs and
 very late secondaries. Just uses some simple color cuts from Paula Szkody.
 Another simple query that uses math in the WHERE clause
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="run" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="camCol" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="rerun" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="field" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="objID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="u" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="g" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="r" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="i" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="z" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="ra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="dec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <!--+              Just get some basic quantities
+-->
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="PhotoPrimary" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <!--+         From all primary detections, regardless of class
+-->
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="u"/>
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="g"/>
                </v1:Arg>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="0.4" xsi:type="v1:realType"/>
                </v1:Arg>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="g"/>
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="r"/>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="0.7" xsi:type="v1:realType"/>
                    </v1:Arg>
                </v1:Condition>
                <v1:Condition xsi:type="v1:intersectionSearchType">
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="r"/>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="i"/>
                        </v1:Arg>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="0.4" xsi:type="v1:realType"/>
                        </v1:Arg>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="i"/>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="z"/>
                        </v1:Arg>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="0.4" xsi:type="v1:realType"/>
                        </v1:Arg>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
<!--+        that meet the color criteria
+-->
------------------------------------------------
Compiling SDSSDataSubSampleWILLFAIL.adqls
------------------------------------------------
== From: ===>
-- Give me the colours of a random 1% sample of objects from all fields
-- which are 'survey quality' so that I could plot up colour-colour diagrams
-- and play around with more sophisticated cuts. From Karl Glazebrook. Uses
-- the HTM spatial index ID to apply the cut against. Replace the last '1' by
-- a different number if you want to sample a different percentage of objects.

-- JEFF Note: Will fail as we currently do no bit manipulation...

SELECT gl.u, gl.g, gl.r, gl.i, gl.z FROM Galaxy as gl
WHERE gl.htmid*37 & 0x000000000000FFFF < (650 * 1) ;
------------------------------------------------
Compiling SDSSLowzQSOsUsingColors.adqls
------------------------------------------------
== From: ===>
-- Low-z QSO candidates using the color cuts from Gordon Richards.
-- Also a simple query with a long WHERE clause.

SELECT
    gal.g, 
    gal.run, 
    gal.rerun, 
    gal.camcol, 
    gal.field, 
    gal.objID 
FROM
    Galaxy as gal 
WHERE ( (gal.g <= 22)
    and (gal.u - gal.g >= -0.27) 
    and (gal.u - gal.g < 0.71) 
    and (gal.g - gal.r >= -0.24) 
    and (gal.g - gal.r < 0.35) 
    and (gal.r - gal.i >= -0.27) 
    and (gal.r - gal.i < 0.57) 
    and (gal.i - gal.z >= -0.35) 
    and (gal.i - gal.z < 0.70) ) ;

Compilation suceeded...
==== To: ===>
<!--+ Low-z QSO candidates using the color cuts from Gordon Richards.
 Also a simple query with a long WHERE clause.
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="gal" Name="g" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="gal" Name="run" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="gal" Name="rerun" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="gal" Name="camcol" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="gal" Name="field" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="gal" Name="objID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Galaxy" Alias="gal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:closedSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:closedSearchType">
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;=">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="g"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="22" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Condition>
                </v1:Condition>
                <v1:Condition xsi:type="v1:intersectionSearchType">
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="u"/>
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="g"/>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="0.27" xsi:type="v1:realType"/>
                                </v1:Arg>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:intersectionSearchType">
                        <v1:Condition xsi:type="v1:closedSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="u"/>
                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="g"/>
                                </v1:Arg>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="0.71" xsi:type="v1:realType"/>
                                </v1:Arg>
                            </v1:Condition>
                        </v1:Condition>
                        <v1:Condition xsi:type="v1:intersectionSearchType">
                            <v1:Condition xsi:type="v1:closedSearchType">
                                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="g"/>
                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="r"/>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                        <v1:Arg xsi:type="v1:atomType">
                                            <v1:Literal Value="0.24" xsi:type="v1:realType"/>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Condition>
                            </v1:Condition>
                            <v1:Condition xsi:type="v1:intersectionSearchType">
                                <v1:Condition xsi:type="v1:closedSearchType">
                                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="g"/>
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="r"/>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:atomType">
                                            <v1:Literal Value="0.35" xsi:type="v1:realType"/>
                                        </v1:Arg>
                                    </v1:Condition>
                                </v1:Condition>
                                <v1:Condition xsi:type="v1:intersectionSearchType">
                                    <v1:Condition xsi:type="v1:closedSearchType">
                                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="r"/>
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="i"/>
                                            </v1:Arg>
                                            <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="0.27" xsi:type="v1:realType"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Condition>
                                    </v1:Condition>
                                    <v1:Condition xsi:type="v1:intersectionSearchType">
                                        <v1:Condition xsi:type="v1:closedSearchType">
                                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="r"/>
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="i"/>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="0.57" xsi:type="v1:realType"/>
                                                </v1:Arg>
                                            </v1:Condition>
                                        </v1:Condition>
                                        <v1:Condition xsi:type="v1:intersectionSearchType">
                                            <v1:Condition xsi:type="v1:closedSearchType">
                                                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="i"/>
                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="z"/>
                                                    </v1:Arg>
                                                    <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                                        <v1:Arg xsi:type="v1:atomType">
                                                            <v1:Literal Value="0.35" xsi:type="v1:realType"/>
                                                        </v1:Arg>
                                                    </v1:Arg>
                                                </v1:Condition>
                                            </v1:Condition>
                                            <v1:Condition xsi:type="v1:closedSearchType">
                                                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="i"/>
                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="z"/>
                                                    </v1:Arg>
                                                    <v1:Arg xsi:type="v1:atomType">
                                                        <v1:Literal Value="0.7" xsi:type="v1:realType"/>
                                                    </v1:Arg>
                                                </v1:Condition>
                                            </v1:Condition>
                                        </v1:Condition>
                                    </v1:Condition>
                                </v1:Condition>
                            </v1:Condition>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling SDSSObjectVelocitiesAndErrors.adqls
------------------------------------------------
== From: ===>
-- Get object velocities and errors. This is also a simple query that uses a WHERE clause.
-- However, we perform a more complex mathematical operation, using 'power' to
-- exponentiate. (From Robert Lupton).

-- NOTE: This query takes a long time to run without the "TOP 1000".

SELECT TOP 1000
    p.run, 
    p.camCol, 
    p.field, 
    p.objID, 
    p.rowC, p.colC, p.rowV, p.colV, p.rowVErr, p.colVErr, 
    p.flags, 
    p.psfMag_u, p.psfMag_g, p.psfMag_r, p.psfMag_i, p.psfMag_z, 
    p.psfMagErr_u, p.psfMagErr_g, p.psfMagErr_r, p.psfMagErr_i, p.psfMagErr_z 
FROM PhotoPrimary as p
WHERE
    -- where the velocities are reliable 
    power(p.rowv, 2) / power(p.rowvErr, 2) + 
    power(p.colv, 2) / power(p.colvErr, 2) > 4 ;

Compilation suceeded...
==== To: ===>
<!--+ Get object velocities and errors. This is also a simple query that uses a WHERE clause.
 However, we perform a more complex mathematical operation, using 'power' to
 exponentiate. (From Robert Lupton).

 NOTE: This query takes a long time to run without the "TOP 1000".
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="1000"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="run" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="camCol" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="field" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="objID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="rowC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="colC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="rowV" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="colV" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="rowVErr" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="colVErr" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="flags" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMag_u" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMag_g" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMag_r" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMag_i" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMag_z" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMagErr_u" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMagErr_g" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMagErr_r" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMagErr_i" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="psfMagErr_z" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="PhotoPrimary" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <!--+
     where the velocities are reliable 
+-->
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="rowv"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="rowvErr"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
                <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="colv"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="colvErr"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
            </v1:Arg>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="4" xsi:type="v1:integerType"/>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling SDSSUsingBetween.adqls
------------------------------------------------
== From: ===>
-- Find galaxies with an isophotal surface brightness (SB) larger
-- than 24 in the red band, and with an ellipticity > 0.5, and with the major
-- axis of the ellipse having a declination between 30" and 60" arc seconds.
-- This is also a simple query that uses a WHERE clause with three conditions
-- that must be met. We introduce the syntax 'between' to do a range search.

SELECT gal.ObjID
FROM Galaxy gal
WHERE
    gal.r + gal.rho < 24  -- red surface brightness more than 24 mag/sq-arcsec
    and gal.isoA_r between 30 and 60                  -- major axis between 30" and 60"
    and (power(gal.q_r,2) + power(gal.u_r,2)) > 0.25  -- square of ellipticity > 0.5 squared
    ;

Compilation suceeded...
==== To: ===>
<!--+ Find galaxies with an isophotal surface brightness (SB) larger
 than 24 in the red band, and with an ellipticity > 0.5, and with the major
 axis of the ellipse having a declination between 30" and 60" arc seconds.
 This is also a simple query that uses a WHERE clause with three conditions
 that must be met. We introduce the syntax 'between' to do a range search.
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="gal" Name="ObjID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Galaxy" Alias="gal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="r"/>
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="rho"/>
                </v1:Arg>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="24" xsi:type="v1:integerType"/>
                </v1:Arg>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:betweenPredType">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="isoA_r"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="30" xsi:type="v1:integerType"/>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="60" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                    <v1:Arg xsi:type="v1:closedExprType">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                            <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="q_r"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="gal" Name="u_r"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="0.25" xsi:type="v1:realType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
<!--+   square of ellipticity > 0.5 squared
+-->
------------------------------------------------
Compiling SDSSMovingAsteroids.adqls
------------------------------------------------
== From: ===>
-- Provide a list of moving objects consistent with an asteroid.
-- Also a simple query, but we introduce the 'as' syntax, which allows us to
-- name derived quantities in the result file.

SELECT
    p.objID, 
    sqrt( power(p.rowv,2) + power(p.colv, 2) ) as velocity 
FROM PhotoObj as p
WHERE
    (power(p.rowv,2) + power(p.colv, 2)) > 50 
    and p.rowv >= 0 and p.colv >=0 ;

Compilation suceeded...
==== To: ===>
<!--+ Provide a list of moving objects consistent with an asteroid.
 Also a simple query, but we introduce the 'as' syntax, which allows us to
 name derived quantities in the result file.
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="p" Name="objID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:aliasSelectionItemType" As="velocity" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Expression xsi:type="v1:mathFunctionType" Name="SQRT">
                <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="rowv"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="colv"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
            </v1:Expression>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="PhotoObj" Alias="p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                <v1:Arg xsi:type="v1:closedExprType">
                    <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                        <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="rowv"/>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="2" xsi:type="v1:integerType"/>
                            </v1:Arg>
                        </v1:Arg>
                        <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="colv"/>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="2" xsi:type="v1:integerType"/>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="50" xsi:type="v1:integerType"/>
                </v1:Arg>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="rowv"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="0" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="p" Name="colv"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="0" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling SDSSQuasarsInImaging.adqls
------------------------------------------------
== From: ===>
-- Find quasars as specified by Xiaohui Fan et.al.
-- A rather straightforward query, just with many conditions. It also introduces
-- the Star view, which contains the photometric parameters for all primary point-like
-- objects (including quasars).

SELECT s.run,
    s.camCol, 
    s.rerun, 
    s.field, 
    s.objID, 
    s.u, s.g, s.r, s.i, s.z, 
    s.ra, s."dec" 
FROM Star as s -- or Galaxy
WHERE ( s.u - s.g > 2.0 or s.u > 22.3 )
    and ( s.i < 19 ) 
    and ( s.i > 0 ) 
    and ( s.g - s.r > 1.0 ) 
    and ( s.r - s.i < (0.08 + 0.42 * (s.g - s.r - 0.96)) or s.g - s.r > 2.26 ) 
    and ( s.i - s.z < 0.25 ) ;

Compilation suceeded...
==== To: ===>
<!--+ Find quasars as specified by Xiaohui Fan et.al.
 A rather straightforward query, just with many conditions. It also introduces
 the Star view, which contains the photometric parameters for all primary point-like
 objects (including quasars).
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="run" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="camCol" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="rerun" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="field" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="objID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="u" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="g" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="r" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="i" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="z" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="ra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="dec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Star" Alias="s" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <!--+  or Galaxy
+-->
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:unionSearchType">
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="u"/>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="g"/>
                        </v1:Arg>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="2.0" xsi:type="v1:realType"/>
                        </v1:Arg>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="u"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="22.3" xsi:type="v1:realType"/>
                        </v1:Arg>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:closedSearchType">
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="i"/>
                        <v1:Arg xsi:type="v1:atomType">
                            <v1:Literal Value="19" xsi:type="v1:integerType"/>
                        </v1:Arg>
                    </v1:Condition>
                </v1:Condition>
                <v1:Condition xsi:type="v1:intersectionSearchType">
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="i"/>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="0" xsi:type="v1:integerType"/>
                            </v1:Arg>
                        </v1:Condition>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:intersectionSearchType">
                        <v1:Condition xsi:type="v1:closedSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="g"/>
                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="r"/>
                                </v1:Arg>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="1.0" xsi:type="v1:realType"/>
                                </v1:Arg>
                            </v1:Condition>
                        </v1:Condition>
                        <v1:Condition xsi:type="v1:intersectionSearchType">
                            <v1:Condition xsi:type="v1:closedSearchType">
                                <v1:Condition xsi:type="v1:unionSearchType">
                                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="r"/>
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="i"/>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:closedExprType">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="0.08" xsi:type="v1:realType"/>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                                    <v1:Arg xsi:type="v1:atomType">
                                                        <v1:Literal Value="0.42" xsi:type="v1:realType"/>
                                                    </v1:Arg>
                                                    <v1:Arg xsi:type="v1:closedExprType">
                                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="g"/>
                                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="r"/>
                                                                <v1:Arg xsi:type="v1:atomType">
                                                                    <v1:Literal Value="0.96" xsi:type="v1:realType"/>
                                                                </v1:Arg>
                                                            </v1:Arg>
                                                        </v1:Arg>
                                                    </v1:Arg>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Condition>
                                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="g"/>
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="r"/>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:atomType">
                                            <v1:Literal Value="2.26" xsi:type="v1:realType"/>
                                        </v1:Arg>
                                    </v1:Condition>
                                </v1:Condition>
                            </v1:Condition>
                            <v1:Condition xsi:type="v1:closedSearchType">
                                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="i"/>
                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="z"/>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:atomType">
                                        <v1:Literal Value="0.25" xsi:type="v1:realType"/>
                                    </v1:Arg>
                                </v1:Condition>
                            </v1:Condition>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling SDSSSelectedNeighborsInRunWILLFAIL.adqls
------------------------------------------------
== From: ===>
-- This is a query from Robert Lupton that finds selected neighbors in a given run and
-- camera column. It contains a nested query containing a join, and a join with the
-- results of the nested query to select only those neighbors from the list that meet
-- certain criteria. The nested queries are required because the Neighbors table does
-- not contain all the parameters for the neighbor objects. This query also contains
-- examples of setting the output precision of columns with STR.

-- JL Note. This has been edited by hand and will need rebuilding completely
-- when all constructs are supported!
-- I also think there may be errors within the original. Study the aliases!

select
    obj.run, obj.camCol, str(obj.field, 3) as field, 
    str(obj.rowc, 6, 1) as rowc, str(obj.colc, 6, 1) as colc, 
    str(fObj(obj.objId), 4) as id, 
    str(obj.psfMag_g - 0*obj.extinction_g, 6, 3) as g, 
    str(obj.psfMag_r - 0*obj.extinction_r, 6, 3) as r, 
    str(obj.psfMag_i - 0*obj.extinction_i, 6, 3) as i, 
    str(obj.psfMag_z - 0*obj.extinction_z, 6, 3) as z, 
    str(60*obj.distance, 3, 1) as D, 
    fField(obj.neighborObjId) as nfield, 
    str(fObj(obj.neighborObjId), 4) as nid,'new' 
    from 
    (select obj.objId, 
    obj.run, obj.camCol, obj.field, obj.rowc, obj.colc, 
    obj.psfMag_u, obj.extinction_u, 
    obj.psfMag_g, obj.extinction_g, 
    obj.psfMag_r, obj.extinction_r, 
    obj.psfMag_i, obj.extinction_i, 
    obj.psfMag_z, obj.extinction_z, 
    NN.neighborObjId, NN.distance 
    from photoObj as obj 
    join neighbors as NN on obj.objId = NN.objId 
    where 
    60*NN.distance between 0 and 15 and 
    NN.mode = 1 and NN.neighborMode = 1 and 
    obj.run = 756 and obj.camCol = 5 and 
    obj.type = 6 and (obj.flags & 0x40006) = 0 and 
    obj.nchild = 0 and obj.psfMag_i < 20 and 
    (obj.g - obj.r between 0.3 and 1.1 and obj.r - obj.i between -0.1 and 0.6) 
    ) as obj
    join photoObj as nobj on nobj.objId = obj.neighborObjId
    where 
    nobj.run = obj.run and 
    (abs(obj.psfMag_g - nobj.psfMag_g) < 0.5 or 
    abs(obj.psfMag_r - nobj.psfMag_r) < 0.5 or 
    abs(obj.psfMag_i - nobj.psfMag_i) < 0.5)
    order by obj.run, obj.camCol, obj.field ;
------------------------------------------------
Compiling SDSSObjectCountingAndLogicWILLFAIL.adqls
------------------------------------------------
== From: ===>
-- Using object counting and logic in a query.
-- Find all objects similar to the colors of a quasar at 5.5<6.5.

SELECT count(*) as 'total',
    sum( case when (p.Type=3) then 1 else 0 end) as 'Galaxies', 
    sum( case when (p.Type=6) then 1 else 0 end) as 'Stars', 
    sum( case when (p.Type not in (3,6)) then 1 else 0 end) as 'Other' 
FROM PhotoPrimary as p         -- for each object
WHERE (( p.u - p.g > 2.0) or (p.u > 22.3) ) -- apply the quasar color cut.
    and ( p.i between 0 and 19 ) 
    and ( p.g - p.r > 1.0 ) 
    and ( (p.r - p.i < 0.08 + 0.42 * (p.g - p.r - 0.96)) or (p.g - p.r > 2.26 ) ) 
    and ( p.i - p.z < 0.25 ) ;
------------------------------------------------
Compiling SDSSGalaxiesBlendedWithStars.adqls
------------------------------------------------
== From: ===>
-- Find galaxies that are blended with a star, and output the
-- deblended galaxy magnitudes.

-- This query introduces the use of multiple tables or views. You can assign
-- nicknames to tables as in the FROM clause below. Since you are using
-- multiple tables, you ,ust specify which table each quantity in the SELECT
-- clause comes from. Finally, the last line in the query is the join between
-- the two tables, which is achieved by requiring that a quantity present in
-- both tables be equal.

-- NOTE: This query takes a long time to run without the "TOP 1000".

SELECT G.ObjID, G.u, G.g, G.r, G.i, G.z 	-- get the ObjID and final mags
FROM Galaxy G, Star S 	-- use two Views, Galaxy and Star, as a
	-- convenient mechanism to compare objects
WHERE G.parentID > 0 	-- galaxy has a "parent", which tells us this
	-- object was deblended
    and G.parentID = S.parentID 	-- and the star has the same parent 
;

Compilation suceeded...
==== To: ===>
<!--+ Find galaxies that are blended with a star, and output the
 deblended galaxy magnitudes.

 This query introduces the use of multiple tables or views. You can assign
 nicknames to tables as in the FROM clause below. Since you are using
 multiple tables, you ,ust specify which table each quantity in the SELECT
 clause comes from. Finally, the last line in the query is the join between
 the two tables, which is achieved by requiring that a quantity present in
 both tables be equal.

 NOTE: This query takes a long time to run without the "TOP 1000".
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="G" Name="ObjID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="G" Name="u" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="G" Name="g" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="G" Name="r" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="G" Name="i" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="G" Name="z" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <!--+ 	 get the ObjID and final mags
+-->
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Galaxy" Alias="G" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="Star" Alias="S" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <!--+ 	 use two Views, Galaxy and Star, as a
	 convenient mechanism to compare objects
+-->
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="G" Name="parentID"/>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="0" xsi:type="v1:integerType"/>
                </v1:Arg>
            </v1:Condition>
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="G" Name="parentID"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="S" Name="parentID"/>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
<!--+ 	 and the star has the same parent 
+-->
------------------------------------------------
Compiling SDSSStarsInSpecificFields.adqls
------------------------------------------------
== From: ===>
-- Give me the PSF colors of all stars brighter than g=20 that have PSP_STATUS = 2.
-- Another simple multi-table query.

SELECT
    s.psfMag_g, 	-- or whatever you want from each object
    s.run, 
    s.camCol, 
    s.rerun, 
    s.field 
FROM Star s, Field f
WHERE s.fieldID = f.fieldID
    and s.psfMag_g < 20 
    and f.pspStatus = 2 ;


Compilation suceeded...
==== To: ===>
<!--+ Give me the PSF colors of all stars brighter than g=20 that have PSP_STATUS = 2.
 Another simple multi-table query.
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="psfMag_g" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <!--+ 	 or whatever you want from each object
+-->
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="run" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="camCol" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="rerun" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="s" Name="field" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="Star" Alias="s" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="Field" Alias="f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="fieldID"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="f" Name="fieldID"/>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="s" Name="psfMag_g"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="20" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="f" Name="pspStatus"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="2" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling SDSSUsingThreeTablesWILLFAIL.adqls
------------------------------------------------
== From: ===>
-- Find the parameters for all objects in fields with desired PSF width and range
-- of columns. Now we are using three tables, but it is still a simple query.

SELECT
    g.run, 
    g.rerun, 
    g.camCol, 
    f.field, 
    p.objID, 
    p.ra, 
    p.dec, 
    p.Rowc, 
    p.Colc, 
    p.u, 
    p.modelMagErr_u , 
    p.g, 
    p.modelMagErr_g, 
    p.r, 
    p.modelMagErr_r, 
    p.petroMag_r - p.extinction_r, 
    p.petroMagErr_r, 
    p.i, 
    p.modelMagErr_i, 
    p.z, 
    p.status & 0x00002000, 
    f.psfWidth_r 
FROM
    photoObj p, field f, segment g 
WHERE
    f.fieldid = p.fieldid 
    and f.segmentid = g.segmentid 
    and g.run = 1336 and g.camCol = 1 
    and f.field between 11 and 13 
    and f.psfWidth_r > 1.2 
    and p.colc > 400.0 ;
------------------------------------------------
Compiling SDSSObjectsClosePairs.adqls
------------------------------------------------
== From: ===>
-- Find all objects within 30 arcseconds of one another
-- that have very similar colors: that is where the color ratios
-- u-g, g-r, r-I are less than 0.05m.

SELECT TOP 10 P.ObjID -- distinct cases
FROM PhotoPrimary P, -- P is the primary object
    Neighbors N, -- N is the neighbor link 
    PhotoPrimary L -- L is the lens candidate of P 
WHERE P.ObjID = N.ObjID -- N is a neighbor record
    and L.ObjID = N.NeighborObjID -- L is a neighbor of P 
    and P.ObjID < L. ObjID -- avoid duplicates 
    and abs((P.u-P.g)-(L.u-L.g))<0.05 -- L and P have similar spectra. 
    and abs((P.g-P.r)-(L.g-L.r))<0.05 
    and abs((P.r-P.i)-(L.r-L.i))<0.05 
    and abs((P.i-P.z)-(L.i-L.z))<0.05 ;

Compilation suceeded...
==== To: ===>
<!--+ Find all objects within 30 arcseconds of one another
 that have very similar colors: that is where the color ratios
 u-g, g-r, r-I are less than 0.05m.
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="10"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="P" Name="ObjID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <!--+  distinct cases
+-->
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="PhotoPrimary" Alias="P" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <!--+  P is the primary object
+-->
        <v1:Table xsi:type="v1:tableType" Name="Neighbors" Alias="N" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <!--+  N is the neighbor link 
+-->
        <v1:Table xsi:type="v1:tableType" Name="PhotoPrimary" Alias="L" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <!--+  L is the lens candidate of P 
+-->
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="ObjID"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="N" Name="ObjID"/>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="ObjID"/>
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="N" Name="NeighborObjID"/>
                </v1:Condition>
                <v1:Condition xsi:type="v1:intersectionSearchType">
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="ObjID"/>
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="ObjID"/>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:intersectionSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                            <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                    <v1:Arg xsi:type="v1:closedExprType">
                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="u"/>
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="g"/>
                                        </v1:Arg>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:closedExprType">
                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="u"/>
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="g"/>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="0.05" xsi:type="v1:realType"/>
                            </v1:Arg>
                        </v1:Condition>
                        <v1:Condition xsi:type="v1:intersectionSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                        <v1:Arg xsi:type="v1:closedExprType">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="g"/>
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="r"/>
                                            </v1:Arg>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:closedExprType">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="g"/>
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="r"/>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="0.05" xsi:type="v1:realType"/>
                                </v1:Arg>
                            </v1:Condition>
                            <v1:Condition xsi:type="v1:intersectionSearchType">
                                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                    <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                            <v1:Arg xsi:type="v1:closedExprType">
                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="r"/>
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="i"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                            <v1:Arg xsi:type="v1:closedExprType">
                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="r"/>
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="i"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:atomType">
                                        <v1:Literal Value="0.05" xsi:type="v1:realType"/>
                                    </v1:Arg>
                                </v1:Condition>
                                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                    <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                            <v1:Arg xsi:type="v1:closedExprType">
                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="i"/>
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="P" Name="z"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                            <v1:Arg xsi:type="v1:closedExprType">
                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="i"/>
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="L" Name="z"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:atomType">
                                        <v1:Literal Value="0.05" xsi:type="v1:realType"/>
                                    </v1:Arg>
                                </v1:Condition>
                            </v1:Condition>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling SDSSErrorsUsingFlagsWILLFAIL.adqls
------------------------------------------------
== From: ===>
-- Another useful query is to see if the errors on moving (or
-- apparently moving) objects are correct. For example, it used to be that
-- some known QSOs were being flagged as moving objects. One way to look for
-- such objects is to compare the velocity to the error in velocity and see if
-- the "OBJECT1_MOVED" or "OBJECT2_BAD_MOVING_FIT" is set.
-- This query introduces bitwise logic for flags, and uses the 'as' syntax to
-- make the query more readable. Note that if a flag is not set, the value
-- will be zero. If you want to ensure multiple flags are not set, you can
-- either check that each individually is zero, or their sum is zero.
-- (From Gordon Richards)

-- NOTE: This query takes a long time to run without the "TOP 1000".

SELECT TOP 1000
    G.run, 
    G.rerun, 
    G.camcol, 
    G.field, 
    G.objID, 
    G.ra, G."dec", 
    G.rowv, G.colv, 
    G.rowvErr, G.colvErr, 
    G.i, 
    (G.flags & fPhotoFlags('MOVED')) as MOVED, 
    (G.flags & fPhotoFlags('BAD_MOVING_FIT')) as BAD_MOVING_FIT 
FROM Galaxy as G
WHERE
    (G.flags & (fPhotoFlags('MOVED') + fPhotoFlags('BAD_MOVING_FIT'))) > 0 
    and (G.rowv * G.rowv + G.colv * G.colv) >= 
    (G.rowvErr * G.rowvErr + G.colvErr * G.colvErr)
    ;
------------------------------------------------
Compiling SDSSEllipticalGalaxiesBasedOnModelFitsWILLFAIL.adqls
------------------------------------------------
== From: ===>
-- Find all galaxies with a deVaucouleours profile and the
-- photometric colors consistent with an elliptical galaxy. NOTE THAT THE
-- NAMES AND VALUES OF THE LIKELIHOODS HAVE CHANGED SINCE THE EDR; they are
-- now log likelihoods, and named accordingly (lDev is now lnlDev, etc.) to
-- indicate these are log likelihoods. This query has many conditions, and
-- also has the use of bitwise logic necessary for dealing with flags.

-- JL Note. Will fail until bitwise manipulation supported.
SELECT G.ObjID
FROM Galaxy as G
WHERE
    G.lnlDev_r > G.lnlExp_r + 0.1 
    -- the likelihood of the deVaucouleours profile fit is 10% greater than the 
    -- likelihood of the exponential fit 
    and G.lnlExp_r > -999 
    -- and the likelihoods are actually meaningful 
    and (G.flags & (fPhotoFlags('BINNED1') + fPhotoFlags('BINNED2') + 
    fPhotoFlags('BINNED4'))) > 0 
    -- and it is detected from at least one of the binned images 
    and (G.flags & ( fPhotoFlags('BLENDED') + fPhotoFlags('NODEBLEND') + 
    fPhotoFlags('CHILD'))) != fPhotoFlags('BLENDED') 
    -- and, if it is blended, it is either a child or not deblended further 
    and (G.flags & (fPhotoFlags('EDGE') + fPhotoFlags('SATURATED'))) = 0 
    -- and it is not near a ccd edge or saturated, where measurements may be bad 
    and G.petroMag_i > 17.5 
    -- and it is fainter than 17.5 in i-band 
    and (G.petroMag_r > 15.5 or G.petroR50_r > 2) 
    and (G.petroMag_r > 0 and G.g > 0 and G.r > 0 and G.i > 0) 
    and ( (G.petroMag_r - G.extinction_r) < 19.2 
    and (G.petroMag_r - G.extinction_r < 
    (13.1 + (7/3)*(G.g - G.r) + 4 *(G.r - G.i) - 4 * 0.18) ) 
    and ( (G.r - G.i - (G.g - G.r)/4 - 0.18) < 0.2 ) 
    and ( (G.r - G.i - (G.g - G.r)/4 - 0.18) > -0.2 ) ) 
    or ( (G.petroMag_r - G.extinction_r < 19.5) 
    and ( (G.r - G.i - (G.g - G.r)/4 - 0.18) > 
    (0.45 - 4*(G.g - G.r) ) ) 
    and ( (G.g - G.r) > (1.35 + 0.25 *(G.r - G.i) ) ) ) 
    -- and many constraints on colors and mags to make it have elliptical-type colors. 
    ;

------------------------------------------------
Compiling selectAggregateFuncs.adqls
------------------------------------------------
== From: ===>
select top 100  AVG(a.POS_EQ_RA), 
                MIN(a.POS_EQ_RA),
                MAX(a.POS_EQ_RA),
                SUM(a.POS_EQ_RA),
                COUNT(a.POS_EQ_RA)
from catalogue as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="AVG" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="MIN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="MAX" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="SUM" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="COUNT" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectAliasExpr.adqls
------------------------------------------------
== From: ===>
SELECT TOP 100  
( 
  ( 
    SIN(a.INSERT_RA) + COS(a.INSERT_DEC) 
  ) 
  / 
  ( 
    SQRT( ABS(a.INSERT_RA) ) - LOG( ABS(a.INSERT_DEC) ) 
  ) 
) AS exprAlias
FROM catalogue AS a ; 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:aliasSelectionItemType" As="exprAlias" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Expression xsi:type="v1:closedExprType">
                <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                    <v1:Arg xsi:type="v1:closedExprType">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                            <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="INSERT_RA"/>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="INSERT_DEC"/>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:closedExprType">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                            <v1:Arg xsi:type="v1:mathFunctionType" Name="SQRT">
                                <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="INSERT_RA"/>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:mathFunctionType" Name="LOG">
                                <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="INSERT_DEC"/>
                                </v1:Arg>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
            </v1:Expression>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectAllAllow.adqls
------------------------------------------------
== From: ===>
SELECT ALL * FROM catalogue as c; 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Allow Option="All"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectAllLimit.adqls
------------------------------------------------
== From: ===>
Select top 100  * from catalogue as c;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectBetweenOps.adqls
------------------------------------------------
== From: ===>
select top 100 c.POS_EQ_RA from catalogue as c
where c.POS_EQ_RA between 0.0 and 0.5 AND c.POS_EQ_RA not between 0.1 and 0.4 ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="c" Name="POS_EQ_RA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:betweenPredType">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="POS_EQ_RA"/>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="0.0" xsi:type="v1:realType"/>
                </v1:Arg>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="0.5" xsi:type="v1:realType"/>
                </v1:Arg>
            </v1:Condition>
            <v1:Condition xsi:type="v1:notBetweenPredType">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="POS_EQ_RA"/>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="0.1" xsi:type="v1:realType"/>
                </v1:Arg>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="0.4" xsi:type="v1:realType"/>
                </v1:Arg>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling selectBinaries.adqls
------------------------------------------------
== From: ===>
select top 100  a.POS_EQ_RA + a.POS_EQ_DEC, 
                a.POS_EQ_RA - a.POS_EQ_DEC, 
                a.POS_EQ_RA * a.POS_EQ_DEC, 
                a.POS_EQ_RA / a.POS_EQ_DEC
from catalogue as a ;
 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:binaryExprType" Oper="+" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
        </v1:Item>
        <v1:Item xsi:type="v1:binaryExprType" Oper="-" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
        </v1:Item>
        <v1:Item xsi:type="v1:binaryExprType" Oper="*" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
        </v1:Item>
        <v1:Item xsi:type="v1:binaryExprType" Oper="/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectBoolOps.adqls
------------------------------------------------
== From: ===>
select top 100  a.POS_EQ_RA, a.POS_EQ_DEC from catalogue as a 
where 
( ( not a.POS_EQ_RA = a.POS_EQ_DEC ) OR ( a.POS_EQ_RA = a.POS_EQ_DEC ) ) AND ( a.POS_EQ_RA > a.POS_EQ_DEC ) ;


Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:unionSearchType">
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:inverseSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                            </v1:Condition>
                        </v1:Condition>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling selectComparisonOps.adqls
------------------------------------------------
== From: ===>
SELECT TOP 100 a.POS_EQ_RA, a.POS_EQ_DEC 
FROM catalogue as a 
WHERE a.POS_EQ_RA=a.POS_EQ_DEC
      AND
      a.POS_EQ_RA<>a.POS_EQ_DEC
      AND
      a.POS_EQ_RA>a.POS_EQ_DEC
      AND
      a.POS_EQ_RA>=a.POS_EQ_DEC
      AND
      a.POS_EQ_RA<a.POS_EQ_DEC
      AND
      a.POS_EQ_RA<=a.POS_EQ_DEC ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;>">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                </v1:Condition>
                <v1:Condition xsi:type="v1:intersectionSearchType">
                    <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:intersectionSearchType">
                        <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                        </v1:Condition>
                        <v1:Condition xsi:type="v1:intersectionSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                            </v1:Condition>
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                            </v1:Condition>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling selectDistinct.adqls
------------------------------------------------
== From: ===>
Select DISTINCT * From catalogue as a ;


Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Allow Option="DISTINCT"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectExpr1.adqls
------------------------------------------------
== From: ===>
select SIN(a.POS_EQ_RA) from catalogue as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="SIN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectExpr2.adqls
------------------------------------------------
== From: ===>
select a.POS_EQ_RA / a.POS_EQ_DEC from catalogue as a ;


Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:binaryExprType" Oper="/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectExprMixed1.adqls
------------------------------------------------
== From: ===>
Select  ( SIN(a.POS_EQ_RA) + COS(a.POS_EQ_DEC) )  /  ( SQRT(ABS(a.POS_EQ_RA)) - LOG(ABS(a.POS_EQ_DEC)) )     
From catalogue as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:binaryExprType" Oper="/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:closedExprType">
                <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                    </v1:Arg>
                </v1:Arg>
            </v1:Arg>
            <v1:Arg xsi:type="v1:closedExprType">
                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="SQRT">
                        <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="LOG">
                        <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectExprMultiAlias.adqls
------------------------------------------------
== From: ===>
Select  ( SIN(a.POS_EQ_RA) + COS(b.POS_EQ_DEC) )   /   ( SQRT(ABS(c.POS_EQ_RA)) - LOG(ABS(d.POS_EQ_DEC)) )     
From catalogue as a, catalogue as b, catalogue as c, catalogue as d ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:binaryExprType" Oper="/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:closedExprType">
                <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                        <v1:Arg xsi:type="v1:columnReferenceType" Table="b" Name="POS_EQ_DEC"/>
                    </v1:Arg>
                </v1:Arg>
            </v1:Arg>
            <v1:Arg xsi:type="v1:closedExprType">
                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="SQRT">
                        <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="POS_EQ_RA"/>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="LOG">
                        <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                            <v1:Arg xsi:type="v1:columnReferenceType" Table="d" Name="POS_EQ_DEC"/>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectExprSum.adqls
------------------------------------------------
== From: ===>
Select SUM(a.POS_EQ_RA)  From catalogue as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:aggregateFunctionType" Name="SUM" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectExprUnary.adqls
------------------------------------------------
== From: ===>
Select +a.POS_EQ_RA From catalogue as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:unaryExprType" Oper="+" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectFromNoAlias.adqls
------------------------------------------------
== From: ===>
Select * From catalogue Where catalogue.POS_EQ_DEC<0.0 ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="catalogue" Name="POS_EQ_DEC"/>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="0.0" xsi:type="v1:realType"/>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling selectGroupBy.adqls
------------------------------------------------
== From: ===>
Select * From catalogue as a Group By a.POS_EQ_RA, a.POS_EQ_DEC ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:GroupBy>
        <v1:Column Table="a" Name="POS_EQ_RA"/>
        <v1:Column Table="a" Name="POS_EQ_DEC"/>
    </v1:GroupBy>
</v1:Select>
------------------------------------------------
Compiling selectLogPowMathsFuncs.adqls
------------------------------------------------
== From: ===>
Select Top 100 EXP( ABS(a.POS_RA_MAIN) + 1.0  ) , 
               LOG( ABS(a.POS_RA_MAIN) ) , 
               SQRT( a.POS_RA_MAIN * a.POS_RA_MAIN  ) , 
               SQUARE( a.POS_RA_MAIN ) , 
               LOG10( ABS(a.POS_RA_MAIN) + 1.0  )  
From catalogue as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:mathFunctionType" Name="EXP" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_RA_MAIN"/>
                </v1:Arg>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="1.0" xsi:type="v1:realType"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:mathFunctionType" Name="LOG" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_RA_MAIN"/>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:mathFunctionType" Name="SQRT" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_RA_MAIN"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_RA_MAIN"/>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:mathFunctionType" Name="SQUARE" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_RA_MAIN"/>
        </v1:Item>
        <v1:Item xsi:type="v1:mathFunctionType" Name="LOG10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="ABS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_RA_MAIN"/>
                </v1:Arg>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="1.0" xsi:type="v1:realType"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectMultiTabMultiAlias1.adqls
------------------------------------------------
== From: ===>
Select a1.POS_EQ_RA, a2.POS_EQ_DEC, b1.ID_FIELD, b2.CODE_QUALITY From catalogueA as a1, catalogueA as a2, catalogueB as b1, catalogueB as b2 ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a1" Name="POS_EQ_RA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a2" Name="POS_EQ_DEC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="b1" Name="ID_FIELD" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="b2" Name="CODE_QUALITY" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogueA" Alias="a1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="catalogueA" Alias="a2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="catalogueB" Alias="b1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="catalogueB" Alias="b2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectOneTableTwoCols.adqls
------------------------------------------------
== From: ===>
Select a.POS_EQ_RA, a.POS_EQ_DEC From catalogue as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectOrderByCol.adqls
------------------------------------------------
== From: ===>
Select * From catalogue as b Order By b.POS_EQ_DEC ; 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:OrderBy>
        <v1:Item>
            <v1:Expression xsi:type="v1:columnReferenceType" Table="b" Name="POS_EQ_DEC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <v1:Order Direction="ASC"/>
        </v1:Item>
    </v1:OrderBy>
</v1:Select>
------------------------------------------------
Compiling selectOrderByComplex.adqls
------------------------------------------------
== From: ===>
Select * From catalogue as a Order By a.POS_EQ_RA ASC, ABS(a.POS_EQ_DEC)  DESC, a.PHOT_FLUX_PEAK+a.PHOT_FLUX_INT ASC ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:OrderBy>
        <v1:Item>
            <v1:Expression xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <v1:Order Direction="ASC"/>
        </v1:Item>
        <v1:Item>
            <v1:Expression xsi:type="v1:mathFunctionType" Name="ABS" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
            </v1:Expression>
            <v1:Order Direction="DESC"/>
        </v1:Item>
        <v1:Item>
            <v1:Expression xsi:type="v1:binaryExprType" Oper="+" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="PHOT_FLUX_PEAK"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="PHOT_FLUX_INT"/>
            </v1:Expression>
            <v1:Order Direction="ASC"/>
        </v1:Item>
    </v1:OrderBy>
</v1:Select>
------------------------------------------------
Compiling selectSome.adqls
------------------------------------------------
== From: ===>
Select a.POS_EQ_RA, a.POS_EQ_DEC, a.ID_FIELD, a.CODE_QUALITY, a.PHOT_FLUX_PEAK From catalogue as a ;

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="ID_FIELD" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="CODE_QUALITY" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="PHOT_FLUX_PEAK" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectTrigFuncsDeg.adqls
------------------------------------------------
== From: ===>
Select Top 100 SIN(DEGREES(RADIANS(a.POS_EQ_RA) ) ) , 
               COS(DEGREES(RADIANS(a.POS_EQ_RA) ) ) , 
               TAN(DEGREES(RADIANS(a.POS_EQ_RA) ) ) , 
               COT(DEGREES(RADIANS(a.POS_EQ_RA) ) ) , 
               ASIN(DEGREES(RADIANS(a.POS_EQ_RA) ) ) , 
               ACOS(DEGREES(RADIANS(a.POS_EQ_RA) ) ) , 
               ATAN(DEGREES(RADIANS(a.POS_EQ_RA) ) ) , 
               ATAN2(DEGREES(RADIANS(a.POS_EQ_RA)), DEGREES(RADIANS(a.POS_EQ_DEC)) )  
From catalogue as a 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="SIN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="COS" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="TAN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="COT" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="ASIN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="ACOS" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="ATAN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="ATAN2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                </v1:Arg>
            </v1:Arg>
            <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectTrigFuncsRad.adqls
------------------------------------------------
== From: ===>
Select Top 100 SIN(RADIANS(a.POS_EQ_RA) ) , 
               COS(RADIANS(a.POS_EQ_RA) ) , 
               TAN(RADIANS(a.POS_EQ_RA) ) , 
               COT(RADIANS(a.POS_EQ_RA) ) , 
               ASIN(RADIANS(a.POS_EQ_RA) ) , 
               ACOS(RADIANS(a.POS_EQ_RA) ) , 
               ATAN(RADIANS(a.POS_EQ_RA) ) , 
               ATAN2(RADIANS(a.POS_EQ_RA), RADIANS(a.POS_EQ_DEC))  
From catalogue as a 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="SIN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="COS" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="TAN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="COT" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="ASIN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="ACOS" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="ATAN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            </v1:Arg>
        </v1:Item>
        <v1:Item xsi:type="v1:trigonometricFunctionType" Name="ATAN2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
            </v1:Arg>
            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
            </v1:Arg>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectTwoTablesFourCols.adqls
------------------------------------------------
== From: ===>
Select a.POS_EQ_RA, a.POS_EQ_DEC, b.ID_FIELD, b.CODE_QUALITY From catalogueA as a, catalogueB as b 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="b" Name="ID_FIELD" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="b" Name="CODE_QUALITY" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogueA" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="catalogueB" Alias="b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectTwoTablesFourColsNoAlias.adqls
------------------------------------------------
== From: ===>
Select catalogueA.POS_EQ_RA, catalogueA.POS_EQ_DEC, catalogueB.ID_FIELD, catalogueB.CODE_QUALITY From catalogueA, catalogueB 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="catalogueA" Name="POS_EQ_RA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="catalogueA" Name="POS_EQ_DEC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="catalogueB" Name="ID_FIELD" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="catalogueB" Name="CODE_QUALITY" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogueA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="catalogueB" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectUnaries.adqls
------------------------------------------------
== From: ===>
Select Top 100 +a.POS_EQ_RA, -a.POS_EQ_RA From catalogue as a 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:Restrict Top="100"/>
    <v1:SelectionList>
        <v1:Item xsi:type="v1:unaryExprType" Oper="+" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
        <v1:Item xsi:type="v1:unaryExprType" Oper="-" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling selectValueTweakMathsFuncs.adqls
------------------------------------------------
== From: ===>
Select ABS(a.POS_EQ_RA) , CEILING(a.POS_EQ_RA) , FLOOR(a.POS_EQ_RA) , ROUND(a.POS_EQ_RA) , TRUNCATE(a.POS_EQ_RA)  From catalogue as a 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:mathFunctionType" Name="ABS" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
        <v1:Item xsi:type="v1:mathFunctionType" Name="CEILING" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
        <v1:Item xsi:type="v1:mathFunctionType" Name="FLOOR" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
        <v1:Item xsi:type="v1:mathFunctionType" Name="ROUND" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
        <v1:Item xsi:type="v1:mathFunctionType" Name="TRUNCATE" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
        </v1:Item>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
</v1:Select>
------------------------------------------------
Compiling spectralLines.adqls
------------------------------------------------
== From: ===>
Select * From unified_lines as a Where 
(
  (
    a.frequency<=110 
    And
    a.frequency>=100
  ) 
  Or
  ( 
    a.frequency<=220 
    And 
    a.frequency>=210
  ) 
)
And
(
  a.lower_state_energy>=1000
)

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="unified_lines" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:unionSearchType">
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:intersectionSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="frequency"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="110" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Condition>
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="frequency"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="100" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Condition>
                        </v1:Condition>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:intersectionSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="frequency"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="220" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Condition>
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="frequency"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="210" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Condition>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="lower_state_energy"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="1000" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling squaringTheCircle.adqls
------------------------------------------------
== From: ===>
SELECT * FROM CAT as c WHERE (c."DEC" BETWEEN (-45.67-0.01) AND (-45.67+0.01)) 
AND (DEGREES(ACOS(SIN(RADIANS(c."DEC")) 
* SIN(RADIANS(-45.67)) + COS(RADIANS(c."DEC")) 
* COS(RADIANS(-45.67)) * COS(RADIANS(c.RA-123.45))))) < 0.01

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="CAT" Alias="c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:betweenPredType">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="DEC"/>
                    <v1:Arg xsi:type="v1:closedExprType">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                            <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="45.67" xsi:type="v1:realType"/>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="0.01" xsi:type="v1:realType"/>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:closedExprType">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                            <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="45.67" xsi:type="v1:realType"/>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="0.01" xsi:type="v1:realType"/>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                <v1:Arg xsi:type="v1:closedExprType">
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="DEGREES">
                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="ACOS">
                            <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                                <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                        <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="DEC"/>
                                        </v1:Arg>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                        <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                            <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="45.67" xsi:type="v1:realType"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                                <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                        <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="DEC"/>
                                        </v1:Arg>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                                <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                                                    <v1:Arg xsi:type="v1:atomType">
                                                        <v1:Literal Value="45.67" xsi:type="v1:realType"/>
                                                    </v1:Arg>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                    <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="RA"/>
                                                    <v1:Arg xsi:type="v1:atomType">
                                                        <v1:Literal Value="123.45" xsi:type="v1:realType"/>
                                                    </v1:Arg>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="0.01" xsi:type="v1:realType"/>
                </v1:Arg>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling threeWayJoin.adqls
------------------------------------------------
== From: ===>
SELECT las.sourceID, las.ra, las."dec", fsc.seqNo, fsc.ra, fsc."dec"
FROM lasSource AS las, rosat_fsc AS fsc, lasSourceXrosat_fsc AS x
WHERE x.masterObjID=las.sourceID AND x.slaveObjID=fsc.seqNo AND 
x.distanceMins<0.1

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:columnReferenceType" Table="las" Name="sourceID" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="las" Name="ra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="las" Name="dec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="fsc" Name="seqNo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="fsc" Name="ra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Item xsi:type="v1:columnReferenceType" Table="fsc" Name="dec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="lasSource" Alias="las" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="rosat_fsc" Alias="fsc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Table xsi:type="v1:tableType" Name="lasSourceXrosat_fsc" Alias="x" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                <v1:Arg xsi:type="v1:columnReferenceType" Table="x" Name="masterObjID"/>
                <v1:Arg xsi:type="v1:columnReferenceType" Table="las" Name="sourceID"/>
            </v1:Condition>
            <v1:Condition xsi:type="v1:intersectionSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="x" Name="slaveObjID"/>
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="fsc" Name="seqNo"/>
                </v1:Condition>
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="x" Name="distanceMins"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="0.1" xsi:type="v1:realType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling whereWithBinaryOpsAndUnaryOps.adqls
------------------------------------------------
== From: ===>
select * from catalogue as a 
where -a.POS_EQ_RA + -a.POS_EQ_DEC = -123 - -a.POS_EQ_DEC
 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                </v1:Arg>
                <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                </v1:Arg>
            </v1:Arg>
            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="123" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Arg>
                <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling whereWithNegativeUnaryLiteral.adqls
------------------------------------------------
== From: ===>
select * from catalogue as a where a.col1 = -12
 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col1"/>
            <v1:Arg xsi:type="v1:unaryExprType" Oper="-">
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="12" xsi:type="v1:integerType"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling whereWithPositiveUnaryLiteral.adqls
------------------------------------------------
== From: ===>
select * from catalogue as a where a.col1 = +12
 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col1"/>
            <v1:Arg xsi:type="v1:unaryExprType" Oper="+">
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="12" xsi:type="v1:integerType"/>
                </v1:Arg>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
------------------------------------------------
Compiling whereWithUnsignedNumericLiteral.adqls
------------------------------------------------
== From: ===>
select * from catalogue as a where a.col1 = 12
 

Compilation suceeded...
==== To: ===>
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="catalogue" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col1"/>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="12" xsi:type="v1:integerType"/>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
Total elapse time in milliseconds: 2261
Average compilation time: 17
------------------------------------------------
Compiling FragmentBADContextName.adqls
------------------------------------------------
== From: ===>
--Select/OrderBye 
Order By a.col1 asc, a.col2 desc, a.col3
------------------------------------------------
Compiling FragmentColumn.adqls
------------------------------------------------
== From: ===>
--Select/Column
a.ra

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:columnReferenceType" Table="a" Name="ra" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
------------------------------------------------
Compiling FragmentCountArgument.adqls
------------------------------------------------
== From: ===>
--Select/Item[@type="aggregateFunctionType"]/Arg
*

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:aggregateFunctionType" Name="COUNT" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Arg xsi:type="v1:allSelectionItemType"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentCountArgument02.adqls
------------------------------------------------
== From: ===>
--Select/Item[@type="aggregateFunctionType"]/Arg
sin(a.ra)

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:trigonometricFunctionType" Name="SIN" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="ra"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentConeSearchWhere.adqls
------------------------------------------------
== From: ===>
--Select/Where
Where 
(a.POS_EQ_DEC<5.01)  
And  
( 
  (a.POS_EQ_DEC>4.99)  
  And  
  ( (
     2.0 
     * 
     ASIN(
           SQRT(( 
                  POWER( 
                          SIN( ( (RADIANS(a.POS_EQ_DEC)  - 0.08726646259971647)   / 2.0)  ) 
                        , 2
                       )  
                  +  
                  ( 
                    ( 
                      COS(RADIANS(a.POS_EQ_DEC) )  
                      *  
                      ( 
                        COS(0.08726646259971647)  
                        * 
                        POWER( SIN( ( (RADIANS(a.POS_EQ_RA)  - 0.08726646259971647) / 2.0)  ) ,2 )

                      )  
                    )  
                  )  
              )) 
          ) 
    ) 
    <
    1.7453292519943296E+3
  ) 
)

Compilation suceeded...
==== To: ===>
<v1:Condition xsi:type="v1:intersectionSearchType" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Condition xsi:type="v1:closedSearchType">
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="5.01" xsi:type="v1:realType"/>
            </v1:Arg>
        </v1:Condition>
    </v1:Condition>
    <v1:Condition xsi:type="v1:closedSearchType">
        <v1:Condition xsi:type="v1:intersectionSearchType">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="4.99" xsi:type="v1:realType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;">
                    <v1:Arg xsi:type="v1:closedExprType">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                            <v1:Arg xsi:type="v1:atomType">
                                <v1:Literal Value="2.0" xsi:type="v1:realType"/>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="ASIN">
                                <v1:Arg xsi:type="v1:mathFunctionType" Name="SQRT">
                                    <v1:Arg xsi:type="v1:closedExprType">
                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                                            <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                                    <v1:Arg xsi:type="v1:closedExprType">
                                                        <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                                            <v1:Arg xsi:type="v1:closedExprType">
                                                                <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                                    <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                                                                    </v1:Arg>
                                                                    <v1:Arg xsi:type="v1:atomType">
                                                                        <v1:Literal Value="0.08726646259971647" xsi:type="v1:realType"/>
                                                                    </v1:Arg>
                                                                </v1:Arg>
                                                            </v1:Arg>
                                                            <v1:Arg xsi:type="v1:atomType">
                                                                <v1:Literal Value="2.0" xsi:type="v1:realType"/>
                                                            </v1:Arg>
                                                        </v1:Arg>
                                                    </v1:Arg>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                            <v1:Arg xsi:type="v1:closedExprType">
                                                <v1:Arg xsi:type="v1:closedExprType">
                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                                            <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_DEC"/>
                                                            </v1:Arg>
                                                        </v1:Arg>
                                                        <v1:Arg xsi:type="v1:closedExprType">
                                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                                                    <v1:Arg xsi:type="v1:atomType">
                                                                        <v1:Literal Value="0.08726646259971647" xsi:type="v1:realType"/>
                                                                    </v1:Arg>
                                                                </v1:Arg>
                                                                <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
                                                                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                                                        <v1:Arg xsi:type="v1:closedExprType">
                                                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                                                                <v1:Arg xsi:type="v1:closedExprType">
                                                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                                                        <v1:Arg xsi:type="v1:mathFunctionType" Name="RADIANS">
                                                                                            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="POS_EQ_RA"/>
                                                                                        </v1:Arg>
                                                                                        <v1:Arg xsi:type="v1:atomType">
                                                                                            <v1:Literal Value="0.08726646259971647" xsi:type="v1:realType"/>
                                                                                        </v1:Arg>
                                                                                    </v1:Arg>
                                                                                </v1:Arg>
                                                                                <v1:Arg xsi:type="v1:atomType">
                                                                                    <v1:Literal Value="2.0" xsi:type="v1:realType"/>
                                                                                </v1:Arg>
                                                                            </v1:Arg>
                                                                        </v1:Arg>
                                                                    </v1:Arg>
                                                                    <v1:Arg xsi:type="v1:atomType">
                                                                        <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                                                    </v1:Arg>
                                                                </v1:Arg>
                                                            </v1:Arg>
                                                        </v1:Arg>
                                                    </v1:Arg>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="1745.3292519943295" xsi:type="v1:realType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Condition>
</v1:Condition>
------------------------------------------------
Compiling FragmentFrom01.adqls
------------------------------------------------
== From: ===>
--Select/From 
from users as u, classified_ads as c

Compilation suceeded...
==== To: ===>
<xml-fragment>
    <v1:Table xsi:type="v1:tableType" Name="users" Alias="u" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    <v1:Table xsi:type="v1:tableType" Name="classified_ads" Alias="c" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentFromNoAlias.adqls
------------------------------------------------
== From: ===>
--Select/From
From catalogue 

Compilation suceeded...
==== To: ===>
<v1:Table xsi:type="v1:tableType" Name="catalogue" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
------------------------------------------------
Compiling FragmentFromTableTypeTableType.adqls
------------------------------------------------
== From: ===>
--FromTableType[type="tableType"]
cata as a 

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:tableType" Name="cata" Alias="a" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
------------------------------------------------
Compiling FragmentGroupBy.adqls
------------------------------------------------
== From: ===>
--Select/GroupBy 
Group By a.POS_EQ_RA, a.POS_EQ_DEC

Compilation suceeded...
==== To: ===>
<xml-fragment>
    <v1:Column Table="a" Name="POS_EQ_RA" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0"/>
    <v1:Column Table="a" Name="POS_EQ_DEC" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentHaving.adqls
------------------------------------------------
== From: ===>
--Select/Having 
Having COUNT(*) >=23

Compilation suceeded...
==== To: ===>
<v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Arg xsi:type="v1:aggregateFunctionType" Name="COUNT">
        <v1:Arg xsi:type="v1:allSelectionItemType"/>
    </v1:Arg>
    <v1:Arg xsi:type="v1:atomType">
        <v1:Literal Value="23" xsi:type="v1:integerType"/>
    </v1:Arg>
</v1:Condition>
------------------------------------------------
Compiling FragmentItemArgument.adqls
------------------------------------------------
== From: ===>
--Select/Item/Arg
square( a."dec" )

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:mathFunctionType" Name="SQUARE" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="dec"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentLikePattern.adqls
------------------------------------------------
== From: ===>
--select/where/condition/pattern
'%son'

Compilation suceeded...
==== To: ===>
<v1:Literal xsi:type="v1:stringType" Value="%son" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
------------------------------------------------
Compiling FragmentMATablesArrayOfFromTableType.adqls
------------------------------------------------
== From: ===>
--Tables[type="ArrayOfFromTableType"]
cata.taba as a, catb.tabb as b ; 

Compilation suceeded...
==== To: ===>
<xml-fragment>
    <v1:fromTableType xsi:type="v1:tableType" Archive="cata" Name="taba" Alias="a" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    <v1:fromTableType xsi:type="v1:tableType" Archive="catb" Name="tabb" Alias="b" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentNaiveConeSearch.adqls
------------------------------------------------
== From: ===>
--Select
SELECT * FROM RASS_PHOTONS as r
WHERE 2 * ASIN( SQRT( SIN( (20-r."DEC")/2 ) 
   * SIN((20-r."DEC")/2) + COS(20) * COS(r."DEC") 
   * SIN((20 - r.RA)/2) * SIN((20 - r.RA)/2 ) ) ) <= 10 ;

Compilation suceeded...
==== To: ===>
<xml-fragment>
    <v1:SelectionList xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
        <v1:Table xsi:type="v1:tableType" Name="RASS_PHOTONS" Alias="r" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
        <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                <v1:Arg xsi:type="v1:atomType">
                    <v1:Literal Value="2" xsi:type="v1:integerType"/>
                </v1:Arg>
                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="ASIN">
                    <v1:Arg xsi:type="v1:mathFunctionType" Name="SQRT">
                        <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
                            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                        <v1:Arg xsi:type="v1:closedExprType">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="DEC"/>
                                            </v1:Arg>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:atomType">
                                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                        <v1:Arg xsi:type="v1:closedExprType">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="DEC"/>
                                            </v1:Arg>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:atomType">
                                            <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                            </v1:Arg>
                            <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                    <v1:Arg xsi:type="v1:atomType">
                                        <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                    </v1:Arg>
                                </v1:Arg>
                                <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                    <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="COS">
                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="DEC"/>
                                    </v1:Arg>
                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="*">
                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                                <v1:Arg xsi:type="v1:closedExprType">
                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                        <v1:Arg xsi:type="v1:atomType">
                                                            <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                                        </v1:Arg>
                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="RA"/>
                                                    </v1:Arg>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                        <v1:Arg xsi:type="v1:trigonometricFunctionType" Name="SIN">
                                            <v1:Arg xsi:type="v1:binaryExprType" Oper="/">
                                                <v1:Arg xsi:type="v1:closedExprType">
                                                    <v1:Arg xsi:type="v1:binaryExprType" Oper="-">
                                                        <v1:Arg xsi:type="v1:atomType">
                                                            <v1:Literal Value="20" xsi:type="v1:integerType"/>
                                                        </v1:Arg>
                                                        <v1:Arg xsi:type="v1:columnReferenceType" Table="r" Name="RA"/>
                                                    </v1:Arg>
                                                </v1:Arg>
                                                <v1:Arg xsi:type="v1:atomType">
                                                    <v1:Literal Value="2" xsi:type="v1:integerType"/>
                                                </v1:Arg>
                                            </v1:Arg>
                                        </v1:Arg>
                                    </v1:Arg>
                                </v1:Arg>
                            </v1:Arg>
                        </v1:Arg>
                    </v1:Arg>
                </v1:Arg>
            </v1:Arg>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="10" xsi:type="v1:integerType"/>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</xml-fragment>
------------------------------------------------
Compiling FragmentOrderBy.adqls
------------------------------------------------
== From: ===>
--Select/OrderBy 
Order By a.col1 asc, a.col2 desc, a.col3

Compilation suceeded...
==== To: ===>
<xml-fragment>
    <v1:Item xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
        <v1:Expression xsi:type="v1:columnReferenceType" Table="a" Name="col1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Order Direction="ASC"/>
    </v1:Item>
    <v1:Item xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
        <v1:Expression xsi:type="v1:columnReferenceType" Table="a" Name="col2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Order Direction="DESC"/>
    </v1:Item>
    <v1:Item xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
        <v1:Expression xsi:type="v1:columnReferenceType" Table="a" Name="col3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <v1:Order Direction="ASC"/>
    </v1:Item>
</xml-fragment>
------------------------------------------------
Compiling FragmentOrderByItem.adqls
------------------------------------------------
== From: ===>
--Select/OrderBy/Item 
a.col1 asc

Compilation suceeded...
==== To: ===>
<xml-fragment>
    <v1:Expression xsi:type="v1:columnReferenceType" Table="a" Name="col1" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    <v1:Order Direction="ASC" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentOrderByItemExpression.adqls
------------------------------------------------
== From: ===>
--Orderby/Item[@type='orderType']/Expression
a.col2
 

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:columnReferenceType" Table="a" Name="col2" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
------------------------------------------------
Compiling FragmentOrderByItemOrder.adqls
------------------------------------------------
== From: ===>
--OrderBy/Item/Order[type="orderOptionType"] 
desc

Compilation suceeded...
==== To: ===>
<xml-fragment Direction="DESC"/>
------------------------------------------------
Compiling FragmentOrderByItemOrder02.adqls
------------------------------------------------
== From: ===>
--OrderBy/Item/Order 
asc

Compilation suceeded...
==== To: ===>
<xml-fragment Direction="ASC"/>
------------------------------------------------
Compiling FragmentSelectAllAllow.adqls
------------------------------------------------
== From: ===>
--SELECT/ALLOW
ALL

Compilation suceeded...
==== To: ===>
<xml-fragment Option="All"/>
------------------------------------------------
Compiling FragmentSelectFromTable.adqls
------------------------------------------------
== From: ===>
--Select/From/Table
"2mass"

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:tableType" Name="2mass" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
------------------------------------------------
Compiling FragmentSelectWhereConditionNotInExpression.adqls
------------------------------------------------
== From: ===>
--Select/Where/Condition[@type='exclusiveSearchType']/Expression
square(a.col2) / 2
 

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:binaryExprType" Oper="/" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Arg xsi:type="v1:mathFunctionType" Name="SQUARE">
        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col2"/>
    </v1:Arg>
    <v1:Arg xsi:type="v1:atomType">
        <v1:Literal Value="2" xsi:type="v1:integerType"/>
    </v1:Arg>
</xml-fragment>
------------------------------------------------
Compiling FragmentSelectWhereConditionInExpression.adqls
------------------------------------------------
== From: ===>
--Select/Where/Condition[@type='inclusiveSearchType']/Expression
square(a.col2) + power(a.col3, 3 )
 

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:binaryExprType" Oper="+" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Arg xsi:type="v1:mathFunctionType" Name="SQUARE">
        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col2"/>
    </v1:Arg>
    <v1:Arg xsi:type="v1:mathFunctionType" Name="POWER">
        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col3"/>
        <v1:Arg xsi:type="v1:atomType">
            <v1:Literal Value="3" xsi:type="v1:integerType"/>
        </v1:Arg>
    </v1:Arg>
</xml-fragment>
------------------------------------------------
Compiling FragmentSelectionList01.adqls
------------------------------------------------
== From: ===>
--Select/SelectionList
u.user_id, u.email, count(*), max(c.posted)

Compilation suceeded...
==== To: ===>
<xml-fragment>
    <!--+Select/SelectionList
+-->
    <v1:Item xsi:type="v1:columnReferenceType" Table="u" Name="user_id" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    <v1:Item xsi:type="v1:columnReferenceType" Table="u" Name="email" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    <v1:Item xsi:type="v1:aggregateFunctionType" Name="COUNT" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <v1:Arg xsi:type="v1:allSelectionItemType"/>
    </v1:Item>
    <v1:Item xsi:type="v1:aggregateFunctionType" Name="MAX" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <v1:Arg xsi:type="v1:columnReferenceType" Table="c" Name="posted"/>
    </v1:Item>
</xml-fragment>
------------------------------------------------
Compiling FragmentSelectionListAllItems.adqls
------------------------------------------------
== From: ===>
--Select/SelectionList
* 
 

Compilation suceeded...
==== To: ===>
<!--+Select/SelectionList
+-->
<v1:Item xsi:type="v1:allSelectionItemType" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
------------------------------------------------
Compiling FragmentSelectionListCeilingFunction.adqls
------------------------------------------------
== From: ===>
--SelectionList/Item
ceiling(a.col_1)

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:mathFunctionType" Name="CEILING" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col_1"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentSelectionListItemExpression.adqls
------------------------------------------------
== From: ===>
--Select/SelectionList/Item[@type='aliasSelectionItemType']/Expression
square(a.col2)
 

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:mathFunctionType" Name="SQUARE" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col2"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentSetItem.adqls
------------------------------------------------
== From: ===>
--Set/Item 
123.456

Compilation suceeded...
==== To: ===>
<xml-fragment Value="123.456" xsi:type="v1:realType" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
------------------------------------------------
Compiling FragmentSubsetSpectralLines.adqls
------------------------------------------------
== From: ===>
--Set[@type="subQuerySet"]/selection
Select * From unified_lines as a Where 
(
  (
    a.frequency<=110 
    And
    a.frequency>=100
  ) 
  Or
  ( 
    a.frequency<=220 
    And 
    a.frequency>=210
  ) 
)
And
(
  a.lower_state_energy>=1000
)

Compilation suceeded...
==== To: ===>
<xml-fragment>
    <v1:SelectionList xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
        <v1:Table xsi:type="v1:tableType" Name="unified_lines" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
        <v1:Condition xsi:type="v1:intersectionSearchType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:unionSearchType">
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:intersectionSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="frequency"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="110" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Condition>
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="frequency"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="100" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Condition>
                        </v1:Condition>
                    </v1:Condition>
                    <v1:Condition xsi:type="v1:closedSearchType">
                        <v1:Condition xsi:type="v1:intersectionSearchType">
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison="&lt;=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="frequency"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="220" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Condition>
                            <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                                <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="frequency"/>
                                <v1:Arg xsi:type="v1:atomType">
                                    <v1:Literal Value="210" xsi:type="v1:integerType"/>
                                </v1:Arg>
                            </v1:Condition>
                        </v1:Condition>
                    </v1:Condition>
                </v1:Condition>
            </v1:Condition>
            <v1:Condition xsi:type="v1:closedSearchType">
                <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
                    <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="lower_state_energy"/>
                    <v1:Arg xsi:type="v1:atomType">
                        <v1:Literal Value="1000" xsi:type="v1:integerType"/>
                    </v1:Arg>
                </v1:Condition>
            </v1:Condition>
        </v1:Condition>
    </v1:Where>
</xml-fragment>
------------------------------------------------
Compiling FragmentTableCondition.adqls
------------------------------------------------
== From: ===>
--Table/Condition
a.col1 + a.col2 >= 3.2875

Compilation suceeded...
==== To: ===>
<xml-fragment Comparison=">=">
    <v1:Arg xsi:type="v1:binaryExprType" Oper="+" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col1"/>
        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col2"/>
    </v1:Arg>
    <v1:Arg xsi:type="v1:atomType" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <v1:Literal Value="3.2875" xsi:type="v1:realType"/>
    </v1:Arg>
</xml-fragment>
------------------------------------------------
Compiling FragmentTablesArrayOfFromTableType.adqls
------------------------------------------------
== From: ===>
--Tables[type="ArrayOfFromTableType"]
cata as a, catb as b ; 

Compilation suceeded...
==== To: ===>
<xml-fragment>
    <v1:fromTableType xsi:type="v1:tableType" Name="cata" Alias="a" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    <v1:fromTableType xsi:type="v1:tableType" Name="catb" Alias="b" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
</xml-fragment>
------------------------------------------------
Compiling FragmentTableTableType.adqls
------------------------------------------------
== From: ===>
--Table[type="tableType"]
cata as a 

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:tableType" Name="cata" Alias="a" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
------------------------------------------------
Compiling FragmentTop.adqls
------------------------------------------------
== From: ===>
--Select/Restrict 
top 1234567

Compilation suceeded...
==== To: ===>
<xml-fragment Top="1234567"/>
------------------------------------------------
Compiling FragmentWhereCondition.adqls
------------------------------------------------
== From: ===>
--Where/Condition
a.col1 + a.col2 >= 3.2875 and a.col3 between a.col4 and a.col5

Compilation suceeded...
==== To: ===>
<xml-fragment xsi:type="v1:intersectionSearchType" xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <v1:Condition xsi:type="v1:comparisonPredType" Comparison=">=">
        <v1:Arg xsi:type="v1:binaryExprType" Oper="+">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col1"/>
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col2"/>
        </v1:Arg>
        <v1:Arg xsi:type="v1:atomType">
            <v1:Literal Value="3.2875" xsi:type="v1:realType"/>
        </v1:Arg>
    </v1:Condition>
    <v1:Condition xsi:type="v1:betweenPredType">
        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col3"/>
        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col4"/>
        <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="col5"/>
    </v1:Condition>
</xml-fragment>
------------------------------------------------
Compiling FragmentWithHeadAndTrailComments.adqls
------------------------------------------------
== From: ===>
--Select
-- Header Comment 1
-- Header Comment 2
-- Header Comment 3
Select * from cata as a where a.id between 10000 and 20000
-- Trailer Comment 1
-- Trailer Comment 2
-- Trailer Comment 3
<!--+Select
 Header Comment 1
 Header Comment 2
 Header Comment 3
+-->
<v1:Select xmlns:v1="http://www.ivoa.net/xml/ADQL/v1.0">
    <v1:SelectionList>
        <v1:Item xsi:type="v1:allSelectionItemType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:SelectionList>
    <v1:From>
        <v1:Table xsi:type="v1:tableType" Name="cata" Alias="a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
    </v1:From>
    <v1:Where>
        <v1:Condition xsi:type="v1:betweenPredType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <v1:Arg xsi:type="v1:columnReferenceType" Table="a" Name="id"/>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="10000" xsi:type="v1:integerType"/>
            </v1:Arg>
            <v1:Arg xsi:type="v1:atomType">
                <v1:Literal Value="20000" xsi:type="v1:integerType"/>
            </v1:Arg>
        </v1:Condition>
    </v1:Where>
</v1:Select>
<!--+
 Trailer Comment 1
 Trailer Comment 2
 Trailer Comment 3+-->
testMemoryUsageWithReinit() underway: 10000 compilations.
1000 finished
2000 finished
3000 finished
4000 finished
5000 finished
6000 finished
7000 finished
8000 finished
9000 finished
testMemoryUsageWithReinit() compilations finished.
good count: 5000
bad count: 5000
testMemoryUsageWithoutReinit() underway: 10000 compilations.
1000 finished
2000 finished
3000 finished
4000 finished
5000 finished
6000 finished
7000 finished
8000 finished
9000 finished
testMemoryUsageWithoutReinit() compilations finished.
good count: 5000
bad count: 5000
------------- ---------------- ---------------
------------- Standard Error -----------------
log4j:WARN No appenders could be found for logger (org.astrogrid.adql.Tracker).
log4j:WARN Please initialize the log4j system properly.
------------- ---------------- ---------------
