/* Generated By: AdqlStoX.jjt,v 1.33.4.8 2007/01/25 14&JJTree&JavaCC: Do not edit this line. AdqlStoX.java */
package org.astrogrid.adql ;

import org.astrogrid.adql.Tracker.Part ;

import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;
import java.util.HashSet ;
import java.util.Iterator ;
import java.util.ArrayList ;
import java.util.ListIterator ;
import java.util.List ;
import org.apache.xmlbeans.XmlOptions ;
import org.astrogrid.adql.v1_0.beans.* ;
import org.astrogrid.stc.region.v1_10.beans.* ;
import org.astrogrid.stc.coords.v1_10.beans.* ;
import org.w3c.dom.Node ;
import org.apache.xmlbeans.SchemaType;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.XmlCursor;

//import org.astrogrid.acr.astrogrid.TableBean;//import org.astrogrid.acr.astrogrid.DatabaseBean;//import org.astrogrid.acr.ivoa.resource.Catalog;//import org.astrogrid.acr.ivoa.resource.DataCollection;

public class AdqlStoX/*@bgen(jjtree)*/implements AdqlStoXTreeConstants, AdqlStoXConstants {/*@bgen(jjtree)*/
  protected JJTAdqlStoXState jjtree = new JJTAdqlStoXState();
        private static Log log = LogFactory.getLog( AdqlStoX.class ) ;

    private static final boolean TRACE_ENABLED = log.isTraceEnabled() ;
        private static final boolean DEBUG_ENABLED = log.isDebugEnabled() ;
    private static final boolean DETAILED_DEBUG_PRINT_ENABLED = false ;

        private static StringBuffer logIndent ;
        static {
                if( DEBUG_ENABLED | TRACE_ENABLED ) {
                        logIndent = new StringBuffer() ;
                }
        }

        private static final int CHANGE_SIGN = -1 ;
        private static final int DONT_CHANGE_SIGN = 1 ;
        public static final String COLUMN_REFERENCE_TYPE = "columnReferenceType" ;
        public static final String DUPLICATE_TABLE_ALIAS =
             "Query contains at least one duplicated table alias: " ;
        public static final String TABLE_ALIAS_CLASH =
             "Query contains alias with same name as a table: " ;
        public static final String NONEXISTENT_ALIAS =
             "Query contains a column reference with unknown table or table alias: " ;
        public static final String DUPLICATE_EXPRESSION_ALIAS =
             "Query contains at least one duplicated expression alias: " ;
        public static final String UNRECOGNIZED_FRAGMENT =
             "Unrecognized fragment of ADQL: " ;
        public static final String UNEXPECTED_REMAINDER =
             "Unexpected remaining characters found: " ;

        public static final String SELECT_ELEMENT = "Select" ;
        public static final String SELECTION_ELEMENT = "selection" ;
        public static final String ALLOW_ELEMENT = "Allow" ;
        public static final String RESTRICT_ELEMENT = "Restrict" ;
        public static final String SELECTION_LIST_ELEMENT = "SelectionList" ;
        public static final String FROM_ELEMENT = "From" ;
        public static final String WHERE_ELEMENT = "Where" ;
        public static final String GROUPBY_ELEMENT = "GroupBy" ;
        public static final String HAVING_ELEMENT = "Having" ;
        public static final String ORDERBY_ELEMENT = "OrderBy" ;
        public static final String COLUMN_ELEMENT = "Column" ;
        public static final String ITEM_ELEMENT = "Item" ;
        public static final String SET_ELEMENT = "Set" ;
        public static final String CONDITION_ELEMENT = "Condition" ;
        public static final String TABLE_ELEMENT = "Table" ;
        public static final String ARG_ELEMENT = "Arg" ;
        public static final String PATTERN_ELEMENT = "Pattern" ;
        public static final String EXPRESSION_ELEMENT = "Expression" ;
        public static final String ORDER_ELEMENT = "Order" ;
        public static final String FROM_TABLE_TYPE_ELEMENT = "fromTableType" ;
        public static final String TABLES_ELEMENT = "Tables" ;
        public static final String LITERAL_ELEMENT = "Literal" ;


        public static final String AGGREGATE_FUNCTION_TYPE = "aggregateFunctionType" ;
        public static final String INCLUSIVE_SEARCH_TYPE = "inclusiveSearchType" ;
        public static final String EXCLUSIVE_SEARCH_TYPE = "exclusiveSearchType" ;
        public static final String ORDER_TYPE = "orderType" ;
        public static final String ORDER_OPTION_TYPE = "orderOptionType" ;
        public static final String SUB_QUERY_SET_TYPE = "subQuerySet" ;
        public static final String TABLE_TYPE = "tableType" ;
        public static final String JOIN_TABLE_TYPE = "joinTableType" ;
        public static final String ARRAY_OF_FROM_TABLE_TYPE = "ArrayOfFromTableType" ;
        public static final String ALIAS_SELECTION_ITEM_TYPE = "aliasSelectionItemType" ;

        private SelectDocument selectDoc ;
        private String lastMessage ;
        private Tracker tracker ;

        public Tracker getTracker() {
                return tracker ;
        }

        public SelectDocument exec( Object userDefinedObject ) throws ParseException {
                try {
                        init( userDefinedObject ) ;
                        query_specification_A() ;
                        checkForRemainingSource() ;
                        selectDoc = SelectDocument.Factory.newInstance() ;
                        selectDoc.setSelect( (SelectType)jjtree.rootNode().getGeneratedObject() ) ;
                        if( DETAILED_DEBUG_PRINT_ENABLED ) {
                                XmlOptions opts = new XmlOptions();
                        opts.setSaveOuter() ;
                        opts.setSaveAggressiveNamespaces() ;
                        opts.setSavePrettyPrint() ;
                        opts.setSavePrettyPrintIndent(4) ;
                                log.debug( "Compilation before cross validation produced...\n"
                                         + selectDoc.xmlText(opts) ) ;
                        }
                        checkTableAliases( selectDoc ) ;
                        checkExpressionAliases( selectDoc ) ;
                        if( DEBUG_ENABLED ) {
                            log.debug( tracker.commentsToString() ) ;
                        }
                        return selectDoc ;
                }
                catch ( ParseException pex ) {
                        lastMessage = pex.getLocalizedMessage() ;
                        if( DEBUG_ENABLED | TRACE_ENABLED ) {
                                if( logIndent.length() > 0 ) {
                           logIndent.delete( 0, logIndent.length()-1 )  ;
                                }
                        }
                    throw pex ;
                }

        }

        public SelectDocument exec() throws ParseException {
                return exec( null ) ;
        }

        public SelectDocument compileToXmlBeans() throws ParseException {
                return exec( null ) ;
        }

        public SelectDocument compileToXmlBeans( Object userDefinedObject ) throws ParseException {
                return exec( userDefinedObject ) ;
        }

        public String compileToXmlText( Object userDefinedObject, boolean prettyPrint ) throws ParseException {
                XmlOptions opts = new XmlOptions();
                opts.setSaveOuter() ;
                if( prettyPrint ) {
                   opts.setSaveAggressiveNamespaces() ;
                   opts.setSavePrettyPrint() ;
                   opts.setSavePrettyPrintIndent(4) ;
                }
                return exec( userDefinedObject ).xmlText(opts) ;
        }

        public String compileToXmlText() throws ParseException {
                return compileToXmlText( null, true ) ;
        }

        public Node compileToXmlDom( Object userDefinedObject ) throws ParseException {
                return exec( userDefinedObject ).getDomNode() ;
        }

        public Node compileToXmlDom() throws ParseException {
                return exec().getDomNode() ;
        }

        public String compileFragmentToXmlText( String contextPath
                                              , Object userDefinedObject
                                              , boolean prettyPrint ) throws ParseException {
                XmlOptions opts = new XmlOptions();
            opts.setSaveOuter() ;
                if( prettyPrint ) {
                   opts.setSaveAggressiveNamespaces() ;
                   opts.setSavePrettyPrint() ;
                   opts.setSavePrettyPrintIndent(4) ;
                }
                return execFragment( contextPath, userDefinedObject ).xmlText(opts) ;
        }

        public String compileFragmentToXmlText( String contextPath ) throws ParseException {
                return compileFragmentToXmlText( contextPath, null, true ) ;
        }

        public XmlObject compileFragmentToXmlBean( String contextPath ) throws ParseException {
                return execFragment( contextPath, null ) ;
        }

        public XmlObject compileFragmentToXmlBean( String contextPath, Object userDefinedObject ) throws ParseException {
                return execFragment( contextPath, userDefinedObject ) ;
        }

        public XmlObject execFragment( String contextPath ) throws ParseException {
                return execFragment( contextPath, null ) ;
        }

        // NB: It looks as if attributes also need to be compiled at this level.
        // For example, in the expression "sin( a.ra ) as x", x is compiled as
        // an attribute within the type aliasSelectionItemType.
        // Maybe OK. I think the smallest amount to compile is an element.
        public XmlObject execFragment( String contextPath, Object userDefinedObject ) throws ParseException {
                init( userDefinedObject ) ;
                ContextPath cp = new ContextPath( contextPath ) ;
                ContextPath.Element child = cp.getChild() ;
                String childName = child.getName() ;
                ContextPath.Element parent = null ;
                String parentName = null ;
                XmlObject xmlObject = null ;

                if( DEBUG_ENABLED ) {
                   log.debug( "cp.getChild().getName(): " + cp.getChild().getName() ) ;
                   log.debug( "cp.getChild().getType(): " + cp.getChild().getType() ) ;
                   log.debug( "cp.getParent().getName(): " + cp.getParent().getName() ) ;
                   log.debug( "cp.getParent().getType(): " + cp.getParent().getType() ) ;
                }

//. <xs:element name="Select" type="tns:selectType">		

//.	<xs:element name="Allow" type="tns:selectionOptionType" minOccurs="0"/>//.	<xs:element name="Restrict" type="tns:selectionLimitType" minOccurs="0"/>//.	<xs:element name="SelectionList" type="tns:selectionListType"/>//	<xs:element name="InTo" type="tns:intoType" minOccurs="0"/>//.	<xs:element name="From" type="tns:fromType" minOccurs="0"/>//.	<xs:element name="Where" type="tns:whereType" minOccurs="0"/>//.	<xs:element name="GroupBy" type="tns:groupByType" minOccurs="0"/>//.	<xs:element name="Having" type="tns:havingType" minOccurs="0"/>//.	<xs:element name="OrderBy" type="tns:orderExpressionType" minOccurs="0"/>//	<xs:element name="StartComment" type="xs:string" minOccurs="0"/>//	<xs:element name="EndComment" type="xs:string" minOccurs="0"/>

//. <xs:element name="Condition" type="tns:searchType" minOccurs="2" maxOccurs="2"/>
//. <xs:element name="Column" type="tns:columnReferenceType" maxOccurs="unbounded"/>

//.	<xs:element name="Item" type="tns:orderType" maxOccurs="unbounded"/>
//. <xs:element name="Item" type="tns:literalType" maxOccurs="unbounded"/>
//. <xs:element name="Item" type="tns:selectionItemType" maxOccurs="unbounded"/>

//. <xs:element name="Arg" type="tns:scalarExpressionType"/>
//. <xs:element name="Arg" type="tns:selectionItemType" minOccurs="0" maxOccurs="unbounded"/>

//.?  <xs:element name="Literal" type="tns:literalType"/>
// Do we support units in the current version?...
//?	<xs:element name="Unit" type="xs:string" minOccurs="0"/>

//. <xs:element name="Expression" type="tns:scalarExpressionType"/>

// These 3 from xMatch:
// <xs:element name="Table" type="tns:xMatchTableAliasType" minOccurs="2" maxOccurs="unbounded"/>
// <xs:element name="Nature" type="tns:comparisonType"/>
// <xs:element name="Sigma" type="tns:numberType"/>		

//. <xs:element name="Pattern" type="tns:atomType"/>

// aliasSelectionItemType. Check. Probably not required.
//. exclusiveSearchType: NOT IN
//. orderType
//. inclusiveSearchType: IN
//. <xs:element name="Expression" type="tns:scalarExpressionType"/>

// These two probably need experimentation to distinguish between them...
// <xs:element name="Set" type="tns:inclusionSetType"/>
//. <xs:element name="selection" type="tns:selectType"/>

// <xs:element name="Region" type="reg:regionType"/>

//. <xs:element name="Table" type="tns:fromTableType" maxOccurs="unbounded"/>

// This from InTo:
// <xs:element name="TableName" type="xs:string"/>

// This from OrderBy:
//. <xs:element name="Expression" type="tns:scalarExpressionType"/>
//. <xs:element name="Order" type="tns:orderOptionType" minOccurs="0"/>

// This from user defined function:
// <xs:element name="Name" type="xs:string"/>
// <xs:element name="Params" type="tns:scalarExpressionType" minOccurs="0" maxOccurs="unbounded"/>

// This from join table:
// <xs:element name="Qualifier" type="tns:jointTableQualifierType"/>
//. <xs:element name="Tables" type="tns:ArrayOfFromTableType"/>		
//. <xs:element name="Condition" type="tns:comparisonPredType"/>
// <xs:element name="fromTableType" type="tns:fromTableType" nillable="true" maxOccurs="unbounded"/>

                if( childName.equalsIgnoreCase( SELECT_ELEMENT ) ) {
                        query_specification_A() ;
                        checkForRemainingSource() ;
                        checkTableAliases( xmlObject ) ;
                        checkExpressionAliases( xmlObject ) ;
                }
                // This check is probably being pedantic...
                else if( childName.equalsIgnoreCase( SELECTION_ELEMENT ) ) {
                        parent = cp.getParent() ;
                        if( parent.getType().equals( SUB_QUERY_SET_TYPE ) ) {
                           query_specification_A() ;
                           checkForRemainingSource() ;
                        }
                }
                else {
                    if( childName.equalsIgnoreCase( ALLOW_ELEMENT ) ) {
                       set_quantifier_S() ;
                    }
                    else if( childName.equalsIgnoreCase( RESTRICT_ELEMENT ) ) {
                           set_limit_A() ;
                    }
                    else if( childName.equalsIgnoreCase( SELECTION_LIST_ELEMENT ) ) {
                           select_list_S() ;
                    }
                    else if( childName.equalsIgnoreCase( FROM_ELEMENT ) ) {
                           from_clause_S() ;
                    }
                    else if( childName.equalsIgnoreCase( WHERE_ELEMENT ) ) {
                           where_clause_S() ;
                    }
                    else if( childName.equalsIgnoreCase( GROUPBY_ELEMENT ) ) {
                           group_by_clause_S() ;
                    }
                    else if( childName.equalsIgnoreCase( HAVING_ELEMENT ) ) {
                           having_clause_S() ;
                    }
                    else if( childName.equalsIgnoreCase( ORDERBY_ELEMENT ) ) {
                           order_by_clause_S() ;
                    }
                    else if( childName.equalsIgnoreCase( COLUMN_ELEMENT ) ) {
                           column_reference_A() ;
                    }
                    else if( childName.equalsIgnoreCase( ITEM_ELEMENT ) ) {
                      parentName = cp.getParent().getName() ;
                          if( parentName.equalsIgnoreCase( SELECTION_LIST_ELEMENT ) ) {
                              derived_column_S() ;
                          }
                          else if( parentName.equalsIgnoreCase( ORDERBY_ELEMENT ) ) {
                              sort_specification_A() ;
                          }
                          else if( parentName.equalsIgnoreCase( SET_ELEMENT ) ) {
                              in_value_list_constant_A() ;
                          }
                   }
                   else if( childName.equalsIgnoreCase( CONDITION_ELEMENT ) ) {
                          parentName = cp.getParent().getName() ;
                          // Join table comparison ...
                          if( parentName.equalsIgnoreCase( TABLE_ELEMENT ) ) {
                              comparison_predicate_A() ;
                          }
                          else {
                              search_condition_S() ;
                          }
                   }
                   else if( childName.equalsIgnoreCase( ARG_ELEMENT ) ) {
                          parent = cp.getParent() ;
                          if( parent.getType().equals( AGGREGATE_FUNCTION_TYPE ) ) {
                                 set_function_specification_part_fragment() ;
                          }
                          else {
                             value_expression_A() ;
                          }
                   }
                   else if( childName.equalsIgnoreCase( PATTERN_ELEMENT ) ) {
                          pattern_A() ;
                   }
                   else if( childName.equalsIgnoreCase( TABLE_ELEMENT ) ) {
                          table_reference_A() ;
                   }
                   // Adjustment made for:
                   // /Select[@type='selectType']/SelectionList[@type='selectionListType']/Item[@type='aliasSelectionItemType']/Expression[@type='mathFunctionType']
                   else if( childName.equalsIgnoreCase( EXPRESSION_ELEMENT ) ) {
                         parent = cp.getParent() ;
                         if( parent.getType().equals( INCLUSIVE_SEARCH_TYPE )
                             ||
                             parent.getType().equals( EXCLUSIVE_SEARCH_TYPE )
                             ||
                             parent.getType().equals( ORDER_TYPE )
                             ||
                             parent.getType().equals( ALIAS_SELECTION_ITEM_TYPE ) ) {
                             value_expression_A() ;
                          }
                   }
                   else if( childName.equalsIgnoreCase( ORDER_ELEMENT ) ) {
                         if( child.getType().equals( ORDER_OPTION_TYPE ) ) {
                         ordering_specification_S() ;
                         }
                     else {
                         parent = cp.getParent() ;
                         ContextPath.Element grandParent = cp.getElement( cp.size() - 3 ) ;
                         if( parent.getName().equalsIgnoreCase( ITEM_ELEMENT )
                             ||
                             grandParent.getName().equalsIgnoreCase( ORDERBY_ELEMENT ) ) {
                             ordering_specification_S() ;
                         }
                     }
                  }
                  else if( childName.equalsIgnoreCase( FROM_TABLE_TYPE_ELEMENT ) ) {
                         if( child.getType().equals( TABLE_TYPE ) ) {
                                table_reference_A() ;
                         }
                  }
                  else if( childName.equalsIgnoreCase( TABLES_ELEMENT ) ) {
                         if( child.getType().equals( ARRAY_OF_FROM_TABLE_TYPE ) ) {
                                table_array_fragment() ;
                         }
                  }
                  else {
                         throw new ParseException( UNRECOGNIZED_FRAGMENT + contextPath ) ;
                  }
                  checkForRemainingSource() ;
           }

           return (XmlObject)jjtree.rootNode().getGeneratedObject() ;

        }

        public String getLongLastMessage() {
                return lastMessage ;
        }

        public String getShortLastMessage() {
                int i = lastMessage.indexOf( '\n' ) ;
                if( i == -1 )
                  return lastMessage ;
                return lastMessage.substring( 0, i ) ;
        }

    /**
     * Crude check of table aliases and column references
     */
        private void checkTableAliases( XmlObject xmlObject ) throws ParseException {
                HashSet tRefs = getTableReferences( xmlObject ) ;
        XmlObject element ;
        XmlCursor cursor = xmlObject.newCursor() ;
        try {
                cursor.toFirstChild() ; // There has to be a first child!
                do {
                   if( cursor.isStart() ) {
                      element = cursor.getObject() ;
                      if( element.schemaType().getName().getLocalPart().equals( COLUMN_REFERENCE_TYPE ) ) {
                          ColumnReferenceType col = (ColumnReferenceType)element ;
                          if( !tRefs.contains( col.getTable() ) ) {
                                 String message = NONEXISTENT_ALIAS + col.getTable() + '.' + col.getName() ;
                                 throw new ParseException( message ) ;
                          }
                      }
                   }
                } while( cursor.toNextToken() != XmlCursor.TokenType.NONE ) ;
        }
        finally {
            cursor.dispose() ;
        }
        }

        private HashSet getTableReferences( XmlObject xmlObject ) throws ParseException {
                HashSet tables = new HashSet() ;
                HashSet aliases = new HashSet() ;
        TableType tType = null ;
        String alias = null ;
        //
        // Loop through the whole of the query looking for basic table refs....
        XmlCursor cursor = xmlObject.newCursor() ;
        try {
                while( !cursor.toNextToken().isNone() ) {
                    if( cursor.isStart()
                        &&
                        ( cursor.getObject().schemaType().getName().getLocalPart().equals( TABLE_TYPE ) )
                    ) {
                        tType = (TableType)cursor.getObject() ;
                        tables.add( tType.getName() ) ;
                        alias = tType.getAlias() ;
                        if( alias != null ) {
                            if( !aliases.add( alias ) ) {
                                    String message = DUPLICATE_TABLE_ALIAS
                                                   + tType.getAlias() ;
                                    throw new ParseException( message ) ;
                            }
                        }
                    }
                } // end while
        }
        finally {
            cursor.dispose();
        }
        //
        // Check for aliases with the same name as a table...
        Iterator it = aliases.iterator() ;
        while( it.hasNext() ) {
                String aName = (String)it.next() ;
                if( tables.contains( aName ) ) {
                        String message = TABLE_ALIAS_CLASH + aName  ;
                throw new ParseException( message ) ;
                }
        }
        tables.addAll( aliases ) ;
        if( DEBUG_ENABLED ) {
                log.debug( "Printing out tables contained in query..." ) ;
                log.debug( tables.toString() ) ;
        }
        return tables ;
        }

    /**
     * Crude check of expression aliases.
     * In the absence of metadata for columns, the best that can be accomplished
     * is to check for duplicates. 
     */
        private void checkExpressionAliases( XmlObject xmlObject ) throws ParseException {
                HashSet aliases = new HashSet() ;
        AliasSelectionItemType aType = null ;
        String alias = null ;
        //
        // Loop through the whole of the query looking for AliasSelectionItemTypes....
        XmlCursor cursor = xmlObject.newCursor() ;
        try {
                while( !cursor.toNextToken().isNone() ) {
                    if( cursor.isStart()
                        &&
                        ( cursor.getObject().schemaType().getName().getLocalPart().equals( ALIAS_SELECTION_ITEM_TYPE ) )
                    ) {
                        aType = (AliasSelectionItemType)cursor.getObject() ;
                        alias = aType.getAs() ;
                        if( alias != null ) {
                            if( !aliases.add( alias ) ) {
                                    String message = DUPLICATE_EXPRESSION_ALIAS
                                                   + alias ;
                                    throw new ParseException( message ) ;
                            }
                        }
                    }
                } // end while
        }
        finally {
            cursor.dispose();
        }
        }

        private void init( Object userDefinedObject ) {
                if( tracker == null ) {
                        tracker = new Tracker( userDefinedObject ) ;
                }
                else {
                        tracker.Reinit( userDefinedObject ) ;
                }
        }

        void jjtreeOpenNodeScope( org.astrogrid.adql.Node n ) {
                ((SimpleNode)n).firstToken = getToken(1);
        }

    void jjtreeCloseNodeScope( org.astrogrid.adql.Node n ) {
        ((SimpleNode)n).lastToken = getToken(0);
    }

        private void _lt( Object o, SchemaType type ) {
//		if( o != null )//		   location.setType( type ) ;        }

        private void _lt( SchemaType type ) {
//		location.setType( type ) ;        }

        private void _lp( Object o, String element, SchemaType type ) {
//		if( o != null )//		   location.push( element, type ) ;        }

        private void _lp( Object o, String element ) {
//		if( o != null )//		   location.push( element ) ;	        }

        private void _lp( String element, SchemaType type ) {
//		location.push( element, type ) ;	        }

        private void _lp( String element ) {
//		location.push( element ) ;	        }

        private void _lp() {
//		location.pop() ;	        }

        void error_skipto( int kind ) {
       //
       // generate the exception object...
       ParseException e = generateParseException();
       //
       // For the moment, we do nothing with it except...
       log.debug( "Following error encountered:", e ) ;
       Token t;
       do {
           t = getNextToken();
       } while (t.kind != kind);
       // The above loop consumes tokens all the way up to a token of
       // "kind".  We use a do-while loop rather than a while because the
       // current token is the one immediately before the erroneous token.
    }

    void checkForRemainingSource() throws ParseException {
       if( getToken(1).kind != AdqlStoXConstants.EOF ) {
          ArrayList rTokens = new ArrayList() ;
          Token t = getNextToken() ;
          while( t.kind != AdqlStoXConstants.EOF ) {
                 rTokens.add( t ) ;
                 t = getNextToken() ;
          }
          StringBuffer buffer = new StringBuffer( 32 + (rTokens.size() * 8) ) ;
          buffer
             .append( UNEXPECTED_REMAINDER )
             .append( "\n" ) ;
          ListIterator iterator = rTokens.listIterator() ;
          while( iterator.hasNext() ) {
                 buffer
                    .append( "   \"" )
                    .append( iterator.next() )
                    .append( "\"\n" ) ;
          }
          throw new ParseException( buffer.toString() ) ;
       }
    }

        private void enterTrace( String entry ) {
                log.debug( logIndent.toString() + "enter: " + entry ) ;
                indentPlus() ;
        }

    private void exitTrace( String entry ) {
        indentMinus() ;
                log.debug( logIndent.toString() + "exit : " + entry ) ;
        }

        private static void indentPlus() {
                logIndent.append( ' ' ) ;
        }

        private static void indentMinus() {
                logIndent.deleteCharAt( logIndent.length()-1 ) ;
        }

/**
 * actual_identifier_S
 *
 * bnf-single <actual_identifier> ::= <regular_identifier> | <delimited_identifier>
 *
 */
  final public void actual_identifier_S() throws ParseException {
                                                /*@bgen(jjtree) ActualIdentifier */
  AST_ActualIdentifier jjtn000 = new AST_ActualIdentifier(this, JJTACTUALIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGULAR_IDENTIFIER:
        jj_consume_token(REGULAR_IDENTIFIER);
        break;
      case DELIMITED_IDENTIFIER:
        jj_consume_token(DELIMITED_IDENTIFIER);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void signed_integer_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
      jj_consume_token(PLUS_SIGN);
      break;
    case MINUS_SIGN:
      jj_consume_token(MINUS_SIGN);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(UNSIGNED_INTEGER);
  }

/**
 * between_predicate_A
 *
 * bnf-start
 * <between_predicate> ::=
 *     <value_expression> [ NOT ] BETWEEN
 *     <value_expression> AND <value_expression>
 * bnf-end
 *
 */
  final public void between_predicate_A() throws ParseException {
 /*@bgen(jjtree) BetweenPredicate */
        AST_BetweenPredicate jjtn000 = new AST_BetweenPredicate(this, JJTBETWEENPREDICATE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "between_predicate_A()" ) ;
    try {
      value_expression_A();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
                    jjtn000.setBetween(false);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(BETWEEN);
      value_expression_A();
      jj_consume_token(AND);
      value_expression_A();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "between_predicate_A()" ) ;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

/**
 * boolean_primary_S
 *
 * bnf-start
 *  <boolean_primary> ::=
 *     | <left_paren> <search_condition> <right_paren> 
 *       <predicate> 
 * bnf-end
 *
 */
  final public void boolean_primary_S() throws ParseException {
 /*@bgen(jjtree) BooleanPrimary */
        AST_BooleanPrimary jjtn000 = new AST_BooleanPrimary(this, JJTBOOLEANPRIMARY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "boolean_primary_S()" ) ;
    try {
      if (jj_2_1(2147483647)) {
        jj_consume_token(LEFT_PAREN);
        search_condition_S();
        jj_consume_token(RIGHT_PAREN);
                                                              jjtn000.setParenthesized();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
        case PLUS_SIGN:
        case MINUS_SIGN:
        case AVG:
        case COUNT:
        case MAX:
        case MIN:
        case SUM:
        case ABS:
        case CEILING:
        case DEGREES:
        case EXP:
        case FLOOR:
        case LOG:
        case PI:
        case POWER:
        case RADIANS:
        case SQRT:
        case SQUARE:
        case LOG10:
        case RAND:
        case ROUND:
        case TRUNCATE:
        case SIN:
        case COS:
        case TAN:
        case COT:
        case ASIN:
        case ACOS:
        case ATAN:
        case ATAN2:
        case ASCII_STRING_LITERAL:
        case DOLLAR:
        case REGULAR_IDENTIFIER:
        case DELIMITED_IDENTIFIER:
        case UNSIGNED_INTEGER:
        case APPROXIMATE_NUMERIC_LITERAL:
        case EXACT_NUMERIC_LITERAL:
          predicate_A();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        if( TRACE_ENABLED ) exitTrace ( "boolean_primary_S()" ) ;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

/**
 * boolean_term_S
 *
 * bnf-start
 *  <boolean_term> ::=
 *      <boolean_factor>
 *    | <boolean_term> AND <boolean_factor>
 * bnf-end
 *
 */
  final public void boolean_term_S() throws ParseException {
 /*@bgen(jjtree) BooleanTerm */
        AST_BooleanTerm jjtn000 = new AST_BooleanTerm(this, JJTBOOLEANTERM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "boolean_term_S()" ) ;
    try {
      boolean_factor_S();
      if (jj_2_2(3)) {
        jj_consume_token(AND);
        boolean_term_S();
      } else {
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "boolean_term_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * boolean_factor_S
 *
 * bnf-single <boolean_factor> ::= [ NOT ] <boolean_test>
 *
 */
  final public void boolean_factor_S() throws ParseException {
 /*@bgen(jjtree) BooleanFactor */
        AST_BooleanFactor jjtn000 = new AST_BooleanFactor(this, JJTBOOLEANFACTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "boolean_factor_S()" ) ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
                   jjtn000.setInverse(true);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      boolean_test_A();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          if( TRACE_ENABLED ) exitTrace ( "boolean_factor_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * boolean_test_A
 *
 * bnf-start
 *  <boolean_test> ::= <boolean_primary>
 *  !! There is no accommodation for <truth_value> in ADQL
 * bnf-end
 *
 */
  final public void boolean_test_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "boolean_test_A()" ) ;
    boolean_primary_S();
                if( TRACE_ENABLED ) exitTrace ( "boolean_test_A()" ) ;
  }

/**
 * like_predicate_A
 *
 * bnf-start
 *  <like_predicate> ::=
 *      <match_value> [ NOT ] LIKE <pattern>
 *  !! There is no accommodation for <escape_character> in ADQL
 * bnf-end
 *
 */
  final public void like_predicate_A() throws ParseException {
 /*@bgen(jjtree) LikePredicate */
        AST_LikePredicate jjtn000 = new AST_LikePredicate(this, JJTLIKEPREDICATE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "like_predicate_A()" ) ;
    try {
      match_value_S();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
                                   jjtn000.setLike(false);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(LIKE);
      pattern_A();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "like_predicate_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void caseExpression_S() throws ParseException {
    jj_consume_token(336);
  }

  final public void castSpecification_S() throws ParseException {
    jj_consume_token(337);
  }

/**
 * character_factor_A
 *
 * bnf-start
 *  <character_factor> ::= <character_primary>
 *  !! There is no accommodation for <collate_clause> in ADQL
 * bnf-end
 *
 */
  final public void character_factor_A() throws ParseException {
    character_primary_A();
  }

/**
 * character_primary_A
 *
 * bnf-start
 *  <character_primary> ::= <value_expression_primary>
 *  !! There is no accommodation for <string_value_function> in ADQL
 * bnf-end
 *
 */
  final public void character_primary_A() throws ParseException {
    value_expression_primary_A();
  }

/**
 * character_string_literal_A
 *
 * bnf-start
 *  <character_string_literal> ::=
 *     <quote> [ <character_representation>... ] <quote>
 *     [ { <quote> [ <character_representation>... ] <quote> }... ]
 *  !! There is no accommodation for <character_set_specification> in ADQL
 * bnf-end
 *
 * bnf-start
 *  <character_representation> ::=
 *  !! At present this is one ASCII character (but not a single quote).
 * bnf-end
 *
 */
  final public void character_string_literal_A() throws ParseException {
    ASCIIStringLiteral();
  }

  final public void ASCIIStringLiteral() throws ParseException {
                                                 /*@bgen(jjtree) ASCIIStringLiteral */
  AST_ASCIIStringLiteral jjtn000 = new AST_ASCIIStringLiteral(this, JJTASCIISTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        ASCIIStringLiteralPart();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASCII_STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ASCIIStringLiteralPart() throws ParseException {
                                                         /*@bgen(jjtree) ASCIIStringLiteralPart */
  AST_ASCIIStringLiteralPart jjtn000 = new AST_ASCIIStringLiteralPart(this, JJTASCIISTRINGLITERALPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ASCII_STRING_LITERAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * character_value_expression_A
 *
 * bnf-start
 *  <character_value_expression> ::= <character_factor>
 *  !! There is no accommodation for <concatenation> in ADQL
 * bnf-end
 *
 */
  final public void character_value_expression_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "character_value_expression_A()" ) ;
    character_factor_A();
                if( TRACE_ENABLED ) exitTrace ( "character_value_expression_A()" ) ;
  }

  final public void collate_clause_S() throws ParseException {
    jj_consume_token(COLLATE);
    qualified_name_A();
  }

/**
 * column_name_S
 *
 * bnf-single <column_name> ::= <identifier>
 *
 */
  final public void column_name_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "column_name_S()" ) ;
    identifier_A();
                if( TRACE_ENABLED ) exitTrace ( "column_name_S()" ) ;
  }

/**
 * column_name_list_S
 *
 * bnf-single <column_name_list> ::= <column_name> [ { <comma> <column_name> }... ]
 *
 */
  final public void column_name_list_S() throws ParseException {
    column_name_S();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      column_name_S();
    }
  }

/**
 * column_reference_A
 *
 * bnf-start
 *  <column_reference> ::= 
 *      <qualifier> <period> <column_name>         
 *  !! ADQL enforces qualified column names.
 * bnf-end
 *
 */
  final public void column_reference_A() throws ParseException {
 /*@bgen(jjtree) ColumnReference */
        AST_ColumnReference jjtn000 = new AST_ColumnReference(this, JJTCOLUMNREFERENCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "column_reference_A()" ) ;
    try {
      qualifier_A();
      jj_consume_token(PERIOD);
      column_name_S();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "column_reference_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

///**// * aliased_expression_reference_A// *// *-bnf-start// *- <aliased_expression_reference> ::= <identifier>// *- !! ADQL specific. // *- NB. This is simply a reference to an aliased expression.// *-bnf-end// *// *///AliasSelectionItemType aliased_expression_reference_A() ://{//	if( TRACE_ENABLED ) enterTrace ( "aliased_expression_reference_A()" ) ;//	AliasSelectionItemType asiType = null ;//	String name = null ;//}//{//	////	// Note especially that this is simply a reference to an//	// aliased expression defined elsewhere. At this point we//	// only have the name of the alias, not the content, so we//	// can only construct an empty AliasSelectionItemType.//	// Filling in these must wait until the whole query has//	// been assembled and is thought to be syntactically correct!!!//	name=identifier_A()//	{//		if( name != null ) {//		    asiType = AliasSelectionItemType.Factory.newInstance() ;//			asiType.setAs( name ) ;//		}//	    if( TRACE_ENABLED ) exitTrace ( "aliased_expression_reference_A()" ) ;		//	    return asiType ;	//	}//}

/**
 * value_expression_primary_A
 *
 * NB: Referred in some sources as <common_primary>
 *
 * bnf-start
 *  <value_expression_primary> ::=
 *      <unsigned_value_specification>
 *    | <column_reference>
 *    | <set_function_specification>
 *    | <left_paren> <value_expression> <right_paren>
 *  !! There is no accommodation for <scalar_subquery>,
 *     <case_expression> or <cast_specification> in ADQL
 * bnf-end
 *
 */
  final public void value_expression_primary_A() throws ParseException {
 /*@bgen(jjtree) ValueExpressionPrimary */
        AST_ValueExpressionPrimary jjtn000 = new AST_ValueExpressionPrimary(this, JJTVALUEEXPRESSIONPRIMARY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "value_expression_primary_A()" ) ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASCII_STRING_LITERAL:
      case DOLLAR:
      case UNSIGNED_INTEGER:
      case APPROXIMATE_NUMERIC_LITERAL:
      case EXACT_NUMERIC_LITERAL:
        unsigned_value_specification_S();
        break;
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        column_reference_A();
        break;
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
        set_function_specification_S();
        break;
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        value_expression_A();
        jj_consume_token(RIGHT_PAREN);
                                  jjtn000.setParenthesized();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "value_expression_primary_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * comp_op_S
 *
 * bnf-start
 *  <comp_op> ::=
 *      <equals_operator>
 *    | <not_equals_operator>
 *    | <less_than_operator>
 *    | <greater_than_operator>
 *    | <less_than_or_equals_operator>
 *    | <greater_than_or_equals_operator>
 * bnf-end
 *
 */
  final public void comp_op_S() throws ParseException {
 /*@bgen(jjtree) Comparison */
        AST_Comparison jjtn000 = new AST_Comparison(this, JJTCOMPARISON);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "comp_op_S()" ) ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS_OPERATOR:
        jj_consume_token(EQUALS_OPERATOR);
        break;
      case NOT_EQUALS_OPERATOR:
        jj_consume_token(NOT_EQUALS_OPERATOR);
        break;
      case LESS_THAN_OPERATOR:
        jj_consume_token(LESS_THAN_OPERATOR);
        break;
      case GREATER_THEN_OPERATOR:
        jj_consume_token(GREATER_THEN_OPERATOR);
        break;
      case LESS_THAN_OR_EQUALS_OPERATOR:
        jj_consume_token(LESS_THAN_OR_EQUALS_OPERATOR);
        break;
      case GREATER_THAN_OR_EQUALS_OPERATOR:
        jj_consume_token(GREATER_THAN_OR_EQUALS_OPERATOR);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "comp_op_S()" ) ;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * comparison_predicate_A
 *
 * bnf-start
 *  <comparison_predicate> ::=
 *      <value_expression> <comp_op> <value_expression>
 *  !! There is no accommodation for <row_value_constructor> in ADQL
 * bnf-end
 *
 */
  final public void comparison_predicate_A() throws ParseException {
 /*@bgen(jjtree) ComparisonPredicate */
        AST_ComparisonPredicate jjtn000 = new AST_ComparisonPredicate(this, JJTCOMPARISONPREDICATE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "comparison_predicate_A()" ) ;
        ComparisonPredType cpType = null ;
    try {
      value_expression_A();
      comp_op_S();
      value_expression_A();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
           if( TRACE_ENABLED ) exitTrace( "comparison_predicate_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * correlation_name_S
 *
 * bnf-single <correlation_name> ::= <identifier>
 *
 */
  final public void correlation_name_S() throws ParseException {
    identifier_A();
  }

  final public void datetime_factor_S() throws ParseException {
    datetime_primary_S();
    if (jj_2_3(2)) {
      time_zone_S();
    } else {
      ;
    }
  }

  final public void datetime_primary_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case ASCII_STRING_LITERAL:
    case DOLLAR:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
    case UNSIGNED_INTEGER:
    case APPROXIMATE_NUMERIC_LITERAL:
    case EXACT_NUMERIC_LITERAL:
      value_expression_primary_A();
      break;
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
      datetime_value_function_S();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void datetime_term_S() throws ParseException {
    datetime_factor_S();
  }

  final public void datetime_value_expression_S() throws ParseException {
    if (jj_2_5(3)) {
      datetime_term_S();
      label_3:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          jj_consume_token(PLUS_SIGN);
          break;
        case MINUS_SIGN:
          jj_consume_token(MINUS_SIGN);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        datetime_value_expression_S();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case PLUS_SIGN:
      case MINUS_SIGN:
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case SQUARE:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case ASCII_STRING_LITERAL:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case APPROXIMATE_NUMERIC_LITERAL:
      case EXACT_NUMERIC_LITERAL:
        interval_value_expression_S();
        jj_consume_token(PLUS_SIGN);
        datetime_term_S();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void datetime_value_function_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CURRENT_DATE:
      jj_consume_token(CURRENT_DATE);
      break;
    case CURRENT_TIME:
      jj_consume_token(CURRENT_TIME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        time_precision_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    case CURRENT_TIMESTAMP:
      jj_consume_token(CURRENT_TIMESTAMP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        timestamp_precision_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * derived_column_list_S
 *
 * bnf-single <derived_column_list> ::= <column_name_list>
 *
 */
  final public void derived_column_list_S() throws ParseException {
    column_name_list_S();
  }

  final public void derived_table_S() throws ParseException {
    table_subquery_S();
  }

  final public void end_field_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DAY:
    case HOUR:
    case MINUTE:
    case MONTH:
    case YEAR:
      nonsecond_datetime_field_S();
      break;
    case SECOND:
      jj_consume_token(SECOND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        interval_fractional_seconds_precision_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void escape_character_A() throws ParseException {
    character_value_expression_A();
  }

/**
 * exact_numeric_literal_S
 *
 * bnf-start
 *  <exact_numeric_literal> ::=
 *      <unsigned_integer> [ <period> [ <unsigned_integer> ] ]
 *    | <period> <unsigned_integer>
 * bnf-end
 *
 */
  final public void exact_numeric_literal_S(int possibleSignChange) throws ParseException {
 /*@bgen(jjtree) ExactNumericLiteral */
        AST_ExactNumericLiteral jjtn000 = new AST_ExactNumericLiteral(this, JJTEXACTNUMERICLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);jjtn000.setPossibleSignChange( possibleSignChange ) ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXACT_NUMERIC_LITERAL:
        jj_consume_token(EXACT_NUMERIC_LITERAL);
        break;
      case UNSIGNED_INTEGER:
        jj_consume_token(UNSIGNED_INTEGER);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public SearchType exists_predicate_S() throws ParseException {
        SearchType st = null ;
    jj_consume_token(EXISTS);
    st = table_subquery_S();
                if( st != null ) {
                }

                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public void explicit_table_S() throws ParseException {
    jj_consume_token(TABLE);
    table_name_A();
  }

/**
 * factor_S
 *
 * bnf-single <factor> ::= [ <sign> ] <numeric_primary> 
 *
 */
  final public void factor_S() throws ParseException {
 /*@bgen(jjtree) Factor */
        AST_Factor jjtn000 = new AST_Factor(this, JJTFACTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "factor_S()" ) ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
      case MINUS_SIGN:
        sign_S();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      numeric_primary_S();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
           if( TRACE_ENABLED ) exitTrace ( "factor_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * sign
 *
 * bnf-single <sign> ::= <plus_sign> | <minus_sign>
 *
 */
  final public void sign_S() throws ParseException {
 /*@bgen(jjtree) Sign */
    AST_Sign jjtn000 = new AST_Sign(this, JJTSIGN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "sign_S()" ) ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        jj_consume_token(PLUS_SIGN);
        break;
      case MINUS_SIGN:
        jj_consume_token(MINUS_SIGN);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
           if( TRACE_ENABLED ) exitTrace ( "sign_S()" ) ;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * from_clause_S
 *
 * bnf-start
 *  <from_clause> ::= FROM <table_reference>
 *     [ { <comma> <table_reference> }... ]
 * bnf-end
 *
 */
  final public void from_clause_S() throws ParseException {
 /*@bgen(jjtree) From */
    AST_From jjtn000 = new AST_From(this, JJTFROM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "from_clause_S()" ) ;
    try {
      jj_consume_token(FROM);
      table_reference_A();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        table_reference_A();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
            if( TRACE_ENABLED ) exitTrace ( "from_clause_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * general_literal_A
 *
 * bnf-start
 *  <general_literal> ::= <character_string_literal>
 *  !! There is no accommodation for <national_character_string_literal>,
 *     <bit_string_literal>, <hex_string_literal>, <datetime_literal>
 *     and <interval_literal> in ADQL
 * bnf-end
 *
 */
  final public void general_literal_A() throws ParseException {
    character_string_literal_A();
  }

/**
 * general_set_function_A
 *
 * bnf-start
 *  <general_set_function> ::=
 *     <set_function_type>
 *         <left_paren> <value_expression> <right_paren>
    !! There is no accommodation for <set_quantifier> in ADQL
 * bnf-end
 *
 * bnf-single <set_function_type> ::= AVG | MAX | MIN | SUM | COUNT
 *
 */
  final public void general_set_function_A() throws ParseException {
                                                     /*@bgen(jjtree) GeneralSetFunction */
  AST_GeneralSetFunction jjtn000 = new AST_GeneralSetFunction(this, JJTGENERALSETFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AVG:
        jj_consume_token(AVG);
        break;
      case MAX:
        jj_consume_token(MAX);
        break;
      case MIN:
        jj_consume_token(MIN);
        break;
      case SUM:
        jj_consume_token(SUM);
        break;
      case COUNT:
        jj_consume_token(COUNT);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LEFT_PAREN);
      value_expression_A();
      jj_consume_token(RIGHT_PAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * general_value_specification_A
 *
 * bnf-start
 *  <general_value_specification> ::= <variable_specification>
 *  !! There is no accommodation for <parameter_specification>, <dynamic_parameter_specification>,
       USER, CURRENT_USER, SESSION_USER, SYSTEM_USER and VALUE
 * bnf-end
 *
 */
  final public ScalarExpressionType general_value_specification_A() throws ParseException {
        ScalarExpressionType seType = null ;
    //S:
            //<general_value_specification> ::=
        //   <parameter_specification>
        // | <dynamic_parameter_specification>
        // | <variable_specification>
        // | USER
        // | CURRENT_USER
        // | SESSION_USER
        // | SYSTEM_USER
        // | VALUE
    
            // Foreshortened
            seType = variable_specification_A();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * group_by_clause_S
 *
 * bnf-start
 *  <group_by_clause> ::= GROUP BY <grouping_column_reference_list>
 * bnf-end
 *
 */
  final public void group_by_clause_S() throws ParseException {
 /*@bgen(jjtree) GroupBy */
        AST_GroupBy jjtn000 = new AST_GroupBy(this, JJTGROUPBY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "group_by_clause_S()" ) ;
    try {
      jj_consume_token(GROUPBY);
      grouping_column_reference_list_S();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "group_by_clause_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * grouping_column_reference_list_S
 *
 * bnf-start
 *  <grouping_column_reference_list> ::=
 *      <grouping_column_reference> [ { <comma> <grouping_column_reference> }... ]
 * bnf-end
 *
 */
  final public void grouping_column_reference_list_S() throws ParseException {
                                                                        /*@bgen(jjtree) GroupingColumnReferenceList */
  AST_GroupingColumnReferenceList jjtn000 = new AST_GroupingColumnReferenceList(this, JJTGROUPINGCOLUMNREFERENCELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      grouping_column_reference_A();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        grouping_column_reference_A();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * grouping_column_reference_A
 *
 * bnf-start
 *  <grouping_column_reference> ::= <column_reference> 
 *  !! There is no accommodation for <collate_clause>
 * bnf-end
 *
 */
  final public void grouping_column_reference_A() throws ParseException {
    column_reference_A();
  }

/**
 * having_clause_S
 *
 * bnf-single <having_clause> ::= HAVING <search_condition>	
 *
 */
  final public void having_clause_S() throws ParseException {
 /*@bgen(jjtree) Having */
        AST_Having jjtn000 = new AST_Having(this, JJTHAVING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "having_clause_S()" ) ;
    try {
      jj_consume_token(HAVING);
      search_condition_S();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "having_clause_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * identifier_A
 *
 * bnf-start
 *  <identifier> ::= <actual_identifier>
 *  !! There is no accommodation for <character_set_specification> 
 * bnf-end
 *
 */
  final public void identifier_A() throws ParseException {
    actual_identifier_S();
  }

/**
 * in_predicate_A
 *
 * bnf-start
 *  <in_predicate> ::=
 *      <value_expression> [ NOT ] IN <in_predicate_value>
 * bnf-end
 *
 */
  final public void in_predicate_A() throws ParseException {
 /*@bgen(jjtree) InPredicate */
        AST_InPredicate jjtn000 = new AST_InPredicate(this, JJTINPREDICATE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "in_predicate_A()" ) ;
    try {
      value_expression_A();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
                                        jjtn000.setIn(false);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(IN);
      in_predicate_value_S();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
       if( TRACE_ENABLED ) exitTrace ( "in_predicate_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * in_predicate_value_S
 *
 * bnf-start
 *  <in_predicate_value> ::=
 *     <table_subquery> | <left_paren> <in_value_list> <right_paren>
 * bnf-end
 *
 */
  final public void in_predicate_value_S() throws ParseException {
 /*@bgen(jjtree) InPredicateValue */
        AST_InPredicateValue jjtn000 = new AST_InPredicateValue(this, JJTINPREDICATEVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "in_predicate_value_S()" ) ;
    try {
      if (jj_2_6(2)) {
        table_subquery_A();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          in_value_list_A();
          jj_consume_token(RIGHT_PAREN);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "in_predicate_value_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void interval_factor_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        jj_consume_token(PLUS_SIGN);
        break;
      case MINUS_SIGN:
        jj_consume_token(MINUS_SIGN);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    interval_primary_S();
  }

  final public void interval_fractional_seconds_precision_S() throws ParseException {
    jj_consume_token(UNSIGNED_INTEGER);
  }

  final public void interval_leading_field_precision_S() throws ParseException {
    jj_consume_token(UNSIGNED_INTEGER);
  }

  final public void interval_primary_S() throws ParseException {
    value_expression_primary_A();
    if (jj_2_7(2)) {
      interval_qualifier_S();
    } else {
      ;
    }
  }

  final public void interval_qualifier_S() throws ParseException {
    if (jj_2_8(3)) {
      start_field_S();
      jj_consume_token(TO);
      end_field_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DAY:
      case HOUR:
      case MINUTE:
      case MONTH:
      case SECOND:
      case YEAR:
        single_datetime_field_S();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void interval_term_S() throws ParseException {
    if (jj_2_9(3)) {
      interval_factor_S();
    } else if (jj_2_10(3)) {
      factor_S();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        jj_consume_token(ASTERISK);
        break;
      case SOLIDUS:
        jj_consume_token(SOLIDUS);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      interval_term_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case PLUS_SIGN:
      case MINUS_SIGN:
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case SQUARE:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case ASCII_STRING_LITERAL:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case APPROXIMATE_NUMERIC_LITERAL:
      case EXACT_NUMERIC_LITERAL:
        term_S();
        jj_consume_token(ASTERISK);
        interval_factor_S();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void interval_value_expression_S() throws ParseException {
    if (jj_2_12(3)) {
      interval_term_S();
      label_6:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          jj_consume_token(PLUS_SIGN);
          break;
        case MINUS_SIGN:
          jj_consume_token(MINUS_SIGN);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        interval_term_S();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        datetime_value_expression_S();
        jj_consume_token(MINUS_SIGN);
        datetime_term_S();
        jj_consume_token(RIGHT_PAREN);
        interval_qualifier_S();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * in_value_list_A
 *
 * bnf-start
 *  <in_value_list> ::=
 *      <in_value_list_constant> { <comma> <in_value_list_constant> }...
 *  !! There is no accommodation for <value_expression>
 * bnf-end
 *
 */
  final public void in_value_list_A() throws ParseException {
                                       /*@bgen(jjtree) InValueList */
  AST_InValueList jjtn000 = new AST_InValueList(this, JJTINVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      in_value_list_constant_A();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        in_value_list_constant_A();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

/**
 * in_value_list_constant_A
 *
 * bnf-start
 *  <in_value_list_constant> ::=
 *	       [ <plus_sign> | <minus_sign> ] <exact_numeric_literal>
 *	    |  <character_string_literal> 
 * bnf-end
 *
 */
  final public void in_value_list_constant_A() throws ParseException {
 /*@bgen(jjtree) InValueListConstant */
        AST_InValueListConstant jjtn000 = new AST_InValueListConstant(this, JJTINVALUELISTCONSTANT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);int signChange = +1 ;
        Token t = null ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
      case MINUS_SIGN:
      case UNSIGNED_INTEGER:
      case EXACT_NUMERIC_LITERAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
        case MINUS_SIGN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS_SIGN:
            jj_consume_token(PLUS_SIGN);
            break;
          case MINUS_SIGN:
            t = jj_consume_token(MINUS_SIGN);
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                if(t != null) signChange = -1 ;
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        exact_numeric_literal_S(signChange);
        break;
      case ASCII_STRING_LITERAL:
        character_string_literal_A();
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * join_specification_A
 *
 * bnf-start
 *  <join_specification> ::= <join_condition>
 *  !! There is no accommodation for <named_columns_join>	
 * bnf-end
 *
 * bnf-start
 *  <join_condition> ::= ON <comparison_predicate>
 *  !! There is no accommodation for <search_condition>
 * bnf-end
 *
 */
  final public void join_specification_A() throws ParseException {
    jj_consume_token(ON);
    comparison_predicate_A();
  }

/**
 * joined_table_S
 *
 *-bnf-start
 *- <joined_table> ::=
 *-     <cross_join>
 *-   | <qualified_join>
 *-   | <left_paren> <joined_table> <right_paren>
 *-bnf-end
 
 * bnf-start
 *  <joined_table> ::=
 *      <qualified_join>
 *    | <left_paren> <joined_table> <right_paren>
 *  !! <cross_join> has been removed. The reason is the Adql/x schema has
 *     a mandatory join condition which is inapplicable to cross joins.
 *     Probably wise in any case. 
 * bnf-end
 *
 */
  final public void joined_table_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "joined_table_S()" ) ;
    if (jj_2_13(4)) {
      qualified_join_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        joined_table_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if( TRACE_ENABLED ) exitTrace ( "joined_table_S()" ) ;
  }

/**
 * join_type_A
 *
 * bnf-start
 *  <join_type> ::=
 *     INNER
 *   | <outer_join_type> [ OUTER ]
 *  !! There is no accommodatin for UNION
 * bnf-end
 *
 * bnf-single <outer_join_type> ::= LEFT | RIGHT | FULL
 *
 */
  final public void join_type_A() throws ParseException {
                                /*@bgen(jjtree) JoinType */
  AST_JoinType jjtn000 = new AST_JoinType(this, JJTJOINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INNER:
        jj_consume_token(INNER);
        break;
      case FULL:
      case LEFT:
      case RIGHT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        case FULL:
          jj_consume_token(FULL);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
          break;
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
    }
  }

/**
 * match_value_S
 *
 * bnf-single <match_value> ::= <character_value_expression>
 *
 */
  final public void match_value_S() throws ParseException {
 /*@bgen(jjtree) MatchValue */
    AST_MatchValue jjtn000 = new AST_MatchValue(this, JJTMATCHVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "match_value_S()" ) ;
    try {
      character_value_expression_A();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
           if( TRACE_ENABLED ) exitTrace ( "match_value_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void match_predicate_S() throws ParseException {
    row_value_constructor_S();
    jj_consume_token(MATCH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIQUE:
      jj_consume_token(UNIQUE);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FULL:
    case PARTIAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARTIAL:
        jj_consume_token(PARTIAL);
        break;
      case FULL:
        jj_consume_token(FULL);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    table_subquery_S();
  }

/**
 * math_function_A
 *
 * bnf-start
 *  <math_function> ::=
 *      ABS <left_paren> <numeric_value_expression> <right_paren> 
 *	  | CEILING <left_paren> <numeric_value_expression> <right_paren> 
 *	  | DEGREES <left_paren> <numeric_value_expression> <right_paren> 
 *	  | EXP <left_paren> <numeric_value_expression> <right_paren> 
 *	  | FLOOR <left_paren> <numeric_value_expression> <right_paren> 
 *	  | LOG <left_paren> <numeric_value_expression> <right_paren> 
 *	  | PI <left_paren><right_paren> 
 *	  | POWER <left_paren> <numeric_value_expression> <comma> <unsigned_integer> <right_paren> 
 *	  | RADIANS <left_paren> <numeric_value_expression> <right_paren> 
 *	  | SQUARE <left_paren> <numeric_value_expression> <right_paren> 
 *	  | SQRT <left_paren> <numeric_value_expression> <right_paren> 
 *	  | LOG10 <left_paren> <numeric_value_expression> <right_paren> 
 *	  | RAND <left_paren> [ <numeric_value_expression> ] <right_paren> 
 *	  | ROUND <left_paren> <numeric_value_expression> <right_paren> 
 *	  | TRUNCATE <left_paren> <numeric_value_expression> <right_paren> 
 *  !! ADQL specific.
 * bnf-end
 *
 */
  final public void math_function_A() throws ParseException {
 /*@bgen(jjtree) MathFunction */
        AST_MathFunction jjtn000 = new AST_MathFunction(this, JJTMATHFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "math_function_A()" ) ;
    Token arg2 = null ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABS:
        jj_consume_token(ABS);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case CEILING:
        jj_consume_token(CEILING);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case DEGREES:
        jj_consume_token(DEGREES);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case EXP:
        jj_consume_token(EXP);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case FLOOR:
        jj_consume_token(FLOOR);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case LOG:
        jj_consume_token(LOG);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case PI:
        jj_consume_token(PI);
        jj_consume_token(LEFT_PAREN);
        jj_consume_token(RIGHT_PAREN);
        break;
      case POWER:
        jj_consume_token(POWER);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(COMMA);
        arg2 = jj_consume_token(UNSIGNED_INTEGER);
                                                           jjtn000.setArg2(new Long(arg2.image));
        jj_consume_token(RIGHT_PAREN);
        break;
      case RADIANS:
        jj_consume_token(RADIANS);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case SQUARE:
        jj_consume_token(SQUARE);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case SQRT:
        jj_consume_token(SQRT);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case LOG10:
        jj_consume_token(LOG10);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case RAND:
        jj_consume_token(RAND);
        jj_consume_token(LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
        case PLUS_SIGN:
        case MINUS_SIGN:
        case AVG:
        case COUNT:
        case MAX:
        case MIN:
        case SUM:
        case ABS:
        case CEILING:
        case DEGREES:
        case EXP:
        case FLOOR:
        case LOG:
        case PI:
        case POWER:
        case RADIANS:
        case SQRT:
        case SQUARE:
        case LOG10:
        case RAND:
        case ROUND:
        case TRUNCATE:
        case SIN:
        case COS:
        case TAN:
        case COT:
        case ASIN:
        case ACOS:
        case ATAN:
        case ATAN2:
        case ASCII_STRING_LITERAL:
        case DOLLAR:
        case REGULAR_IDENTIFIER:
        case DELIMITED_IDENTIFIER:
        case UNSIGNED_INTEGER:
        case APPROXIMATE_NUMERIC_LITERAL:
        case EXACT_NUMERIC_LITERAL:
          numeric_value_expression_S();
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
        break;
      case ROUND:
        jj_consume_token(ROUND);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case TRUNCATE:
        jj_consume_token(TRUNCATE);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
           if( TRACE_ENABLED ) exitTrace ( "math_function_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void null_predicate_S() throws ParseException {
    row_value_constructor_S();
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
  }

/**
 * numeric_primary_S
 *
 * bnf-start
 *  <numeric_primary> ::=
 *      <value_expression_primary>
 *    | <numeric_value_function>
 * bnf-end
 *
 */
  final public void numeric_primary_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "numeric_primary_S()" ) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABS:
    case CEILING:
    case DEGREES:
    case EXP:
    case FLOOR:
    case LOG:
    case PI:
    case POWER:
    case RADIANS:
    case SQRT:
    case SQUARE:
    case LOG10:
    case RAND:
    case ROUND:
    case TRUNCATE:
    case SIN:
    case COS:
    case TAN:
    case COT:
    case ASIN:
    case ACOS:
    case ATAN:
    case ATAN2:
      numeric_value_function_A();
      break;
    case LEFT_PAREN:
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case ASCII_STRING_LITERAL:
    case DOLLAR:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
    case UNSIGNED_INTEGER:
    case APPROXIMATE_NUMERIC_LITERAL:
    case EXACT_NUMERIC_LITERAL:
      value_expression_primary_A();
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( TRACE_ENABLED ) exitTrace ( "numeric_primary_S()" ) ;
  }

/**
 * numeric_value_expression_S
 *
 * bnf-start
 *  <numeric_value_expression> ::=
 *      <term>
 *    | <numeric_value_expression> <plus_sign> <term>
 *    | <numeric_value_expression> <minus_sign> <term>
 * bnf-end
 *
 */
  final public void numeric_value_expression_S() throws ParseException {
 /*@bgen(jjtree) NumericValueExpression */
        AST_NumericValueExpression jjtn000 = new AST_NumericValueExpression(this, JJTNUMERICVALUEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "numeric_value_expression_S()" ) ;
    try {
      term_S();
      if (jj_2_14(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          jj_consume_token(PLUS_SIGN);
          break;
        case MINUS_SIGN:
          jj_consume_token(MINUS_SIGN);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                    jjtn000.setBinaryOp(token);
        numeric_value_expression_S();
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        if( TRACE_ENABLED ) exitTrace ( "numeric_value_expression_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * numeric_value_function_A
 *
 * bnf-start
 *  <numeric_value_function> ::= <trig_function> | <math_function>	
 *  !! There is no accommodation for <position_expression>,
 *     <extract_expression> or <length_expression>
 * bnf-end
 *
 */
  final public void numeric_value_function_A() throws ParseException {
 /*@bgen(jjtree) NumericValueFunction */
        AST_NumericValueFunction jjtn000 = new AST_NumericValueFunction(this, JJTNUMERICVALUEFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "numeric_value_function_A()" ) ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
        trig_function_A();
        break;
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case SQUARE:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
        math_function_A();
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "numeric_value_function_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * order_by_clause
 *
 * bnf-start
 *  <order_by_clause> ::= ORDER BY <sort_specification_list>
 * bnf-end
 *
 */
  final public void order_by_clause_S() throws ParseException {
                                           /*@bgen(jjtree) OrderByClause */
  AST_OrderByClause jjtn000 = new AST_OrderByClause(this, JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ORDERBY);
      sort_specification_list();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * sort_specification_list
 *
 * bnf-start
 *  <sort_specification_list> ::=
 *      <sort_specification> [ { <comma> <sort_specification> }... ]
 * bnf-end 
 *
 */
  final public void sort_specification_list() throws ParseException {
                                                         /*@bgen(jjtree) SortSpecificationList */
  AST_SortSpecificationList jjtn000 = new AST_SortSpecificationList(this, JJTSORTSPECIFICATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      sort_specification_A();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        sort_specification_A();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * sort_specification_A
 *
 * bnf-start
 *  <sort_specification> ::=
 *      <sort_key> [ <ordering_specification> ]
 *  !! There is no accommodation for <collate_clause>
 * bnf-end
 *
 * bnf-start
 *  <sort_key> ::= <value_expression>
 *  !! This is different from SQL92 which uses
 *     <column_name> | <unsigned_integer>
 * bnf-end 
 *
 * bnf-single <ordering_specification> ::= ASC | DESC
 */
  final public void sort_specification_A() throws ParseException {
                                                  /*@bgen(jjtree) SortSpecification */
  AST_SortSpecification jjtn000 = new AST_SortSpecification(this, JJTSORTSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      value_expression_A();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
      case DESC:
        ordering_specification_S();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ordering_specification_S() throws ParseException {
                                                          /*@bgen(jjtree) OrderingSpecification */
  AST_OrderingSpecification jjtn000 = new AST_OrderingSpecification(this, JJTORDERINGSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
        break;
      case DESC:
        jj_consume_token(DESC);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void overlaps_predicate_S() throws ParseException {
    row_value_constructor_S();
    jj_consume_token(OVERLAPS);
    row_value_constructor_S();
  }

/**
 * pattern_A
 *
 * bnf-start
 *  <pattern> ::= <character_string_literal>
 *  !! SQL92 uses <character_value_expression>
 * bnf-end
 *
 */
  final public void pattern_A() throws ParseException {
 /*@bgen(jjtree) Pattern */
        AST_Pattern jjtn000 = new AST_Pattern(this, JJTPATTERN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "pattern_A()" ) ;
    try {
      character_string_literal_A();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "pattern_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * predicate_A
 *
 * bnf-start
 *  <predicate> ::=
 *     <comparison_predicate>
 *   | <between_predicate>
 *   | <in_predicate>
 *   | <like_predicate>
 *  !! ADQL does not support the following:
 *     <null_predicate>, <quantified_comparison_predicate>,
 *     <exists_predicate>, <unique_predicate>,
 *     <match_predicate>, <overlaps_predicate>.
 *     Also, <region_predicate> has yet to be folded in.
 * bnf-end
 *
 */
  final public void predicate_A() throws ParseException {
 /*@bgen(jjtree) Predicate */
        AST_Predicate jjtn000 = new AST_Predicate(this, JJTPREDICATE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "predicate_A()" ) ;
    try {
      if (jj_2_15(2147483647)) {
        comparison_predicate_A();
      } else if (jj_2_16(2147483647)) {
        between_predicate_A();
      } else if (jj_2_17(2147483647)) {
        in_predicate_A();
      } else if (jj_2_18(2147483647)) {
        like_predicate_A();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        if( TRACE_ENABLED ) exitTrace ( "predicate_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * qualified_join_S
 *
 * bnf-start
 *  <qualified_join> ::=
 *      <table_reference> [ NATURAL ] [ <join_type> ] JOIN
 *      <table_reference> [ <join_specification> ]
 * bnf-end
 *
 */
  final public void qualified_join_S() throws ParseException {
 /*@bgen(jjtree) QualifiedJoin */
        AST_QualifiedJoin jjtn000 = new AST_QualifiedJoin(this, JJTQUALIFIEDJOIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "qualified_join_S()" ) ;
    try {
      tableReferenceBarJoinedTable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NATURAL:
        jj_consume_token(NATURAL);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      join_type_A();
      jj_consume_token(JOIN);
      table_reference_A();
      if (jj_2_19(3)) {
        join_specification_A();
      } else {
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
           if( TRACE_ENABLED ) exitTrace ( "qualified_join_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void table_array_fragment() throws ParseException {
                                                   /*@bgen(jjtree) TableArrayFragment */
  AST_TableArrayFragment jjtn000 = new AST_TableArrayFragment(this, JJTTABLEARRAYFRAGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      tableReferenceBarJoinedTable();
      jj_consume_token(COMMA);
      table_reference_A();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * qualified_name_A
 *
 * bnf-start
 *  <qualified_name> ::= <identifier>
 *  !! Not sure this is adequate
 *     SQL92 has [ <schema_name> <period> ] <qualified_identifier>
 * bnf-end
 *
 */
  final public void qualified_name_A() throws ParseException {
    identifier_A();
  }

/**
 * 
 *
 * bnf-start
 *  <qualifier> ::= <table_name> 
 *  !! SQL92 also has <correlation_name>
 * bnf-end
 *
 */
  final public void qualifier_A() throws ParseException {
    table_name_A();
  }

/**
 * 
 *
 * bnf-start
 *  <query_specification> ::=
 *      SELECT [ <set_quantifier> ] [ <set_limit> ] <select_list> <table_expression>
 * bnf-end
 *
 * bnf-start
 *  <table_expression> ::=
 *      <from_clause>
 *      [ <where_clause> ]
 *      [ <group_by_clause> ]
 *      [ <having_clause> ]
 *      [ <order_by_clause> ]
 * !! ADQL adds <order_by_clause>
 * bnf-end 
 *
 */
  final public void query_specification_A() throws ParseException {
 /*@bgen(jjtree) Select */
    AST_Select jjtn000 = new AST_Select(this, JJTSELECT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "query_specification_A()" ) ;
    try {
      jj_consume_token(SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
      case DISTINCT:
        set_quantifier_S();
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOP:
        set_limit_A();
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      select_list_S();
      from_clause_S();
      if (jj_2_20(3)) {
        where_clause_S();
      } else {
        ;
      }
      if (jj_2_21(3)) {
        group_by_clause_S();
      } else {
        ;
      }
      if (jj_2_22(3)) {
        having_clause_S();
      } else {
        ;
      }
      if (jj_2_23(3)) {
        order_by_clause_S();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "query_specification_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public RegionSearchType region_predicate_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "region_predicate_A()" ) ;
        RegionSearchType st = null ;
        RegionType rt = null ;
        Token t = null ;
    jj_consume_token(REGION);
    jj_consume_token(LEFT_PAREN);
    rt = region_specification_A();
    t = jj_consume_token(RIGHT_PAREN);
                if( t != null ) {
                   st = RegionSearchType.Factory.newInstance() ;
                   st.setRegion( rt ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "region_predicate_A()" ) ;
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public RegionType region_specification_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "region_specification_A()" ) ;
    RegionType rt = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CIRCLE:
      rt = circle_region_A();
      break;
    case ELLIPSE:
      rt = ellipse_region_A();
      break;
    case POLYGON:
      polygon_region_A();
      break;
    case SECTOR:
      sector_region_A();
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( TRACE_ENABLED ) exitTrace ( "region_specification_A()" ) ;
                {if (true) return rt ;}
    throw new Error("Missing return statement in function");
  }

  final public CircleType circle_region_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "circle_region_A()" ) ;
        String coordSystem = null ;
        Object[] radiusParams = null ;
        List coords = null ;
        CircleType circleType = null ;
    jj_consume_token(CIRCLE);
    coordSystem = coord_system_A();
    jj_consume_token(CENTER);
    jj_consume_token(EQUALS_OPERATOR);
    coords = coords_2_A();
    jj_consume_token(RADIUS);
    jj_consume_token(EQUALS_OPERATOR);
    radiusParams = circle_radius_A();
                if( radiusParams != null ) {
                        circleType = CircleType.Factory.newInstance() ;
                        circleType.setCenter( coords ) ;
                        circleType.setRadius( ((Double)radiusParams[0]).doubleValue() ) ;
                        circleType.setCoordSystemId( coordSystem ) ;
                        circleType.setUnit( (PosUnitType.Enum)radiusParams[1] ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "circle_region_A()" ) ;
                {if (true) return circleType ;}
    throw new Error("Missing return statement in function");
  }

  final public EllipseType ellipse_region_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "ellipse_region_A()" ) ;
        Double minorRadius = null ;
        Double majorRadius = null ;
        List coords = null ;
        EllipseType ellipseType = null ;
        Object[] radiusParams = null ;
        String coordSystem = null ;
        Object[] angleParams = null ;
    jj_consume_token(ELLIPSE);
    coordSystem = coord_system_A();
    jj_consume_token(CENTER);
    jj_consume_token(EQUALS_OPERATOR);
    coords = coords_2_A();
    jj_consume_token(RADII);
    jj_consume_token(EQUALS_OPERATOR);
    radiusParams = ellipse_radius_A();
    jj_consume_token(POS_ANGLE);
    jj_consume_token(EQUALS_OPERATOR);
    angleParams = ellipse_angle_A();
                if( radiusParams != null ) {
                        ellipseType = EllipseType.Factory.newInstance() ;
                        ellipseType.setCenter( coords ) ;
                        ellipseType.setMinorRadius( ((Double)radiusParams[0]).doubleValue() ) ;
                        ellipseType.setRadius( ((Double)radiusParams[1]).doubleValue() ) ;
                        ellipseType.setCoordSystemId( coordSystem ) ;
                        ellipseType.setUnit( (PosUnitType.Enum)radiusParams[2] ) ;
                        ellipseType.setPosAngle( ((Double)angleParams[0]).doubleValue() ) ;
                        ellipseType.setPosAngleUnit( (AngleUnitType.Enum)angleParams[1] ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "ellipse_region_A()" ) ;
                {if (true) return ellipseType ;}
    throw new Error("Missing return statement in function");
  }

  final public void polygon_region_A() throws ParseException {
    jj_consume_token(POLYGON);
  }

  final public void sector_region_A() throws ParseException {
    jj_consume_token(SECTOR);
  }

  final public void convex_region_A() throws ParseException {
    jj_consume_token(CONVEX);
  }

  final public void convex_hull_region_A() throws ParseException {
    jj_consume_token(CONVEX_HULL);
  }

//|   < CONVEX_HULL : "convex hull" >//|   < UNION : "union" >//|   < INTERSECTION : "intersection" >
  final public String coord_system_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "coord_system_A()" ) ;
        String cs = null ;
        Token t1 = null ;
    jj_consume_token(COORD_SYSTEM);
    jj_consume_token(EQUALS_OPERATOR);
    t1 = jj_consume_token(REGULAR_IDENTIFIER);
                if( t1 !=  null ) {
                   cs = t1.image ;
            }
            if( TRACE_ENABLED ) exitTrace ( "coord_system_A()" ) ;
                {if (true) return cs ;}
    throw new Error("Missing return statement in function");
  }

  final public void row_subquery_S() throws ParseException {
    subquery_S();
  }

  final public Double double_numeric_literal_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "double_numeric_literal_A()" ) ;
        Token s = null ;
        Token t = null ;
        Double dnl = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
    case EXACT_NUMERIC_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
      case MINUS_SIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          jj_consume_token(PLUS_SIGN);
          break;
        case MINUS_SIGN:
          s = jj_consume_token(MINUS_SIGN);
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      t = jj_consume_token(EXACT_NUMERIC_LITERAL);
      break;
    case UNSIGNED_INTEGER:
      t = jj_consume_token(UNSIGNED_INTEGER);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
           dnl = new Double( (s!=null ? '-' : '+' ) + t.image ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "double_numeric_literal_A()" ) ;
                {if (true) return dnl ;}
    throw new Error("Missing return statement in function");
  }

  final public List coords_2_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "coords_2_A" ) ;
        Double coord1 = null ;
        Double coord2 = null ;
        Token t = null ;
        ArrayList list = null ;
    jj_consume_token(LEFT_PAREN);
    coord1 = double_numeric_literal_A();
    jj_consume_token(COMMA);
    coord2 = double_numeric_literal_A();
    t = jj_consume_token(RIGHT_PAREN);
        if( t != null ) {
                list = new ArrayList( 2 ) ;
                list.add( coord1 ) ;
                list.add( coord2 ) ;
        }
        if( TRACE_ENABLED ) exitTrace ( "coords_2_A" ) ;
        {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public Object[] circle_radius_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "circle_radius_A" ) ;
        Double rad = null ;
        String putString = null ;
        PosUnitType.Enum unitType ;
        Object[] radiusParams = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      rad = double_numeric_literal_A();
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      rad = double_numeric_literal_A();
      jj_consume_token(COMMA);
      putString = pos_unit_type_A();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           if( rad !=  null ) {
                   radiusParams = new Object[2] ;
                   if( putString == null ) {
                           unitType = PosUnitType.Enum.forString("") ;
                   }
                   else {
                           unitType = PosUnitType.Enum.forString( putString ) ;
                   }
                   radiusParams[0] = rad ;
                   radiusParams[1] = unitType ;
           }
           if( TRACE_ENABLED ) exitTrace ( "circle_radius_A" ) ;
           {if (true) return radiusParams ;}
    throw new Error("Missing return statement in function");
  }

  final public Object[] ellipse_radius_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "ellipse_radius_A" ) ;
        Double minorRad = null ;
        Double majorRad = null ;
        PosUnitType.Enum unitType = null ;
        String putString = null ;
        Object[] ellipseParams = null ;
    jj_consume_token(LEFT_PAREN);
    minorRad = double_numeric_literal_A();
    jj_consume_token(COMMA);
    majorRad = double_numeric_literal_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      putString = pos_unit_type_A();
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PAREN);
           if( majorRad !=  null ) {
                   ellipseParams = new Object[3] ;
                   if( putString == null ) {
                           unitType = PosUnitType.Enum.forString("") ;
                   }
                   else {
                           unitType = PosUnitType.Enum.forString( putString ) ;
                   }
                   ellipseParams[0] = minorRad ;
                   ellipseParams[1] = majorRad ;
                   ellipseParams[2] = unitType ;
           }
           if( TRACE_ENABLED ) exitTrace ( "ellipse_radius_A" ) ;
           {if (true) return ellipseParams ;}
    throw new Error("Missing return statement in function");
  }

  final public String pos_unit_type_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "pos_unit_type_A" ) ;
        String putString = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEG:
      t = jj_consume_token(DEG);
      break;
    case DEG_DEG_M:
      t = jj_consume_token(DEG_DEG_M);
      break;
    case RAD:
      t = jj_consume_token(RAD);
      break;
    case H:
      t = jj_consume_token(H);
      break;
    case ARCMIN:
      t = jj_consume_token(ARCMIN);
      break;
    case ARCSEC:
      t = jj_consume_token(ARCSEC);
      break;
    case M:
      t = jj_consume_token(M);
      break;
    case KM:
      t = jj_consume_token(KM);
      break;
    case MM:
      t = jj_consume_token(MM);
      break;
    case AU:
      t = jj_consume_token(AU);
      break;
    case PC:
      t = jj_consume_token(PC);
      break;
    case KPC:
      t = jj_consume_token(KPC);
      break;
    case MPC:
      t = jj_consume_token(MPC);
      break;
    case LYR:
      t = jj_consume_token(LYR);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        putString = t.image ;
                }
                if( TRACE_ENABLED ) exitTrace ( "pos_unit_type_A" ) ;
                {if (true) return putString ;}
    throw new Error("Missing return statement in function");
  }

  final public String pos_angle_type_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "pos_angle_type_A" ) ;
        String patString = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEG:
      t = jj_consume_token(DEG);
      break;
    case RAD:
      t = jj_consume_token(RAD);
      break;
    case H:
      t = jj_consume_token(H);
      break;
    case ARCMIN:
      t = jj_consume_token(ARCMIN);
      break;
    case ARCSEC:
      t = jj_consume_token(ARCSEC);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        patString = t.image ;
                }
                if( TRACE_ENABLED ) exitTrace ( "pos_angle_type_A" ) ;
                {if (true) return patString ;}
    throw new Error("Missing return statement in function");
  }

  final public Object[] ellipse_angle_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "ellipse_angle_A" ) ;
        Double angle = null ;
        String patString = null ;
        AngleUnitType.Enum unitType ;
        Object[] angleParams = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      angle = double_numeric_literal_A();
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      angle = double_numeric_literal_A();
      jj_consume_token(COMMA);
      patString = pos_angle_type_A();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           if( angle !=  null ) {
                   angleParams = new Object[2] ;
                   if( patString == null ) {
                           unitType = AngleUnitType.Enum.forString("") ;
                   }
                   else {
                           unitType = AngleUnitType.Enum.forString( patString ) ;
                   }
                   angleParams[0] = angle ;
                   angleParams[1] = unitType ;
           }
           if( TRACE_ENABLED ) exitTrace ( "ellipse_angle_A" ) ;
           {if (true) return angleParams ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType row_value_constructor_S() throws ParseException {
        ScalarExpressionType seType = null ;
    if (jj_2_24(3)) {
      row_value_constructor_element_S();
    } else if (jj_2_25(2)) {
      jj_consume_token(LEFT_PAREN);
      row_value_constructor_list_S();
      jj_consume_token(RIGHT_PAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        row_subquery_S();
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
           {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType row_value_constructor_element_S() throws ParseException {
        ScalarExpressionType seType = null ;
    value_expression_A();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public void row_value_constructor_list_S() throws ParseException {
    row_value_constructor_element_S();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      row_value_constructor_element_S();
    }
  }

  final public void scalar_subquery_S() throws ParseException {
    subquery_S();
  }

/**
 * 
 *
 * bnf-start
 *  <search_condition> ::=
 *      <boolean_term>
 *    | <search_condition> OR <boolean_term>
 * bnf-end
 *
 */
  final public void search_condition_S() throws ParseException {
 /*@bgen(jjtree) SearchCondition */
        AST_SearchCondition jjtn000 = new AST_SearchCondition(this, JJTSEARCHCONDITION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "search_condition_S" ) ;
    try {
      boolean_term_S();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        search_condition_S();
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "search_condition_S" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

//SearchType booleanTermList() : //{//	if( TRACE_ENABLED ) enterTrace ( "booleanTermList" ) ;//	Stack stack = null ;//	SearchType st = null ;//}//{//	( //	  LOOKAHEAD(3)//	  st=booleanTermSingleton() //	  { if( stack == null )//	  	   stack = new Stack() ;//	  	stack.push( st ) ;//	  } //	)*//	{ //		if( stack != null ) {//			UnionSearchType heldOr = null ;//			SearchType[] conditions = new SearchType[2] ;//			while( stack.empty() == false ) {//				st = (SearchType)stack.pop() ;//				if( heldOr != null ) {//					conditions[0] = st ;//					conditions[1] = heldOr ;//					UnionSearchType orType = UnionSearchType.Factory.newInstance() ;//					orType.setConditionArray( conditions ) ;//					heldOr = orType ;//				}//				else if( stack.empty() == false  ) {//					conditions[0] = (SearchType)stack.pop() ;//					conditions[1] = st ;//					UnionSearchType orType = UnionSearchType.Factory.newInstance() ;//					orType.setConditionArray( conditions ) ;//					heldOr = orType ;//				}//			}//			if( heldOr != null )//				st = heldOr ; //		}	//		if( TRACE_ENABLED ) exitTrace ( "booleanTermList" ) ;	//		return st ;//	}//}////SearchType booleanTermSingleton() ://{//	if( TRACE_ENABLED ) enterTrace ( "booleanTermSingleton" ) ;//	SearchType st = null ;//	Token t = null ;//}//{////	t=<OR>{if(t!=null){_lt(UnionSearchType.type);_lp(CONDITION_ELEMENT);}}  //	st=boolean_term_S() //	{ //		_lp() ;//		if( TRACE_ENABLED ) exitTrace ( "booleanTermSingleton" ) ;//		return st ; //	}//}

/**
 * select_list_S
 *
 * bnf-start
 *  <select_list> ::=
 *      <asterisk>
 *    | <select_sublist> [ { <comma> <select_sublist> }... ]
 * bnf-end
 *
 */
  final public void select_list_S() throws ParseException {
 /*@bgen(jjtree) SelectionList */
        AST_SelectionList jjtn000 = new AST_SelectionList(this, JJTSELECTIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "select_list_S()" ) ;
        Token t = null ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        allSelectionItem();
        break;
      case LEFT_PAREN:
      case PLUS_SIGN:
      case MINUS_SIGN:
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case SQUARE:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case ASCII_STRING_LITERAL:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case APPROXIMATE_NUMERIC_LITERAL:
      case EXACT_NUMERIC_LITERAL:
        select_sublist_A();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[69] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          select_sublist_A();
        }
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "select_list_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void allSelectionItem() throws ParseException {
                                             /*@bgen(jjtree) AllSelectionItem */
  AST_AllSelectionItem jjtn000 = new AST_AllSelectionItem(this, JJTALLSELECTIONITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ASTERISK);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * 
 *
 * bnf-start
 *  <select_sublist> ::=
 *      <derived_column>
 *  !! SQL92 also has <qualifier> <period> <asterisk>
 * bnf-end
 *
 */
  final public void select_sublist_A() throws ParseException {
 /*@bgen(jjtree) SelectSublist */
        AST_SelectSublist jjtn000 = new AST_SelectSublist(this, JJTSELECTSUBLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "select_sublist_A()" ) ;
    try {
      derived_column_S();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "select_sublist_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * derived_column_S
 *
 * bnf-start
 *  <derived_column> ::= <value_expression> [ <as_clause> ]
 *  !! See footnote (1) about the <as_clause> within ADQL/x
 * bnf-end
 * bnf-start
 *  <as_clause> ::= [ AS ] <column_name>
 *  !! See footnote (1) about the <as_clause> within ADQL/x
 * bnf-end
 */
  final public void derived_column_S() throws ParseException {
 /*@bgen(jjtree) DerivedColumn */
        AST_DerivedColumn jjtn000 = new AST_DerivedColumn(this, JJTDERIVEDCOLUMN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "derived_column_S()" ) ;
    try {
      value_expression_A();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
        column_name_S();
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "derived_column_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * set_function_specification_S
 *
 * bnf-start
 *  <set_function_specification> ::=
 *      COUNT <left_paren> <asterisk> <right_paren>
 *    | <general_set_function>
 * bnf-end
 *
 */
  final public void set_function_specification_S() throws ParseException {
                                                                 /*@bgen(jjtree) SetFunctionSpecification */
  AST_SetFunctionSpecification jjtn000 = new AST_SetFunctionSpecification(this, JJTSETFUNCTIONSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_26(3)) {
        jj_consume_token(COUNT);
        jj_consume_token(LEFT_PAREN);
        jj_consume_token(ASTERISK);
        jj_consume_token(RIGHT_PAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AVG:
        case COUNT:
        case MAX:
        case MIN:
        case SUM:
          general_set_function_A();
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void set_function_specification_part_fragment() throws ParseException {
 /*@bgen(jjtree) SetFunctionSpecificationPartFragment */
        AST_SetFunctionSpecificationPartFragment jjtn000 = new AST_SetFunctionSpecificationPartFragment(this, JJTSETFUNCTIONSPECIFICATIONPARTFRAGMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "set_function_specification_part_fragment()" ) ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        jj_consume_token(ASTERISK);
        break;
      case LEFT_PAREN:
      case PLUS_SIGN:
      case MINUS_SIGN:
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case SQUARE:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case ASCII_STRING_LITERAL:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case APPROXIMATE_NUMERIC_LITERAL:
      case EXACT_NUMERIC_LITERAL:
        value_expression_A();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                  if( TRACE_ENABLED ) exitTrace ( "set_function_specification_part_fragment()" ) ;
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
    }
  }

/**
 * 
 *
 * bnf-start
 *  <set_limit> ::= TOP <unsigned_integer>
 *  !! SQL92 has no equivalent construct
 * bnf-end
 *
 */
  final public void set_limit_A() throws ParseException {
                                /*@bgen(jjtree) Restrict */
  AST_Restrict jjtn000 = new AST_Restrict(this, JJTRESTRICT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TOP);
      jj_consume_token(UNSIGNED_INTEGER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * set_quantifier_S
 *
 * bnf-single <set_quantifier> ::= DISTINCT | ALL
 *
 */
  final public void set_quantifier_S() throws ParseException {
                                  /*@bgen(jjtree) Allow */
  AST_Allow jjtn000 = new AST_Allow(this, JJTALLOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
        break;
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

//SelectionOptionType set_quantifier_fragment() : //{//	SelectionOptionType sot = null ;//}//{//	sot=set_quantifier_S() <SEMICOLON>//	{ return sot ; }//}
  final public void single_datetime_field_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DAY:
    case HOUR:
    case MINUTE:
    case MONTH:
    case YEAR:
      nonsecond_datetime_field_S();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        interval_leading_field_precision_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      break;
    case SECOND:
      jj_consume_token(SECOND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        interval_leading_field_precision_S();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          interval_fractional_seconds_precision_S();
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void start_field_S() throws ParseException {
    nonsecond_datetime_field_S();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      interval_leading_field_precision_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
  }

/**
 * 
 *
 * bnf-start
 *  <string_value_expression> ::=
 *      <character_value_expression>
 *  !! SQL92 also supports <bit_value_expression>
 * bnf-end
 *
 */
  final public void string_value_expression_A() throws ParseException {
    character_value_expression_A();
  }

/**
 * subquery_S
 *
 */
  final public SearchType subquery_S() throws ParseException {
        SearchType st = null ;
    jj_consume_token(LEFT_PAREN);
    query_expression_S();
    jj_consume_token(RIGHT_PAREN);
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public void quantified_comparison_predicate_S() throws ParseException {
    row_value_constructor_S();
    comp_op_S();
    quantifier_S();
    table_subquery_S();
  }

  final public void quantifier_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
      break;
    case ANY:
    case SOME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOME:
        jj_consume_token(SOME);
        break;
      case ANY:
        jj_consume_token(ANY);
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void query_expression_S() throws ParseException {
    if (jj_2_27(3)) {
      nonjoin_query_expression_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        joined_table_S();
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void query_primary_S() throws ParseException {
    if (jj_2_28(3)) {
      nonjoin_query_primary_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        joined_table_S();
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void query_term_S() throws ParseException {
    if (jj_2_29(2)) {
      nonjoin_query_term_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        joined_table_S();
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void corresponding_spec_S() throws ParseException {
    jj_consume_token(CORRESPONDING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      jj_consume_token(LEFT_PAREN);
      corresponding_column_list_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
  }

  final public void corresponding_column_list_S() throws ParseException {
    column_name_list_S();
  }

/**
 * cross_join_S
 *
 *-bnf-start
 *- <cross_join> ::=
 *-     <table_reference> CROSS JOIN <table_reference>
 *-bnf-end
 *
 */
  final public JoinTableType cross_join_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "cross_join_S()" ) ;
        JoinTableType jtType = null ;
        FromTableType fType1 = null ;
        FromTableType fType2 = null ;
    tableReferenceBarJoinedTable();
    jj_consume_token(CROSS_JOIN);
    table_reference_A();
           if( fType2 != null ) {
              jtType = JoinTableType.Factory.newInstance() ;
              jtType.setQualifier( JointTableQualifierType.CROSS ) ;
              FromTableType[] fttArray = new FromTableType[2] ;
              fttArray[0] = fType1 ;
              fttArray[1] = fType2 ;
              ArrayOfFromTableType tableArray = ArrayOfFromTableType.Factory.newInstance() ;
              tableArray.setFromTableTypeArray( fttArray ) ;
              jtType.setTables( tableArray ) ;
           }
           if( TRACE_ENABLED ) exitTrace ( "cross_join_S()" ) ;
           {if (true) return jtType ;}
    throw new Error("Missing return statement in function");
  }

  final public void nonjoin_query_expression_S() throws ParseException {
    if (jj_2_30(4)) {
      query_term_S();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXCEPT:
        case UNION:
          ;
          break;
        default:
          jj_la1[87] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNION:
          jj_consume_token(UNION);
          break;
        case EXCEPT:
          jj_consume_token(EXCEPT);
          break;
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CORRESPONDING:
          corresponding_spec_S();
          break;
        default:
          jj_la1[90] = jj_gen;
          ;
        }
        query_term_S();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case SELECT:
      case TABLE:
      case VALUES:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        nonjoin_query_term_S();
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void nonjoin_query_term_S() throws ParseException {
    if (jj_2_31(3)) {
      nonjoin_query_primary_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case SELECT:
      case TABLE:
      case VALUES:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        query_primary_S();
        jj_consume_token(INTERSECT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
          break;
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CORRESPONDING:
          corresponding_spec_S();
          break;
        default:
          jj_la1[93] = jj_gen;
          ;
        }
        query_primary_S();
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void nonjoin_query_primary_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case TABLE:
    case VALUES:
      simple_table_S();
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      nonjoin_query_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void nonsecond_datetime_field_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case YEAR:
      jj_consume_token(YEAR);
      break;
    case MONTH:
      jj_consume_token(MONTH);
      break;
    case DAY:
      jj_consume_token(DAY);
      break;
    case HOUR:
      jj_consume_token(HOUR);
      break;
    case MINUTE:
      jj_consume_token(MINUTE);
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simple_table_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      query_specification_A();
      break;
    case VALUES:
      table_value_constructor_S();
      break;
    case TABLE:
      explicit_table_S();
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

///**// * table_expression_A// *// *-bnf-start// *- <table_expression> ::=// *-     <from_clause>// *-     [ <where_clause> ]// *-     [ <group_by_clause> ]// *-     [ <having_clause> ]// *-     [ <order_by_clause> ]// *-!! ADQL adds <order_by_clause>// *-bnf-end// *// */
//void table_expression_A( SelectType st ) : //{//	if( TRACE_ENABLED ) enterTrace ( "table_expression_A" ) ;//} //{//	//S://	// <table_expression> ::=//	// <from_clause>//    // [ <where_clause> ]//    // [ <group_by_clause> ]//    // [ <having_clause> ]//	(//		from_clause_S( st ) 		//		[ LOOKAHEAD(3) where_clause_S( st ) ] //		//		[ LOOKAHEAD(3) group_by_clause_S( st ) ] //		//		[ LOOKAHEAD(3) having_clause_S( st ) ] //		//		[ LOOKAHEAD(3) order_by_clause( st ) ]	//	)//	{ //		if( TRACE_ENABLED ) exitTrace ( "table_expression_A" ) ;//	}//}

/**
 * table_name_A
 *
 * bnf-start
 *  <table_name> ::=
 *      <qualified_name>
 *  !! SQL92 also supports <qualified_local_table_name>
 * bnf-end
 *
 */
  final public void table_name_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "table_name_A()" ) ;
    qualified_name_A();
                if( TRACE_ENABLED ) exitTrace ( "table_name_A()" ) ;
  }

/**
 * table_reference_A
 *
 * bnf-start
 *  <table_reference> ::=
 *      <table_name> [ [ AS ] <correlation_name> ]
 *    | <joined_table> 
 *  !! SQL92 also supports <derived_table> and <derived_column_list>
 * bnf-end
 *
 */
  final public void table_reference_A() throws ParseException {
 /*@bgen(jjtree) Table */
        AST_Table jjtn000 = new AST_Table(this, JJTTABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "table_reference_A()" ) ;
    try {
      if (jj_2_32(4)) {
        joined_table_S();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REGULAR_IDENTIFIER:
        case DELIMITED_IDENTIFIER:
          table_name_A();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
          case REGULAR_IDENTIFIER:
          case DELIMITED_IDENTIFIER:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case AS:
              jj_consume_token(AS);
              break;
            default:
              jj_la1[98] = jj_gen;
              ;
            }
            correlation_name_S();
            break;
          default:
            jj_la1[99] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "table_reference_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

// Adaptation of <table_reference>
  final public void tableReferenceBarJoinedTable() throws ParseException {
 /*@bgen(jjtree) TableReferenceBarJoinedTable */
        AST_TableReferenceBarJoinedTable jjtn000 = new AST_TableReferenceBarJoinedTable(this, JJTTABLEREFERENCEBARJOINEDTABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "tableReferenceBarJoinedTable()" ) ;
    try {
      table_name_A();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          break;
        default:
          jj_la1[101] = jj_gen;
          ;
        }
        correlation_name_S();
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "tableReferenceBarJoinedTable()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public SearchType table_subquery_S() throws ParseException {
        SearchType st = null ;
    //S:
            // <table_subquery> ::= <subquery>
            st = subquery_S();
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

/**
 * table_subquery_A
 *
 * bnf-start
 *  <table_subquery> ::= 
 *      <left_paren> <query_specification> <right_paren>
 *  !! SQL92 uses <subquery>
 * bnf-end
 *
 */
  final public void table_subquery_A() throws ParseException {
 /*@bgen(jjtree) TableSubQuery */
        AST_TableSubQuery jjtn000 = new AST_TableSubQuery(this, JJTTABLESUBQUERY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "table_subquery_A" ) ;
    try {
      jj_consume_token(LEFT_PAREN);
      query_specification_A();
      jj_consume_token(RIGHT_PAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "table_subquery_A" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void table_value_constructor_S() throws ParseException {
    jj_consume_token(VALUES);
    table_value_constructor_list_S();
  }

  final public void table_value_constructor_list_S() throws ParseException {
    row_value_constructor_S();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      row_value_constructor_S();
    }
  }

/**
 * term_S
 *
 * bnf-start
 *  <term> ::=
 *      <factor>
 *    | <term> <asterisk> <factor>
 *    | <term> <solidus> <factor>
 * bnf-end
 *
 */
  final public void term_S() throws ParseException {
 /*@bgen(jjtree) Term */
        AST_Term jjtn000 = new AST_Term(this, JJTTERM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "term_S()" ) ;
    try {
      factor_S();
      if (jj_2_33(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASTERISK:
          jj_consume_token(ASTERISK);
          break;
        case SOLIDUS:
          jj_consume_token(SOLIDUS);
          break;
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                  jjtn000.setBinaryOp(token);
        term_S();
      } else {
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "term_S()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

//ScalarExpressionType[] termList() : //{//	ArrayList list = null ;//	ScalarExpressionType[] exprPairs1 = null ;//	ScalarExpressionType[] exprPairs2 = null ;//	ScalarExpressionType[] retExprPairs = null ;	//}//{//	( LOOKAHEAD(3) exprPairs1=termSingleton() //	  { if( list == null )//	  	   list = new ArrayList() ;//	  	list.add( exprPairs1 ) ;//	  } //	)*//	{ //		if( list != null ) {//			ListIterator iterator = list.listIterator() ;//			retExprPairs = exprPairs1 = (ScalarExpressionType[])iterator.next() ;//			ScalarExpressionType[] args = new ScalarExpressionType[2] ;//			BinaryExprType beType = null ;//			while( iterator.hasNext() ) {//				exprPairs2 = (ScalarExpressionType[])iterator.next() ;//				args[0] = exprPairs1[1] ;//				args[1] = exprPairs2[1] ;//				beType = (BinaryExprType)exprPairs2[0] ;//				beType.setArgArray( args ) ;//				exprPairs1 = exprPairs2 ;//			}//		}		//		return retExprPairs ;//	}//}////ScalarExpressionType[] termSingleton() ://{////	ScalarExpressionType[] retPairs = null ;//	BinaryExprType beType = null ;//	ScalarExpressionType seType = null ;//	Token t = null ; //}//{//	( t=<ASTERISK> | t=<SOLIDUS> ) seType=term_S()	//	{//		if( t != null ) {//			retPairs = new ScalarExpressionType[2] ;		//			beType = BinaryExprType.Factory.newInstance() ;//			beType.setOper( BinaryOperatorType.Enum.forString( t.image ) ) ;//			retPairs[0] = beType ;//			retPairs[1] = seType ;//		}////		return retPairs ;//	}//}
  final public void time_fractional_seconds_precision_S() throws ParseException {
    jj_consume_token(UNSIGNED_INTEGER);
  }

  final public void time_precision_S() throws ParseException {
    time_fractional_seconds_precision_S();
  }

  final public void timestamp_precision_S() throws ParseException {
    time_fractional_seconds_precision_S();
  }

  final public void time_zone_S() throws ParseException {
    jj_consume_token(AT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOCAL:
      jj_consume_token(LOCAL);
      break;
    case TIME_ZONE:
      jj_consume_token(TIME_ZONE);
      interval_value_expression_S();
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * 
 *
 * bnf-start
 *  <trig_function> ::=
 *      ACOS <left_paren> <numeric_value_expression> <right_paren>
 *    | ASIN <left_paren> <numeric_value_expression> <right_paren>
 *    | ATAN <left_paren> <numeric_value_expression> <right_paren>
 *    | ATAN2 <left_paren> <numeric_value_expression> <comma> <numeric_value_expression> <right_paren>
 *    | COS <left_paren> <numeric_value_expression> <right_paren>
 *    | COT <left_paren> <numeric_value_expression> <right_paren>
 *    | SIN <left_paren> <numeric_value_expression> <right_paren>
 *    | TAN <left_paren> <numeric_value_expression> <right_paren>
 *  !! Specific to ADQL
 * bnf-end
 *
 */
  final public void trig_function_A() throws ParseException {
 /*@bgen(jjtree) TrigFunction */
        AST_TrigFunction jjtn000 = new AST_TrigFunction(this, JJTTRIGFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "trig_function_A()" ) ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACOS:
        jj_consume_token(ACOS);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case ASIN:
        jj_consume_token(ASIN);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case ATAN:
        jj_consume_token(ATAN);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case ATAN2:
        jj_consume_token(ATAN2);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(COMMA);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case COS:
        jj_consume_token(COS);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case COT:
        jj_consume_token(COT);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case SIN:
        jj_consume_token(SIN);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      case TAN:
        jj_consume_token(TAN);
        jj_consume_token(LEFT_PAREN);
        numeric_value_expression_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "trig_function_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void unique_predicate_S() throws ParseException {
    jj_consume_token(UNIQUE);
    table_subquery_S();
  }

/**
 * unsigned_literal_S
 *
 * bnf-single <unsigned_literal> ::= <unsigned_numeric_literal> | <general_literal>
 *
 */
  final public void unsigned_literal_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_INTEGER:
    case APPROXIMATE_NUMERIC_LITERAL:
    case EXACT_NUMERIC_LITERAL:
      unsigned_numeric_literal_S();
      break;
    case ASCII_STRING_LITERAL:
      general_literal_A();
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * unsigned_numeric_literal_S
 *
 * bnf-start
 *  <unsigned_numeric_literal> ::=
 *     <exact_numeric_literal>
 *     |
 *     <approximate_numeric_literal>
 * bnf-end
 *
 */
  final public void unsigned_numeric_literal_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      exact_numeric_literal_S(DONT_CHANGE_SIGN);
      break;
    case APPROXIMATE_NUMERIC_LITERAL:
      approximate_numeric_literal_S();
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void approximate_numeric_literal_S() throws ParseException {
                                                                   /*@bgen(jjtree) ApproximateNumericLiteral */
  AST_ApproximateNumericLiteral jjtn000 = new AST_ApproximateNumericLiteral(this, JJTAPPROXIMATENUMERICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(APPROXIMATE_NUMERIC_LITERAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * unsigned_value_specification_S
 *
 * bnf-start
 *  <unsigned_value_specification> ::=
 *      <unsigned_literal>
 *    | <general_value_specification>
 * bnf-end
 *
 */
  final public void unsigned_value_specification_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASCII_STRING_LITERAL:
    case UNSIGNED_INTEGER:
    case APPROXIMATE_NUMERIC_LITERAL:
    case EXACT_NUMERIC_LITERAL:
      unsigned_literal_S();
      break;
    case DOLLAR:
      general_value_specification_A();
      break;
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * value_expression_A
 *
 * bnf-start
 *  <value_expression> ::=
 *	    <numeric_value_expression>
 *    | <string_value_expression>
 *  !! SQL92 also supports <datetime_value_expression>
 *     and <interval_value_expression>
 * bnf-end
 *
 */
  final public void value_expression_A() throws ParseException {
 /*@bgen(jjtree) ValueExpression */
    AST_ValueExpression jjtn000 = new AST_ValueExpression(this, JJTVALUEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "value_expression_A()" ) ;
    try {
      if (jj_2_34(3)) {
        numeric_value_expression_S();
      } else if (jj_2_35(3)) {
        string_value_expression_A();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "value_expression_A()" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/**
 * variable_specification_A
 *
 * bnf-start
 *  <variable_specification> ::=
 *  !! Yet to be worked out.
 * bnf-end
 *
 */
  final public ScalarExpressionType variable_specification_A() throws ParseException {
        ScalarExpressionType seType = null ;
    jj_consume_token(DOLLAR);
    jj_consume_token(LBRACE);
    jj_consume_token(REGULAR_IDENTIFIER);
    jj_consume_token(RBRACE);
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * where_clause_S
 *
 * bnf-single <where_clause> ::= WHERE <search_condition>
 *
 */
  final public void where_clause_S() throws ParseException {
 /*@bgen(jjtree) Where */
        AST_Where jjtn000 = new AST_Where(this, JJTWHERE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "where_clause_S" ) ;
    try {
      jj_consume_token(WHERE);
      search_condition_S();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if( TRACE_ENABLED ) exitTrace ( "where_clause_S" ) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(POWER)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(PI)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_65()) return true;
    if (jj_3R_66()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(FLOOR)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(EXP)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(HAVING)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(DEGREES)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(CEILING)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_218()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(326)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(314)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(315)) {
    jj_scanpos = xsp;
    if (jj_scan_token(316)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_197()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_198()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(VALUES)) return true;
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(GROUPBY)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(SECOND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_62()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_64()) return true;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(199)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(179)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  final private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(TOP)) return true;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(219)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    }
    }
    }
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(322)) {
    jj_scanpos = xsp;
    if (jj_scan_token(323)) return true;
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(ASTERISK)) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(REGULAR_IDENTIFIER)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  final private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(ON)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_139()) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_216()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  final private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_204()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(APPROXIMATE_NUMERIC_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_217()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(254)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(SECOND)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_207()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(329)) {
    jj_scanpos = xsp;
    if (jj_scan_token(326)) return true;
    }
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(ASCII_STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(ORDERBY)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    if (jj_3R_138()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_138()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(ASTERISK)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(235)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(INTERSECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(TAN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(SIN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(COT)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(COS)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(ATAN2)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(ASIN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(ACOS)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(ATAN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(326)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_88()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(326)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(TIME_ZONE)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(CURRENT_TIMESTAMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(CURRENT_TIME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_220()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(CORRESPONDING)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    if (jj_3R_157()) return true;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_212()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(TRUNCATE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(ROUND)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(RAND)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(LOG10)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(SQUARE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(RADIANS)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  public AdqlStoXTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[110];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static private int[] jj_la1_10;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
      jj_la1_6();
      jj_la1_7();
      jj_la1_8();
      jj_la1_9();
      jj_la1_10();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x14000,0x0,0x14800,0x0,0x0,0x0,0x8000,0x800,0xe00000,0x800,0x14000,0x14800,0x800,0x800,0x0,0x800,0x0,0x0,0x14000,0x14000,0x8000,0x0,0x8000,0x0,0x800,0x14000,0x14000,0x0,0x42000,0x14800,0x14000,0x800,0x8000,0x14000,0x14000,0x14000,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x14800,0x0,0x0,0x800,0x14000,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x14000,0x14000,0x14000,0x14800,0x8000,0x0,0x0,0x14800,0x800,0x8000,0x0,0x8000,0x16800,0x0,0x0,0x0,0x16800,0x0,0x800,0x8000,0x800,0x0,0x800,0x0,0x0,0x800,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x42000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x800,0x0,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x0,0x80,0x80,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x40,0x40,0x800,0x800,0x1,0x0,0x0,0x0,0x0,0x0,0x10,0x11,0x0,0x0,0x0,0x20000,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x200,0x0,0xe200,0x0,0x200,0x0,0x0,0xe000,0x0,0x80000,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x200,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x100,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x1000000,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x30000000,0x0,0x0,0x0,0x0,0x30000000,0x0,0x30000000,0x0,0x30000000,0x0,0x0,0x0,0x0,0x40000001,0x0,0x0,0x0,0x0,0x30000000,0x0,0x0,0x0,0x0,0x0,0x40000001,0x0,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x400040,0x0,0x0,0x0,0x30000000,0x0,0x0,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000000,0x0,0x0,0x30000000,0x30000000,0x0,0x0,0x0,0x0,0x40000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x80,0x0,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x800000,0x800000,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x80,0x0,0x0,0x0,0x8000000,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x1000,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20004000,0x0,0x0,0x20004000,0x20004000,0x0,0x20004000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x0,0x0,0x100000,0x0,0x0,0x100000,0x100000,0x40000000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_8() {
      jj_la1_8 = new int[] {0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x7ffe0000,0x7a0000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_9() {
      jj_la1_9 = new int[] {0x0,0x0,0x0,0x27fffff,0x0,0x0,0x400000,0x0,0x2400000,0x1c000000,0x2400000,0x0,0x27fffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x27fffff,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x27fffff,0x3fff,0x0,0x27fffff,0x0,0x3fffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x27fffff,0x0,0x0,0x0,0x27fffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fc000,0x400000,0x0,0x2400000,};
   }
   private static void jj_la1_10() {
      jj_la1_10 = new int[] {0xc,0x0,0x0,0x34c,0x0,0x0,0x0,0x0,0x34c,0x0,0x34c,0x0,0x34c,0x0,0x0,0x0,0x0,0x0,0x240,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34c,0x0,0x0,0x0,0x0,0x0,0x240,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34c,0x0,0x0,0x34c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x240,0x240,0x0,0x0,0x0,0x240,0x0,0x0,0x0,0x0,0x34c,0x0,0xc,0x0,0x34c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0xc,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0xc,0xc,0x0,0xc,0x0,0x0,0x1,0x0,0x340,0x340,0x340,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[35];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public AdqlStoX(java.io.InputStream stream) {
     this(stream, null);
  }
  public AdqlStoX(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AdqlStoXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AdqlStoX(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AdqlStoXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AdqlStoX(AdqlStoXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AdqlStoXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[338];
    for (int i = 0; i < 338; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 110; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
          if ((jj_la1_10[i] & (1<<j)) != 0) {
            la1tokens[320+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 338; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
