/* Generated By:JJTree&JavaCC: Do not edit this line. AdqlStoX.java */
package org.astrogrid.adql ;

import java.util.* ;
import org.astrogrid.adql.v1_0.beans.* ;

public class AdqlStoX/*@bgen(jjtree)*/implements AdqlStoXTreeConstants, AdqlStoXConstants {/*@bgen(jjtree)*/
  protected JJTAdqlStoXState jjtree = new JJTAdqlStoXState();
        public SelectDocument exec() {
                SelectDocument selectDoc = null ;
                try {
                        selectDoc = select_document_A();
                }
                catch( ParseException pex ) {
                        pex.printStackTrace() ;
                        //System.out.println( pex.getMessage() ) ;
                }
                catch( Error err ) {
                        err.printStackTrace() ;
                        //System.out.println( err.getMessage() ) ;
                }
                return selectDoc ;
        }

  final public SelectDocument select_document_A() throws ParseException {
        SelectDocument selectDoc = null ;
        SelectType st = null ;
    // There is no equivalent construct in the SQL/92 standard.
            st = query_specification_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
                if( st != null ) {
                        selectDoc =  SelectDocument.Factory.newInstance() ;
                        selectDoc.setSelect( st ) ;
                }
                {if (true) return selectDoc ;}
    throw new Error("Missing return statement in function");
  }

//=================================
  final public String actual_identifier_S() throws ParseException {
        Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGULAR_IDENTIFIER:
      t = jj_consume_token(REGULAR_IDENTIFIER);
      break;
    case DELIMITED_IDENTIFIER:
      t = jj_consume_token(DELIMITED_IDENTIFIER);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t.image ;}
    throw new Error("Missing return statement in function");
  }

// JL. The adql/x schema does not have such a beast!
  final public void approximateNumericLiteral() throws ParseException {
    mantissa();
    jj_consume_token(EXPONENT);
  }

  final public SearchType between_predicate_A() throws ParseException {
        ScalarExpressionType se1 = null ;
        ScalarExpressionType se2 = null ;
        ScalarExpressionType se3 = null ;
        Token t = null ;
    se1 = value_expression_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(BETWEEN);
    se2 = value_expression_A();
    jj_consume_token(AND);
    se3 = value_expression_A();
                if( se3!=null ) {
                        ScalarExpressionType[] args = new ScalarExpressionType[3] ;
                        args[0] = se1 ;
                        args[1] = se2 ;
                        args[2] = se3 ;
                        if( t==null ) {
                                BetweenPredType bp = BetweenPredType.Factory.newInstance() ;
                                bp.setArgArray( args ) ;
                                {if (true) return bp ;}
                        }
                        else {
                                NotBetweenPredType nbp = NotBetweenPredType.Factory.newInstance() ;
                                nbp.setArgArray( args ) ;
                                {if (true) return nbp ;}
                        }
                }
                {if (true) return null ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType booleanPrimary() throws ParseException {
        SearchType st = null ;
        Token t = null ;
    if (jj_2_1(3)) {
      st = predicate_A();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        st = searchCondition();
        t = jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if( t != null ) {
                ClosedSearchType cs = ClosedSearchType.Factory.newInstance() ;
                cs.setCondition( st ) ;
                {if (true) return cs ;}
        }
        {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType booleanTerm() throws ParseException {
        SearchType st=null ;
        SearchType[] stPair = null ;
    // refactored
            // [ <NOT> ] booleanTest() ( <AND> [ <NOT> ] booleanTest() )*
            st = booleanTest_WithNot();
    stPair = booleanTest_List();
                if( stPair == null ) {
                   {if (true) return st ;}
                }
                else {
                   SearchType[] conditionArray = new SearchType[2] ;
                   conditionArray[0] = st ;
                   conditionArray[1] = stPair[1] ;
                   IntersectionSearchType andType = (IntersectionSearchType)stPair[0] ;
                   andType.setConditionArray( conditionArray ) ;
                   {if (true) return andType ;}
                }
    throw new Error("Missing return statement in function");
  }

  final public SearchType booleanTest_WithNot() throws ParseException {
        SearchType sc = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    sc = booleanTest();
                if( t != null ) {
                        InverseSearchType is = InverseSearchType.Factory.newInstance() ;
                        is.setCondition( sc ) ;
                        {if (true) return is ;}
                }
                {if (true) return sc ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType[] booleanTest_List() throws ParseException {
        ArrayList list = null ;
        SearchType[] stPair1 = null ;
        SearchType[] stPair2 = null ;
        SearchType[] retPair = null ;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      stPair1 = booleanTest_Singleton();
                  if( list == null )
                     list = new ArrayList() ;
                  list.add( stPair1 ) ;
    }
                if( list != null ) {
                        ListIterator iterator = list.listIterator() ;
                        retPair = stPair1 = (SearchType[])iterator.next() ;
                        SearchType[] conditions = new SearchType[2] ;
                        IntersectionSearchType andType = null ;
                        while( iterator.hasNext() ) {
                                stPair2 = (SearchType[])iterator.next() ;
                                conditions[0] = stPair1[1] ;
                                conditions[1] = stPair2[1] ;
                                andType = (IntersectionSearchType)stPair2[0] ;
                                andType.setConditionArray( conditions ) ;
                                stPair1 = stPair2 ;
                        }
                }
                {if (true) return retPair ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType[] booleanTest_Singleton() throws ParseException {
        SearchType[] retPair = null ;
        IntersectionSearchType andType = null ;
        SearchType st = null ;
    jj_consume_token(AND);
    st = booleanTest_WithNot();
                if( st != null ) {
                        retPair = new SearchType[2] ;
                        andType = IntersectionSearchType.Factory.newInstance() ;
                        retPair[0] = andType ;
                        retPair[1] = st ;
                }
                {if (true) return retPair ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType booleanTest() throws ParseException {
        SearchType st = null ;
    st = booleanPrimary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(TRUTH_VALUE);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType booleanTest_AG() throws ParseException {
        SearchType st = null ;
    // foreshortened. adql does not support <TRUTH_VALUE> et al !!!
            st = booleanPrimary();
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType likePredicate() throws ParseException {
        SearchType st = null ;
        Token t = null ;
        AtomType p = null ;
    match();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(LIKE);
    pattern();
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public void mantissa() throws ParseException {
    exactNumericLiteral();
  }

  final public void caseExpression() throws ParseException {
    jj_consume_token(292);
  }

  final public void castSpecification() throws ParseException {
    jj_consume_token(293);
  }

  final public ScalarExpressionType characterFactor() throws ParseException {
        ScalarExpressionType seType = null ;
    // <character_primary> [ <collate_clause> ]
    
            // Foreshortened
            seType = characterPrimary();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType characterPrimary() throws ParseException {
        ScalarExpressionType seType = null ;
    //   <value_expression_primary>
        // | <string_value_function>
    
            // Foreshortened
            seType = commonPrimary();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public AtomType characterStringLiteral_AG() throws ParseException {
        AtomType atomType = null ;
    //  [ <introducer><character_set_specification> ]
    //  <quote> [ <character_representation>... ] <quote>
    //  [ { <separator>... <quote> [ <character_representation>... ] <quote> }... ]	
    
    //	( t=<UnicodeStringLiteral> | t=<ASCIIStringLiteral> )
            atomType = ASCIIStringLiteral_AG();
                {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

  final public AtomType ASCIIStringLiteral_AG() throws ParseException {
        AtomType at = null ;
        ArrayList list = null ;
        Token t1 = null ;
    label_2:
    while (true) {
      t1 = jj_consume_token(ASCII_STRING_LITERAL);
                                if( t1 != null ) {
                                        if( list == null )
                                                list = new ArrayList() ;
                                        list.add( t1.image.substring( 1, t1.image.length()-1 ) ) ;
                                        t1 = null ;
                                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASCII_STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
    }
                if( list.size() > 0 ) {
                        StringBuffer buffer = new StringBuffer();
                        ListIterator it = list.listIterator() ;
                        while( it.hasNext() ) {
                                buffer.append( (String)it.next() ) ;
                        }
                        at = AtomType.Factory.newInstance() ;
                        StringType st = StringType.Factory.newInstance() ;
                        st.setValue( buffer.toString() ) ;
                        at.setLiteral( st ) ;
                }
                {if (true) return at ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType characterValueExpression() throws ParseException {
        ScalarExpressionType seType = null ;
    //   <concatenation>
        // | <character_factor>
    
            // Foreshortened
            seType = characterFactor();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public void collateClause() throws ParseException {
    jj_consume_token(COLLATE);
    qualifiedName();
  }

  final public String columnName() throws ParseException {
        String name = null ;
    name = identifier();
          {if (true) return name ;}
    throw new Error("Missing return statement in function");
  }

  final public void columnNameList() throws ParseException {
    columnName();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      columnName();
    }
  }

  final public ColumnReferenceType columnReference() throws ParseException {
        ColumnReferenceType crType = null ;
        String q = null ;
        String n = null ;
    if (jj_2_2(2)) {
      q = qualifier();
      jj_consume_token(DOT);
    } else {
      ;
    }
    n = columnName();
                if( n != null ) {
                        crType = ColumnReferenceType.Factory.newInstance() ;
                        crType.setName( n ) ;
                        if( q != null ) {
                                crType.setTable( q ) ;
                        }
                }
                {if (true) return crType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType commonPrimary() throws ParseException {
        ScalarExpressionType seType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case DOLLAR:
    case UNSIGNED_INTEGER:
    case ASCII_STRING_LITERAL:
      // Foreshortened 
                      seType = unsignedValueSpecification();
      break;
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
      seType = columnReference();
      break;
    case MAX:
    case MIN:
    case SUM:
    case AVG:
    case COUNT:
      seType = setFunctionSpecification();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      seType = value_expression_A();
      jj_consume_token(RPAREN);
                        if( seType != null ) {
                                ClosedExprType ceType = ClosedExprType.Factory.newInstance() ;
                                ceType.setArg( seType ) ;
                                seType = ceType ;
                        }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public ComparisonType comparisonOperator() throws ParseException {
        ComparisonType c = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS_OPERATOR:
      t = jj_consume_token(EQUALS_OPERATOR);
      break;
    case NOT_EQUALS_OPERATOR:
      t = jj_consume_token(NOT_EQUALS_OPERATOR);
      break;
    case LESS_THAN_OPERATOR:
      t = jj_consume_token(LESS_THAN_OPERATOR);
      break;
    case GREATER_THEN_OPERATOR:
      t = jj_consume_token(GREATER_THEN_OPERATOR);
      break;
    case LESS_THAN_OR_EQUALS_OPERATOR:
      t = jj_consume_token(LESS_THAN_OR_EQUALS_OPERATOR);
      break;
    case GREATER_THAN_OR_EQUALS_OPERATOR:
      t = jj_consume_token(GREATER_THAN_OR_EQUALS_OPERATOR);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        c = ComparisonType.Factory.newInstance() ;
                        c.set( ComparisonType.Enum.forString( t.image.toUpperCase() ) ) ;
                }
                {if (true) return c ;}
    throw new Error("Missing return statement in function");
  }

  final public ComparisonPredType comparison_predicate_A() throws ParseException {
        ComparisonPredType cpType = null ;
        ScalarExpressionType seType1 = null ;
        ScalarExpressionType seType2 = null ;
        ScalarExpressionType[] args = null ;
        ComparisonType compType = null ;
    seType1 = value_expression_A();
    compType = comparisonOperator();
    seType2 = value_expression_A();
                if( seType2 != null ) {
                        cpType = ComparisonPredType.Factory.newInstance() ;
                        args = new ScalarExpressionType[2] ;
                        args[0] = seType1 ;
                        args[1] = seType2 ;
                        cpType.setArgArray( args ) ;
                        cpType.xsetComparison( compType ) ;

                }
                {if (true) return cpType ;}
    throw new Error("Missing return statement in function");
  }

  final public String correlationName() throws ParseException {
        String name = null ;
    name = identifier();
          {if (true) return name ;}
    throw new Error("Missing return statement in function");
  }

  final public void dateTimeFactor() throws ParseException {
    dateTimePrimary();
    if (jj_2_3(2)) {
      timeZone();
    } else {
      ;
    }
  }

  final public void dateTimePrimary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case MAX:
    case MIN:
    case SUM:
    case AVG:
    case COUNT:
    case LPAREN:
    case DOLLAR:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
    case UNSIGNED_INTEGER:
    case ASCII_STRING_LITERAL:
      commonPrimary();
      break;
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
      dateTimeValueFunction();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void dateTimeTerm() throws ParseException {
    dateTimeFactor();
  }

  final public void dateTimeValueExpression() throws ParseException {
    if (jj_2_5(3)) {
      dateTimeTerm();
      label_4:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        dateTimeValueExpression();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case MAX:
      case MIN:
      case SUM:
      case AVG:
      case COUNT:
      case LPAREN:
      case PLUS:
      case MINUS:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case ASCII_STRING_LITERAL:
        intervalValueExpression();
        jj_consume_token(PLUS);
        dateTimeTerm();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void dateTimeValueFunction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CURRENT_DATE:
      jj_consume_token(CURRENT_DATE);
      break;
    case CURRENT_TIME:
      jj_consume_token(CURRENT_TIME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        timePrecision();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    case CURRENT_TIMESTAMP:
      jj_consume_token(CURRENT_TIMESTAMP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        timeStampPrecision();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void derivedColumnList() throws ParseException {
    columnNameList();
  }

  final public void derivedTable() throws ParseException {
    tableSubQuery();
  }

  final public void endField() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NON_SECOND_DATETIME_FIELD:
      jj_consume_token(NON_SECOND_DATETIME_FIELD);
      break;
    case SECOND:
      jj_consume_token(SECOND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        intervalFractionalSecondsPrecision();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void escapeCharacter() throws ParseException {
    characterValueExpression();
  }

  final public AtomType exactNumericLiteral() throws ParseException {
        AtomType atomType = null ;
        Token t1 = null ;
        Token t2 = null ;
    if (jj_2_6(3)) {
      t1 = jj_consume_token(UNSIGNED_INTEGER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNSIGNED_INTEGER:
          t2 = jj_consume_token(UNSIGNED_INTEGER);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        t2 = jj_consume_token(UNSIGNED_INTEGER);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if( t1 != null || t2 != null ) {
                        atomType = AtomType.Factory.newInstance() ;
                }
                if( t1 != null && t2 == null ) {
                        IntegerType intType = IntegerType.Factory.newInstance() ;
                        intType.setValue( new Long( t1.image ).longValue() ) ;
                        atomType.setLiteral( intType ) ;
                }
                else if( t1 != null && t2 != null ) {
                        RealType realType = RealType.Factory.newInstance() ;
                        realType.setValue( new Double( t1.image + '.' + t2.image ).doubleValue() ) ;
                        atomType.setLiteral( realType ) ;
                }
                else if( t2 != null ) {
                        RealType realType = RealType.Factory.newInstance() ;
                        realType.setValue( new Double( '.' + t2.image ).doubleValue() ) ;
                        atomType.setLiteral( realType ) ;
                }
                {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType existsPredicate() throws ParseException {
        SearchType st = null ;
    jj_consume_token(EXISTS);
    st = tableSubQuery();
                if( st != null ) {
                }

                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public void explicitTable() throws ParseException {
    jj_consume_token(TABLE);
    tableName();
  }

  final public ScalarExpressionType factor() throws ParseException {
        ScalarExpressionType retType = null ;
        ScalarExpressionType seType = null ;
        UnaryExprType ueType = null ;
    ueType = factor_Unary();
    seType = numericPrimary();
           if( ueType != null ) {
                  ueType.setArg( seType ) ;
                  retType = ueType ;
           }
           else {
                  retType = seType ;
           }
           {if (true) return retType ;}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExprType factor_Unary() throws ParseException {
        UnaryExprType ueType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
           if( t != null ) {
                        ueType = UnaryExprType.Factory.newInstance() ;
                        ueType.setOper( UnaryOperatorType.Enum.forString( t.image ) ) ;
           }
           {if (true) return ueType ;}
    throw new Error("Missing return statement in function");
  }

  final public FromType from_clause_S() throws ParseException {
        FromType fromType = null ;
        FromTableType ftType = null ;
        ArrayList list = new ArrayList() ;
    jj_consume_token(FROM);
    ftType = tableReference();
                                                 list.add( ftType ) ;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      ftType = tableReference();
                                                    list.add( ftType ) ;
    }
                if( list.size() > 0 ) {
                   fromType = FromType.Factory.newInstance() ;
                   FromTableType[] tableRefArray = new FromTableType[ list.size() ] ;
                   fromType.setTableArray( (FromTableType[])list.toArray(tableRefArray) ) ;
                }
                {if (true) return fromType ;}
    throw new Error("Missing return statement in function");
  }

  final public AtomType generalLiteral() throws ParseException {
        AtomType atomType = null ;
    //	 <character_string_literal>
    //   | <national_character_string_literal>
    //   | <bit_string_literal>
    //   | <hex_string_literal>
    //   | <datetime_literal>
    //   | <interval_literal>
    
            atomType = characterStringLiteral_AG();
          {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

  final public AggregateFunctionType generalSetFunction() throws ParseException {
        AggregateFunctionType afType = null ;
        ScalarExpressionType seType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
      t = jj_consume_token(AVG);
      break;
    case MAX:
      t = jj_consume_token(MAX);
      break;
    case MIN:
      t = jj_consume_token(MIN);
      break;
    case SUM:
      t = jj_consume_token(SUM);
      break;
    case COUNT:
      t = jj_consume_token(COUNT);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    seType = value_expression_A();
    jj_consume_token(RPAREN);
                if( t != null ) {
                        afType = AggregateFunctionType.Factory.newInstance() ;
                        afType.setName( AggregateFunctionNameType.Enum.forString( t.image.toUpperCase() ) ) ;
                        SelectionItemType[] argArray = new SelectionItemType[1] ;
                        argArray[0] = seType ;
                        afType.setArgArray( argArray ) ;
                }
                {if (true) return afType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType generalValueSpecification() throws ParseException {
        ScalarExpressionType seType = null ;
    // Foreshortened
            seType = variableSpecification();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public GroupByType group_by_clause_S() throws ParseException {
        GroupByType gbType = null ;
        ArrayList crList = null ;
    jj_consume_token(GROUPBY);
    crList = groupingColumnReferenceList();
                if(     crList != null ) {
                        gbType = GroupByType.Factory.newInstance() ;
                        ColumnReferenceType[] colRefArray = new ColumnReferenceType[ crList.size() ] ;
                        gbType.setColumnArray( (ColumnReferenceType[])crList.toArray(colRefArray) ) ;
                }
                {if (true) return gbType ;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList groupingColumnReferenceList() throws ParseException {
        ArrayList list = null ;
        ColumnReferenceType cr = null ;
    cr = groupingColumnReference_AG();
                        if( list == null )
                                list = new ArrayList() ;
                        list.add( cr ) ;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      cr = groupingColumnReference_AG();
                                                            list.add( cr ) ;
    }
          {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnReferenceType groupingColumnReference_AG() throws ParseException {
        ColumnReferenceType cr = null ;
    //  Should be...
    //	columnReference() [ collateClause() ]	
            cr = columnReference();
          {if (true) return cr ;}
    throw new Error("Missing return statement in function");
  }

  final public HavingType having_clause_S() throws ParseException {
        HavingType hType = null ;
        SearchType sType = null ;
        Token t = null ;
    t = jj_consume_token(HAVING);
    sType = searchCondition();
                if( t != null ) {
                        hType = HavingType.Factory.newInstance() ;
                        if( sType != null )
                                hType.setCondition( sType ) ;
                }
                {if (true) return hType ;}
    throw new Error("Missing return statement in function");
  }

  final public String identifier() throws ParseException {
  String retValue ;
    // Foreshortened
            retValue = actual_identifier_S();
          {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

  final public void inPredicate() throws ParseException {
    if (jj_2_7(3)) {
      rowValueConstructor();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(IN);
      tableSubQuery();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        inValueList();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void intervalFactor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    intervalPrimary();
  }

  final public void intervalFractionalSecondsPrecision() throws ParseException {
    jj_consume_token(UNSIGNED_INTEGER);
  }

  final public void intervalLeadingFieldPrecision() throws ParseException {
    jj_consume_token(UNSIGNED_INTEGER);
  }

  final public void intervalPrimary() throws ParseException {
    commonPrimary();
    if (jj_2_8(2)) {
      intervalQualifier();
    } else {
      ;
    }
  }

  final public void intervalQualifier() throws ParseException {
    if (jj_2_9(3)) {
      startField();
      jj_consume_token(TO);
      endField();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SECOND:
      case NON_SECOND_DATETIME_FIELD:
        singleDateTimeField();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void intervalTerm() throws ParseException {
    if (jj_2_10(3)) {
      intervalFactor();
    } else if (jj_2_11(3)) {
      factor();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      intervalTerm();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case MAX:
      case MIN:
      case SUM:
      case AVG:
      case COUNT:
      case LPAREN:
      case PLUS:
      case MINUS:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case ASCII_STRING_LITERAL:
        term();
        jj_consume_token(STAR);
        intervalFactor();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void intervalValueExpression() throws ParseException {
    if (jj_2_13(3)) {
      intervalTerm();
      label_7:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        intervalTerm();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        dateTimeValueExpression();
        jj_consume_token(MINUS);
        dateTimeTerm();
        jj_consume_token(RPAREN);
        intervalQualifier();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void inValueList() throws ParseException {
    value_expression_A();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      value_expression_A();
    }
  }

  final public void joinSpecification() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
      jj_consume_token(ON);
      searchCondition();
      break;
    case USING:
      jj_consume_token(USING);
      jj_consume_token(LPAREN);
      columnNameList();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ComparisonPredType joinSpecification_AG() throws ParseException {
        ComparisonPredType cpType = null ;
    jj_consume_token(ON);
    cpType = comparison_predicate_A();
      {if (true) return cpType ;}
    throw new Error("Missing return statement in function");
  }

  final public JoinTableType joinedTable() throws ParseException {
        JoinTableType jtType = null ;
        Token t = null ;
    if (jj_2_14(3)) {
      jtType = crossJoin();
    } else if (jj_2_15(3)) {
      jtType = qualifiedJoin();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        t = jj_consume_token(LPAREN);
        jtType = joinedTable();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return jtType ;}
    throw new Error("Missing return statement in function");
  }

  final public JointTableQualifierType joinType() throws ParseException {
        JointTableQualifierType jType = null ;
        Token t1 = null ;
        Token t2 = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INNER:
      // refactored
                      t1 = jj_consume_token(INNER);
      break;
    case FULL:
    case LEFT:
    case RIGHT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        t1 = jj_consume_token(LEFT);
        break;
      case RIGHT:
        t1 = jj_consume_token(RIGHT);
        break;
      case FULL:
        t1 = jj_consume_token(FULL);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTER:
        t2 = jj_consume_token(OUTER);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if( t1 != null ) {
                jType = JointTableQualifierType.Factory.newInstance() ;
                 switch ( t1.kind ) {
                        case AdqlStoXConstants.INNER :
                                jType.set( JointTableQualifierType.INNER );
                                break;
                        case AdqlStoXConstants.LEFT :
                                jType.set( JointTableQualifierType.LEFT_OUTER );
                                break;
                        case AdqlStoXConstants.RIGHT :
                                jType.set( JointTableQualifierType.RIGHT_OUTER );
                                break;
                        case AdqlStoXConstants.FULL :
                                jType.set( JointTableQualifierType.FULL_OUTER );
                                break;
//      			case AdqlStoXConstants.UNION :
//      				jType.set( JointTableQualifierType.??? );
//      				break;
                }
        }
        {if (true) return jType ;}
    throw new Error("Missing return statement in function");
  }

  final public void match() throws ParseException {
    characterValueExpression();
  }

  final public void matchPredicate() throws ParseException {
    rowValueConstructor();
    jj_consume_token(MATCH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIQUE:
      jj_consume_token(UNIQUE);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FULL:
    case PARTIAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARTIAL:
        jj_consume_token(PARTIAL);
        break;
      case FULL:
        jj_consume_token(FULL);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    tableSubQuery();
  }

  final public MathFunctionType mathFunctions() throws ParseException {
        MathFunctionType mfType = null ;
        ScalarExpressionType arg1 = null ;
        Token t = null ;
        Token t2 = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CEILING:
      t = jj_consume_token(CEILING);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case DEGREES:
      t = jj_consume_token(DEGREES);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case EXP:
      t = jj_consume_token(EXP);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case FLOOR:
      t = jj_consume_token(FLOOR);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case LOG:
      t = jj_consume_token(LOG);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case PI:
      t = jj_consume_token(PI);
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      break;
    case POWER:
      t = jj_consume_token(POWER);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(COMMA);
      t2 = jj_consume_token(UNSIGNED_INTEGER);
      jj_consume_token(RPAREN);
      break;
    case RADIANS:
      t = jj_consume_token(RADIANS);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case SQRT:
      t = jj_consume_token(SQRT);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case LOG10:
      t = jj_consume_token(LOG10);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case RAND:
      t = jj_consume_token(RAND);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case MAX:
      case MIN:
      case SUM:
      case AVG:
      case COUNT:
      case LPAREN:
      case PLUS:
      case MINUS:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case ASCII_STRING_LITERAL:
        arg1 = numericValueExpression();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    case ROUND:
      t = jj_consume_token(ROUND);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case TRUNCATE:
      t = jj_consume_token(TRUNCATE);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           if( t != null ) {
                  mfType = MathFunctionType.Factory.newInstance() ;
                  mfType.setName( MathFunctionNameType.Enum.forString( t.image.toUpperCase() ) ) ;
                  if( arg1 != null ) {
                         SelectionItemType[] argArray ;
                         if( t.kind != AdqlStoXConstants.POWER ) {
                        argArray = new SelectionItemType[1] ;
                        argArray[0] = arg1 ;
                         }
                         else {
                                argArray = new SelectionItemType[2] ;
                                argArray[0] = arg1 ;
                                AtomType atomType = AtomType.Factory.newInstance() ;
                                IntegerType intType = IntegerType.Factory.newInstance() ;
                                intType.setValue( new Long( t2.image ).longValue() ) ;
                                atomType.setLiteral( intType ) ;
                                argArray[1] = atomType ;
                         }
                     mfType.setArgArray( argArray ) ;
                  }
           }
           {if (true) return mfType ;}
    throw new Error("Missing return statement in function");
  }

  final public void nullPredicate() throws ParseException {
    rowValueConstructor();
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
  }

  final public ScalarExpressionType numericPrimary() throws ParseException {
        ScalarExpressionType seType = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CEILING:
    case DEGREES:
    case EXP:
    case FLOOR:
    case LOG:
    case PI:
    case POWER:
    case RADIANS:
    case SQRT:
    case LOG10:
    case RAND:
    case ROUND:
    case TRUNCATE:
    case SIN:
    case COS:
    case TAN:
    case COT:
    case ASIN:
    case ACOS:
    case ATAN:
    case ATAN2:
      seType = numericValueFunction();
      break;
    case DOT:
    case MAX:
    case MIN:
    case SUM:
    case AVG:
    case COUNT:
    case LPAREN:
    case DOLLAR:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
    case UNSIGNED_INTEGER:
    case ASCII_STRING_LITERAL:
      seType = commonPrimary();
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType numericValueExpression() throws ParseException {
        ScalarExpressionType seType = null ;
        ScalarExpressionType[] exprPairs = null ;
    // refactored
            // term() ( LOOKAHEAD(2) ( <PLUS> | <MINUS> ) numericValueExpression() )*
            seType = term();
    exprPairs = numericValueExpression_List();
                if( exprPairs == null ) {
                   {if (true) return seType ;}
                }
                else {
                   ScalarExpressionType[] args = new ScalarExpressionType[2] ;
                   args[0] = seType ;
                   args[1] = exprPairs[1] ;
                   BinaryExprType beType = (BinaryExprType)exprPairs[0] ;
                   beType.setArgArray( args ) ;
                   {if (true) return beType ;}
                }
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType[] numericValueExpression_List() throws ParseException {
        ArrayList list = null ;
        ScalarExpressionType[] exprPairs1 = null ;
        ScalarExpressionType[] exprPairs2 = null ;
        ScalarExpressionType[] retExprPairs = null ;
        Token t = null ;
    label_9:
    while (true) {
      if (jj_2_16(3)) {
        ;
      } else {
        break label_9;
      }
      exprPairs1 = numericValueExpression_Singleton();
            if( list == null )
                   list = new ArrayList() ;
                list.add( exprPairs1 ) ;
    }
                if( list != null ) {
                        ListIterator iterator = list.listIterator() ;
                        retExprPairs = exprPairs1 = (ScalarExpressionType[])iterator.next() ;
                        ScalarExpressionType[] args = new ScalarExpressionType[2] ;
                        BinaryExprType beType = null ;
                        while( iterator.hasNext() ) {
                                exprPairs2 = (ScalarExpressionType[])iterator.next() ;
                                args[0] = exprPairs1[1] ;
                                args[1] = exprPairs2[1] ;
                                beType = (BinaryExprType)exprPairs2[0] ;
                                beType.setArgArray( args ) ;
                                exprPairs1 = exprPairs2 ;
                        }
                }
                {if (true) return retExprPairs ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType[] numericValueExpression_Singleton() throws ParseException {
        ScalarExpressionType[] retPairs = null ;
        BinaryExprType beType = null ;
        ScalarExpressionType seType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    seType = numericValueExpression();
                if( t != null ) {
                        retPairs = new ScalarExpressionType[2] ;
                        beType = BinaryExprType.Factory.newInstance() ;
                        beType.setOper( BinaryOperatorType.Enum.forString( t.image ) ) ;
                        retPairs[0] = beType ;
                        retPairs[1] = seType ;
                }
                {if (true) return retPairs ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType numericValueFunction() throws ParseException {
        ScalarExpressionType seType = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIN:
    case COS:
    case TAN:
    case COT:
    case ASIN:
    case ACOS:
    case ATAN:
    case ATAN2:
      // JBL ADQL adaptation
                      seType = trigFunctions();
      break;
    case CEILING:
    case DEGREES:
    case EXP:
    case FLOOR:
    case LOG:
    case PI:
    case POWER:
    case RADIANS:
    case SQRT:
    case LOG10:
    case RAND:
    case ROUND:
    case TRUNCATE:
      seType = mathFunctions();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public OrderExpressionType order_by_clause_A() throws ParseException {
        OrderExpressionType oeType = null ;
        OrderType orderType = null ;
        OrderType[] orderArray = null ;
        ArrayList orderList = null ;
    jj_consume_token(ORDERBY);
    orderType = orderBySingleton();
    orderList = orderByList();
                if( orderType != null ) {
                        oeType = OrderExpressionType.Factory.newInstance() ;
                        if( orderList != null ) {
                                orderList.add( 0, orderType ) ;
                                orderArray = new OrderType[ orderList.size() ] ;
                                orderArray = (OrderType[])orderList.toArray( orderArray ) ;
                        }
                        else {
                                orderArray = new OrderType[1] ;
                                orderArray[0] = orderType ;
                        }
                        oeType.setItemArray( orderArray ) ;
                }
                {if (true) return oeType ;}
    throw new Error("Missing return statement in function");
  }

  final public OrderType orderBySingleton() throws ParseException {
        OrderType orderType = null ;
        ScalarExpressionType se = null ;
        Token t = null ;
        OrderOptionType optionType = null ;
    se = value_expression_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
      t = jj_consume_token(ASC);
      break;
    case DESC:
      t = jj_consume_token(DESC);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( se!=null && t!= null ) {
                        optionType = OrderOptionType.Factory.newInstance() ;
                        optionType.setDirection( OrderDirectionType.Enum.forString( t.image.toUpperCase() ) ) ;
                        orderType = OrderType.Factory.newInstance() ;
                        orderType.setExpression( se ) ;
                        orderType.setOrder( optionType ) ;
                }
                {if (true) return orderType ;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList orderByList() throws ParseException {
        ArrayList list = null ;
        OrderType orderType = null ;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      orderType = orderBySingleton();
                        if( orderType != null ) {
                                if( list == null ) {
                                        list = new ArrayList() ;
                                }
                                list.add( orderType ) ;
                        }
    }
          {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public void overlapsPredicate() throws ParseException {
    rowValueConstructor();
    jj_consume_token(OVERLAPS);
    rowValueConstructor();
  }

  final public void pattern() throws ParseException {
    characterValueExpression();
  }

  final public SearchType predicate_A() throws ParseException {
        SearchType searchType = null ;
    if (jj_2_17(4)) {
      searchType = comparison_predicate_A();
    } else if (jj_2_18(3)) {
      searchType = between_predicate_A();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return searchType ;}
    throw new Error("Missing return statement in function");
  }

  final public JoinTableType qualifiedJoin() throws ParseException {
        JoinTableType jtType = null ;
        FromTableType fType1 = null ;
        FromTableType fType2 = null ;
        JointTableQualifierType jtqType = null ;
        ComparisonPredType cpType = null ;
    fType1 = tableReferenceBarJoinedTable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL:
      jj_consume_token(NATURAL);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    jtqType = joinType();
    jj_consume_token(JOIN);
    fType2 = tableReference();
    if (jj_2_19(3)) {
      cpType = joinSpecification_AG();
    } else {
      ;
    }
           if( fType2 != null ) {
              jtType = JoinTableType.Factory.newInstance() ;
              FromTableType[] fttArray = new FromTableType[2] ;
              fttArray[0] = fType1 ;
              fttArray[1] = fType2 ;
              ArrayOfFromTableType tableArray = ArrayOfFromTableType.Factory.newInstance() ;
              tableArray.setFromTableTypeArray( fttArray ) ;
              jtType.setTables( tableArray ) ;
              jtType.xsetQualifier( jtqType ) ;
              if( cpType != null ) {
                        jtType.setCondition( cpType ) ;
              }
           }
           {if (true) return jtType ;}
    throw new Error("Missing return statement in function");
  }

  final public String qualifiedName() throws ParseException {
        String retValue ;
    retValue = identifier();
          {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

  final public String qualifier() throws ParseException {
        String retValue ;
    // Foreshortened
            retValue = tableName();
          {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

  final public SelectType query_specification_A() throws ParseException {
        SelectType st = null ;
        ArrayList tableList = null ;
        SelectionListType listType = null ;
        SelectionLimitType limitType = null ;
        SelectionOptionType optionType = null ;
        Token t = null ;
    //S:
            // SELECT [ <set_quantifier> ] <select_list> <table_expression>
            //
                    t = jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case DISTINCT:
      optionType = set_quantifier_S();
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOP:
      limitType = set_limit_A();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    listType = select_list_S();
    tableList = table_expression_A();
                if( t != null ) {
                        st = SelectType.Factory.newInstance() ;
                        if( optionType != null ) {
                                st.setAllow( optionType ) ;
                        }
                        if( limitType != null ) {
                                st.setRestrict( limitType ) ;
                        }
                        if( listType != null ) {
                                st.setSelectionList( listType ) ;
                        }
                        ListIterator iterator = tableList.listIterator() ;
                        while( iterator.hasNext() ) {
                                Object obj = iterator.next() ;
                                if( obj instanceof FromType ) {
                                        st.setFrom( (FromType)obj ) ;
                                }
                                else if( obj instanceof WhereType ) {
                                        st.setWhere( (WhereType)obj ) ;
                                }
                                else if( obj instanceof GroupByType ) {
                                        st.setGroupBy( (GroupByType)obj ) ;
                                }
                                else if( obj instanceof HavingType ) {
                                        st.setHaving( (HavingType)obj ) ;
                                }
                                else if( obj instanceof OrderExpressionType ) {
                                        st.setOrderBy( (OrderExpressionType)obj ) ;
                                }
                        }
                }
                {if (true) return st  ;}
    throw new Error("Missing return statement in function");
  }

  final public void rowSubquery() throws ParseException {
    subQuery();
  }

  final public ScalarExpressionType rowValueConstructor() throws ParseException {
        ScalarExpressionType seType = null ;
    if (jj_2_20(3)) {
      rowValueConstructorElement();
    } else if (jj_2_21(2)) {
      jj_consume_token(LPAREN);
      rowValueConstructorList();
      jj_consume_token(RPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        rowSubquery();
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
           {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType rowValueConstructorElement() throws ParseException {
        ScalarExpressionType seType = null ;
    // <value_expression> | <null_specification> | <default_specification>
            // foreshortened...
            seType = value_expression_A();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public void rowValueConstructorList() throws ParseException {
    rowValueConstructorElement();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      rowValueConstructorElement();
    }
  }

  final public void scalarSubquery() throws ParseException {
    subQuery();
  }

  final public SearchType searchCondition() throws ParseException {
        SearchType st=null ;
        SearchType[] stPairs = null ;
    st = booleanTerm();
    stPairs = booleanTerm_List();
                if( stPairs == null ) {
                   {if (true) return st ;}
                }
                else {
                   SearchType[] conditionArray = new SearchType[2] ;
                   conditionArray[0] = st ;
                   conditionArray[1] = stPairs[1] ;
                   UnionSearchType usType = (UnionSearchType)stPairs[0] ;
                   usType.setConditionArray( conditionArray ) ;
                   {if (true) return usType ;}
                }
    throw new Error("Missing return statement in function");
  }

  final public SearchType[] booleanTerm_List() throws ParseException {
        ArrayList list = null ;
        SearchType[] stPairs1 = null ;
        SearchType[] stPairs2 = null ;
        SearchType[] retPairs = null ;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_12;
      }
      stPairs1 = booleanTerm_Singleton();
            if( list == null )
                   list = new ArrayList() ;
                list.add( stPairs1 ) ;
    }
                if( list != null ) {
                        ListIterator iterator = list.listIterator() ;
                        retPairs = stPairs1 = (SearchType[])iterator.next() ;
                        SearchType[] conditions = new SearchType[2] ;
                        UnionSearchType usType = null ;
                        while( iterator.hasNext() ) {
                                stPairs2 = (SearchType[])iterator.next() ;
                                conditions[0] = stPairs1[1] ;
                                conditions[1] = stPairs2[1] ;
                                usType = (UnionSearchType)stPairs2[0] ;
                                usType.setConditionArray( conditions ) ;
                                stPairs1 = stPairs2 ;
                        }
                }
                {if (true) return retPairs ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType[] booleanTerm_Singleton() throws ParseException {
        SearchType[] retPairs = null ;
        UnionSearchType us = null ;
        SearchType st = null ;
    jj_consume_token(OR);
    st = booleanTerm();
                if( st != null ) {
                        retPairs = new SearchType[2] ;
                        us = UnionSearchType.Factory.newInstance() ;
                        retPairs[0] = us ;
                        retPairs[1] = st ;
                }
                {if (true) return retPairs ;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionListType select_list_S() throws ParseException {
        ArrayList itemList = new ArrayList() ;
        SelectionListType slType = SelectionListType.Factory.newInstance() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      allSelectionItem(itemList);
      break;
    case DOT:
    case CEILING:
    case DEGREES:
    case EXP:
    case FLOOR:
    case LOG:
    case PI:
    case POWER:
    case RADIANS:
    case SQRT:
    case LOG10:
    case RAND:
    case ROUND:
    case TRUNCATE:
    case SIN:
    case COS:
    case TAN:
    case COT:
    case ASIN:
    case ACOS:
    case ATAN:
    case ATAN2:
    case MAX:
    case MIN:
    case SUM:
    case AVG:
    case COUNT:
    case LPAREN:
    case PLUS:
    case MINUS:
    case DOLLAR:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
    case UNSIGNED_INTEGER:
    case ASCII_STRING_LITERAL:
      select_sublist_A(itemList);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        select_sublist_A(itemList);
      }
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( itemList.size() > 0 ) {
                        SelectionItemType[] itemArray = new SelectionItemType[ itemList.size() ] ;
                        slType.setItemArray( (SelectionItemType[])itemList.toArray(itemArray) ) ;
                }
                {if (true) return slType ;}
    throw new Error("Missing return statement in function");
  }

  final public void allSelectionItem(ArrayList itemList) throws ParseException {
    jj_consume_token(STAR);
          itemList.add( AllSelectionItemType.Factory.newInstance() ) ;
  }

  final public void select_sublist_A(ArrayList itemList) throws ParseException {
        SelectionItemType siType = null ;
    //S:
            //   <derived_column>
        // | <qualifier> <period> <asterisk>
    
            siType = derived_column_S();
          itemList.add( siType ) ;
  }

  final public SelectionItemType derived_column_S() throws ParseException {
        ScalarExpressionType seType = null ;
        String aliasName = null ;
    seType = value_expression_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      aliasName = columnName();
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
                if( aliasName != null ) {
                        AliasSelectionItemType asiType = AliasSelectionItemType.Factory.newInstance() ;
                        asiType.setAs( aliasName ) ;
                        asiType.setExpression( seType ) ;
                        {if (true) return asiType ;}
                }
                {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public AggregateFunctionType setFunctionSpecification() throws ParseException {
        AggregateFunctionType afType = null ;
        Token t = null ;
    if (jj_2_22(3)) {
      t = jj_consume_token(COUNT);
      jj_consume_token(LPAREN);
      jj_consume_token(STAR);
      jj_consume_token(RPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX:
      case MIN:
      case SUM:
      case AVG:
      case COUNT:
        afType = generalSetFunction();
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if( t != null ) {
                        afType = AggregateFunctionType.Factory.newInstance() ;
                        afType.setName( AggregateFunctionNameType.COUNT ) ;
                        SelectionItemType[] argArray = new SelectionItemType[1] ;
                        AtomType atomType = AtomType.Factory.newInstance() ;
                        StringType star = StringType.Factory.newInstance() ;
                        star.setValue( "*" ) ;
                        atomType.setLiteral( star ) ;
                        argArray[0] = atomType ;
                        afType.setArgArray( argArray ) ;
                }
                {if (true) return afType ;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionLimitType set_limit_A() throws ParseException {
        SelectionLimitType sl = null ;
        Token t1 = null ;
        Token t2 = null ;
    jj_consume_token(TOP);
    jj_consume_token(LPAREN);
    t1 = jj_consume_token(UNSIGNED_INTEGER);
    t2 = jj_consume_token(RPAREN);
                if( t2 != null ) {
                        sl = SelectionLimitType.Factory.newInstance() ;
                        sl.setTop( ( new Integer( t1.image )).intValue() ) ;
                }
        {if (true) return sl ;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionOptionType set_quantifier_S() throws ParseException {
        SelectionOptionType selectionOption = null ;
        Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      //S:
              // DISTINCT | ALL
              //
              t = jj_consume_token(DISTINCT);
      break;
    case ALL:
      t = jj_consume_token(ALL);
                if( t != null ) {
                        selectionOption = SelectionOptionType.Factory.newInstance() ;
                        if( t.kind == AdqlStoXConstants.ALL ) {
                                selectionOption.setOption( AllOrDistinctType.ALL ) ;
                        }
                        else {
                                selectionOption.setOption( AllOrDistinctType.DISTINCT ) ;
                        }
                }
                {if (true) return selectionOption ;}
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void singleDateTimeField() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NON_SECOND_DATETIME_FIELD:
      jj_consume_token(NON_SECOND_DATETIME_FIELD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        intervalLeadingFieldPrecision();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      break;
    case SECOND:
      jj_consume_token(SECOND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        intervalLeadingFieldPrecision();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          intervalFractionalSecondsPrecision();
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void startField() throws ParseException {
    jj_consume_token(NON_SECOND_DATETIME_FIELD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      intervalLeadingFieldPrecision();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
  }

  final public ScalarExpressionType stringValueExpression() throws ParseException {
        ScalarExpressionType seType = null ;
    // <character_value_expression>
        // | <bit_value_expression>
    
            // Foreshortened
            seType = characterValueExpression();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType subQuery() throws ParseException {
        SearchType st = null ;
    jj_consume_token(LPAREN);
    queryExpression();
    jj_consume_token(RPAREN);
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType subQuery_AG() throws ParseException {
        SearchType st = null ;
    jj_consume_token(LPAREN);
    queryExpression();
    jj_consume_token(RPAREN);
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public void quantifiedComparisonPredicate() throws ParseException {
    rowValueConstructor();
    comparisonOperator();
    quantifier();
    tableSubQuery();
  }

  final public void quantifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
      break;
    case ANY:
    case SOME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOME:
        jj_consume_token(SOME);
        break;
      case ANY:
        jj_consume_token(ANY);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void queryExpression() throws ParseException {
    if (jj_2_23(3)) {
      nonJoinQueryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        joinedTable();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void queryPrimary() throws ParseException {
    if (jj_2_24(3)) {
      nonJoinQueryPrimary();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        joinedTable();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void queryTerm() throws ParseException {
    if (jj_2_25(2)) {
      nonJoinQueryTerm();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        joinedTable();
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void correspondingSpec() throws ParseException {
    jj_consume_token(CORRESPONDING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      jj_consume_token(LPAREN);
      correspondingColumnList();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
  }

  final public void correspondingColumnList() throws ParseException {
    columnNameList();
  }

  final public JoinTableType crossJoin() throws ParseException {
        JoinTableType jtType = null ;
        FromTableType fType1 = null ;
        FromTableType fType2 = null ;
    fType1 = tableReferenceBarJoinedTable();
    jj_consume_token(CROSS_JOIN);
    fType2 = tableReference();
           if( fType2 != null ) {
              jtType = JoinTableType.Factory.newInstance() ;
              jtType.setQualifier( JointTableQualifierType.CROSS ) ;
              FromTableType[] fttArray = new FromTableType[2] ;
              fttArray[0] = fType1 ;
              fttArray[1] = fType2 ;
              ArrayOfFromTableType tableArray = ArrayOfFromTableType.Factory.newInstance() ;
              tableArray.setFromTableTypeArray( fttArray ) ;
              jtType.setTables( tableArray ) ;
           }
           {if (true) return jtType ;}
    throw new Error("Missing return statement in function");
  }

  final public void nonJoinQueryExpression() throws ParseException {
    if (jj_2_26(4)) {
      queryTerm();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXCEPT:
        case UNION:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNION:
          jj_consume_token(UNION);
          break;
        case EXCEPT:
          jj_consume_token(EXCEPT);
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
          break;
        default:
          jj_la1[80] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CORRESPONDING:
          correspondingSpec();
          break;
        default:
          jj_la1[81] = jj_gen;
          ;
        }
        queryTerm();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
      case TABLE:
      case VALUES:
      case LPAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        nonJoinQueryTerm();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void nonJoinQueryTerm() throws ParseException {
    if (jj_2_27(3)) {
      nonJoinQueryPrimary();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
      case TABLE:
      case VALUES:
      case LPAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        queryPrimary();
        jj_consume_token(INTERSECT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
          break;
        default:
          jj_la1[83] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CORRESPONDING:
          correspondingSpec();
          break;
        default:
          jj_la1[84] = jj_gen;
          ;
        }
        queryPrimary();
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void nonJoinQueryPrimary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case TABLE:
    case VALUES:
      simpleTable();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      nonJoinQueryExpression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simpleTable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      query_specification_A();
      break;
    case VALUES:
      tableValueConstructor();
      break;
    case TABLE:
      explicitTable();
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ArrayList table_expression_A() throws ParseException {
        ArrayList list = new ArrayList() ;
        Object obj = null ;
    obj = from_clause_S();
                                      if( obj!=null ) list.add(obj) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      obj = where_clause_S();
                                         if( obj!=null ) list.add(obj) ;
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUPBY:
      obj = group_by_clause_S();
                                            if( obj!=null ) list.add(obj) ;
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HAVING:
      obj = having_clause_S();
                                          if( obj!=null ) list.add(obj) ;
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDERBY:
      obj = order_by_clause_A();
                                            if( obj!=null ) list.add(obj) ;
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
          {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public String tableName() throws ParseException {
        String retValue = null ;
    // Forshortened
            retValue = qualifiedName();
          {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

  final public FromTableType tableReference() throws ParseException {
        FromTableType ftType = null ;
        String tName = null ;
        String cName = null ;
    if (jj_2_28(4)) {
      ftType = joinedTable();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        tName = tableName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
        case REGULAR_IDENTIFIER:
        case DELIMITED_IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            break;
          default:
            jj_la1[92] = jj_gen;
            ;
          }
          cName = correlationName();
          break;
        default:
          jj_la1[93] = jj_gen;
          ;
        }
                        if( tName != null ) {
                                TableType tableType = TableType.Factory.newInstance() ;
                                tableType.setName( tName ) ;
                                if( cName != null )
                                        tableType.setAlias( cName ) ;
                                ftType = tableType ;
                        }
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return ftType ;}
    throw new Error("Missing return statement in function");
  }

// Adaptation of tableReference()
  final public FromTableType tableReferenceBarJoinedTable() throws ParseException {
        FromTableType ftType = null ;
        String tName = null ;
        String cName = null ;
    tName = tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
      cName = correlationName();
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
                if( tName != null ) {
                        TableType tableType = TableType.Factory.newInstance() ;
                        tableType.setName( tName ) ;
                        if( cName != null )
                                tableType.setAlias( cName ) ;
                        ftType = tableType ;
                }
          {if (true) return ftType ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType tableSubQuery() throws ParseException {
        SearchType st = null ;
    st = subQuery();
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public void tableValueConstructor() throws ParseException {
    jj_consume_token(VALUES);
    tableValueConstructorList();
  }

  final public void tableValueConstructorList() throws ParseException {
    rowValueConstructor();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      rowValueConstructor();
    }
  }

//ScalarExpressionType term() : //{//	ScalarExpressionType seType = null ;//}//{//	// refactored//	// factor() ( LOOKAHEAD(2) (<STAR> | <DIVIDE> ) term() )*//	factor() term_List() //	{ return seType ; }//}
  final public ScalarExpressionType term() throws ParseException {
        ScalarExpressionType seType = null ;
        ScalarExpressionType[] exprPairs = null ;
    // refactored
            // factor() ( LOOKAHEAD(2) (<STAR> | <DIVIDE> ) term() )*
            seType = factor();
    exprPairs = term_List();
                if( exprPairs == null ) {
                   {if (true) return seType ;}
                }
                else {
                   ScalarExpressionType[] args = new ScalarExpressionType[2] ;
                   args[0] = seType ;
                   args[1] = exprPairs[1] ;
                   BinaryExprType beType = (BinaryExprType)exprPairs[0] ;
                   beType.setArgArray( args ) ;
                   {if (true) return beType ;}
                }
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType[] term_List() throws ParseException {
        ArrayList list = null ;
        ScalarExpressionType[] exprPairs1 = null ;
        ScalarExpressionType[] exprPairs2 = null ;
        ScalarExpressionType[] retExprPairs = null ;
    label_16:
    while (true) {
      if (jj_2_29(3)) {
        ;
      } else {
        break label_16;
      }
      exprPairs1 = term_Singleton();
            if( list == null )
                   list = new ArrayList() ;
                list.add( exprPairs1 ) ;
    }
                if( list != null ) {
                        ListIterator iterator = list.listIterator() ;
                        retExprPairs = exprPairs1 = (ScalarExpressionType[])iterator.next() ;
                        ScalarExpressionType[] args = new ScalarExpressionType[2] ;
                        BinaryExprType beType = null ;
                        while( iterator.hasNext() ) {
                                exprPairs2 = (ScalarExpressionType[])iterator.next() ;
                                args[0] = exprPairs1[1] ;
                                args[1] = exprPairs2[1] ;
                                beType = (BinaryExprType)exprPairs2[0] ;
                                beType.setArgArray( args ) ;
                                exprPairs1 = exprPairs2 ;
                        }
                }
                {if (true) return retExprPairs ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType[] term_Singleton() throws ParseException {
        ScalarExpressionType[] retPairs = null ;
        BinaryExprType beType = null ;
        ScalarExpressionType seType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      t = jj_consume_token(STAR);
      break;
    case DIVIDE:
      t = jj_consume_token(DIVIDE);
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    seType = term();
                if( t != null ) {
                        retPairs = new ScalarExpressionType[2] ;
                        beType = BinaryExprType.Factory.newInstance() ;
                        beType.setOper( BinaryOperatorType.Enum.forString( t.image ) ) ;
                        retPairs[0] = beType ;
                        retPairs[1] = seType ;
                }
                {if (true) return retPairs ;}
    throw new Error("Missing return statement in function");
  }

  final public void timeFractionalSecondsPrecision() throws ParseException {
    jj_consume_token(UNSIGNED_INTEGER);
  }

  final public void timePrecision() throws ParseException {
    timeFractionalSecondsPrecision();
  }

  final public void timeStampPrecision() throws ParseException {
    timeFractionalSecondsPrecision();
  }

  final public void timeZone() throws ParseException {
    jj_consume_token(AT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOCAL:
      jj_consume_token(LOCAL);
      break;
    case TIME_ZONE:
      jj_consume_token(TIME_ZONE);
      intervalValueExpression();
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public TrigonometricFunctionType trigFunctions() throws ParseException {
        TrigonometricFunctionType tfType = null ;
        ScalarExpressionType arg1 = null ;
        ScalarExpressionType arg2 = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACOS:
      t = jj_consume_token(ACOS);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case ASIN:
      t = jj_consume_token(ASIN);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case ATAN:
      t = jj_consume_token(ATAN);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case ATAN2:
      t = jj_consume_token(ATAN2);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(COMMA);
      arg2 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case COS:
      t = jj_consume_token(COS);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case COT:
      t = jj_consume_token(COT);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case SIN:
      t = jj_consume_token(SIN);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    case TAN:
      t = jj_consume_token(TAN);
      jj_consume_token(LPAREN);
      arg1 = numericValueExpression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        ScalarExpressionType[] argArray = null ;
                        tfType = TrigonometricFunctionType.Factory.newInstance() ;
                        tfType.setName( TrigonometricFunctionNameType.Enum.forString( t.image.toUpperCase() ) ) ;
                        if( arg2 != null ) {
                                argArray = new ScalarExpressionType[2] ;
                                argArray[0] = arg1 ;
                                argArray[1] = arg2 ;
                        }
                        else {
                                argArray = new ScalarExpressionType[1] ;
                                argArray[0] = arg1 ;
                        }
                        tfType.setArgArray( argArray ) ;
                }
                {if (true) return tfType ;}
    throw new Error("Missing return statement in function");
  }

  final public void uniquePredicate() throws ParseException {
    jj_consume_token(UNIQUE);
    tableSubQuery();
  }

  final public AtomType unsignedLiteral() throws ParseException {
        AtomType atomType = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case UNSIGNED_INTEGER:
      // foreshortened
                  atomType = unsignedNumericLiteral();
      break;
    case ASCII_STRING_LITERAL:
      atomType = generalLiteral();
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

  final public AtomType unsignedNumericLiteral() throws ParseException {
        AtomType atomType = null ;
    // JL. Note the adql/x schema does not possess an approximateNumericLiteral
    //		LOOKAHEAD(3)
    //		exactNumericLiteral()
    //	    | 
    //	    approximateNumericLiteral()
    
                    atomType = exactNumericLiteral();
      {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType unsignedValueSpecification() throws ParseException {
        ScalarExpressionType seType = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case UNSIGNED_INTEGER:
    case ASCII_STRING_LITERAL:
      seType = unsignedLiteral();
      break;
    case DOLLAR:
      generalValueSpecification();
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType value_expression_A() throws ParseException {
        ScalarExpressionType retValue = null ;
    if (jj_2_30(3)) {
      retValue = numericValueExpression();
    } else if (jj_2_31(3)) {
      retValue = stringValueExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType variableSpecification() throws ParseException {
        ScalarExpressionType seType = null ;
    jj_consume_token(DOLLAR);
    jj_consume_token(LBRACE);
    jj_consume_token(REGULAR_IDENTIFIER);
    jj_consume_token(RBRACE);
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public WhereType where_clause_S() throws ParseException {
 /*@bgen(jjtree) Where */
        ASTWhere jjtn000 = new ASTWhere(this, JJTWHERE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);WhereType whereType = null ;
        SearchType s = null ;
        Token t = null ;
    try {
      //S:
              // WHERE <search_condition>
              t = jj_consume_token(WHERE);
      s = searchCondition();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if( t != null )
                        whereType = WhereType.Factory.newInstance() ;
                if( s != null ) {
                        whereType.setCondition( s ) ;
                }
                jjtn000.searchType = s ;
                {if (true) return whereType ;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_179()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(VALUES)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    return false;
  }

  final private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(ASCII_STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(263)) {
    jj_scanpos = xsp;
    if (jj_scan_token(264)) return true;
    }
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    Token xsp;
    if (jj_3R_189()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(253)) {
    jj_scanpos = xsp;
    if (jj_scan_token(250)) {
    jj_scanpos = xsp;
    if (jj_scan_token(251)) {
    jj_scanpos = xsp;
    if (jj_scan_token(252)) {
    jj_scanpos = xsp;
    if (jj_scan_token(254)) return true;
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_188()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_74()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(263)) {
    jj_scanpos = xsp;
    if (jj_scan_token(264)) return true;
    }
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(206)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(INTERSECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(REGULAR_IDENTIFIER)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_59()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(TRUNCATE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(ROUND)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(RAND)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(LOG10)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(280)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(RADIANS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(POWER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(PI)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(CROSS_JOIN)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(FLOOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(EXP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(DEGREES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(CEILING)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(SECOND)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(CORRESPONDING)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(280)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(280)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(284)) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(263)) {
    jj_scanpos = xsp;
    if (jj_scan_token(264)) return true;
    }
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(CURRENT_TIMESTAMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(TAN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(CURRENT_TIME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(280)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(SIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(143)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(COT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(COS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(ATAN2)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(ATAN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(ASIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(ACOS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_62()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(TIME_ZONE)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(NON_SECOND_DATETIME_FIELD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(NON_SECOND_DATETIME_FIELD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(SECOND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(ON)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(263)) {
    jj_scanpos = xsp;
    if (jj_scan_token(264)) return true;
    }
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_65()) return true;
    if (jj_3R_66()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(265)) {
    jj_scanpos = xsp;
    if (jj_scan_token(262)) return true;
    }
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(TOP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(265)) {
    jj_scanpos = xsp;
    if (jj_scan_token(262)) return true;
    }
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_74()) return true;
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(275)) {
    jj_scanpos = xsp;
    if (jj_scan_token(276)) return true;
    }
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STAR)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_82()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(263)) {
    jj_scanpos = xsp;
    if (jj_scan_token(264)) return true;
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) jj_scanpos = xsp;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_179()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_29()) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  public AdqlStoXTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[103];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
      jj_la1_6();
      jj_la1_7();
      jj_la1_8();
      jj_la1_9();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x1f80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x10000,0x14000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80038000,0x0,0x80000000,0x0,0x0,0x38000,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x8000000,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x40100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x8000,0x0,0x0,0x80000,0x80000,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x800000,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x0,0x400001,0x0,0x0,0x400001,0x400001,0x400001,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,};
   }
   private static void jj_la1_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7c000000,0x0,0x7c000000,0x0,0x7fffdff0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7c000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fffdff0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fffdff0,0x3dff0,0x0,0x7fffdff0,0x0,0x3ffdff0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fffdff0,0x0,0x0,0x7c000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fc0000,0x0,0x0,};
   }
   private static void jj_la1_8() {
      jj_la1_8 = new int[] {0x2,0x180000,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x11a0004,0x0,0x11a0004,0x180,0x11a0184,0x4,0x4,0x0,0x4,0x10040000,0x1000000,0x0,0x0,0x180,0x180,0x1,0x0,0x1,0x0,0x4,0x180,0x180,0x10040000,0x240,0x11a0184,0x180,0x4,0x1,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x11a0184,0x0,0x0,0x11a0004,0x180,0x0,0x0,0x1,0x0,0x0,0x0,0x4,0x1,0x0,0x1,0x11a0384,0x0,0x180000,0x0,0x0,0x4,0x1,0x4,0x10040000,0x4,0x0,0x0,0x180004,0x180004,0x180004,0x0,0x0,0x0,0x0,0x0,0x180004,0x0,0x0,0x180004,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x180000,0x0,0x180000,0x1,0x240,0x0,0x0,0x1000000,0x1020000,};
   }
   private static void jj_la1_9() {
      jj_la1_9 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[31];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public AdqlStoX(java.io.InputStream stream) {
     this(stream, null);
  }
  public AdqlStoX(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AdqlStoXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AdqlStoX(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AdqlStoXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AdqlStoX(AdqlStoXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AdqlStoXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[294];
    for (int i = 0; i < 294; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 103; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 294; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 31; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
