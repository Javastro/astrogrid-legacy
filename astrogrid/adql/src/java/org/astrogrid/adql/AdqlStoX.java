/* Generated By: AdqlStoX.jjt,v 1.32.2.3 2006/11/27 16&JJTree&JavaCC: Do not edit this line. AdqlStoX.java */
package org.astrogrid.adql ;

import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;
import java.util.* ;
import org.apache.xmlbeans.XmlOptions ;
import org.astrogrid.adql.v1_0.beans.* ;
import org.astrogrid.stc.region.v1_10.beans.* ;
import org.astrogrid.stc.coords.v1_10.beans.* ;
import org.w3c.dom.Node ;
import org.apache.xmlbeans.SchemaProperty;
import org.apache.xmlbeans.SchemaType;
import org.apache.xmlbeans.SimpleValue;
import org.apache.xmlbeans.XmlAnySimpleType;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.XmlString;
import org.apache.xmlbeans.XmlCursor;

public class AdqlStoX/*@bgen(jjtree)*/implements AdqlStoXTreeConstants, AdqlStoXConstants {/*@bgen(jjtree)*/
  protected JJTAdqlStoXState jjtree = new JJTAdqlStoXState();
        private static Log log = LogFactory.getLog( AdqlStoX.class ) ;

        private static final boolean TRACE_ENABLED = true ;
        private static final boolean DEBUG_ENABLED = true ;
        private static StringBuffer logIndent ;
        static {
                if( DEBUG_ENABLED | TRACE_ENABLED ) {
                        logIndent = new StringBuffer() ;
                }
        }

        private static final int CHANGE_SIGN = -1 ;
        private static final int DONT_CHANGE_SIGN = 1 ;
        public static final String TABLE_TYPE = "tableType" ;
        public static final String COLUMN_REFERENCE_TYPE = "columnReferenceType" ;
        public static final String ALIAS_SELECTION_ITEM_TYPE = "aliasSelectionItemType" ;
        public static final String DUPLICATE_TABLE_ALIAS =
             "Query contains at least one duplicated table alias: " ;
        public static final String TABLE_ALIAS_CLASH =
             "Query contains alias with same name as a table: " ;
        public static final String NONEXISTENT_ALIAS =
             "Query contains a column reference with unknown table or table alias: " ;
        public static final String DUPLICATE_EXPRESSION_ALIAS =
             "Query contains at least one duplicated expression alias: " ;
        public static final String UNRECOGNIZED_FRAGMENT =
             "Unrecognized fragment of ADQL." ;
        private SelectDocument selectDoc ;
        private String lastMessage ;

        public SelectDocument exec() throws ParseException {
                try {
                        return select_document_A() ;
                }
                catch ( ParseException pex ) {
                        lastMessage = pex.getLocalizedMessage() ;
                        if( logIndent.length() > 0 )
                        logIndent.delete( 0, logIndent.length()-1 ) ;
                    throw pex ;
                }
        }

        public SelectDocument compileToXmlBeans() throws ParseException {
                return exec() ;
        }

        public String compileToXmlText( boolean prettyPrint ) throws ParseException {
                XmlOptions opts = new XmlOptions();
                opts.setSaveOuter() ;
                if( prettyPrint ) {
                   opts.setSaveAggressiveNamespaces() ;
                   opts.setSavePrettyPrint() ;
                   opts.setSavePrettyPrintIndent(4) ;
                }
                return exec().xmlText(opts) ;
        }

        public String compileToXmlText() throws ParseException {
                return compileToXmlText( true ) ;
        }

        public Node compileToXmlDom() throws ParseException {
                return exec().getDomNode() ;
        }

        public String compileFragmentToXmlText( String path, boolean prettyPrint ) throws ParseException {
                XmlOptions opts = new XmlOptions();
            opts.setSaveOuter() ;
                if( prettyPrint ) {
                   opts.setSaveAggressiveNamespaces() ;
                   opts.setSavePrettyPrint() ;
                   opts.setSavePrettyPrintIndent(4) ;
                }
                return execFragment( path ).xmlText(opts) ;
        }

        public String compileFragmentToXmlText( String path ) throws ParseException {
                return compileFragmentToXmlText( path, true ) ;
        }

        public XmlObject compileFragmentToXmlBean( String path ) throws ParseException {
                return execFragment( path ) ;
        }

        public XmlObject execFragment( String path ) throws ParseException {
                String[] segs = path.toUpperCase().split( "/" ) ;
                String child = segs[ segs.length-1 ] ;
                String parent = null ;
                if( segs.length > 2 ) {
                        parent = segs[ segs.length-2 ] ;
                }
                XmlObject xmlObject = null ;
                if( child.equals( "SELECT" ) ) {
                        xmlObject = query_specification_fragment() ;
                }
                else if( child.equals( "ALLOW" ) ) {
                        xmlObject = set_quantifier_fragment() ;
                }
                else if( child.equals( "RESTRICT" ) ) {
                        xmlObject = set_limit_fragment() ;
                }
                else if( child.equals( "SELECTIONLIST" ) ) {
                        xmlObject = select_list_fragment() ;
                }
                else if( child.equals( "FROM" ) ) {
                        xmlObject = from_clause_fragment() ;
                }
                else if( child.equals( "WHERE" ) ) {
                        xmlObject = where_clause_fragment() ;
                }
                else if( child.equals( "GROUPBY" ) ) {
                        xmlObject = group_by_clause_fragment() ;
                }
                else if( child.equals( "HAVING" ) ) {
                        xmlObject = having_clause_fragment() ;
                }
                else if( child.equals( "ORDERBY" ) ) {
                        xmlObject = order_by_clause_fragment() ;
                }
                else {
                    throw new ParseException( UNRECOGNIZED_FRAGMENT ) ;
                }
                return xmlObject ;
        }

        public String getLongLastMessage() {
                return lastMessage ;
        }

        public String getShortLastMessage() {
                int i = lastMessage.indexOf( '\n' ) ;
                if( i == -1 )
                  return lastMessage ;
                return lastMessage.substring( 0, i ) ;
        }

    /**
     * Crude check of table aliases and column references
     */
        private void checkTableAliases() throws ParseException {
                HashSet tRefs = getTableReferences() ;
        XmlObject element ;
        XmlCursor cursor = selectDoc.newCursor() ;
        cursor.toFirstChild() ; // There has to be a first child!
        do {
           if( cursor.isStart() ) {
              element = cursor.getObject() ;
              if( element.schemaType().getName().getLocalPart().equals( COLUMN_REFERENCE_TYPE ) ) {
                  ColumnReferenceType col = (ColumnReferenceType)element ;
                  if( !tRefs.contains( col.getTable() ) ) {
                         String message = NONEXISTENT_ALIAS + col.getTable() + '.' + col.getName() ;
                         throw new ParseException( message ) ;
                  }
              }
           }
        } while( cursor.toNextToken() != XmlCursor.TokenType.NONE ) ;
        cursor.dispose() ;
        }

        private HashSet getTableReferences() throws ParseException {
                HashSet tables = new HashSet() ;
                HashSet aliases = new HashSet() ;
        TableType tType = null ;
        String alias = null ;
        //
        // Loop through the whole of the query looking for basic table refs....
        XmlCursor cursor = selectDoc.newCursor() ;
        while( !cursor.toNextToken().isNone() ) {
            if( cursor.isStart()
                &&
                ( cursor.getObject().schemaType().getName().getLocalPart().equals( TABLE_TYPE ) )
            ) {
                tType = (TableType)cursor.getObject() ;
                tables.add( tType.getName() ) ;
                alias = tType.getAlias() ;
                if( alias != null ) {
                    if( !aliases.add( alias ) ) {
                            String message = DUPLICATE_TABLE_ALIAS
                                           + tType.getAlias() ;
                            throw new ParseException( message ) ;
                    }
                }
            }
        } // end while
        cursor.dispose();
        //
        // Check for aliases with the same name as a table...
        Iterator it = aliases.iterator() ;
        while( it.hasNext() ) {
                String aName = (String)it.next() ;
                if( tables.contains( aName ) ) {
                        String message = TABLE_ALIAS_CLASH + aName  ;
                throw new ParseException( message ) ;
                }
        }
        tables.addAll( aliases ) ;
        return tables ;
        }

    /**
     * Crude check of expression aliases.
     * In the absence of metadata for columns, the best that can be accomplished
     * is to check for duplicates. 
     */
        private void checkExpressionAliases() throws ParseException {
                HashSet aliases = new HashSet() ;
        AliasSelectionItemType aType = null ;
        String alias = null ;
        //
        // Loop through the whole of the query looking for AliasSelectionItemTypes....
        XmlCursor cursor = selectDoc.newCursor() ;
        while( !cursor.toNextToken().isNone() ) {
            if( cursor.isStart()
                &&
                ( cursor.getObject().schemaType().getName().getLocalPart().equals( ALIAS_SELECTION_ITEM_TYPE ) )
            ) {
                aType = (AliasSelectionItemType)cursor.getObject() ;
                alias = aType.getAs() ;
                if( alias != null ) {
                    if( !aliases.add( alias ) ) {
                            String message = DUPLICATE_EXPRESSION_ALIAS
                                           + alias ;
                            throw new ParseException( message ) ;
                    }
                }
            }
        } // end while
        cursor.dispose();
        }

        private void enterTrace( String entry ) {
                log.debug( logIndent.toString() + "enter: " + entry ) ;
                indentPlus() ;
        }

    private void exitTrace( String entry ) {
        indentMinus() ;
                log.debug( logIndent.toString() + "exit : " + entry ) ;
        }

        private static void indentPlus() {
                logIndent.append( ' ' ) ;
        }

        private static void indentMinus() {
                logIndent.deleteCharAt( logIndent.length()-1 ) ;
        }

  final public SelectDocument select_document_A() throws ParseException {
        SelectType st = null ;
    // There is no equivalent construct in the SQL/92 standard.
            st = query_specification_fragment();
                if( st != null ) {
                        selectDoc = SelectDocument.Factory.newInstance() ;
                        selectDoc.setSelect( st ) ;
                        checkTableAliases() ;
                        checkExpressionAliases() ;
                }
                {if (true) return selectDoc ;}
    throw new Error("Missing return statement in function");
  }

//=================================

/**
 * actual_identifier_S
 *
 * bnf-single <actual_identifier> ::= <regular_identifier> | <delimited_identifier>
 *
 */
  final public String actual_identifier_S() throws ParseException {
        String idntfr = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGULAR_IDENTIFIER:
      t = jj_consume_token(REGULAR_IDENTIFIER);
      break;
    case DELIMITED_IDENTIFIER:
      t = jj_consume_token(DELIMITED_IDENTIFIER);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        idntfr = t.image ;
                        if( idntfr.startsWith( "\"" ) ) {
                                idntfr = idntfr.substring( 1, idntfr.lastIndexOf( "\"" ) ) ;
                        }
                }
          {if (true) return idntfr ;}
    throw new Error("Missing return statement in function");
  }

// JL. The adql/x schema does not have such a beast!
//void approximate_numeric_literal_S() : {}//{//	//S://	// <approximate_numeric_literal> ::= <mantissa> E <exponent>//	// <mantissa> ::= <exact_numeric_literal>//	// <exponent> ::= <signed_integer>//	mantissa_S() // exponent_S()//}////void exponent_S() : {}//{//	// ["e" | "E"] signed_integer_S() //	signed_integer_S() //}
  final public AtomType signed_integer_S() throws ParseException {
    AtomType at = null ;
    Token t1 = null ;
    Token t2 = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
      t1 = jj_consume_token(PLUS_SIGN);
      break;
    case MINUS_SIGN:
      t1 = jj_consume_token(MINUS_SIGN);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t2 = jj_consume_token(UNSIGNED_INTEGER);
           if( t2 != null ) {


           }
           {if (true) return at ;}
    throw new Error("Missing return statement in function");
  }

/**
 * between_predicate_A
 *
 * bnf-start
 * <between_predicate> ::=
 *     <value_expression> [ NOT ] BETWEEN
 *     <value_expression> AND <value_expression>
 * bnf-end
 *
 */
  final public SearchType between_predicate_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "between_predicate_A()" ) ;
        ScalarExpressionType se1 = null ;
        ScalarExpressionType se2 = null ;
        ScalarExpressionType se3 = null ;
        SearchType st = null ;
        Token t = null ;
    se1 = value_expression_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(BETWEEN);
    se2 = value_expression_A();
    jj_consume_token(AND);
    se3 = value_expression_A();
                if( se3!=null ) {
                        ScalarExpressionType[] args = new ScalarExpressionType[3] ;
                        args[0] = se1 ;
                        args[1] = se2 ;
                        args[2] = se3 ;
                        if( t==null ) {
                                BetweenPredType bp = BetweenPredType.Factory.newInstance() ;
                                bp.setArgArray( args ) ;
                                st = bp ;
                        }
                        else {
                                NotBetweenPredType nbp = NotBetweenPredType.Factory.newInstance() ;
                                nbp.setArgArray( args ) ;
                                st = nbp ;
                        }
                }
                if( TRACE_ENABLED ) exitTrace ( "between_predicate_A()" ) ;
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType between_predicate_fragment() throws ParseException {
        SearchType st = null ;
    st = between_predicate_A();
    jj_consume_token(SEMICOLON);
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

/**
 * boolean_primary_S
 *
 * bnf-start
 *  <boolean_primary> ::= 
 *       <predicate> 
 *     | <left_paren> <search_condition> <right_paren>
 * bnf-end
 *
 */
  final public SearchType boolean_primary_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "boolean_primary_S()" ) ;
        SearchType st = null ;
        Token t = null ;
    if (jj_2_1(6)) {
      st = predicate_A();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        st = search_condition_S();
        t = jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if( t != null ) {
                ClosedSearchType cs = ClosedSearchType.Factory.newInstance() ;
                cs.setCondition( st ) ;
                st = cs ;
        }
        if( TRACE_ENABLED ) exitTrace ( "boolean_primary_S()" ) ;
        {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

/**
 * boolean_term_S
 *
 * bnf-start
 *  <boolean_term> ::=
 *      <boolean_factor>
 *    | <boolean_term> AND <boolean_factor>
 * bnf-end
 *
 */
  final public SearchType boolean_term_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "boolean_term_S()" ) ;
        SearchType st1 = null ;
        SearchType st2 = null ;
        SearchType retval = null ;
    //S:
            // <boolean_term> ::=
        //    <boolean_factor>
        //  | <boolean_term> AND <boolean_factor>
    
            // Refactored to
            // boolean_factor_S() ( <AND> boolean_factor_S() )*
            // which I believe is equivalent to the above
            st1 = boolean_factor_S();
    st2 = booleanFactorList();
                if( st2 == null ) {
                   retval = st1 ;
                }
                else {
                   SearchType[] conditionArray = new SearchType[2] ;
                   conditionArray[0] = st1 ;
                   conditionArray[1] = st2 ;
                   IntersectionSearchType andType = IntersectionSearchType.Factory.newInstance() ;
                   andType.setConditionArray( conditionArray ) ;
                   retval = andType ;
                }
                if( TRACE_ENABLED ) exitTrace ( "boolean_term_S()" ) ;
                {if (true) return retval ;}
    throw new Error("Missing return statement in function");
  }

/**
 * boolean_factor_S
 *
 * bnf-single <boolean_factor> ::= [ NOT ] <boolean_test>
 *
 */
  final public SearchType boolean_factor_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "boolean_factor_S()" ) ;
        SearchType sc = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    sc = boolean_test_A();
                if( t != null ) {
                        InverseSearchType is = InverseSearchType.Factory.newInstance() ;
                        is.setCondition( sc ) ;
                        sc = is ;
                }
                if( TRACE_ENABLED ) exitTrace ( "boolean_factor_S()" ) ;
                {if (true) return sc ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType booleanFactorList() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "booleanFactorList()" ) ;
        Stack stack = null ;
        SearchType st = null ;
    label_1:
    while (true) {
      if (jj_2_2(3)) {
        ;
      } else {
        break label_1;
      }
      st = booleanFactorSingleton();
                  if( stack == null )
                     stack = new Stack() ;
                  stack.push( st ) ;
    }
                if( stack != null ) {
                        IntersectionSearchType heldAnd = null ;
                        SearchType[] conditions = new SearchType[2] ;
                        while( stack.empty() == false ) {
                                st = (SearchType)stack.pop() ;
                                if( heldAnd != null ) {
                                        conditions[0] = st ;
                                        conditions[1] = heldAnd ;
                                        IntersectionSearchType andType = IntersectionSearchType.Factory.newInstance() ;
                                        andType.setConditionArray( conditions ) ;
                                        heldAnd = andType ;
                                }
                                else if( stack.empty() == false  ) {
                                        conditions[0] = (SearchType)stack.pop() ;
                                        conditions[1] = st ;
                                        IntersectionSearchType andType = IntersectionSearchType.Factory.newInstance() ;
                                        andType.setConditionArray( conditions ) ;
                                        heldAnd = andType ;
                                }
                        }
                        if( heldAnd != null )
                                st = heldAnd ;
                }
                if( TRACE_ENABLED ) exitTrace ( "booleanFactorList()" ) ;
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType booleanFactorSingleton() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "booleanFactorSingleton()" ) ;
        SearchType st = null ;
    jj_consume_token(AND);
    st = boolean_factor_S();
                if( TRACE_ENABLED ) exitTrace ( "booleanFactorSingleton()" ) ;
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

/**
 * boolean_test_A
 *
 * bnf-start
 *  <boolean_test> ::= <boolean_primary>
 *  !! There is no accommodation for <truth_value> in ADQL
 * bnf-end
 *
 */
  final public SearchType boolean_test_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "boolean_test_A()" ) ;
        SearchType st = null ;
    //S:
            // <boolean_test> ::=
        //  <boolean_primary> [ IS [ NOT ] <truth_value> ]
    
            // NB: There is no accommodation of truth value in ADQL
            st = boolean_primary_S();
                if( TRACE_ENABLED ) exitTrace ( "boolean_test_A()" ) ;
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

/**
 * like_predicate_A
 *
 * bnf-start
 *  <like_predicate> ::=
 *      <match_value> [ NOT ] LIKE <pattern>
 *  !! There is no accommodation for <escape_character> in ADQL
 * bnf-end
 *
 */
  final public SearchType like_predicate_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "like_predicate_A()" ) ;
        SearchType st = null ;
        Token t = null ;
        AtomType p = null ;
        ScalarExpressionType se = null ;
    se = match_value_S();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(LIKE);
    p = pattern_A();
                if( p != null ) {

                        if( t == null ) {
                                LikePredType lpt = LikePredType.Factory.newInstance() ;
                                lpt.setArg( se ) ;
                                lpt.setPattern( p ) ;
                                st = lpt ;
                        }
                        else {
                                NotLikePredType nlpt = NotLikePredType.Factory.newInstance() ;
                                nlpt.setArg( se ) ;
                                nlpt.setPattern( p ) ;
                                st = nlpt ;
                        }

                }
                if( TRACE_ENABLED ) exitTrace ( "like_predicate_A()" ) ;
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType like_predicate_fragment() throws ParseException {
        SearchType st = null ;
    st = like_predicate_A();
    jj_consume_token(SEMICOLON);
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public void caseExpression_S() throws ParseException {
    jj_consume_token(334);
  }

  final public void castSpecification_S() throws ParseException {
    jj_consume_token(335);
  }

/**
 * character_factor_A
 *
 * bnf-start
 *  <character_factor> ::= <character_primary>
 *  !! There is no accommodation for <collate_clause> in ADQL
 * bnf-end
 *
 */
  final public ScalarExpressionType character_factor_A() throws ParseException {
        ScalarExpressionType seType = null ;
    //S:
            // <character_factor> ::= <character_primary> [ <collate_clause> ]
    
            seType = character_primary_A();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * character_primary_A
 *
 * bnf-start
 *  <character_primary> ::= <value_expression_primary>
 *  !! There is no accommodation for <string_value_function> in ADQL
 * bnf-end
 *
 */
  final public ScalarExpressionType character_primary_A() throws ParseException {
        ScalarExpressionType seType = null ;
    //S:
            //  <character_primary> ::=
        //    <value_expression_primary> | <string_value_function>
    
            seType = value_expression_primary_A();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * character_string_literal_A
 *
 * bnf-start
 *  <character_string_literal> ::=
 *     <quote> [ <character_representation>... ] <quote>
 *     [ { <quote> [ <character_representation>... ] <quote> }... ]
 *  !! There is no accommodation for <character_set_specification> in ADQL
 * bnf-end
 *
 * bnf-start
 *  <character_representation> ::=
 *  !! At present this is one ASCII character (but not a single quote).
 * bnf-end
 *
 */
  final public AtomType character_string_literal_A() throws ParseException {
        AtomType atomType = null ;
    //S:
            // <character_string_literal> ::=
        //    [ <introducer><character_set_specification> ]
        //    <quote> [ <character_representation>... ] <quote>
        //    [ { <separator>... <quote> [ <character_representation>... ] <quote> }... ]
    
            atomType = ASCIIStringLiteral();
                {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

  final public AtomType ASCIIStringLiteral() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "ASCIIStringLiteral()" ) ;
        AtomType at = null ;
        ArrayList list = null ;
        Token t1 = null ;
    label_2:
    while (true) {
      t1 = jj_consume_token(ASCII_STRING_LITERAL);
                                if( t1 != null ) {
                                        if( list == null )
                                                list = new ArrayList() ;
                                        list.add( t1.image.substring( 1, t1.image.length()-1 ) ) ;
                                        t1 = null ;
                                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASCII_STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
    }
                if( list.size() > 0 ) {
                        StringBuffer buffer = new StringBuffer();
                        ListIterator it = list.listIterator() ;
                        while( it.hasNext() ) {
                                buffer.append( (String)it.next() ) ;
                        }
                        at = AtomType.Factory.newInstance() ;
                        StringType st = StringType.Factory.newInstance() ;
                        st.setValue( buffer.toString() ) ;
                        at.setLiteral( st ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "ASCIIStringLiteral()" ) ;
                {if (true) return at ;}
    throw new Error("Missing return statement in function");
  }

/**
 * character_value_expression_A
 *
 * bnf-start
 *  <character_value_expression> ::= <character_factor>
 *  !! There is no accommodation for <concatenation> in ADQL
 * bnf-end
 *
 */
  final public ScalarExpressionType character_value_expression_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "character_value_expression_A()" ) ;
        ScalarExpressionType seType = null ;
    //S:
            // <character_value_expression> ::=
        //     <concatenation>
        //   | <character_factor>
    
            seType = character_factor_A();
                if( TRACE_ENABLED ) exitTrace ( "character_value_expression_A()" ) ;
                {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public void collate_clause_S() throws ParseException {
    jj_consume_token(COLLATE);
    qualified_name_A();
  }

/**
 * column_name_S
 *
 * bnf-single <column_name> ::= <identifier>
 *
 */
  final public String column_name_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "column_name_S()" ) ;
        String name = null ;
    //S:
            // <column_name> ::= <identifier>
    
            name = identifier_A();
                if( TRACE_ENABLED ) exitTrace ( "column_name_S()" ) ;
                {if (true) return name ;}
    throw new Error("Missing return statement in function");
  }

/**
 * column_name_list_S
 *
 * bnf-single <column_name_list> ::= <column_name> [ { <comma> <column_name> }... ]
 *
 */
  final public void column_name_list_S() throws ParseException {
    column_name_S();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      column_name_S();
    }
  }

/**
 * column_reference_A
 *
 * bnf-start
 *  <column_reference> ::= 
 *      <qualifier> <period> <column_name>         
 *  !! ADQL enforces qualified column names.
 * bnf-end
 *
 */
  final public ColumnReferenceType column_reference_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "column_reference_A()" ) ;
        ColumnReferenceType crType = null ;
        String q = null ;
        String n = null ;
    //S:
            // <column_reference> ::= [ <qualifier> <period> ] <column_name>
    
              q = qualifier_A();
    jj_consume_token(PERIOD);
    n = column_name_S();
                 if( n != null ) {
                        crType = ColumnReferenceType.Factory.newInstance() ;
                        crType.setName( n ) ;
                        if( q != null ) {
                                crType.setTable( q ) ;
                        }
//		    retVal = crType ; 	
                 }
                if( TRACE_ENABLED ) exitTrace ( "column_reference_A()" ) ;
                {if (true) return crType ;}
    throw new Error("Missing return statement in function");
  }

///**// * aliased_expression_reference_A// *// *-bnf-start// *- <aliased_expression_reference> ::= <identifier>// *- !! ADQL specific. // *- NB. This is simply a reference to an aliased expression.// *-bnf-end// *// *///AliasSelectionItemType aliased_expression_reference_A() ://{//	if( TRACE_ENABLED ) enterTrace ( "aliased_expression_reference_A()" ) ;//	AliasSelectionItemType asiType = null ;//	String name = null ;//}//{//	////	// Note especially that this is simply a reference to an//	// aliased expression defined elsewhere. At this point we//	// only have the name of the alias, not the content, so we//	// can only construct an empty AliasSelectionItemType.//	// Filling in these must wait until the whole query has//	// been assembled and is thought to be syntactically correct!!!//	name=identifier_A()//	{//		if( name != null ) {//		    asiType = AliasSelectionItemType.Factory.newInstance() ;//			asiType.setAs( name ) ;//		}//	    if( TRACE_ENABLED ) exitTrace ( "aliased_expression_reference_A()" ) ;		//	    return asiType ;	//	}//}

/**
 * value_expression_primary_A
 *
 * NB: Referred in some sources as <common_primary>
 *
 * bnf-start
 *  <value_expression_primary> ::=
 *      <unsigned_value_specification>
 *    | <column_reference>
 *    | <set_function_specification>
 *    | <left_paren> <value_expression> <right_paren>
 *  !! There is no accommodation for <scalar_subquery>,
 *     <case_expression> or <cast_specification> in ADQL
 * bnf-end
 *
 */
  final public ScalarExpressionType value_expression_primary_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "value_expression_primary_A()" ) ;
        ScalarExpressionType seType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASCII_STRING_LITERAL:
    case DOLLAR:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      // Foreshortened 
                      seType = unsigned_value_specification_S();
      break;
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
      seType = column_reference_A();
      break;
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
      seType = set_function_specification_S();
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      seType = value_expression_A();
      jj_consume_token(RIGHT_PAREN);
                        if( seType != null ) {
                                ClosedExprType ceType = ClosedExprType.Factory.newInstance() ;
                                ceType.setArg( seType ) ;
                                seType = ceType ;
                        }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( TRACE_ENABLED ) exitTrace ( "value_expression_primary_A()" ) ;
                {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * comp_op_S
 *
 * bnf-start
 *  <comp_op> ::=
 *      <equals_operator>
 *    | <not_equals_operator>
 *    | <less_than_operator>
 *    | <greater_than_operator>
 *    | <less_than_or_equals_operator>
 *    | <greater_than_or_equals_operator>
 * bnf-end
 *
 */
  final public ComparisonType comp_op_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "comp_op_S()" ) ;
        ComparisonType c = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS_OPERATOR:
      t = jj_consume_token(EQUALS_OPERATOR);
      break;
    case NOT_EQUALS_OPERATOR:
      t = jj_consume_token(NOT_EQUALS_OPERATOR);
      break;
    case LESS_THAN_OPERATOR:
      t = jj_consume_token(LESS_THAN_OPERATOR);
      break;
    case GREATER_THEN_OPERATOR:
      t = jj_consume_token(GREATER_THEN_OPERATOR);
      break;
    case LESS_THAN_OR_EQUALS_OPERATOR:
      t = jj_consume_token(LESS_THAN_OR_EQUALS_OPERATOR);
      break;
    case GREATER_THAN_OR_EQUALS_OPERATOR:
      t = jj_consume_token(GREATER_THAN_OR_EQUALS_OPERATOR);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        c = ComparisonType.Factory.newInstance() ;
                        String image = null ;
                        //  
                        // The != comparison is a convenience. It is not a valid enum within
                        // the schema. So we substitute the official value instead...
                        if( t.kind == AdqlStoXConstants.NOT_EQUALS_OPERATOR ) {
                                image = "<>" ;
                        }
                        else {
                                image = t.image.toUpperCase() ;
                        }
                        c.set( ComparisonType.Enum.forString( image ) ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "comp_op_S()" ) ;
                {if (true) return c ;}
    throw new Error("Missing return statement in function");
  }

/**
 * comparison_predicate_A
 *
 * bnf-start
 *  <comparison_predicate> ::=
 *      <value_expression> <comp_op> <value_expression>
 *  !! There is no accommodation for <row_value_constructor> in ADQL
 * bnf-end
 *
 */
  final public ComparisonPredType comparison_predicate_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "comparison_predicate_A()" ) ;
        ComparisonPredType cpType = null ;
        ScalarExpressionType seType1 = null ;
        ScalarExpressionType seType2 = null ;
        ScalarExpressionType[] args = null ;
        ComparisonType compType = null ;
    seType1 = value_expression_A();
    compType = comp_op_S();
    seType2 = value_expression_A();
                try {

                        if( seType2 != null ) {
                                cpType = ComparisonPredType.Factory.newInstance() ;
                                args = new ScalarExpressionType[2] ;
                                args[0] = seType1 ;
                                args[1] = seType2 ;
                                cpType.setArgArray( args ) ;
                                cpType.xsetComparison( compType ) ;

                        }
                        {if (true) return cpType ;}
                }
                finally {
                        if( TRACE_ENABLED ) exitTrace( "comparison_predicate_A()" ) ;
                }
    throw new Error("Missing return statement in function");
  }

  final public ComparisonPredType comparison_predicate_fragment() throws ParseException {
        ComparisonPredType cp = null ;
    cp = comparison_predicate_A();
    jj_consume_token(SEMICOLON);
          {if (true) return cp ;}
    throw new Error("Missing return statement in function");
  }

/**
 * correlation_name_S
 *
 * bnf-single <correlation_name> ::= <identifier>
 *
 */
  final public String correlation_name_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "correlation_name_S()" ) ;
        String name = null ;
    //S:
            // <correlation_name> ::= <identifier>
            name = identifier_A();
                if( TRACE_ENABLED ) exitTrace ( "correlation_name_S()" ) ;
                {if (true) return name ;}
    throw new Error("Missing return statement in function");
  }

  final public void datetime_factor_S() throws ParseException {
    datetime_primary_S();
    if (jj_2_3(2)) {
      time_zone_S();
    } else {
      ;
    }
  }

  final public void datetime_primary_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case ASCII_STRING_LITERAL:
    case DOLLAR:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      value_expression_primary_A();
      break;
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
      datetime_value_function_S();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void datetime_term_S() throws ParseException {
    datetime_factor_S();
  }

  final public void datetime_value_expression_S() throws ParseException {
    if (jj_2_5(3)) {
      datetime_term_S();
      label_4:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          jj_consume_token(PLUS_SIGN);
          break;
        case MINUS_SIGN:
          jj_consume_token(MINUS_SIGN);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        datetime_value_expression_S();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case PLUS_SIGN:
      case MINUS_SIGN:
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case SQUARE:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case ASCII_STRING_LITERAL:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case EXACT_NUMERIC_LITERAL:
        interval_value_expression_S();
        jj_consume_token(PLUS_SIGN);
        datetime_term_S();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void datetime_value_function_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CURRENT_DATE:
      jj_consume_token(CURRENT_DATE);
      break;
    case CURRENT_TIME:
      jj_consume_token(CURRENT_TIME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        time_precision_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    case CURRENT_TIMESTAMP:
      jj_consume_token(CURRENT_TIMESTAMP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        timestamp_precision_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * derived_column_list_S
 *
 * bnf-single <derived_column_list> ::= <column_name_list>
 *
 */
  final public void derived_column_list_S() throws ParseException {
    column_name_list_S();
  }

  final public void derived_table_S() throws ParseException {
    table_subquery_S();
  }

  final public void end_field_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DAY:
    case HOUR:
    case MINUTE:
    case MONTH:
    case YEAR:
      nonsecond_datetime_field_S();
      break;
    case SECOND:
      jj_consume_token(SECOND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        interval_fractional_seconds_precision_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void escape_character_A() throws ParseException {
    character_value_expression_A();
  }

/**
 * exact_numeric_literal_S
 *
 * bnf-start
 *  <exact_numeric_literal> ::=
 *      <unsigned_integer> [ <period> [ <unsigned_integer> ] ]
 *    | <period> <unsigned_integer>
 * bnf-end
 *
 */
  final public AtomType exact_numeric_literal_S(int possibleSignChange) throws ParseException {
        AtomType atomType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXACT_NUMERIC_LITERAL:
      t = jj_consume_token(EXACT_NUMERIC_LITERAL);
      break;
    case UNSIGNED_INTEGER:
      t = jj_consume_token(UNSIGNED_INTEGER);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        atomType = AtomType.Factory.newInstance() ;
                    if( t.image.indexOf( '.' ) == -1 ) {
                        IntegerType intType = IntegerType.Factory.newInstance() ;
                            intType.setValue( new Long( t.image ).longValue() * possibleSignChange ) ;
                            atomType.setLiteral( intType ) ;
                    }
                    else {
                        RealType realType = RealType.Factory.newInstance() ;
                            realType.setValue( new Double( t.image ).doubleValue() * possibleSignChange ) ;
                            atomType.setLiteral( realType ) ;
                    }
                }
                {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType exists_predicate_S() throws ParseException {
        SearchType st = null ;
    jj_consume_token(EXISTS);
    st = table_subquery_S();
                if( st != null ) {
                }

                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public void explicit_table_S() throws ParseException {
    jj_consume_token(TABLE);
    table_name_A();
  }

/**
 * factor_S
 *
 * bnf-single <factor> ::= [ <sign> ] <numeric_primary> 
 *
 */
  final public ScalarExpressionType factor_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "factor_S()" ) ;
        ScalarExpressionType retType = null ;
        ScalarExpressionType seType = null ;
        UnaryExprType ueType = null ;
    ueType = factorUnary();
    seType = numeric_primary_S();
           if( ueType != null ) {
                  ueType.setArg( seType ) ;
                  retType = ueType ;
           }
           else {
                  retType = seType ;
           }
           if( TRACE_ENABLED ) exitTrace ( "factor_S()" ) ;
           {if (true) return retType ;}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExprType factorUnary() throws ParseException {
        UnaryExprType ueType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        t = jj_consume_token(PLUS_SIGN);
        break;
      case MINUS_SIGN:
        t = jj_consume_token(MINUS_SIGN);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
           if( t != null ) {
                        ueType = UnaryExprType.Factory.newInstance() ;
                        ueType.setOper( UnaryOperatorType.Enum.forString( t.image ) ) ;
           }
           {if (true) return ueType ;}
    throw new Error("Missing return statement in function");
  }

  final public FromType from_clause_fragment() throws ParseException {
        FromType ft = null ;
    ft = from_clause_S();
    jj_consume_token(SEMICOLON);
          {if (true) return ft ;}
    throw new Error("Missing return statement in function");
  }

/**
 * from_clause_S
 *
 * bnf-start
 *  <from_clause> ::= FROM <table_reference>
 *     [ { <comma> <table_reference> }... ]
 * bnf-end
 *
 */
  final public FromType from_clause_S() throws ParseException {
    if( TRACE_ENABLED ) enterTrace ( "from_clause_S()" ) ;
        FromType fromType = null ;
        FromTableType ftType = null ;
        ArrayList list = new ArrayList() ;
    jj_consume_token(FROM);
    ftType = table_reference_A();
                                                    list.add( ftType ) ;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      ftType = table_reference_A();
                                                       list.add( ftType ) ;
    }
                if( list.size() > 0 ) {
                   fromType = FromType.Factory.newInstance() ;
                   FromTableType[] tableRefArray = new FromTableType[ list.size() ] ;
                   fromType.setTableArray( (FromTableType[])list.toArray(tableRefArray) ) ;
                }
            if( TRACE_ENABLED ) exitTrace ( "from_clause_S()" ) ;
                {if (true) return fromType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * general_literal_A
 *
 * bnf-start
 *  <general_literal> ::= <character_string_literal>
 *  !! There is no accommodation for <national_character_string_literal>,
 *     <bit_string_literal>, <hex_string_literal>, <datetime_literal>
 *     and <interval_literal> in ADQL
 * bnf-end
 *
 */
  final public AtomType general_literal_A() throws ParseException {
        AtomType atomType = null ;
    //S:
            //  <general_literal> ::=
        //    <character_string_literal>
        //  | <national_character_string_literal>
        //  | <bit_string_literal>
        //  | <hex_string_literal>
        //  | <datetime_literal>
        //  | <interval_literal>
    
            atomType = character_string_literal_A();
          {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * general_set_function_A
 *
 * bnf-start
 *  <general_set_function> ::=
 *     <set_function_type>
 *         <left_paren> <value_expression> <right_paren>
    !! There is no accommodation for <set_quantifier> in ADQL
 * bnf-end
 *
 * bnf-single <set_function_type> ::= AVG | MAX | MIN | SUM | COUNT
 *
 */
  final public AggregateFunctionType general_set_function_A() throws ParseException {
        AggregateFunctionType afType = null ;
        ScalarExpressionType seType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
      t = jj_consume_token(AVG);
      break;
    case MAX:
      t = jj_consume_token(MAX);
      break;
    case MIN:
      t = jj_consume_token(MIN);
      break;
    case SUM:
      t = jj_consume_token(SUM);
      break;
    case COUNT:
      t = jj_consume_token(COUNT);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LEFT_PAREN);
    seType = value_expression_A();
    jj_consume_token(RIGHT_PAREN);
                if( t != null ) {
                        afType = AggregateFunctionType.Factory.newInstance() ;
                        afType.setName( AggregateFunctionNameType.Enum.forString( t.image.toUpperCase() ) ) ;
                        SelectionItemType[] argArray = new SelectionItemType[1] ;
                        argArray[0] = seType ;
                        afType.setArgArray( argArray ) ;
                }
                {if (true) return afType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * general_value_specification_A
 *
 * bnf-start
 *  <general_value_specification> ::= <variable_specification>
 *  !! There is no accommodation for <parameter_specification>, <dynamic_parameter_specification>,
       USER, CURRENT_USER, SESSION_USER, SYSTEM_USER and VALUE
 * bnf-end
 *
 */
  final public ScalarExpressionType general_value_specification_A() throws ParseException {
        ScalarExpressionType seType = null ;
    //S:
            //<general_value_specification> ::=
        //   <parameter_specification>
        // | <dynamic_parameter_specification>
        // | <variable_specification>
        // | USER
        // | CURRENT_USER
        // | SESSION_USER
        // | SYSTEM_USER
        // | VALUE
    
            // Foreshortened
            seType = variable_specification_A();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * group_by_clause_S
 *
 * bnf-start
 *  <group_by_clause> ::= GROUP BY <grouping_column_reference_list>
 * bnf-end
 *
 */
  final public GroupByType group_by_clause_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "group_by_clause_S()" ) ;
        GroupByType gbType = null ;
        ArrayList crList = null ;
    jj_consume_token(GROUPBY);
    crList = grouping_column_reference_list_S();
                if(     crList != null ) {
                        gbType = GroupByType.Factory.newInstance() ;
                        ColumnReferenceType[] colRefArray = new ColumnReferenceType[ crList.size() ] ;
                        gbType.setColumnArray( (ColumnReferenceType[])crList.toArray(colRefArray) ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "group_by_clause_S()" ) ;
                {if (true) return gbType ;}
    throw new Error("Missing return statement in function");
  }

  final public GroupByType group_by_clause_fragment() throws ParseException {
        GroupByType gbt = null ;
    gbt = group_by_clause_S();
    jj_consume_token(SEMICOLON);
          {if (true) return gbt ;}
    throw new Error("Missing return statement in function");
  }

/**
 * grouping_column_reference_list_S
 *
 * bnf-start
 *  <grouping_column_reference_list> ::=
 *      <grouping_column_reference> [ { <comma> <grouping_column_reference> }... ]
 * bnf-end
 *
 */
  final public ArrayList grouping_column_reference_list_S() throws ParseException {
        ArrayList list = null ;
        ColumnReferenceType cr = null ;
    cr = grouping_column_reference_A();
                        if( list == null )
                                list = new ArrayList() ;
                        list.add( cr ) ;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      cr = grouping_column_reference_A();
                                                             list.add( cr ) ;
    }
          {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

/**
 * grouping_column_reference_A
 *
 * bnf-start
 *  <grouping_column_reference> ::= <column_reference> 
 *  !! There is no accommodation for <collate_clause>
 * bnf-end
 *
 */
  final public ColumnReferenceType grouping_column_reference_A() throws ParseException {
        ColumnReferenceType cr = null ;
    //S:
        // <grouping_column_reference> ::=
        //      <column_reference> [ <collate_clause> ]
    
            cr = column_reference_A();
          {if (true) return cr ;}
    throw new Error("Missing return statement in function");
  }

/**
 * having_clause_S
 *
 * bnf-single <having_clause> ::= HAVING <search_condition>	
 *
 */
  final public HavingType having_clause_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "having_clause_S()" ) ;
        HavingType hType = null ;
        SearchType sType = null ;
        Token t = null ;
    t = jj_consume_token(HAVING);
    sType = search_condition_S();
                if( sType != null ) {
                        hType = HavingType.Factory.newInstance() ;
                        hType.setCondition( sType ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "having_clause_S()" ) ;
                {if (true) return hType ;}
    throw new Error("Missing return statement in function");
  }

  final public HavingType having_clause_fragment() throws ParseException {
        HavingType ht = null ;
    ht = having_clause_S();
    jj_consume_token(SEMICOLON);
          {if (true) return ht ;}
    throw new Error("Missing return statement in function");
  }

/**
 * identifier_A
 *
 * bnf-start
 *  <identifier> ::= <actual_identifier>
 *  !! There is no accommodation for <character_set_specification> 
 * bnf-end
 *
 */
  final public String identifier_A() throws ParseException {
  String retValue ;
    //S:
            // <identifier> ::=
        //   [ <introducer><character_set_specification> ] <actual_identifier>
    
            retValue = actual_identifier_S();
          {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

/**
 * in_predicate_A
 *
 * bnf-start
 *  <in_predicate> ::=
 *      <value_expression> [ NOT ] IN <in_predicate_value>
 * bnf-end
 *
 */
  final public SearchType in_predicate_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "in_predicate_A()" ) ;
        Token t1 = null ;
        Token t2 = null ;
        ScalarExpressionType seType = null ;
        InclusionSetType isType = null ;
        SearchType retVal = null ;
    seType = value_expression_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t1 = jj_consume_token(NOT);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(IN);
    isType = in_predicate_value_S();
       if( isType != null ) {
          if( t1 == null ) {
             InclusiveSearchType iSearch = InclusiveSearchType.Factory.newInstance()  ;
             iSearch.setExpression( seType ) ;
             iSearch.setSet( isType ) ;
             retVal = iSearch ;
          }
          else {
                 ExclusiveSearchType xSearch = ExclusiveSearchType.Factory.newInstance()  ;
             xSearch.setExpression( seType ) ;
             xSearch.setSet( isType ) ;
             retVal = xSearch ;
          }
       }
       if( TRACE_ENABLED ) exitTrace ( "in_predicate_A()" ) ;
           {if (true) return retVal ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType in_predicate_fragment() throws ParseException {
        SearchType st = null ;
    st = in_predicate_A();
    jj_consume_token(SEMICOLON);
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

/**
 * in_predicate_value_S
 *
 * bnf-start
 *  <in_predicate_value> ::=
 *     <table_subquery> | <left_paren> <in_value_list> <right_paren>
 * bnf-end
 *
 */
  final public InclusionSetType in_predicate_value_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "in_predicate_value_S()" ) ;
        InclusionSetType isType = null ;
        Token t = null ;
    if (jj_2_6(2)) {
      isType = table_subquery_A();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        isType = in_value_list_A();
        t = jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if( TRACE_ENABLED ) exitTrace ( "in_predicate_value_S()" ) ;
                {if (true) return isType ;}
    throw new Error("Missing return statement in function");
  }

  final public void interval_factor_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        jj_consume_token(PLUS_SIGN);
        break;
      case MINUS_SIGN:
        jj_consume_token(MINUS_SIGN);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    interval_primary_S();
  }

  final public void interval_fractional_seconds_precision_S() throws ParseException {
    jj_consume_token(UNSIGNED_INTEGER);
  }

  final public void interval_leading_field_precision_S() throws ParseException {
    jj_consume_token(UNSIGNED_INTEGER);
  }

  final public void interval_primary_S() throws ParseException {
    value_expression_primary_A();
    if (jj_2_7(2)) {
      interval_qualifier_S();
    } else {
      ;
    }
  }

  final public void interval_qualifier_S() throws ParseException {
    if (jj_2_8(3)) {
      start_field_S();
      jj_consume_token(TO);
      end_field_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DAY:
      case HOUR:
      case MINUTE:
      case MONTH:
      case SECOND:
      case YEAR:
        single_datetime_field_S();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void interval_term_S() throws ParseException {
    if (jj_2_9(3)) {
      interval_factor_S();
    } else if (jj_2_10(3)) {
      factor_S();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        jj_consume_token(ASTERISK);
        break;
      case SOLIDUS:
        jj_consume_token(SOLIDUS);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      interval_term_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case PLUS_SIGN:
      case MINUS_SIGN:
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case SQUARE:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case ASCII_STRING_LITERAL:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case EXACT_NUMERIC_LITERAL:
        term_S();
        jj_consume_token(ASTERISK);
        interval_factor_S();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void interval_value_expression_S() throws ParseException {
    if (jj_2_12(3)) {
      interval_term_S();
      label_7:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          jj_consume_token(PLUS_SIGN);
          break;
        case MINUS_SIGN:
          jj_consume_token(MINUS_SIGN);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        interval_term_S();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        datetime_value_expression_S();
        jj_consume_token(MINUS_SIGN);
        datetime_term_S();
        jj_consume_token(RIGHT_PAREN);
        interval_qualifier_S();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * in_value_list_A
 *
 * bnf-start
 *  <in_value_list> ::=
 *      <in_value_list_constant> { <comma> <in_value_list_constant> }...
 *  !! There is no accommodation for <value_expression>
 * bnf-end
 *
 */
  final public ConstantListSet in_value_list_A() throws ParseException {
        LiteralType lit1 = null ;
        LiteralType lit2 = null ;
        ArrayList list = null ;
        ConstantListSet constantListSet = null ;
    //S:
            // <in_value_list> ::=
        //   <value_expression> { <comma> <value_expression> }...
    
        lit1 = in_value_list_constant_A();
       if( lit1 != null ) {
          list = new ArrayList() ;
          list.add( lit1 ) ;
       }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      lit2 = in_value_list_constant_A();
          if( lit2 != null ) {
                 list.add( lit2 ) ;
          }
          else {
                 list = null ;
          }
    }
        if( list != null ) {
                constantListSet = ConstantListSet.Factory.newInstance() ;
                LiteralType[] literalArray = new LiteralType[ list.size() ] ;
                constantListSet.setItemArray( (LiteralType[])list.toArray(literalArray) ) ;
        }
        {if (true) return constantListSet ;}
    throw new Error("Missing return statement in function");
  }

/**
 * in_value_list_constant_A
 *
 * bnf-start
 *  <in_value_list_constant> ::=
 *	       [ <plus_sign> | <minus_sign> ] <exact_numeric_literal>
 *	    |  <character_string_literal> 
 * bnf-end
 *
 */
  final public LiteralType in_value_list_constant_A() throws ParseException {
        AtomType at = null ;
        LiteralType lt = null ;
        Token t1 = null ;
        int possibleSignChange = 1 ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
      case MINUS_SIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          jj_consume_token(PLUS_SIGN);
          break;
        case MINUS_SIGN:
          t1 = jj_consume_token(MINUS_SIGN);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
                       if( t1 != null )
                          possibleSignChange = -1 ;
      at = exact_numeric_literal_S(possibleSignChange);
      break;
    case ASCII_STRING_LITERAL:
      at = character_string_literal_A();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( at != null ) {
                        lt = at.getLiteral() ;
                }
                {if (true) return lt ;}
    throw new Error("Missing return statement in function");
  }

  final public void join_specification_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
      jj_consume_token(ON);
      search_condition_S();
      break;
    case USING:
      jj_consume_token(USING);
      jj_consume_token(LEFT_PAREN);
      column_name_list_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * join_specification_A
 *
 * bnf-start
 *  <join_specification> ::= <join_condition>
 *  !! There is no accommodation for <named_columns_join>	
 * bnf-end
 *
 * bnf-start
 *  <join_condition> ::= ON <comparison_predicate>
 *  !! There is no accommodation for <search_condition>
 * bnf-end
 *
 */
  final public ComparisonPredType join_specification_A() throws ParseException {
        ComparisonPredType cpType = null ;
    jj_consume_token(ON);
    cpType = comparison_predicate_A();
      {if (true) return cpType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * joined_table_S
 *
 *-bnf-start
 *- <joined_table> ::=
 *-     <cross_join>
 *-   | <qualified_join>
 *-   | <left_paren> <joined_table> <right_paren>
 *-bnf-end
 
 * bnf-start
 *  <joined_table> ::=
 *      <qualified_join>
 *    | <left_paren> <joined_table> <right_paren>
 *  !! <cross_join> has been removed. The reason is the Adql/x schema has
 *     a mandatory join condition which is inapplicable to cross joins.
 *     Probably wise in any case. 
 * bnf-end
 *
 */
  final public JoinTableType joined_table_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "joined_table_S()" ) ;
        JoinTableType jtType = null ;
        Token t = null ;
    if (jj_2_13(4)) {
      jtType = qualified_join_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        t = jj_consume_token(LEFT_PAREN);
        jtType = joined_table_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if( TRACE_ENABLED ) exitTrace ( "joined_table_S()" ) ;
                {if (true) return jtType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * join_type_A
 *
 * bnf-start
 *  <join_type> ::=
 *     INNER
 *   | <outer_join_type> [ OUTER ]
 *  !! There is no accommodatin for UNION
 * bnf-end
 *
 * bnf-single <outer_join_type> ::= LEFT | RIGHT | FULL
 *
 */
  final public JointTableQualifierType join_type_A() throws ParseException {
        JointTableQualifierType jType = null ;
        Token t1 = null ;
        Token t2 = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INNER:
      // refactored
                      t1 = jj_consume_token(INNER);
      break;
    case FULL:
    case LEFT:
    case RIGHT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        t1 = jj_consume_token(LEFT);
        break;
      case RIGHT:
        t1 = jj_consume_token(RIGHT);
        break;
      case FULL:
        t1 = jj_consume_token(FULL);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTER:
        t2 = jj_consume_token(OUTER);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if( t1 != null ) {
                jType = JointTableQualifierType.Factory.newInstance() ;
                 switch ( t1.kind ) {
                        case AdqlStoXConstants.INNER :
                                jType.set( JointTableQualifierType.INNER );
                                break;
                        case AdqlStoXConstants.LEFT :
                                jType.set( JointTableQualifierType.LEFT_OUTER );
                                break;
                        case AdqlStoXConstants.RIGHT :
                                jType.set( JointTableQualifierType.RIGHT_OUTER );
                                break;
                        case AdqlStoXConstants.FULL :
                                jType.set( JointTableQualifierType.FULL_OUTER );
                                break;
//      			case AdqlStoXConstants.UNION :
//      				jType.set( JointTableQualifierType.??? );
//      				break;
                }
        }
        {if (true) return jType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * match_value_S
 *
 * bnf-single <match_value> ::= <character_value_expression>
 *
 */
  final public ScalarExpressionType match_value_S() throws ParseException {
    if( TRACE_ENABLED ) enterTrace ( "match_value_S()" ) ;
    ScalarExpressionType seType = null ;
    //S:
            // <match_value> ::= <character_value_expression>
    
            seType = character_value_expression_A();
           if( TRACE_ENABLED ) exitTrace ( "match_value_S()" ) ;
           {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public void match_predicate_S() throws ParseException {
    row_value_constructor_S();
    jj_consume_token(MATCH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIQUE:
      jj_consume_token(UNIQUE);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FULL:
    case PARTIAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARTIAL:
        jj_consume_token(PARTIAL);
        break;
      case FULL:
        jj_consume_token(FULL);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    table_subquery_S();
  }

/**
 * math_function_A
 *
 * bnf-start
 *  <math_function> ::=
 *      ABS <left_paren> <numeric_value_expression> <right_paren> 
 *	  | CEILING <left_paren> <numeric_value_expression> <right_paren> 
 *	  | DEGREES <left_paren> <numeric_value_expression> <right_paren> 
 *	  | EXP <left_paren> <numeric_value_expression> <right_paren> 
 *	  | FLOOR <left_paren> <numeric_value_expression> <right_paren> 
 *	  | LOG <left_paren> <numeric_value_expression> <right_paren> 
 *	  | PI <left_paren><right_paren> 
 *	  | POWER <left_paren> <numeric_value_expression> <comma> <unsigned_integer> <right_paren> 
 *	  | RADIANS <left_paren> <numeric_value_expression> <right_paren> 
 *	  | SQUARE <left_paren> <numeric_value_expression> <right_paren> 
 *	  | SQRT <left_paren> <numeric_value_expression> <right_paren> 
 *	  | LOG10 <left_paren> <numeric_value_expression> <right_paren> 
 *	  | RAND <left_paren> [ <numeric_value_expression> ] <right_paren> 
 *	  | ROUND <left_paren> <numeric_value_expression> <right_paren> 
 *	  | TRUNCATE <left_paren> <numeric_value_expression> <right_paren> 
 *  !! ADQL specific.
 * bnf-end
 *
 */
  final public MathFunctionType math_function_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "math_function_A()" ) ;
        MathFunctionType mfType = null ;
        ScalarExpressionType arg1 = null ;
        Token t = null ;
        Token t2 = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABS:
      t = jj_consume_token(ABS);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case CEILING:
      t = jj_consume_token(CEILING);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case DEGREES:
      t = jj_consume_token(DEGREES);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case EXP:
      t = jj_consume_token(EXP);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case FLOOR:
      t = jj_consume_token(FLOOR);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case LOG:
      t = jj_consume_token(LOG);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case PI:
      t = jj_consume_token(PI);
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(RIGHT_PAREN);
      break;
    case POWER:
      t = jj_consume_token(POWER);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(COMMA);
      t2 = jj_consume_token(UNSIGNED_INTEGER);
      jj_consume_token(RIGHT_PAREN);
      break;
    case RADIANS:
      t = jj_consume_token(RADIANS);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case SQUARE:
      t = jj_consume_token(SQUARE);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case SQRT:
      t = jj_consume_token(SQRT);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case LOG10:
      t = jj_consume_token(LOG10);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case RAND:
      t = jj_consume_token(RAND);
      jj_consume_token(LEFT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case PLUS_SIGN:
      case MINUS_SIGN:
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case PI:
      case POWER:
      case RADIANS:
      case SQRT:
      case SQUARE:
      case LOG10:
      case RAND:
      case ROUND:
      case TRUNCATE:
      case SIN:
      case COS:
      case TAN:
      case COT:
      case ASIN:
      case ACOS:
      case ATAN:
      case ATAN2:
      case ASCII_STRING_LITERAL:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case EXACT_NUMERIC_LITERAL:
        arg1 = numeric_value_expression_S();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      jj_consume_token(RIGHT_PAREN);
      break;
    case ROUND:
      t = jj_consume_token(ROUND);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case TRUNCATE:
      t = jj_consume_token(TRUNCATE);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           if( t != null ) {
                  mfType = MathFunctionType.Factory.newInstance() ;
                  mfType.setName( MathFunctionNameType.Enum.forString( t.image.toUpperCase() ) ) ;
                  if( arg1 != null ) {
                         SelectionItemType[] argArray ;
                         if( t.kind != AdqlStoXConstants.POWER ) {
                        argArray = new SelectionItemType[1] ;
                        argArray[0] = arg1 ;
                         }
                         else {
                                argArray = new SelectionItemType[2] ;
                                argArray[0] = arg1 ;
                                AtomType atomType = AtomType.Factory.newInstance() ;
                                IntegerType intType = IntegerType.Factory.newInstance() ;
                                intType.setValue( new Long( t2.image ).longValue() ) ;
                                atomType.setLiteral( intType ) ;
                                argArray[1] = atomType ;
                         }
                     mfType.setArgArray( argArray ) ;
                  }
           }
           if( TRACE_ENABLED ) exitTrace ( "math_function_A()" ) ;
           {if (true) return mfType ;}
    throw new Error("Missing return statement in function");
  }

  final public void null_predicate_S() throws ParseException {
    row_value_constructor_S();
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
  }

/**
 * numeric_primary_S
 *
 * bnf-start
 *  <numeric_primary> ::=
 *      <value_expression_primary>
 *    | <numeric_value_function>
 * bnf-end
 *
 */
  final public ScalarExpressionType numeric_primary_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "numeric_primary_S()" ) ;
        ScalarExpressionType seType = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABS:
    case CEILING:
    case DEGREES:
    case EXP:
    case FLOOR:
    case LOG:
    case PI:
    case POWER:
    case RADIANS:
    case SQRT:
    case SQUARE:
    case LOG10:
    case RAND:
    case ROUND:
    case TRUNCATE:
    case SIN:
    case COS:
    case TAN:
    case COT:
    case ASIN:
    case ACOS:
    case ATAN:
    case ATAN2:
      seType = numeric_value_function_A();
      break;
    case LEFT_PAREN:
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case ASCII_STRING_LITERAL:
    case DOLLAR:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      seType = value_expression_primary_A();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( TRACE_ENABLED ) exitTrace ( "numeric_primary_S()" ) ;
                {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * numeric_value_expression_S
 *
 * bnf-start
 *  <numeric_value_expression> ::=
 *      <term>
 *    | <numeric_value_expression> <plus_sign> <term>
 *    | <numeric_value_expression> <minus_sign> <term>
 * bnf-end
 *
 */
  final public ScalarExpressionType numeric_value_expression_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "numeric_value_expression_S()" ) ;
        ScalarExpressionType seType = null ;
        ScalarExpressionType[] exprPairs = null ;
    seType = term_S();
    exprPairs = numericValueExpressionList();
                try {
                        if( exprPairs == null ) {
                           {if (true) return seType ;}
                    }
                    else {
                       ScalarExpressionType[] args = new ScalarExpressionType[2] ;
                       args[0] = seType ;
                       args[1] = exprPairs[1] ;
                       BinaryExprType beType = (BinaryExprType)exprPairs[0] ;
                       beType.setArgArray( args ) ;
                       {if (true) return beType ;}
                    }
                }
                finally {
           if( TRACE_ENABLED ) exitTrace ( "numeric_value_expression_S()" ) ;
                }
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType[] numericValueExpressionList() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "numericValueExpressionList()" ) ;
        ArrayList list = null ;
        ScalarExpressionType[] exprPairs1 = null ;
        ScalarExpressionType[] exprPairs2 = null ;
        ScalarExpressionType[] retExprPairs = null ;
        Token t = null ;
    label_9:
    while (true) {
      if (jj_2_14(3)) {
        ;
      } else {
        break label_9;
      }
      exprPairs1 = numericValueExpressionSingleton();
            if( list == null )
                   list = new ArrayList() ;
                list.add( exprPairs1 ) ;
    }
                if( list != null ) {
                        ListIterator iterator = list.listIterator() ;
                        retExprPairs = exprPairs1 = (ScalarExpressionType[])iterator.next() ;
                        ScalarExpressionType[] args = new ScalarExpressionType[2] ;
                        BinaryExprType beType = null ;
                        while( iterator.hasNext() ) {
                                exprPairs2 = (ScalarExpressionType[])iterator.next() ;
                                args[0] = exprPairs1[1] ;
                                args[1] = exprPairs2[1] ;
                                beType = (BinaryExprType)exprPairs2[0] ;
                                beType.setArgArray( args ) ;
                                exprPairs1 = exprPairs2 ;
                        }
                }
                if( TRACE_ENABLED ) exitTrace ( "numericValueExpressionList()" ) ;
                {if (true) return retExprPairs ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType[] numericValueExpressionSingleton() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "numericValueExpressionSingleton()" ) ;
        ScalarExpressionType[] retPairs = null ;
        BinaryExprType beType = null ;
        ScalarExpressionType seType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
      t = jj_consume_token(PLUS_SIGN);
      break;
    case MINUS_SIGN:
      t = jj_consume_token(MINUS_SIGN);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    seType = numeric_value_expression_S();
                if( t != null ) {
                        retPairs = new ScalarExpressionType[2] ;
                        beType = BinaryExprType.Factory.newInstance() ;
                        beType.setOper( BinaryOperatorType.Enum.forString( t.image ) ) ;
                        retPairs[0] = beType ;
                        retPairs[1] = seType ;
                }
                if( TRACE_ENABLED ) exitTrace ( "numericValueExpressionSingleton()" ) ;
                {if (true) return retPairs ;}
    throw new Error("Missing return statement in function");
  }

/**
 * numeric_value_function_A
 *
 * bnf-start
 *  <numeric_value_function> ::= <trig_function> | <math_function>	
 *  !! There is no accommodation for <position_expression>,
 *     <extract_expression> or <length_expression>
 * bnf-end
 *
 */
  final public ScalarExpressionType numeric_value_function_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "numeric_value_function_A()" ) ;
        ScalarExpressionType seType = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIN:
    case COS:
    case TAN:
    case COT:
    case ASIN:
    case ACOS:
    case ATAN:
    case ATAN2:
      // JBL ADQL adaptation
                      seType = trig_function_A();
      break;
    case ABS:
    case CEILING:
    case DEGREES:
    case EXP:
    case FLOOR:
    case LOG:
    case PI:
    case POWER:
    case RADIANS:
    case SQRT:
    case SQUARE:
    case LOG10:
    case RAND:
    case ROUND:
    case TRUNCATE:
      seType = math_function_A();
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( TRACE_ENABLED ) exitTrace ( "numeric_value_function_A()" ) ;
                {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType numeric_value_function_fragment() throws ParseException {
        ScalarExpressionType set = null ;
    set = numeric_value_function_A();
    jj_consume_token(SEMICOLON);
          {if (true) return set ;}
    throw new Error("Missing return statement in function");
  }

/**
 * order_by_clause_A
 *
 * bnf-start
 *  <order_by_clause> ::= ORDER BY <sort_specification_list>
 * bnf-end
 *
 * bnf-start
 *  <sort_specification_list> ::=
 *      <sort_specification> [ { <comma> <sort_specification> }... ]
 * bnf-end 
 *
 * bnf-start
 *  <sort_specification> ::=
 *      <sort_key> [ <ordering_specification> ]
 *  !! There is no accommodation for <collate_clause>
 * bnf-end
 *
 * bnf-start
 *  <sort_key> ::= <value_expression>
 *  !! This is different from SQL92 which uses
 *     <column_name> | <unsigned_integer>
 * bnf-end 
 *
 * bnf-single <ordering_specification> ::= ASC | DESC
 */
  final public OrderExpressionType order_by_clause_A() throws ParseException {
        OrderExpressionType oeType = null ;
        OrderType orderType = null ;
        OrderType[] orderArray = null ;
        ArrayList orderList = null ;
    jj_consume_token(ORDERBY);
    orderType = orderBySingleton();
    orderList = orderByList();
                if( orderType != null ) {
                        oeType = OrderExpressionType.Factory.newInstance() ;
                        if( orderList != null ) {
                                orderList.add( 0, orderType ) ;
                                orderArray = new OrderType[ orderList.size() ] ;
                                orderArray = (OrderType[])orderList.toArray( orderArray ) ;
                        }
                        else {
                                orderArray = new OrderType[1] ;
                                orderArray[0] = orderType ;
                        }
                        oeType.setItemArray( orderArray ) ;
                }
                {if (true) return oeType ;}
    throw new Error("Missing return statement in function");
  }

  final public OrderExpressionType order_by_clause_fragment() throws ParseException {
        OrderExpressionType oet = null ;
    oet = order_by_clause_A();
    jj_consume_token(SEMICOLON);
          {if (true) return oet ;}
    throw new Error("Missing return statement in function");
  }

  final public OrderType orderBySingleton() throws ParseException {
        OrderType orderType = null ;
        ScalarExpressionType se = null ;
        Token t = null ;
        OrderOptionType optionType = null ;
        OrderDirectionType.Enum direction = null ;
    se = value_expression_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        t = jj_consume_token(ASC);
        break;
      case DESC:
        t = jj_consume_token(DESC);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
                if( se!=null ) {
                        if( t == null ) {
                                direction = OrderDirectionType.ASC ;
                        }
                        else {
                                direction = OrderDirectionType.Enum.forString( t.image.toUpperCase() ) ;
                        }
                        optionType = OrderOptionType.Factory.newInstance() ;
                        optionType.setDirection( direction ) ;
                        orderType = OrderType.Factory.newInstance() ;
                        orderType.setExpression( se ) ;
                        orderType.setOrder( optionType ) ;
                }
                {if (true) return orderType ;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList orderByList() throws ParseException {
        ArrayList list = null ;
        OrderType orderType = null ;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      orderType = orderBySingleton();
                        if( orderType != null ) {
                                if( list == null ) {
                                        list = new ArrayList() ;
                                }
                                list.add( orderType ) ;
                        }
    }
          {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public void overlaps_predicate_S() throws ParseException {
    row_value_constructor_S();
    jj_consume_token(OVERLAPS);
    row_value_constructor_S();
  }

/**
 * pattern_A
 *
 * bnf-start
 *  <pattern> ::= <character_string_literal>
 *  !! SQL92 uses <character_value_expression>
 * bnf-end
 *
 */
  final public AtomType pattern_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "pattern_A()" ) ;
        AtomType at = null ;
    //S:
            //   <pattern> ::= <character_value_expression>
    
            at = character_string_literal_A();
                if( TRACE_ENABLED ) exitTrace ( "pattern_A()" ) ;
                {if (true) return at ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType predicate_fragment() throws ParseException {
   SearchType st = null ;
    st = predicate_A();
    jj_consume_token(SEMICOLON);
     {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

/**
 * predicate_A
 *
 * bnf-start
 *  <predicate> ::=
 *     <comparison_predicate>
 *   | <between_predicate>
 *   | <in_predicate>
 *   | <like_predicate>
 *  !! ADQL does not support the following:
 *     <null_predicate>, <quantified_comparison_predicate>,
 *     <exists_predicate>, <unique_predicate>,
 *     <match_predicate>, <overlaps_predicate>.
 *     Also, <region_predicate> has yet to be folded in.
 * bnf-end
 *
 */
  final public SearchType predicate_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "predicate_A()" ) ;
        SearchType searchType = null ;
    if (jj_2_15(5)) {
      searchType = comparison_predicate_A();
    } else if (jj_2_16(5)) {
      searchType = between_predicate_A();
    } else if (jj_2_17(5)) {
      searchType = in_predicate_A();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case ASCII_STRING_LITERAL:
      case DOLLAR:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
      case UNSIGNED_INTEGER:
      case EXACT_NUMERIC_LITERAL:
        searchType = like_predicate_A();
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if( TRACE_ENABLED ) exitTrace ( "predicate_A()" ) ;
        {if (true) return searchType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * qualified_join_S
 *
 * bnf-start
 *  <qualified_join> ::=
 *      <table_reference> [ NATURAL ] [ <join_type> ] JOIN
 *      <table_reference> [ <join_specification> ]
 * bnf-end
 *
 */
  final public JoinTableType qualified_join_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "qualified_join_S()" ) ;
        JoinTableType jtType = null ;
        FromTableType fType1 = null ;
        FromTableType fType2 = null ;
        JointTableQualifierType jtqType = null ;
        ComparisonPredType cpType = null ;
    fType1 = tableReferenceBarJoinedTable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL:
      jj_consume_token(NATURAL);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    jtqType = join_type_A();
    jj_consume_token(JOIN);
    fType2 = table_reference_A();
    if (jj_2_18(3)) {
      cpType = join_specification_A();
    } else {
      ;
    }
           if( fType2 != null ) {
              jtType = JoinTableType.Factory.newInstance() ;
              FromTableType[] fttArray = new FromTableType[2] ;
              fttArray[0] = fType1 ;
              fttArray[1] = fType2 ;
              ArrayOfFromTableType tableArray = ArrayOfFromTableType.Factory.newInstance() ;
              tableArray.setFromTableTypeArray( fttArray ) ;
              jtType.setTables( tableArray ) ;
              jtType.xsetQualifier( jtqType ) ;
              if( cpType != null ) {
                        jtType.setCondition( cpType ) ;
              }
           }
           if( TRACE_ENABLED ) exitTrace ( "qualified_join_S()" ) ;
           {if (true) return jtType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * qualified_name_A
 *
 * bnf-start
 *  <qualified_name> ::= <identifier>
 *  !! Not sure this is adequate
 *     SQL92 has [ <schema_name> <period> ] <qualified_identifier>
 * bnf-end
 *
 */
  final public String qualified_name_A() throws ParseException {
        String retValue ;
    //S:
            // <qualified_name> ::=
        //   [ <schema_name> <period> ] <qualified_identifier>
    
            retValue = identifier_A();
          {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

/**
 * 
 *
 * bnf-start
 *  <qualifier> ::= <table_name> 
 *  !! SQL92 also has <correlation_name>
 * bnf-end
 *
 */
  final public String qualifier_A() throws ParseException {
        String retValue ;
    //S:
            // <qualifier> ::=
        //    <table_name> 
        //  | <correlation_name>
    
            // Foreshortened
            retValue = table_name_A();
          {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

/**
 * 
 *
 * bnf-start
 *  <query_specification> ::=
 *      SELECT [ <set_quantifier> ] [ <set_limit> ] <select_list> <table_expression>
 * bnf-end
 *
 * bnf-start
 *  <table_expression> ::=
 *      <from_clause>
 *      [ <where_clause> ]
 *      [ <group_by_clause> ]
 *      [ <having_clause> ]
 *      [ <order_by_clause> ]
 * !! ADQL adds <order_by_clause>
 * bnf-end 
 *
 */
  final public SelectType query_specification_A() throws ParseException {
    if( TRACE_ENABLED ) enterTrace ( "query_specification_A()" ) ;
        SelectType st = null ;
        SelectionListType listType = null ;
        SelectionLimitType limitType = null ;
        SelectionOptionType optionType = null ;
        FromType fromType = null ;
        WhereType whereType = null ;
        GroupByType gbType = null ;
        HavingType havingType = null ;
        OrderExpressionType oeType = null ;
        Token t = null ;
    t = jj_consume_token(SELECT);
                          if( t!= null ) {
                             st = SelectType.Factory.newInstance() ;
                          }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case DISTINCT:
      optionType = set_quantifier_S();
                          if( optionType!= null ) {
                             st.setAllow( optionType ) ;
                          }
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOP:
      limitType = set_limit_A();
                          if( limitType != null ) {
                                 st.setRestrict( limitType ) ;
                          }
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    listType = select_list_S();
                        if( listType != null ) {
                                st.setSelectionList( listType ) ;
                        }
    fromType = from_clause_S();
                        if( fromType != null ) {
                                st.setFrom( fromType ) ;
                        }
    if (jj_2_19(3)) {
      whereType = where_clause_S();
                        if( whereType != null ) {
                                st.setWhere( whereType ) ;
                        }
    } else {
      ;
    }
    if (jj_2_20(3)) {
      gbType = group_by_clause_S();
                        if( gbType != null ) {
                                st.setGroupBy( gbType ) ;
                        }
    } else {
      ;
    }
    if (jj_2_21(3)) {
      havingType = having_clause_S();
                        if( havingType != null ) {
                                st.setHaving( havingType ) ;
                        }
    } else {
      ;
    }
    if (jj_2_22(3)) {
      oeType = order_by_clause_A();
                        if( oeType != null ) {
                                st.setOrderBy( oeType ) ;
                        }
    } else {
      ;
    }
                if( TRACE_ENABLED ) exitTrace ( "query_specification_A()" ) ;
                {if (true) return st  ;}
    throw new Error("Missing return statement in function");
  }

  final public SelectType query_specification_fragment() throws ParseException {
        SelectType st = null ;
    st = query_specification_A();
    jj_consume_token(SEMICOLON);
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public RegionSearchType region_predicate_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "region_predicate_A()" ) ;
        RegionSearchType st = null ;
        RegionType rt = null ;
        Token t = null ;
    jj_consume_token(REGION);
    jj_consume_token(LEFT_PAREN);
    rt = region_specification_A();
    t = jj_consume_token(RIGHT_PAREN);
                if( t != null ) {
                   st = RegionSearchType.Factory.newInstance() ;
                   st.setRegion( rt ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "region_predicate_A()" ) ;
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public RegionType region_specification_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "region_specification_A()" ) ;
    RegionType rt = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CIRCLE:
      rt = circle_region_A();
      break;
    case ELLIPSE:
      rt = ellipse_region_A();
      break;
    case POLYGON:
      polygon_region_A();
      break;
    case SECTOR:
      sector_region_A();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( TRACE_ENABLED ) exitTrace ( "region_specification_A()" ) ;
                {if (true) return rt ;}
    throw new Error("Missing return statement in function");
  }

  final public CircleType circle_region_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "circle_region_A()" ) ;
        String coordSystem = null ;
        Object[] radiusParams = null ;
        List coords = null ;
        CircleType circleType = null ;
    jj_consume_token(CIRCLE);
    coordSystem = coord_system_A();
    jj_consume_token(CENTER);
    jj_consume_token(EQUALS_OPERATOR);
    coords = coords_2_A();
    jj_consume_token(RADIUS);
    jj_consume_token(EQUALS_OPERATOR);
    radiusParams = circle_radius_A();
                if( radiusParams != null ) {
                        circleType = CircleType.Factory.newInstance() ;
                        circleType.setCenter( coords ) ;
                        circleType.setRadius( ((Double)radiusParams[0]).doubleValue() ) ;
                        circleType.setCoordSystemId( coordSystem ) ;
                        circleType.setUnit( (PosUnitType.Enum)radiusParams[1] ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "circle_region_A()" ) ;
                {if (true) return circleType ;}
    throw new Error("Missing return statement in function");
  }

  final public EllipseType ellipse_region_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "ellipse_region_A()" ) ;
        Double minorRadius = null ;
        Double majorRadius = null ;
        List coords = null ;
        EllipseType ellipseType = null ;
        Object[] radiusParams = null ;
        String coordSystem = null ;
        Object[] angleParams = null ;
    jj_consume_token(ELLIPSE);
    coordSystem = coord_system_A();
    jj_consume_token(CENTER);
    jj_consume_token(EQUALS_OPERATOR);
    coords = coords_2_A();
    jj_consume_token(RADII);
    jj_consume_token(EQUALS_OPERATOR);
    radiusParams = ellipse_radius_A();
    jj_consume_token(POS_ANGLE);
    jj_consume_token(EQUALS_OPERATOR);
    angleParams = ellipse_angle_A();
                if( radiusParams != null ) {
                        ellipseType = EllipseType.Factory.newInstance() ;
                        ellipseType.setCenter( coords ) ;
                        ellipseType.setMinorRadius( ((Double)radiusParams[0]).doubleValue() ) ;
                        ellipseType.setRadius( ((Double)radiusParams[1]).doubleValue() ) ;
                        ellipseType.setCoordSystemId( coordSystem ) ;
                        ellipseType.setUnit( (PosUnitType.Enum)radiusParams[2] ) ;
                        ellipseType.setPosAngle( ((Double)angleParams[0]).doubleValue() ) ;
                        ellipseType.setPosAngleUnit( (AngleUnitType.Enum)angleParams[1] ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "ellipse_region_A()" ) ;
                {if (true) return ellipseType ;}
    throw new Error("Missing return statement in function");
  }

  final public void polygon_region_A() throws ParseException {
    jj_consume_token(POLYGON);
  }

  final public void sector_region_A() throws ParseException {
    jj_consume_token(SECTOR);
  }

  final public void convex_region_A() throws ParseException {
    jj_consume_token(CONVEX);
  }

  final public void convex_hull_region_A() throws ParseException {
    jj_consume_token(CONVEX_HULL);
  }

//|   < CONVEX_HULL : "convex hull" >//|   < UNION : "union" >//|   < INTERSECTION : "intersection" >
  final public String coord_system_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "coord_system_A()" ) ;
        String cs = null ;
        Token t1 = null ;
    jj_consume_token(COORD_SYSTEM);
    jj_consume_token(EQUALS_OPERATOR);
    t1 = jj_consume_token(REGULAR_IDENTIFIER);
                if( t1 !=  null ) {
                   cs = t1.image ;
            }
            if( TRACE_ENABLED ) exitTrace ( "coord_system_A()" ) ;
                {if (true) return cs ;}
    throw new Error("Missing return statement in function");
  }

  final public void row_subquery_S() throws ParseException {
    subquery_S();
  }

  final public Double double_numeric_literal_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "double_numeric_literal_A()" ) ;
        Token s = null ;
        Token t = null ;
        Double dnl = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
    case EXACT_NUMERIC_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
      case MINUS_SIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          jj_consume_token(PLUS_SIGN);
          break;
        case MINUS_SIGN:
          s = jj_consume_token(MINUS_SIGN);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      t = jj_consume_token(EXACT_NUMERIC_LITERAL);
      break;
    case UNSIGNED_INTEGER:
      t = jj_consume_token(UNSIGNED_INTEGER);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
           dnl = new Double( (s!=null ? '-' : '+' ) + t.image ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "double_numeric_literal_A()" ) ;
                {if (true) return dnl ;}
    throw new Error("Missing return statement in function");
  }

  final public List coords_2_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "coords_2_A" ) ;
        Double coord1 = null ;
        Double coord2 = null ;
        Token t = null ;
        ArrayList list = null ;
    jj_consume_token(LEFT_PAREN);
    coord1 = double_numeric_literal_A();
    jj_consume_token(COMMA);
    coord2 = double_numeric_literal_A();
    t = jj_consume_token(RIGHT_PAREN);
        if( t != null ) {
                list = new ArrayList( 2 ) ;
                list.add( coord1 ) ;
                list.add( coord2 ) ;
        }
        if( TRACE_ENABLED ) exitTrace ( "coords_2_A" ) ;
        {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public Object[] circle_radius_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "circle_radius_A" ) ;
        Double rad = null ;
        String putString = null ;
        PosUnitType.Enum unitType ;
        Object[] radiusParams = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      rad = double_numeric_literal_A();
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      rad = double_numeric_literal_A();
      jj_consume_token(COMMA);
      putString = pos_unit_type_A();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           if( rad !=  null ) {
                   radiusParams = new Object[2] ;
                   if( putString == null ) {
                           unitType = PosUnitType.Enum.forString("") ;
                   }
                   else {
                           unitType = PosUnitType.Enum.forString( putString ) ;
                   }
                   radiusParams[0] = rad ;
                   radiusParams[1] = unitType ;
           }
           if( TRACE_ENABLED ) exitTrace ( "circle_radius_A" ) ;
           {if (true) return radiusParams ;}
    throw new Error("Missing return statement in function");
  }

  final public Object[] ellipse_radius_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "ellipse_radius_A" ) ;
        Double minorRad = null ;
        Double majorRad = null ;
        PosUnitType.Enum unitType = null ;
        String putString = null ;
        Object[] ellipseParams = null ;
    jj_consume_token(LEFT_PAREN);
    minorRad = double_numeric_literal_A();
    jj_consume_token(COMMA);
    majorRad = double_numeric_literal_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      putString = pos_unit_type_A();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PAREN);
           if( majorRad !=  null ) {
                   ellipseParams = new Object[3] ;
                   if( putString == null ) {
                           unitType = PosUnitType.Enum.forString("") ;
                   }
                   else {
                           unitType = PosUnitType.Enum.forString( putString ) ;
                   }
                   ellipseParams[0] = minorRad ;
                   ellipseParams[1] = majorRad ;
                   ellipseParams[2] = unitType ;
           }
           if( TRACE_ENABLED ) exitTrace ( "ellipse_radius_A" ) ;
           {if (true) return ellipseParams ;}
    throw new Error("Missing return statement in function");
  }

  final public String pos_unit_type_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "pos_unit_type_A" ) ;
        String putString = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEG:
      t = jj_consume_token(DEG);
      break;
    case DEG_DEG_M:
      t = jj_consume_token(DEG_DEG_M);
      break;
    case RAD:
      t = jj_consume_token(RAD);
      break;
    case H:
      t = jj_consume_token(H);
      break;
    case ARCMIN:
      t = jj_consume_token(ARCMIN);
      break;
    case ARCSEC:
      t = jj_consume_token(ARCSEC);
      break;
    case M:
      t = jj_consume_token(M);
      break;
    case KM:
      t = jj_consume_token(KM);
      break;
    case MM:
      t = jj_consume_token(MM);
      break;
    case AU:
      t = jj_consume_token(AU);
      break;
    case PC:
      t = jj_consume_token(PC);
      break;
    case KPC:
      t = jj_consume_token(KPC);
      break;
    case MPC:
      t = jj_consume_token(MPC);
      break;
    case LYR:
      t = jj_consume_token(LYR);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        putString = t.image ;
                }
                if( TRACE_ENABLED ) exitTrace ( "pos_unit_type_A" ) ;
                {if (true) return putString ;}
    throw new Error("Missing return statement in function");
  }

  final public String pos_angle_type_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "pos_angle_type_A" ) ;
        String patString = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEG:
      t = jj_consume_token(DEG);
      break;
    case RAD:
      t = jj_consume_token(RAD);
      break;
    case H:
      t = jj_consume_token(H);
      break;
    case ARCMIN:
      t = jj_consume_token(ARCMIN);
      break;
    case ARCSEC:
      t = jj_consume_token(ARCSEC);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        patString = t.image ;
                }
                if( TRACE_ENABLED ) exitTrace ( "pos_angle_type_A" ) ;
                {if (true) return patString ;}
    throw new Error("Missing return statement in function");
  }

  final public Object[] ellipse_angle_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "ellipse_angle_A" ) ;
        Double angle = null ;
        String patString = null ;
        AngleUnitType.Enum unitType ;
        Object[] angleParams = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      angle = double_numeric_literal_A();
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      angle = double_numeric_literal_A();
      jj_consume_token(COMMA);
      patString = pos_angle_type_A();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           if( angle !=  null ) {
                   angleParams = new Object[2] ;
                   if( patString == null ) {
                           unitType = AngleUnitType.Enum.forString("") ;
                   }
                   else {
                           unitType = AngleUnitType.Enum.forString( patString ) ;
                   }
                   angleParams[0] = angle ;
                   angleParams[1] = unitType ;
           }
           if( TRACE_ENABLED ) exitTrace ( "ellipse_angle_A" ) ;
           {if (true) return angleParams ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType row_value_constructor_S() throws ParseException {
        ScalarExpressionType seType = null ;
    if (jj_2_23(3)) {
      row_value_constructor_element_S();
    } else if (jj_2_24(2)) {
      jj_consume_token(LEFT_PAREN);
      row_value_constructor_list_S();
      jj_consume_token(RIGHT_PAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        row_subquery_S();
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
           {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType row_value_constructor_element_S() throws ParseException {
        ScalarExpressionType seType = null ;
    //S:
            //  <row_value_constructor_element> ::=
        //     <value_expression>
        //   | <null_specification>
        //   | <default_specification>
    
            seType = value_expression_A();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public void row_value_constructor_list_S() throws ParseException {
    row_value_constructor_element_S();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      row_value_constructor_element_S();
    }
  }

  final public void scalar_subquery_S() throws ParseException {
    subquery_S();
  }

/**
 * 
 *
 * bnf-start
 *  <search_condition> ::=
 *      <boolean_term>
 *    | <search_condition> OR <boolean_term>
 * bnf-end
 *
 */
  final public SearchType search_condition_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "search_condition_S" ) ;
        SearchType st1 = null ;
        SearchType st2 = null ;
        SearchType retval = null ;
    st1 = boolean_term_S();
    st2 = booleanTermList();
                if( st2 == null ) {
                   retval = st1 ;
                }
                else {
                   SearchType[] conditionArray = new SearchType[2] ;
                   conditionArray[0] = st1 ;
                   conditionArray[1] = st2 ;
                   UnionSearchType usType = UnionSearchType.Factory.newInstance() ;
                   usType.setConditionArray( conditionArray ) ;
                   retval = usType ;
                }
                if( TRACE_ENABLED ) exitTrace ( "search_condition_S" ) ;
                {if (true) return retval ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType booleanTermList() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "booleanTermList" ) ;
        Stack stack = null ;
        SearchType st = null ;
    label_12:
    while (true) {
      if (jj_2_25(3)) {
        ;
      } else {
        break label_12;
      }
      st = booleanTermSingleton();
            if( stack == null )
                   stack = new Stack() ;
                stack.push( st ) ;
    }
                if( stack != null ) {
                        UnionSearchType heldOr = null ;
                        SearchType[] conditions = new SearchType[2] ;
                        while( stack.empty() == false ) {
                                st = (SearchType)stack.pop() ;
                                if( heldOr != null ) {
                                        conditions[0] = st ;
                                        conditions[1] = heldOr ;
                                        UnionSearchType orType = UnionSearchType.Factory.newInstance() ;
                                        orType.setConditionArray( conditions ) ;
                                        heldOr = orType ;
                                }
                                else if( stack.empty() == false  ) {
                                        conditions[0] = (SearchType)stack.pop() ;
                                        conditions[1] = st ;
                                        UnionSearchType orType = UnionSearchType.Factory.newInstance() ;
                                        orType.setConditionArray( conditions ) ;
                                        heldOr = orType ;
                                }
                        }
                        if( heldOr != null )
                                st = heldOr ;
                }
                if( TRACE_ENABLED ) exitTrace ( "booleanTermList" ) ;
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType booleanTermSingleton() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "booleanTermSingleton" ) ;
        SearchType st = null ;
    jj_consume_token(OR);
    st = boolean_term_S();
                if( TRACE_ENABLED ) exitTrace ( "booleanTermSingleton" ) ;
                {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

/**
 * select_list_S
 *
 * bnf-start
 *  <select_list> ::=
 *      <asterisk>
 *    | <select_sublist> [ { <comma> <select_sublist> }... ]
 * bnf-end
 *
 */
  final public SelectionListType select_list_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "select_list_S()" ) ;
        ArrayList itemList = new ArrayList() ;
        SelectionListType slType = SelectionListType.Factory.newInstance() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      allSelectionItem(itemList);
      break;
    case LEFT_PAREN:
    case PLUS_SIGN:
    case MINUS_SIGN:
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case ABS:
    case CEILING:
    case DEGREES:
    case EXP:
    case FLOOR:
    case LOG:
    case PI:
    case POWER:
    case RADIANS:
    case SQRT:
    case SQUARE:
    case LOG10:
    case RAND:
    case ROUND:
    case TRUNCATE:
    case SIN:
    case COS:
    case TAN:
    case COT:
    case ASIN:
    case ACOS:
    case ATAN:
    case ATAN2:
    case ASCII_STRING_LITERAL:
    case DOLLAR:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      select_sublist_A(itemList);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        select_sublist_A(itemList);
      }
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( itemList.size() > 0 ) {
                        SelectionItemType[] itemArray = new SelectionItemType[ itemList.size() ] ;
                        slType.setItemArray( (SelectionItemType[])itemList.toArray(itemArray) ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "select_list_S()" ) ;
                {if (true) return slType ;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionListType select_list_fragment() throws ParseException {
        SelectionListType slt = null ;
    slt = select_list_S();
    jj_consume_token(SEMICOLON);
          {if (true) return slt ;}
    throw new Error("Missing return statement in function");
  }

  final public void allSelectionItem(ArrayList itemList) throws ParseException {
    jj_consume_token(ASTERISK);
          itemList.add( AllSelectionItemType.Factory.newInstance() ) ;
  }

/**
 * 
 *
 * bnf-start
 *  <select_sublist> ::=
 *      <derived_column>
 *  !! SQL92 also has <qualifier> <period> <asterisk>
 * bnf-end
 *
 */
  final public void select_sublist_A(ArrayList itemList) throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "select_sublist_A()" ) ;
        SelectionItemType siType = null ;
    //S:
            // <select_sublist> ::= <derived_column> | <qualifier> <period> <asterisk>
    
            siType = derived_column_S();
                if( TRACE_ENABLED ) exitTrace ( "select_sublist_A()" ) ;
                itemList.add( siType ) ;
  }

/**
 * derived_column_S
 *
 * bnf-start
 *  <derived_column> ::= <value_expression> [ <as_clause> ]
 *  !! See footnote (1) about the <as_clause> within ADQL/x
 * bnf-end
 * bnf-start
 *  <as_clause> ::= [ AS ] <column_name>
 *  !! See footnote (1) about the <as_clause> within ADQL/x
 * bnf-end
 */
  final public SelectionItemType derived_column_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "derived_column_S()" ) ;
        ScalarExpressionType seType = null ;
        SelectionItemType retVal = null ;
        String aliasName = null ;
    seType = value_expression_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      aliasName = column_name_S();
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
                if( aliasName != null ) {
                        AliasSelectionItemType asiType = AliasSelectionItemType.Factory.newInstance() ;
                        asiType.setAs( aliasName ) ;
                        asiType.setExpression( seType ) ;
                        retVal = asiType ;
                }
                else {
                    retVal = seType ;
                }
                if( TRACE_ENABLED ) exitTrace ( "derived_column_S()" ) ;
                {if (true) return retVal ;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionItemType derived_column_fragment() throws ParseException {
        SelectionItemType sit = null ;
    sit = derived_column_S();
    jj_consume_token(SEMICOLON);
      {if (true) return sit ;}
    throw new Error("Missing return statement in function");
  }

/**
 * set_function_specification_S
 *
 * bnf-start
 *  <set_function_specification> ::=
 *      COUNT <left_paren> <asterisk> <right_paren>
 *    | <general_set_function>
 * bnf-end
 *
 */
  final public AggregateFunctionType set_function_specification_S() throws ParseException {
        AggregateFunctionType afType = null ;
        Token t = null ;
    if (jj_2_26(3)) {
      t = jj_consume_token(COUNT);
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(ASTERISK);
      jj_consume_token(RIGHT_PAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
        afType = general_set_function_A();
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if( t != null ) {
                        afType = AggregateFunctionType.Factory.newInstance() ;
                        afType.setName( AggregateFunctionNameType.COUNT ) ;
                        SelectionItemType[] argArray = new SelectionItemType[1] ;
                        AtomType atomType = AtomType.Factory.newInstance() ;
                        StringType star = StringType.Factory.newInstance() ;
                        star.setValue( "*" ) ;
                        atomType.setLiteral( star ) ;
                        argArray[0] = atomType ;
                        afType.setArgArray( argArray ) ;
                }
                {if (true) return afType ;}
    throw new Error("Missing return statement in function");
  }

  final public AggregateFunctionType set_function_specification_fragment() throws ParseException {
        AggregateFunctionType aft = null ;
    set_function_specification_S();
    jj_consume_token(SEMICOLON);
          {if (true) return aft ;}
    throw new Error("Missing return statement in function");
  }

/**
 * 
 *
 * bnf-start
 *  <set_limit> ::= TOP <unsigned_integer>
 *  !! SQL92 has no equivalent construct
 * bnf-end
 *
 */
  final public SelectionLimitType set_limit_A() throws ParseException {
        SelectionLimitType sl = null ;
        Token t1 = null ;
    jj_consume_token(TOP);
    t1 = jj_consume_token(UNSIGNED_INTEGER);
                if( t1 != null ) {
                        sl = SelectionLimitType.Factory.newInstance() ;
                        sl.setTop( ( new Integer( t1.image )).intValue() ) ;
                }
        {if (true) return sl ;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionLimitType set_limit_fragment() throws ParseException {
        SelectionLimitType slt = null ;
    slt = set_limit_A();
    jj_consume_token(SEMICOLON);
          {if (true) return slt ;}
    throw new Error("Missing return statement in function");
  }

/**
 * set_quantifier_S
 *
 * bnf-single <set_quantifier> ::= DISTINCT | ALL
 *
 */
  final public SelectionOptionType set_quantifier_S() throws ParseException {
        SelectionOptionType selectionOption = null ;
        Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      t = jj_consume_token(DISTINCT);
      break;
    case ALL:
      t = jj_consume_token(ALL);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        selectionOption = SelectionOptionType.Factory.newInstance() ;
                        if( t.kind == AdqlStoXConstants.ALL ) {
                                selectionOption.setOption( AllOrDistinctType.ALL ) ;
                        }
                        else {
                                selectionOption.setOption( AllOrDistinctType.DISTINCT ) ;
                        }
                }
                {if (true) return selectionOption ;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionOptionType set_quantifier_fragment() throws ParseException {
        SelectionOptionType sot = null ;
    sot = set_quantifier_S();
    jj_consume_token(SEMICOLON);
          {if (true) return sot ;}
    throw new Error("Missing return statement in function");
  }

  final public void single_datetime_field_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DAY:
    case HOUR:
    case MINUTE:
    case MONTH:
    case YEAR:
      nonsecond_datetime_field_S();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        interval_leading_field_precision_S();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      break;
    case SECOND:
      jj_consume_token(SECOND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        interval_leading_field_precision_S();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          interval_fractional_seconds_precision_S();
          break;
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void start_field_S() throws ParseException {
    nonsecond_datetime_field_S();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      interval_leading_field_precision_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
  }

/**
 * 
 *
 * bnf-start
 *  <string_value_expression> ::=
 *      <character_value_expression>
 *  !! SQL92 also supports <bit_value_expression>
 * bnf-end
 *
 */
  final public ScalarExpressionType string_value_expression_A() throws ParseException {
        ScalarExpressionType seType = null ;
    //S:
            // <string_value_expression> ::=
        //    <character_value_expression>
        //  | <bit_value_expression>
    
            seType = character_value_expression_A();
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * subquery_S
 *
 */
  final public SearchType subquery_S() throws ParseException {
        SearchType st = null ;
    jj_consume_token(LEFT_PAREN);
    query_expression_S();
    jj_consume_token(RIGHT_PAREN);
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

  final public void quantified_comparison_predicate_S() throws ParseException {
    row_value_constructor_S();
    comp_op_S();
    quantifier_S();
    table_subquery_S();
  }

  final public void quantifier_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
      break;
    case ANY:
    case SOME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOME:
        jj_consume_token(SOME);
        break;
      case ANY:
        jj_consume_token(ANY);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void query_expression_S() throws ParseException {
    if (jj_2_27(3)) {
      nonjoin_query_expression_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        joined_table_S();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void query_primary_S() throws ParseException {
    if (jj_2_28(3)) {
      nonjoin_query_primary_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        joined_table_S();
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void query_term_S() throws ParseException {
    if (jj_2_29(2)) {
      nonjoin_query_term_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        joined_table_S();
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void corresponding_spec_S() throws ParseException {
    jj_consume_token(CORRESPONDING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      jj_consume_token(LEFT_PAREN);
      corrsponding_column_list_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
  }

  final public void corrsponding_column_list_S() throws ParseException {
    column_name_list_S();
  }

/**
 * cross_join_S
 *
 *-bnf-start
 *- <cross_join> ::=
 *-     <table_reference> CROSS JOIN <table_reference>
 *-bnf-end
 *
 */
  final public JoinTableType cross_join_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "cross_join_S()" ) ;
        JoinTableType jtType = null ;
        FromTableType fType1 = null ;
        FromTableType fType2 = null ;
    fType1 = tableReferenceBarJoinedTable();
    jj_consume_token(CROSS_JOIN);
    fType2 = table_reference_A();
           if( fType2 != null ) {
              jtType = JoinTableType.Factory.newInstance() ;
              jtType.setQualifier( JointTableQualifierType.CROSS ) ;
              FromTableType[] fttArray = new FromTableType[2] ;
              fttArray[0] = fType1 ;
              fttArray[1] = fType2 ;
              ArrayOfFromTableType tableArray = ArrayOfFromTableType.Factory.newInstance() ;
              tableArray.setFromTableTypeArray( fttArray ) ;
              jtType.setTables( tableArray ) ;
           }
           if( TRACE_ENABLED ) exitTrace ( "cross_join_S()" ) ;
           {if (true) return jtType ;}
    throw new Error("Missing return statement in function");
  }

  final public void nonjoin_query_expression_S() throws ParseException {
    if (jj_2_30(4)) {
      query_term_S();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXCEPT:
        case UNION:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNION:
          jj_consume_token(UNION);
          break;
        case EXCEPT:
          jj_consume_token(EXCEPT);
          break;
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
          break;
        default:
          jj_la1[88] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CORRESPONDING:
          corresponding_spec_S();
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        query_term_S();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case SELECT:
      case TABLE:
      case VALUES:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        nonjoin_query_term_S();
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void nonjoin_query_term_S() throws ParseException {
    if (jj_2_31(3)) {
      nonjoin_query_primary_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case SELECT:
      case TABLE:
      case VALUES:
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        query_primary_S();
        jj_consume_token(INTERSECT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CORRESPONDING:
          corresponding_spec_S();
          break;
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        query_primary_S();
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void nonjoin_query_primary_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case TABLE:
    case VALUES:
      simple_table_S();
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      nonjoin_query_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void nonsecond_datetime_field_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case YEAR:
      jj_consume_token(YEAR);
      break;
    case MONTH:
      jj_consume_token(MONTH);
      break;
    case DAY:
      jj_consume_token(DAY);
      break;
    case HOUR:
      jj_consume_token(HOUR);
      break;
    case MINUTE:
      jj_consume_token(MINUTE);
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simple_table_S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      query_specification_A();
      break;
    case VALUES:
      table_value_constructor_S();
      break;
    case TABLE:
      explicit_table_S();
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

///**// * table_expression_A// *// *-bnf-start// *- <table_expression> ::=// *-     <from_clause>// *-     [ <where_clause> ]// *-     [ <group_by_clause> ]// *-     [ <having_clause> ]// *-     [ <order_by_clause> ]// *-!! ADQL adds <order_by_clause>// *-bnf-end// *// */
//void table_expression_A( SelectType st ) : //{//	if( TRACE_ENABLED ) enterTrace ( "table_expression_A" ) ;//} //{//	//S://	// <table_expression> ::=//	// <from_clause>//    // [ <where_clause> ]//    // [ <group_by_clause> ]//    // [ <having_clause> ]//	(//		from_clause_S( st ) 		//		[ LOOKAHEAD(3) where_clause_S( st ) ] //		//		[ LOOKAHEAD(3) group_by_clause_S( st ) ] //		//		[ LOOKAHEAD(3) having_clause_S( st ) ] //		//		[ LOOKAHEAD(3) order_by_clause_A( st ) ]	//	)//	{ //		if( TRACE_ENABLED ) exitTrace ( "table_expression_A" ) ;//	}//}

/**
 * table_name_A
 *
 * bnf-start
 *  <table_name> ::=
 *      <qualified_name>
 *  !! SQL92 also supports <qualified_local_table_name>
 * bnf-end
 *
 */
  final public String table_name_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "table_name_A()" ) ;
        String retValue = null ;
    //S:
            // <table_name> ::=
        //  <qualified_name> | <qualified_local_table_name>
    
            // Forshortened
            retValue = qualified_name_A();
                if( TRACE_ENABLED ) exitTrace ( "table_name_A()" ) ;
                {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

/**
 * table_reference_A
 *
 * bnf-start
 *  <table_reference> ::=
 *      <table_name> [ [ AS ] <correlation_name> ]
 *    | <joined_table> 
 *  !! SQL92 also supports <derived_table> and <derived_column_list>
 * bnf-end
 *
 */
  final public FromTableType table_reference_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "table_reference_A()" ) ;
        FromTableType ftType = null ;
        String tName = null ;
        String cName = null ;
    if (jj_2_32(4)) {
      ftType = joined_table_S();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGULAR_IDENTIFIER:
      case DELIMITED_IDENTIFIER:
        tName = table_name_A();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
        case REGULAR_IDENTIFIER:
        case DELIMITED_IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            break;
          default:
            jj_la1[97] = jj_gen;
            ;
          }
          cName = correlation_name_S();
          break;
        default:
          jj_la1[98] = jj_gen;
          ;
        }
                        if( tName != null ) {
                                TableType tableType = TableType.Factory.newInstance() ;
                                tableType.setName( tName ) ;
                                if( cName != null )
                                        tableType.setAlias( cName ) ;
                                ftType = tableType ;
                        }
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if( TRACE_ENABLED ) exitTrace ( "table_reference_A()" ) ;
                {if (true) return ftType ;}
    throw new Error("Missing return statement in function");
  }

  final public FromTableType table_reference_fragment() throws ParseException {
        FromTableType ft = null ;
    ft = table_reference_A();
    jj_consume_token(SEMICOLON);
          {if (true) return ft ;}
    throw new Error("Missing return statement in function");
  }

// Adaptation of <table_reference>
  final public FromTableType tableReferenceBarJoinedTable() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "tableReferenceBarJoinedTable()" ) ;
        FromTableType ftType = null ;
        String tName = null ;
        String cName = null ;
    tName = table_name_A();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case REGULAR_IDENTIFIER:
    case DELIMITED_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[100] = jj_gen;
        ;
      }
      cName = correlation_name_S();
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
                if( tName != null ) {
                        TableType tableType = TableType.Factory.newInstance() ;
                        tableType.setName( tName ) ;
                        if( cName != null )
                                tableType.setAlias( cName ) ;
                        ftType = tableType ;
                }
                if( TRACE_ENABLED ) exitTrace ( "tableReferenceBarJoinedTable()" ) ;
                {if (true) return ftType ;}
    throw new Error("Missing return statement in function");
  }

  final public SearchType table_subquery_S() throws ParseException {
        SearchType st = null ;
    //S:
            // <table_subquery> ::= <subquery>
            st = subquery_S();
          {if (true) return st ;}
    throw new Error("Missing return statement in function");
  }

/**
 * table_subquery_A
 *
 * bnf-start
 *  <table_subquery> ::= 
 *      <left_paren> <query_specification> <right_paren>
 *  !! SQL92 uses <subquery>
 * bnf-end
 *
 */
  final public SubQuerySet table_subquery_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "table_subquery_A" ) ;
        SubQuerySet sqs = null ;
        SelectType st = null ;
    jj_consume_token(LEFT_PAREN);
    st = query_specification_A();
    jj_consume_token(RIGHT_PAREN);
                if( st != null ) {
                        sqs = SubQuerySet.Factory.newInstance() ;
                        sqs.setSelection( st ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "table_subquery_A" ) ;
                {if (true) return sqs ;}
    throw new Error("Missing return statement in function");
  }

  final public void table_value_constructor_S() throws ParseException {
    jj_consume_token(VALUES);
    table_value_constructor_list_S();
  }

  final public void table_value_constructor_list_S() throws ParseException {
    row_value_constructor_S();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      row_value_constructor_S();
    }
  }

/**
 * term_S
 *
 * bnf-start
 *  <term> ::=
 *      <factor>
 *    | <term> <asterisk> <factor>
 *    | <term> <solidus> <factor>
 * bnf-end
 *
 */
  final public ScalarExpressionType term_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "term_S()" ) ;
        ScalarExpressionType seType = null ;
        ScalarExpressionType[] exprPairs = null ;
    //S:
            //  <term> ::=
        //     <factor>
        //   | <term> <asterisk> <factor>
        //   | <term> <solidus> <factor>
    
            // refactored
            // factor() ( LOOKAHEAD(2) (<ASTERISK> | <SOLIDUS> ) term() )*
            seType = factor_S();
    exprPairs = termList();
                if( exprPairs != null )  {
                   ScalarExpressionType[] args = new ScalarExpressionType[2] ;
                   args[0] = seType ;
                   args[1] = exprPairs[1] ;
                   BinaryExprType beType = (BinaryExprType)exprPairs[0] ;
                   beType.setArgArray( args ) ;
                   seType = beType ;
                }
                if( TRACE_ENABLED ) exitTrace ( "term_S()" ) ;
                {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType[] termList() throws ParseException {
        ArrayList list = null ;
        ScalarExpressionType[] exprPairs1 = null ;
        ScalarExpressionType[] exprPairs2 = null ;
        ScalarExpressionType[] retExprPairs = null ;
    label_16:
    while (true) {
      if (jj_2_33(3)) {
        ;
      } else {
        break label_16;
      }
      exprPairs1 = termSingleton();
            if( list == null )
                   list = new ArrayList() ;
                list.add( exprPairs1 ) ;
    }
                if( list != null ) {
                        ListIterator iterator = list.listIterator() ;
                        retExprPairs = exprPairs1 = (ScalarExpressionType[])iterator.next() ;
                        ScalarExpressionType[] args = new ScalarExpressionType[2] ;
                        BinaryExprType beType = null ;
                        while( iterator.hasNext() ) {
                                exprPairs2 = (ScalarExpressionType[])iterator.next() ;
                                args[0] = exprPairs1[1] ;
                                args[1] = exprPairs2[1] ;
                                beType = (BinaryExprType)exprPairs2[0] ;
                                beType.setArgArray( args ) ;
                                exprPairs1 = exprPairs2 ;
                        }
                }
                {if (true) return retExprPairs ;}
    throw new Error("Missing return statement in function");
  }

  final public ScalarExpressionType[] termSingleton() throws ParseException {
        ScalarExpressionType[] retPairs = null ;
        BinaryExprType beType = null ;
        ScalarExpressionType seType = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      t = jj_consume_token(ASTERISK);
      break;
    case SOLIDUS:
      t = jj_consume_token(SOLIDUS);
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    seType = term_S();
                if( t != null ) {
                        retPairs = new ScalarExpressionType[2] ;
                        beType = BinaryExprType.Factory.newInstance() ;
                        beType.setOper( BinaryOperatorType.Enum.forString( t.image ) ) ;
                        retPairs[0] = beType ;
                        retPairs[1] = seType ;
                }
                {if (true) return retPairs ;}
    throw new Error("Missing return statement in function");
  }

  final public void time_fractional_seconds_precision_S() throws ParseException {
    jj_consume_token(UNSIGNED_INTEGER);
  }

  final public void time_precision_S() throws ParseException {
    time_fractional_seconds_precision_S();
  }

  final public void timestamp_precision_S() throws ParseException {
    time_fractional_seconds_precision_S();
  }

  final public void time_zone_S() throws ParseException {
    jj_consume_token(AT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOCAL:
      jj_consume_token(LOCAL);
      break;
    case TIME_ZONE:
      jj_consume_token(TIME_ZONE);
      interval_value_expression_S();
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * 
 *
 * bnf-start
 *  <trig_function> ::=
 *      ACOS <left_paren> <numeric_value_expression> <right_paren>
 *    | ASIN <left_paren> <numeric_value_expression> <right_paren>
 *    | ATAN <left_paren> <numeric_value_expression> <right_paren>
 *    | ATAN2 <left_paren> <numeric_value_expression> <comma> <numeric_value_expression> <right_paren>
 *    | COS <left_paren> <numeric_value_expression> <right_paren>
 *    | COT <left_paren> <numeric_value_expression> <right_paren>
 *    | SIN <left_paren> <numeric_value_expression> <right_paren>
 *    | TAN <left_paren> <numeric_value_expression> <right_paren>
 *  !! Specific to ADQL
 * bnf-end
 *
 */
  final public TrigonometricFunctionType trig_function_A() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "trig_function_A()" ) ;
        TrigonometricFunctionType tfType = null ;
        ScalarExpressionType arg1 = null ;
        ScalarExpressionType arg2 = null ;
        Token t = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACOS:
      t = jj_consume_token(ACOS);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case ASIN:
      t = jj_consume_token(ASIN);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case ATAN:
      t = jj_consume_token(ATAN);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case ATAN2:
      t = jj_consume_token(ATAN2);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(COMMA);
      arg2 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case COS:
      t = jj_consume_token(COS);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case COT:
      t = jj_consume_token(COT);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case SIN:
      t = jj_consume_token(SIN);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    case TAN:
      t = jj_consume_token(TAN);
      jj_consume_token(LEFT_PAREN);
      arg1 = numeric_value_expression_S();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( t != null ) {
                        ScalarExpressionType[] argArray = null ;
                        tfType = TrigonometricFunctionType.Factory.newInstance() ;
                        tfType.setName( TrigonometricFunctionNameType.Enum.forString( t.image.toUpperCase() ) ) ;
                        if( arg2 != null ) {
                                argArray = new ScalarExpressionType[2] ;
                                argArray[0] = arg1 ;
                                argArray[1] = arg2 ;
                        }
                        else {
                                argArray = new ScalarExpressionType[1] ;
                                argArray[0] = arg1 ;
                        }
                        tfType.setArgArray( argArray ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "trig_function_A()" ) ;
                {if (true) return tfType ;}
    throw new Error("Missing return statement in function");
  }

  final public void unique_predicate_S() throws ParseException {
    jj_consume_token(UNIQUE);
    table_subquery_S();
  }

/**
 * unsigned_literal_S
 *
 * bnf-single <unsigned_literal> ::= <unsigned_numeric_literal> | <general_literal>
 *
 */
  final public AtomType unsigned_literal_S() throws ParseException {
        AtomType atomType = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      atomType = unsigned_numeric_literal_A();
      break;
    case ASCII_STRING_LITERAL:
      atomType = general_literal_A();
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * unsigned_numeric_literal_A
 *
 * bnf-start
 *  <unsigned_numeric_literal> ::=
 *     <exact_numeric_literal>
 *  !! SQL92 also supports <approximate_numeric_literal>
 * bnf-end
 *
 */
  final public AtomType unsigned_numeric_literal_A() throws ParseException {
        AtomType atomType = null ;
    // JL. Note the adql/x schema does not possess an approximateNumericLiteral
                    atomType = exact_numeric_literal_S(DONT_CHANGE_SIGN);
      {if (true) return atomType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * unsigned_value_specification_S
 *
 * bnf-start
 *  <unsigned_value_specification> ::=
 *      <unsigned_literal>
 *    | <general_value_specification>
 * bnf-end
 *
 */
  final public ScalarExpressionType unsigned_value_specification_S() throws ParseException {
        if( TRACE_ENABLED ) enterTrace ( "unsigned_value_specification_S()" ) ;
        ScalarExpressionType seType = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASCII_STRING_LITERAL:
    case UNSIGNED_INTEGER:
    case EXACT_NUMERIC_LITERAL:
      seType = unsigned_literal_S();
      break;
    case DOLLAR:
      general_value_specification_A();
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( TRACE_ENABLED ) exitTrace ( "unsigned_value_specification_S()" ) ;
                {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * value_expression_A
 *
 * bnf-start
 *  <value_expression> ::=
 *	    <numeric_value_expression>
 *    | <string_value_expression>
 *  !! SQL92 also supports <datetime_value_expression>
 *     and <interval_value_expression>
 * bnf-end
 *
 */
  final public ScalarExpressionType value_expression_A() throws ParseException {
    if( TRACE_ENABLED ) enterTrace ( "value_expression_A()" ) ;
        ScalarExpressionType retValue = null ;
    if (jj_2_34(3)) {
      retValue = numeric_value_expression_S();
    } else if (jj_2_35(3)) {
      retValue = string_value_expression_A();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                if( TRACE_ENABLED ) exitTrace ( "value_expression_A()" ) ;
                {if (true) return retValue ;}
    throw new Error("Missing return statement in function");
  }

/**
 * variable_specification_A
 *
 * bnf-start
 *  <variable_specification> ::=
 *  !! Yet to be worked out.
 * bnf-end
 *
 */
  final public ScalarExpressionType variable_specification_A() throws ParseException {
        ScalarExpressionType seType = null ;
    jj_consume_token(DOLLAR);
    jj_consume_token(LBRACE);
    jj_consume_token(REGULAR_IDENTIFIER);
    jj_consume_token(RBRACE);
          {if (true) return seType ;}
    throw new Error("Missing return statement in function");
  }

/**
 * where_clause_S
 *
 * bnf-single <where_clause> ::= WHERE <search_condition>
 *
 */
  final public WhereType where_clause_S() throws ParseException {
 /*@bgen(jjtree) Where */
        ASTWhere jjtn000 = new ASTWhere(this, JJTWHERE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);if( TRACE_ENABLED ) enterTrace ( "where_clause_S" ) ;
        WhereType whereType = null ;
        SearchType s = null ;
        Token t = null ;
    try {
      //S:
              // WHERE <search_condition>
      
              t = jj_consume_token(WHERE);
      s = search_condition_S();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if( s != null ) {
                        whereType = WhereType.Factory.newInstance() ;
                        whereType.setCondition( s ) ;
                }
                if( TRACE_ENABLED ) exitTrace ( "where_clause_S" ) ;
                {if (true) return whereType ;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public WhereType where_clause_fragment() throws ParseException {
        WhereType wt = null ;
    wt = where_clause_S();
    jj_consume_token(SEMICOLON);
          {if (true) return wt ;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_3R_21() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(252)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(165)) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(ASCII_STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(TIME_ZONE)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    Token xsp;
    if (jj_3R_165()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(GROUPBY)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(233)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(30)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_106()) return true;
    if (jj_scan_token(INTERSECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_212()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(161)) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_215()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_85()) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_70()) return true;
    if (jj_3R_71()) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    return false;
  }

  final private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(320)) {
    jj_scanpos = xsp;
    if (jj_scan_token(321)) return true;
    }
    return false;
  }

  final private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    }
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_142()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(CORRESPONDING)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(312)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(313)) {
    jj_scanpos = xsp;
    if (jj_scan_token(314)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_27()) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(ASTERISK)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(TRUNCATE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(ROUND)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(RAND)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(LOG10)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_110()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(165)) jj_scanpos = xsp;
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(SQUARE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_200()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(RADIANS)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(POWER)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(PI)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_125()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(FLOOR)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(VALUES)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(EXP)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(DEGREES)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(CEILING)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(324)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(REGULAR_IDENTIFIER)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_64()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(SECOND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(165)) jj_scanpos = xsp;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(ORDERBY)) return true;
    if (jj_3R_75()) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(165)) jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(197)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(177)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(326)) {
    jj_scanpos = xsp;
    if (jj_scan_token(324)) return true;
    }
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_144()) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(SECOND)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(TOP)) return true;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(HAVING)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  final private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(324)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(ASTERISK)) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(324)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    return false;
  }

  final private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(CURRENT_TIMESTAMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(CURRENT_TIME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(ON)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(TAN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(SIN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(COT)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(COS)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(ATAN2)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(ASIN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(ACOS)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(ATAN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_146()) return true;
    return false;
  }

  public AdqlStoXTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[108];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static private int[] jj_la1_10;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
      jj_la1_6();
      jj_la1_7();
      jj_la1_8();
      jj_la1_9();
      jj_la1_10();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x5000,0x0,0x200,0x0,0x0,0x0,0x2000,0x200,0x380000,0x200,0x5000,0x5200,0x200,0x200,0x0,0x200,0x0,0x0,0x5000,0x5000,0x2000,0x0,0x2000,0x0,0x200,0x5000,0x5000,0x0,0x10800,0x5200,0x5000,0x200,0x2000,0x5000,0x5000,0x5000,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x5200,0x0,0x0,0x200,0x5000,0x0,0x0,0x0,0x2000,0x200,0x0,0x40000000,0x0,0x0,0x5000,0x5000,0x5000,0x5200,0x2000,0x0,0x0,0x5200,0x200,0x2000,0x2000,0x5a00,0x0,0x0,0x0,0x40000000,0x200,0x2000,0x200,0x0,0x200,0x0,0x40000000,0x200,0x200,0x200,0x0,0x0,0x0,0x40000000,0x0,0x200,0x40000000,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x10800,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x200,0x0,0x0,0x20,0x20,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x10,0x10,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x3880,0x0,0x80,0x0,0x0,0x3800,0x0,0x20000,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x80,0x0,0x0,0x4000000,0x4000000,0x0,0x80,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x80,0x80000000,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x40,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x400000,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0x0,0xc000000,0x0,0xc000000,0x0,0x0,0x0,0x0,0x50000000,0x0,0x0,0x0,0x0,0xc000000,0x0,0x0,0x0,0x0,0x0,0x50000000,0x0,0xc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x100010,0x0,0x0,0x0,0xc000000,0x0,0x0,0xc000000,0x0,0x0,0x0,0x0,0x0,0xc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0x0,0x0,0xc000000,0x0,0x0,0x0,0x0,0x50000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x20,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x20000,0x0,0x0,0x200000,0x200000,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x0,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x400,0x0,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8001000,0x0,0x0,0x8001000,0x8001000,0x0,0x8001000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x40000,0x0,0x0,0x40000,0x40000,0x10000000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_8() {
      jj_la1_8 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000000,0xe0000000,0x0,0xe0000000,0x0,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,0x0,0x0,0x1fff8000,0x1e8000,0x0,0x0,0x0,0x0,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_9() {
      jj_la1_9 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x900000,0x7000000,0x900000,0x0,0x9fffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9fffff,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9fffff,0xfff,0x0,0x9fffff,0x0,0xfffff,0x0,0x0,0x0,0x900000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9fffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0xff000,0x100000,0x900000,};
   }
   private static void jj_la1_10() {
      jj_la1_10 = new int[] {0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x53,0x0,0x53,0x0,0x53,0x0,0x0,0x0,0x0,0x0,0x50,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x53,0x0,0x0,0x0,0x0,0x0,0x50,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x53,0x0,0x0,0x53,0x0,0x0,0x0,0x0,0x0,0x53,0x0,0x0,0x0,0x0,0x0,0x0,0x50,0x50,0x0,0x0,0x0,0x50,0x0,0x0,0x0,0x53,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x3,0x0,0x0,0x0,0x0,0x50,0x50,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[35];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public AdqlStoX(java.io.InputStream stream) {
     this(stream, null);
  }
  public AdqlStoX(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AdqlStoXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AdqlStoX(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AdqlStoXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AdqlStoX(AdqlStoXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AdqlStoXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[336];
    for (int i = 0; i < 336; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 108; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
          if ((jj_la1_10[i] & (1<<j)) != 0) {
            la1tokens[320+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 336; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
