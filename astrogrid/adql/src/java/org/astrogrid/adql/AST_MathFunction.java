/* Generated By: AdqlStoX.jjt,v 1.33.2.4 2006-12-19 14&JJTree: Do not edit this line. AST_MathFunction.java */

package org.astrogrid.adql;

import org.astrogrid.adql.v1_0.beans.MathFunctionType;
import org.astrogrid.adql.v1_0.beans.ScalarExpressionType;
import org.astrogrid.adql.v1_0.beans.MathFunctionNameType;
import org.astrogrid.adql.v1_0.beans.SelectionItemType;
import org.astrogrid.adql.v1_0.beans.AtomType;
import org.astrogrid.adql.v1_0.beans.IntegerType;

import java.lang.Long;


public class AST_MathFunction extends SimpleNode {
    
    private Object arg2 ;

    public AST_MathFunction(AdqlStoX p, int id) {
        super(p, id);
    }

    public void setArg2( Object arg2 ) {
        this.arg2 = arg2 ;
    }

    public void jjtClose() {
        MathFunctionType mfType = MathFunctionType.Factory.newInstance() ;
        mfType.setName( MathFunctionNameType.Enum.forString( firstToken.image.toUpperCase() ) ) ;
        SelectionItemType[] argArray ;

        if( firstToken.kind == AdqlStoXConstants.PI ) {
            argArray = new SelectionItemType[0] ;
        }
        else if( firstToken.kind == AdqlStoXConstants.POWER ) {
            argArray = new SelectionItemType[2] ;
            argArray[0] = (ScalarExpressionType)children[0].getGeneratedObject() ;
            AtomType atomType = AtomType.Factory.newInstance() ;
            IntegerType intType = IntegerType.Factory.newInstance() ;
            intType.setValue( ((Long)arg2).longValue() ) ;
            atomType.setLiteral( intType ) ;
            argArray[1] = atomType ;
        }
        else {
            argArray = new SelectionItemType[1] ;
            argArray[0] = (ScalarExpressionType)children[0].getGeneratedObject() ;    
        }
        mfType.setArgArray( argArray ) ;
        setGeneratedObject( mfType ) ;
    }
     
}
  
