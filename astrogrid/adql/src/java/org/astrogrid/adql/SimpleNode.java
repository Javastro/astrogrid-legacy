/* Generated By: AdqlStoX.jjt,v 1.15 2006/10/02 09&JJTree: Do not edit this line. SimpleNode.java */

package org.astrogrid.adql;

import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;
//import org.astrogrid.adql.v1_0.beans.SelectionListType;
import org.apache.xmlbeans.SchemaType;
import org.apache.xmlbeans.SimpleValue;
import org.apache.xmlbeans.XmlAnySimpleType;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.XmlString;
import org.apache.xmlbeans.XmlCursor;

public class SimpleNode implements Node {
    
  private static Log log = LogFactory.getLog( SimpleNode.class ) ;
      
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected AdqlStoX parser;
  protected Object generatedObject ;
  
  protected Token firstToken, lastToken;

  public SimpleNode( AdqlStoX p, int i ) {
    this.id = i ;
    parser = p;
  }

  public void jjtOpen() {
      getTracker() ;     
  }

  public void jjtClose() {}
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return AdqlStoXTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
	SimpleNode n = (SimpleNode)children[i];
	if (n != null) {
	  n.dump(prefix + " ");
	}
      }
    }
  }

  public Object getGeneratedObject() {
    return generatedObject;
}

public void setGeneratedObject( Object generatedObject ) {
    this.generatedObject = generatedObject ;
    if( isCommentPresent() == true ) {
        getTracker().setComment( firstToken.specialToken.image ) ;
    }
}

public Token getFirstToken() {
    return firstToken;
}

public void setFirstToken(Token firstToken) {
    this.firstToken = firstToken;
}

public Token getLastToken() {
    return lastToken;
}

public void setLastToken(Token lastToken) {
    this.lastToken = lastToken;
}

private boolean isCommentPresent() {
    if( generatedObject instanceof XmlObject 
        &&
        firstToken.specialToken != null 
        &&
        firstToken.specialToken.kind == AdqlStoXConstants.COMMENT ) {
        return true ;
    }
    return false ;
}

public void writeComment() {
    if( log.isTraceEnabled() ) { log.trace("writeComment() - enter"); }
    // It has to be an XmlObject to be relevant (it could be a String!)
    // The special token may not exist and if it does it must be of
    // kind COMMENT (otherwise why are we trying to write a comment?).
    if( generatedObject instanceof XmlObject 
        &&
        firstToken.specialToken != null 
        &&
        firstToken.specialToken.kind == AdqlStoXConstants.COMMENT
            ) {
        XmlCursor cursor = null ;
        try {
            XmlObject xo = (XmlObject)generatedObject ;
            cursor = xo.newCursor() ;
            boolean moved = cursor.toChild(0) ;
            String comment = firstToken.specialToken.image ;
            if( log.isDebugEnabled() ) {
                log.debug( "xo.schemaType: " + xo.schemaType().getName() ) ;
                log.debug( "cursor.getName(): " + cursor.getName() ) ;
                log.debug( "moved: " + moved ) ;
                log.debug( "Writing comment: " + comment ) ;
            }
            cursor.insertComment( comment ) ;          
        }
        catch( Exception ex ) {
            log.debug( ex ) ;
        }
        finally {
            if( cursor != null )
                cursor.dispose();
        }
    }
    if( log.isTraceEnabled() ) { log.trace( "writeComment() - exit" ) ; }   
}

public Tracker getTracker() {
    return parser.getTracker() ;
}
  
} // end of class SimpleNode

