/* Generated By: AdqlStoX.jjt,v 1.22 2006/10/16 15&JJTree&JavaCC: Do not edit this line. AdqlStoXTokenManager.java */
package org.astrogrid.adql ;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;
import java.util.* ;
import org.astrogrid.adql.v1_0.beans.* ;
import org.astrogrid.stc.region.v1_10.beans.* ;
import org.astrogrid.stc.coords.v1_10.beans.* ;

public class AdqlStoXTokenManager implements AdqlStoXConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x1fe0000000000L) != 0L || (active5 & 0x8000700000000L) != 0L)
         {
            jjmatchedKind = 417;
            return 19;
         }
         if ((active1 & 0x6000000000000000L) != 0L || (active2 & 0x7e000000L) != 0L || (active4 & 0xc00c00000000L) != 0L || (active5 & 0x9000000000000000L) != 0L || (active6 & 0x2L) != 0L)
            return 55;
         if ((active0 & 0xffff000000000000L) != 0L || (active1 & 0xffffL) != 0L || (active4 & 0x3fc0L) != 0L || (active5 & 0x21880000000000L) != 0L || (active6 & 0x2800100L) != 0L)
         {
            jjmatchedKind = 417;
            return 39;
         }
         if ((active0 & 0x100L) != 0L)
            return 56;
         if ((active6 & 0x80000000L) != 0L)
            return 2;
         if ((active3 & 0x1fff8000000L) != 0L || (active5 & 0xbfc00000L) != 0L || (active6 & 0x1200000L) != 0L)
         {
            jjmatchedKind = 417;
            return 6;
         }
         if ((active6 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 421;
            return 57;
         }
         if ((active0 & 0x80000L) != 0L || (active4 & 0x2L) != 0L)
            return 0;
         if ((active0 & 0xfffff8000000L) != 0L || (active1 & 0x9f803fffffff0000L) != 0L || (active2 & 0xffffffff81ffffffL) != 0L || (active3 & 0x3ffe000007ffffffL) != 0L || (active4 & 0xffff3ff201ffc038L) != 0L || (active5 & 0x6fc277f8003fffffL) != 0L || (active6 & 0x3c5ff6fdL) != 0L)
         {
            jjmatchedKind = 417;
            return 55;
         }
         if ((active0 & 0x8000L) != 0L)
            return 58;
         if ((active1 & 0x7fc00000000000L) != 0L || (active4 & 0x1fe000000L) != 0L || (active5 & 0x4000000000000L) != 0L || (active6 & 0x800L) != 0L)
         {
            jjmatchedKind = 417;
            return 12;
         }
         if ((active0 & 0x20L) != 0L)
            return 59;
         return -1;
      case 1:
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x400000000000L) != 0L || (active4 & 0x6000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 1;
            }
            return 11;
         }
         if ((active0 & 0x7ff7e0ff8000000L) != 0L || (active1 & 0xf9ffbfffffffff00L) != 0L || (active2 & 0xfffe63cfffff8001L) != 0L || (active3 & 0x3ffff003ffffffffL) != 0L || (active4 & 0xfde0ff3ff9fff0f8L) != 0L || (active5 & 0x6fe47fff87ffffffL) != 0L || (active6 & 0x95fdff0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 1;
            }
            return 55;
         }
         if ((active3 & 0x1f800000000L) != 0L || (active5 & 0x30000000L) != 0L || (active6 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active3 & 0xe0000000000L) != 0L || (active5 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 1;
            }
            return 18;
         }
         if ((active0 & 0xf800000000000000L) != 0L || (active1 & 0xffL) != 0L || (active4 & 0xf00L) != 0L || (active5 & 0x1800000000000L) != 0L || (active6 & 0x2800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 1;
            }
            return 38;
         }
         if ((active0 & 0x81f000000000L) != 0L || (active1 & 0x600000000000000L) != 0L || (active2 & 0x19c3000007ffeL) != 0L || (active3 & 0x400000000L) != 0L || (active4 & 0x21f00c000000000L) != 0L || (active5 & 0x2000008000000L) != 0L || (active6 & 0x3400200fL) != 0L)
            return 55;
         return -1;
      case 2:
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 2;
            }
            return 10;
         }
         if ((active3 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 2;
            }
            return 17;
         }
         if ((active3 & 0x10000000000L) != 0L || (active6 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 2;
            }
            return 4;
         }
         if ((active0 & 0xffff4d4110000000L) != 0L || (active1 & 0xfd73bfcfffc5ffffL) != 0L || (active2 & 0xffef73cfe3fec4fdL) != 0L || (active3 & 0x3fff76fbfd0f7fffL) != 0L || (active4 & 0xffe7bfbfde7ffff8L) != 0L || (active5 & 0x612df9fbb7f7fffeL) != 0L || (active6 & 0x3c1b4900L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 2;
            }
            return 55;
         }
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x322ee8000000L) != 0L || (active1 & 0x8c0030003a0000L) != 0L || (active2 & 0x1000201c011b00L) != 0L || (active3 & 0x800002f08000L) != 0L || (active4 & 0x18400021800000L) != 0L || (active5 & 0xec2060408080001L) != 0L || (active6 & 0x3c496f0L) != 0L)
            return 55;
         return -1;
      case 3:
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return 9;
         }
         if ((active3 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return 16;
         }
         if ((active0 & 0x200000000000L) != 0L || (active6 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return 22;
         }
         if ((active0 & 0x1ec400000000000L) != 0L || (active1 & 0x4460060c1c010000L) != 0L || (active2 & 0xa00830c800549000L) != 0L || (active3 & 0x36e081f3e0050081L) != 0L || (active4 & 0x55e037040e4ba000L) != 0L || (active5 & 0x800081406001eL) != 0L || (active6 & 0x3c090000L) != 0L)
            return 55;
         if ((active0 & 0xfe130d4198000000L) != 0L || (active1 & 0xb91bb9c3e3f4ffffL) != 0L || (active2 & 0x5fe74307f3aa4efdL) != 0L || (active3 & 0x91f76081dea7f7eL) != 0L || (active4 & 0xaa17c8bbf1b45ff8L) != 0L || (active5 & 0x61e7fdf3a3f9ffe0L) != 0L || (active6 & 0x32cb00L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return 55;
         }
         return -1;
      case 4:
         if ((active6 & 0x20040000L) != 0L)
            return 22;
         if ((active0 & 0x80200000000000L) != 0L || (active4 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 4;
            }
            return 22;
         }
         if ((active3 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 4;
            }
            return 15;
         }
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x400000000000L) != 0L)
            return 8;
         if ((active0 & 0xf953094098000000L) != 0L || (active1 & 0xa1083dc3fbf4fd7fL) != 0L || (active2 & 0x77ec4383300a4ecdL) != 0L || (active3 & 0x98147b95e27f5eL) != 0L || (active4 & 0x89f74a39d5b44f90L) != 0L || (active5 & 0x6063fd13a1f9fffeL) != 0L || (active6 & 0x228300L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 4;
            }
            return 55;
         }
         if ((active5 & 0x4000002000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x600040100000000L) != 0L || (active1 & 0x1813800000000280L) != 0L || (active2 & 0x8030004c3a00030L) != 0L || (active3 & 0x907620008080020L) != 0L || (active4 & 0x2200808220001060L) != 0L || (active5 & 0x18000e800000000L) != 0L || (active6 & 0x104800L) != 0L)
            return 55;
         return -1;
      case 5:
         if ((active4 & 0x8L) != 0L)
            return 22;
         if ((active0 & 0x80200000000000L) != 0L || (active2 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 5;
            }
            return 22;
         }
         if ((active0 & 0x3953094088000000L) != 0L || (active1 & 0x80083400f9f47c7fL) != 0L || (active2 & 0x37e80103000a4e4dL) != 0L || (active3 & 0x98007b95e2684eL) != 0L || (active4 & 0x89f50239d5144dc0L) != 0L || (active5 & 0x23452a1f9c73eL) != 0L || (active6 & 0x208300L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 5;
            }
            return 55;
         }
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 5;
            }
            return 14;
         }
         if ((active5 & 0x4000002000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc000000010000000L) != 0L || (active1 & 0x210009c302008100L) != 0L || (active2 & 0x4004408030000080L) != 0L || (active3 & 0x4140000001710L) != 0L || (active4 & 0x2480000a00210L) != 0L || (active5 & 0x6061c901000038c0L) != 0L || (active6 & 0x20000L) != 0L)
            return 55;
         return -1;
      case 6:
         if ((active0 & 0x2940014088000000L) != 0L || (active1 & 0x80001100f984005cL) != 0L || (active2 & 0x32c8000100024c4dL) != 0L || (active3 & 0x80007b91c2004eL) != 0L || (active4 & 0x80e40239d5144cc0L) != 0L || (active5 & 0x200410130c33eL) != 0L || (active6 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 6;
            }
            return 55;
         }
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x80200000000000L) != 0L || (active2 & 0x20000000000L) != 0L || (active3 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 6;
            }
            return 22;
         }
         if ((active5 & 0x4000002000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1013080000000000L) != 0L || (active1 & 0x8240000707c23L) != 0L || (active2 & 0x520010200080200L) != 0L || (active3 & 0x18080000206800L) != 0L || (active4 & 0x911000000000100L) != 0L || (active5 & 0x3412a0c90400L) != 0L || (active6 & 0x8300L) != 0L)
            return 55;
         return -1;
      case 7:
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2140014000000000L) != 0L || (active1 & 0x1007084004eL) != 0L || (active2 & 0x308000000000444dL) != 0L || (active3 & 0x7391000002L) != 0L || (active4 & 0x80e40200140400c0L) != 0L || (active5 & 0x2004100208332L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 7;
            }
            return 55;
         }
         if ((active5 & 0x4000002000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80200000000000L) != 0L || (active1 & 0x7800L) != 0L || (active2 & 0x20000000000L) != 0L || (active3 & 0x4004000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 7;
            }
            return 22;
         }
         if ((active0 & 0x802000088000000L) != 0L || (active1 & 0x8000100089000010L) != 0L || (active2 & 0x248000100020800L) != 0L || (active3 & 0x80000800c2004cL) != 0L || (active4 & 0x39c1104c00L) != 0L || (active5 & 0x190400cL) != 0L || (active6 & 0x200000L) != 0L)
            return 55;
         return -1;
      case 8:
         if ((active0 & 0x80200000000000L) != 0L || (active1 & 0x7800L) != 0L || (active2 & 0x20000000000L) != 0L || (active3 & 0x304004000L) != 0L || (active4 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 8;
            }
            return 22;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x7084004eL) != 0L || (active2 & 0x1000000000000440L) != 0L || (active3 & 0x5000000002L) != 0L || (active4 & 0xa4002094040840L) != 0L || (active5 & 0x2000100208332L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 8;
            }
            return 55;
         }
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active5 & 0x4000002000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2140004000000000L) != 0L || (active1 & 0x10000000000L) != 0L || (active2 & 0x208000000000400dL) != 0L || (active3 & 0x2091000000L) != 0L || (active4 & 0x8040020000000080L) != 0L || (active5 & 0x4000000000L) != 0L)
            return 55;
         return -1;
      case 9:
         if ((active0 & 0x200000000000L) != 0L)
            return 22;
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x20000040L) != 0L || (active2 & 0x40L) != 0L || (active3 & 0x5000000000L) != 0L || (active4 & 0x24002084040800L) != 0L || (active5 & 0x2000000000332L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 9;
            }
            return 55;
         }
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x180000000000000L) != 0L || (active1 & 0x7800L) != 0L || (active2 & 0x20000000000L) != 0L || (active3 & 0x304004000L) != 0L || (active4 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 9;
            }
            return 22;
         }
         if ((active5 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active1 & 0x5084000eL) != 0L || (active2 & 0x1000000000000400L) != 0L || (active3 & 0x2L) != 0L || (active4 & 0x80000010000040L) != 0L || (active5 & 0x100208000L) != 0L)
            return 55;
         return -1;
      case 10:
         if ((active0 & 0x80000000000000L) != 0L || (active3 & 0x4000000L) != 0L)
            return 22;
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x7800L) != 0L || (active2 & 0x20000000000L) != 0L || (active3 & 0x300004000L) != 0L || (active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 10;
            return 22;
         }
         if ((active5 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x40L) != 0L || (active4 & 0x24000084000800L) != 0L || (active5 & 0x2000000000112L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 10;
            return 55;
         }
         if ((active1 & 0x20000008L) != 0L || (active2 & 0x40L) != 0L || (active3 & 0x5000000000L) != 0L || (active4 & 0x2000040000L) != 0L || (active5 & 0x220L) != 0L)
            return 55;
         return -1;
      case 11:
         if ((active1 & 0x7800L) != 0L || (active2 & 0x20000000000L) != 0L || (active3 & 0x4000L) != 0L)
            return 22;
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x40L) != 0L || (active4 & 0x20000080000800L) != 0L || (active5 & 0x110L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 11;
            }
            return 55;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active3 & 0x300000000L) != 0L || (active4 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 417;
               jjmatchedPos = 11;
            }
            return 22;
         }
         if ((active4 & 0x4000004000000L) != 0L || (active5 & 0x2000000000002L) != 0L)
            return 55;
         return -1;
      case 12:
         if ((active3 & 0x100000000L) != 0L)
            return 22;
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x2000L) != 0L || (active3 & 0x200000000L) != 0L || (active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 12;
            return 22;
         }
         if ((active4 & 0x20000000000000L) != 0L || (active5 & 0x110L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 12;
            return 55;
         }
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x40L) != 0L || (active4 & 0x80000800L) != 0L)
            return 55;
         return -1;
      case 13:
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x2000L) != 0L || (active3 & 0x200000000L) != 0L || (active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 13;
            return 22;
         }
         if ((active4 & 0x20000000000000L) != 0L || (active5 & 0x110L) != 0L)
            return 55;
         return -1;
      case 14:
         if ((active3 & 0x200000000L) != 0L || (active4 & 0x1000000000L) != 0L)
            return 22;
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 14;
            return 22;
         }
         return -1;
      case 15:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 15;
            return 22;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 22;
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active1 & 0x2000L) != 0L)
            return 22;
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active6 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active6 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active6 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 421;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 415, 2);
      case 34:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 36:
         return jjStopAtPos(0, 416);
      case 37:
         return jjStopAtPos(0, 6);
      case 38:
         return jjStopAtPos(0, 7);
      case 39:
         return jjStartNfaWithStates_0(0, 8, 56);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 11);
      case 43:
         return jjStopAtPos(0, 12);
      case 44:
         return jjStopAtPos(0, 13);
      case 45:
         return jjStopAtPos(0, 14);
      case 46:
         return jjStartNfaWithStates_0(0, 15, 58);
      case 47:
         return jjStopAtPos(0, 16);
      case 53:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1000000000000L);
      case 54:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2000000000000L);
      case 58:
         return jjStopAtPos(0, 17);
      case 59:
         return jjStopAtPos(0, 18);
      case 60:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2L, 0x0L, 0x0L);
      case 61:
         return jjStopAtPos(0, 20);
      case 62:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 22);
      case 91:
         return jjStopAtPos(0, 25);
      case 93:
         return jjStopAtPos(0, 26);
      case 95:
         return jjStopAtPos(0, 23);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3fff8000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x6100000000000000L, 0x3c000084L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xfc0000000000L, 0x0L, 0x0L, 0x0L, 0x38L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffff000000000000L, 0xffffL, 0x0L, 0x0L, 0x3fc0L, 0x21880000000000L, 0x2800100L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ffff0000L, 0x0L, 0x0L, 0xfc000L, 0x600000000000000L, 0x200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ff800000000L, 0x0L, 0x0L, 0x1f00000L, 0x100000000000L, 0x400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fc00000000000L, 0x0L, 0x0L, 0x1fe000000L, 0x4000000000000L, 0x800L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f80000000000000L, 0x0L, 0x0L, 0x200000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         jjmatchedKind = 380;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000000000L, 0x0L, 0x0L, 0xc00000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x7fffL, 0x0L, 0xf000000000L, 0x2000000000000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000L, 0x0L, 0x70000000000L, 0x0L, 0x11L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fe0000L, 0x0L, 0x380000000000L, 0x0L, 0x41040L);
      case 77:
      case 109:
         jjmatchedKind = 383;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7e000000L, 0x0L, 0xc00000000000L, 0x0L, 0x22L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ff80000000L, 0x0L, 0x7000000000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffe0000000000L, 0x0L, 0x7f8000000000000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7ff0000000000000L, 0x0L, 0x7800000000000000L, 0x200000000000L, 0x6008L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000000L, 0xffL, 0x8000000000000000L, 0x8c000000003ffffL, 0x188000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7ffff00L, 0x0L, 0x4000003c0000L, 0x430000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1fff8000000L, 0x0L, 0xbfc00000L, 0x1200000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1fe0000000000L, 0x0L, 0x8000700000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3e000000000000L, 0x0L, 0x800000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfc0000000000000L, 0x0L, 0x7000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x78000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0x0L, 0x0L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x0L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 254);
      case 124:
         return jjStopAtPos(0, 24);
      case 125:
         return jjStopAtPos(0, 255);
      case 126:
         return jjStopAtPos(0, 414);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x3000000000000L);
      case 61:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         else if ((active4 & 0x4L) != 0L)
            return jjStopAtPos(1, 258);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f000000000000L, active1, 0x2000400000030000L, active2, 0x30000386060000L, active3, 0x1e000008000000L, active4, 0x8800400406004008L, active5, 0x8c0001000c40001L, active6, 0x1088000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000L, active5, 0L, active6, 0x80L);
      case 67:
      case 99:
         if ((active6 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 387, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L, active2, 0x20400000000L, active3, 0x300L, active4, 0L, active5, 0L, active6, 0x8000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x8000000000000000L, active2, 0L, active3, 0L, active4, 0x3000000000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000L, active1, 0x8080001ffc0000L, active2, 0x8000000800390000L, active3, 0x100000001000fc1fL, active4, 0x830000010000L, active5, 0x620400001080ffeL, active6, 0x300L);
      case 70:
      case 102:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 294, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x18000000000000L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x3e0000000000000L, active1, 0L, active2, 0L, active3, 0x1c0000020000000L, active4, 0x40L, active5, 0x2000100000L, active6, 0L);
      case 73:
      case 105:
         if ((active6 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 397, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000L, active1, 0x10000e0000000L, active2, 0x18400000L, active3, 0x2200003c0010020L, active4, 0xc0018060010L, active5, 0x4080806000000L, active6, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000001c0000000L, active1, 0x102000800000000L, active2, 0L, active3, 0L, active4, 0x1000000000100080L, active5, 0x108000000000L, active6, 0x800L);
      case 77:
      case 109:
         if ((active6 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 384, 55);
         else if ((active6 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 385, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0x20000L, active4, 0L, active5, 0x70000000000L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L, active1, 0x3000000000L, active2, 0x100000001ffcL, active3, 0xe0000000000L, active4, 0x8000000000L, active5, 0x10a000000000000L, active6, 0L);
      case 79:
      case 111:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xf800400000000000L, active1, 0x441c0003000000ffL, active2, 0x40002061808000L, active3, 0x24000000000400c0L, active4, 0x7300820000f00L, active5, 0x1a0000801f000L, active6, 0x2945000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x600000000000L, active3, 0x300000080000L, active4, 0x1e0000000000000L, active5, 0x300000000L, active6, 0x30L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xf00000L, active4, 0L, active5, 0L, active6, 0x30000L);
      case 82:
      case 114:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x1820000400000300L, active2, 0x3f81000000000000L, active3, 0x80001f800000000L, active4, 0x62000002c0201020L, active5, 0x6000004030000000L, active6, 0x200000L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000L, active1, 0x4000000000L, active2, 0x4000L, active3, 0x1c00000000000L, active4, 0L, active5, 0x480000000L, active6, 0x4000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000L, active6, 0x30000000L);
      case 85:
      case 117:
         if ((active6 & 0x4L) != 0L)
         {
            jjmatchedKind = 386;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x4000000000fc00L, active2, 0x400601c000000000L, active3, 0x3000000L, active4, 0x100082000L, active5, 0x20000L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0x8000000000000L, active3, 0L, active4, 0x400000000000000L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3f8000000000L, active2, 0L, active3, 0L, active4, 0x1c00000L, active5, 0L, active6, 0x400L);
      case 89:
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0L, active5, 0L, active6, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x9e0000000000000L, active1, 0x800000020040000L, active2, 0x8000000000080000L, active3, 0x10004078000a0001L, active4, 0x1000100000000000L, active5, 0x1001020001eL, active6, 0x30000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x9000000L, active4, 0x2000L, active5, 0xc01000L, active6, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 55);
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 388, 55);
         else if ((active6 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 389, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1c000300000L, active2, 0x800000L, active3, 0xc00L, active4, 0x1000000008000L, active5, 0x6000400000000020L, active6, 0L);
      case 68:
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 55);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 55);
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 180, 55);
         else if ((active5 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 379;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0x1000020000004L, active3, 0x100000000000L, active4, 0x200008000000000L, active5, 0xc0000300000000L, active6, 0x8000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 55);
         else if ((active5 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x8000060000000100L, active2, 0x388200000000000L, active3, 0x1e0800020000000L, active4, 0x5e00330c0100060L, active5, 0x884000000L, active6, 0L);
      case 70:
      case 102:
         if ((active4 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1c00000L, active2, 0x100000L, active3, 0x2L, active4, 0x10000000000000L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 55);
         else if ((active5 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 377;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x1000L) != 0L)
         {
            jjmatchedKind = 396;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0x800000000000000L, active5, 0x500000000000040L, active6, 0x40200L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0x100L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L, active2, 0x1c00000000008008L, active3, 0x801068000000000L, active4, 0xa000000000400000L, active5, 0x8007020000000L, active6, 0x4000100L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0x80000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x7000000080000000L, active1, 0x40400002000000L, active2, 0x10c000000000L, active3, 0x6000000e01044L, active4, 0x2040818000000L, active5, 0x4340000022000L, active6, 0L);
      case 77:
      case 109:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 217, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x100000000L, active2, 0x10080000001L, active3, 0x3d0040000L, active4, 0x80100L, active5, 0x2000080L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 406, 55);
         else if ((active6 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 408, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3fL, active2, 0x50020010L, active3, 0x2000000000000000L, active4, 0x4080100010e10L, active5, 0x21800000000000L, active6, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x1122000400000200L, active2, 0x2000000000004000L, active3, 0L, active4, 0x4000200200001000L, active5, 0x8000000000L, active6, 0x8000800L);
      case 80:
      case 112:
         if ((active5 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 347, 55);
         else if ((active6 & 0x400L) != 0L)
         {
            jjmatchedKind = 394;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0x200000000000L, active4, 0x1800000L, active5, 0x300L, active6, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 390, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x900000000fc40L, active2, 0x20000000000000L, active3, 0x418000000000200L, active4, 0x800020200000L, active5, 0x80000000000L, active6, 0x10000L);
      case 83:
      case 115:
         if ((active6 & 0x80L) != 0L)
         {
            jjmatchedKind = 391;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 407, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0xf004008000000L, active1, 0x8dc000000L, active2, 0x400000000404c0L, active3, 0x4006008L, active4, 0x406060008L, active5, 0x400L, active6, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 119, 55);
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 165, 55);
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 409, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0x10690110000000L, active1, 0x400b00000010000L, active2, 0x6420302001a00L, active3, 0x200000000000000L, active4, 0x4000L, active5, 0x2000000080800L, active6, 0x3000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4010000200000080L, active2, 0L, active3, 0x10000000000L, active4, 0x80L, active5, 0x100000L, active6, 0x320000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x200000L, active3, 0x10L, active4, 0L, active5, 0x40000L, active6, 0L);
      case 87:
      case 119:
         if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 320, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0x80L, active4, 0L, active5, 0x1c000L, active6, 0x4000L);
      case 88:
      case 120:
         if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0x400000000000L, active5, 0x1000000L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 55);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 55);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 144, 55);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400000000000000L, active6, 0L);
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x40000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x2004100400100L, active2, 0x400800000L, active3, 0x100000000004L, active4, 0x804030L, active5, 0x100000000L, active6, 0x20000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000200000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x3000000000000L);
      case 67:
      case 99:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 271, 55);
         else if ((active4 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x203000000000000L, active1, 0x840058000000L, active2, 0x2080000002000000L, active3, 0x8000000280000L, active4, 0x4000120000240L, active5, 0x88000004000L, active6, 0L);
      case 68:
      case 100:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 300, 55);
         else if ((active6 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 403, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L, active4, 0x400800000000L, active5, 0x4000000001eL, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 55);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 55);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 55);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 150, 55);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 208, 55);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 210, 55);
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 232, 55);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 253, 55);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 269, 55);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 283, 55);
         else if ((active5 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 337, 55);
         else if ((active5 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 338, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x4100000000L, active1, 0x8118003800000L, active2, 0x3030081200ad1L, active3, 0x200380401102L, active4, 0x2000880c0000008L, active5, 0x2000002000100L, active6, 0x4000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L, active2, 0x20000L, active3, 0x400000000000L, active4, 0x800000000000L, active5, 0x20008000L, active6, 0L);
      case 72:
      case 104:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 55);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 249, 55);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 290, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0x1000000000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40010000000L, active1, 0x2000000000100000L, active2, 0x40400100000004L, active3, 0x800000000L, active4, 0L, active5, 0xc0100000000040L, active6, 0x8000L);
      case 75:
      case 107:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 250, 55);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 273, 55);
         break;
      case 76:
      case 108:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 55);
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 192, 55);
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 298, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x3800000000000000L, active1, 0x240000L, active2, 0x4000008000004000L, active3, 0x8020040L, active4, 0x800000011200000L, active5, 0x104002200c12200L, active6, 0x100L);
      case 77:
      case 109:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 55);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 231, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L, active2, 0x400000000000000L, active3, 0L, active4, 0x100000L, active5, 0x2000000000000000L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 143, 55);
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 221, 55);
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 316, 55);
         else if ((active5 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 348;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 410, 55);
         else if ((active6 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 412;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8810000000000083L, active2, 0L, active3, 0x81087000000000L, active4, 0x21e0003000000000L, active5, 0L, active6, 0x20300000L);
      case 79:
      case 111:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 55);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 140, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x88000000L, active1, 0L, active2, 0x800000000000000L, active3, 0x20000000610L, active4, 0x2000000000000L, active5, 0xa0L, active6, 0x800L);
      case 80:
      case 112:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 55);
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 275, 55);
         else if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 301, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x104000000000000L, active3, 0x10000000L, active4, 0x20000000100L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0x80000000L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 126, 55);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 239, 55);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 252, 55);
         else if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1c0000000000000L, active1, 0x200000007c40L, active2, 0x8000000000000L, active3, 0x100000000000000L, active4, 0L, active5, 0L, active6, 0x200L);
      case 83:
      case 115:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 199, 55);
         else if ((active5 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 346, 55);
         else if ((active6 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 411, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x148000000820cL, active2, 0x200000000000000L, active3, 0x1806000L, active4, 0x8010000000001080L, active5, 0x4000000000000000L, active6, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 55);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 146, 55);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 55);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 163, 55);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 278, 55);
         else if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 371, 55);
         else if ((active6 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 400, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000010L, active2, 0x20000040000408L, active3, 0x800000004000808L, active4, 0x4040c00L, active5, 0x20415001300400L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x1000000000000000L, active2, 0x230000020L, active3, 0x6000000000000L, active4, 0x200000000L, active5, 0x81800L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L, active2, 0x1000000000000000L, active3, 0L, active4, 0L, active5, 0x1800000000000L, active6, 0L);
      case 87:
      case 119:
         if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000000L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 172, 55);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 272, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0L, active5, 0x200000000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000002000000L, active6, 0L);
      case 48:
         if ((active6 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 402, 22);
         break;
      case 50:
         if ((active6 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 413, 22);
         break;
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3143000000000000L, active1, 0x100200000200000L, active2, 0x500000000004000L, active3, 0L, active4, 0xe00L, active5, 0x40000000100L, active6, 0x8000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0x4000L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L, active2, 0x4L, active3, 0x1000L, active4, 0x2000000000000L, active5, 0x10000000002L, active6, 0x200000L);
      case 68:
      case 100:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 55);
         else if ((active6 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 404, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0x20000000000000L, active5, 0x400000000100000L, active6, 0x3000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 55);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 8);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 211, 55);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 219, 55);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 238, 55);
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 248, 55);
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 285, 55);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 303, 55);
         else if ((active5 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 357, 55);
         else if ((active5 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 376, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x800080000000000L, active1, 0x2000007c63L, active2, 0x2200000000000400L, active3, 0x84000004000000L, active4, 0x8011000000100000L, active5, 0x4021804000000000L, active6, 0x200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20014000000L, active5, 0x1000000000L, active6, 0L);
      case 71:
      case 103:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 240, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L, active5, 0x200020000000L, active6, 0L);
      case 72:
      case 104:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 55);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 55);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         if ((active5 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 375, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x8000180000010L, active2, 0x50a0008000080008L, active3, 0x10000000006800L, active4, 0x1000000L, active5, 0x2000000000200200L, active6, 0x100L);
      case 75:
      case 107:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 261, 55);
         else if ((active5 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 359, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10L, active4, 0x40L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 149, 55);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x10200008000000L, active1, 0x200040000L, active2, 0x8000020000000L, active3, 0x800020200L, active4, 0x4000800000000L, active5, 0x80000000000L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x100000L, active2, 0L, active3, 0x100L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 55);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 233, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000020000000L, active2, 0x40L, active3, 0x400L, active4, 0x80000800000L, active5, 0x20L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10010000000L, active1, 0x40008000L, active2, 0x400100000000L, active3, 0x80010200000L, active4, 0x800400000000000L, active5, 0x400200c14440L, active6, 0L);
      case 80:
      case 112:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1c000000000L, active2, 0L, active3, 0L, active4, 0x200000000L, active5, 0x100000000004L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 55);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 132, 55);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 152, 55);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 162, 55);
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 177, 55);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 187, 55);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 237, 55);
         else if ((active6 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 395, 55);
         else if ((active6 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 398, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x100019800000L, active2, 0x10200000880L, active3, 0x40000aL, active4, 0x280000000040010L, active5, 0x2000000000800L, active6, 0x20000L);
      case 83:
      case 115:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 159, 55);
         else if ((active5 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 355, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x7080000000L, active4, 0x1000L, active5, 0x1081000L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 55);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 55);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 55);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 55);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 133, 55);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 197, 55);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 317, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800008000200010cL, active2, 0x40020010000000L, active3, 0x100001800004L, active4, 0x31c0000080L, active5, 0x100000088L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000400000L, active2, 0x4000000020000L, active3, 0x40000000000L, active4, 0x100L, active5, 0x4000008000a010L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 295, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000000000L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x300000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, active6);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000200001000L, active5, 0L, active6, 0x3000000000000L);
      case 52:
         if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 259, 22);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 200, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0x100000L, active2, 0x2800020002000cL, active3, 0x8001000800040L, active4, 0x20000010004000L, active5, 0x80000004L, active6, 0x200000L);
      case 67:
      case 99:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 190, 55);
         else if ((active5 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 382, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000000000L, active1, 0x200000000003L, active2, 0L, active3, 0L, active4, 0x801000001000000L, active5, 0x200c10200L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 202, 55);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 279, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000000L, active1, 0L, active2, 0x2000000000000000L, active3, 0x200000L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 55);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 55);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 55);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 55);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 156, 55);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 157, 55);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 196, 55);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 234, 55);
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 327, 55);
         else if ((active5 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 363, 55);
         else if ((active6 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 401, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x280000000000L, active1, 0L, active2, 0x200L, active3, 0x2L, active4, 0xc0000080L, active5, 0x400000120080008L, active6, 0x200L);
      case 70:
      case 102:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 167, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000000020L, active6, 0L);
      case 71:
      case 103:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 125, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active5 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 360, 55);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000018000000L, active2, 0x40010000000001L, active3, 0x80002000cL, active4, 0x23104040c00L, active5, 0x1008000L, active6, 0L);
      case 75:
      case 107:
         if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 305, 55);
         break;
      case 76:
      case 108:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 120, 55);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 201, 55);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 277, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x400000L, active2, 0x1000000000000000L, active3, 0x6000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0x100000000000000L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 55);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 55);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 55);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 174, 55);
         else if ((active5 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 326, 55);
         else if ((active5 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 331, 55);
         else if ((active5 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 381, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000c0007c10L, active2, 0x100080000L, active3, 0x10000000000000L, active4, 0x100000L, active5, 0x10L, active6, 0x8100L);
      case 79:
      case 111:
         if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 299, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x20040000L, active2, 0L, active3, 0x300006800L, active4, 0x80000800000000L, active5, 0x201000100002L, active6, 0L);
      case 80:
      case 112:
         if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 302, 55);
         else if ((active5 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 333, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 55);
         else if ((active5 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 366, 55);
         else if ((active5 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 373, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x1a0002cL, active2, 0x700000000000400L, active3, 0x11400000L, active4, 0x8000000000000000L, active5, 0x400L, active6, 0L);
      case 83:
      case 115:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 55);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 242, 55);
         else if ((active5 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 374, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0x40L, active2, 0x80000000000040L, active3, 0L, active4, 0L, active5, 0x2100000200000L, active6, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 55);
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 135, 55);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 178, 55);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 204, 55);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 265, 55);
         else if ((active5 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 332, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x3000004000000000L, active1, 0x50000000000L, active2, 0x4000L, active3, 0x80000000L, active4, 0x10000000000100L, active5, 0x44000000100L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x44000000000000L, active5, 0x4000L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0x80000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L, active6, 0L);
      case 89:
      case 121:
         if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 260, 55);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, active6);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         if ((active5 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 362, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000080000cL, active2, 0x100000801L, active3, 0x6090000000L, active4, 0L, active5, 0x4000000000300L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0L, active4, 0x200000200040000L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 168, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0x80040000L, active2, 0L, active3, 0x1000000048L, active4, 0x810000000L, active5, 0x10L, active6, 0x3000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 55);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 55);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 55);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 184, 55);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 213, 55);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 264, 55);
         else if ((active5 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 330, 55);
         else if ((active5 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 364, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x82000000000000L, active1, 0x2001000000L, active2, 0x1000000000000000L, active3, 0x80000000000000L, active4, 0x40000000000000L, active5, 0x2004000000000L, active6, 0L);
      case 71:
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 55);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 147, 55);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 244, 55);
         else if ((active6 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 392, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L, active5, 0x400000000000000L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000014000000000L, active1, 0x10000000000L, active2, 0x80000000004040L, active3, 0x1000000L, active4, 0x1000000L, active5, 0x20L, active6, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 304, 55);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 315, 55);
         else if ((active5 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 336, 55);
         else if ((active5 & 0x400000L) != 0L)
         {
            jjmatchedKind = 342;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 353, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000L, active6, 0L);
      case 76:
      case 108:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 55);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 161, 55);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 181, 55);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 312, 55);
         else if ((active5 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 351, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20000000008L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 55);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 115, 55);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 203, 55);
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 235, 55);
         else if ((active5 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 365, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0x40000000L, active2, 0L, active3, 0xb00024002L, active4, 0xc00L, active5, 0x4000L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0x400000L, active4, 0x100000040L, active5, 0x2000000L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000040L, active2, 0x8000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 137, 55);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 243, 55);
         else if ((active5 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 339, 55);
         else if ((active5 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 349, 55);
         else if ((active5 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 356, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000004000080L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 308, 55);
         else if ((active6 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 393, 55);
         else if ((active6 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 399, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L, active2, 0x400L, active3, 0L, active4, 0x4000000004000L, active5, 0x4L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 55);
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 55);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x140000088000000L, active1, 0x8000000000007802L, active2, 0x4L, active3, 0x800000L, active4, 0x20003000100000L, active5, 0x100200000L, active6, 0x200000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L, active2, 0x2000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0x4L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000000L, active5, 0x100000L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200c0000000L, active5, 0x8L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 186, 55);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, active6);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400000000000000L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x7800L, active2, 0L, active3, 0x4000L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L, active4, 0x20000000000000L, active5, 0L, active6, 0x3000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100L, active6, 0L);
      case 67:
      case 99:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(7, 101);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L, active4, 0L, active5, 0x6000000008000L, active6, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 55);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 88, 55);
         break;
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 55);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 55);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 55);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 55);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 55);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 145, 55);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 185, 55);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 194, 55);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 215, 55);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 270, 55);
         else if ((active5 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 344, 55);
         else if ((active6 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 405, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0x140000000000000L, active1, 0x40000000L, active2, 0x20000000400L, active3, 0x300000000L, active4, 0x20000000080L, active5, 0x100000000L, active6, 0L);
      case 71:
      case 103:
         if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 227, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L, active2, 0x1000000000000000L, active3, 0L, active4, 0L, active5, 0x20L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xeL, active2, 0L, active3, 0L, active4, 0x40L, active5, 0x200000L, active6, 0L);
      case 75:
      case 107:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 198, 55);
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 291, 55);
         break;
      case 76:
      case 108:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 108, 55);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 139, 55);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 160, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L, active5, 0x2L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 182, 55);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 288, 55);
         else if ((active5 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 340, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0x1000000L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000004000000000L, active1, 0x10000000040L, active2, 0x80000000004004L, active3, 0L, active4, 0x8000000000001000L, active5, 0x10L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 214, 55);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 247, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x10000000L, active4, 0x40000000000000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 179, 55);
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 276, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000004000800L, active5, 0L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 95, 55);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 195, 55);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 209, 55);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 280, 55);
         else if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 322, 55);
         else if ((active5 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 323, 55);
         else if ((active5 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 334, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x30000000L, active2, 0x41L, active3, 0x7000000000L, active4, 0x4000090000000L, active5, 0x200L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0x40000L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         if ((active5 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 343, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000000L, active6, 0L);
      case 89:
      case 121:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 289);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStopAtPos(7, 313);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, active6);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x300000000L, active4, 0x1000000000L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L, active2, 0x400L, active3, 0L, active4, 0x2000000000L, active5, 0x200000L, active6, 0L);
      case 68:
      case 100:
         if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 263, 55);
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 297, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 55);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 189, 55);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 229, 55);
         else if ((active5 & 0x2000000L) != 0L)
            return jjStopAtPos(8, 345);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0x2L, active4, 0x84000000000000L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 216, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L, active2, 0x40L, active3, 0x5000000000L, active4, 0x1000L, active5, 0x202L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100L, active6, 0L);
      case 77:
      case 109:
         if ((active5 & 0x400000000000000L) != 0L)
            return jjStopAtPos(8, 378);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 55);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 61, 55);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 55);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 142, 55);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 183, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4cL, active2, 0x20000000000L, active3, 0L, active4, 0x40L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000002L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0x8000L, active6, 0L);
      case 80:
      case 112:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 223, 55);
         break;
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 130, 55);
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 319, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0x20000000000000L, active5, 0L, active6, 0x3000000000000L);
      case 84:
      case 116:
         if ((active5 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 358, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0x43000L, active2, 0L, active3, 0L, active4, 0x84040800L, active5, 0x6000000000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0x4000L, active4, 0L, active5, 0x1000000000020L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 131, 55);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 220, 55);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 310, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, active6);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L, active4, 0x80000800L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 82, 55);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 87, 55);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0x40000L, active5, 0x100L, active6, 0x1000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 45, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x3000L, active2, 0L, active3, 0L, active4, 0x1000000000L, active5, 0x2000000000000L, active6, 0L);
      case 76:
      case 108:
         if ((active5 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 335, 55);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0x10L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 65, 55);
         else if ((active4 & 0x1000L) != 0L)
            return jjStopAtPos(9, 268);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x5000000000L, active4, 0x20002000000000L, active5, 0x4000000000200L, active6, 0L);
      case 82:
      case 114:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 92, 55);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 284, 55);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000004000000L, active5, 0x20L, active6, 0L);
      case 83:
      case 115:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 188, 55);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 193, 55);
         else if ((active5 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 341, 55);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0x4000L, active4, 0L, active5, 0L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 94, 55);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 138, 55);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 262, 55);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 311, 55);
         else if ((active5 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 352, 55);
         return jjMoveStringLiteralDfa10_0(active0, 0x80010000000000L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L, active6, 0x2000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, active5, active6);
      return 10;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000800L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 274, 55);
         break;
      case 69:
      case 101:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(10, 134, 55);
         else if ((active5 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 325, 55);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0x4000L, active4, 0x4000000000000L, active5, 0x2L, active6, 0x1000000000000L);
      case 72:
      case 104:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 55, 22);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0x40L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0x10L, active6, 0L);
      case 76:
      case 108:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 293, 55);
         else if ((active5 & 0x1000000000000L) != 0L)
            return jjStopAtPos(10, 368);
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x3000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 228, 55);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 230, 55);
         else if ((active5 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 329, 55);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0x4000000L, active5, 0x2000000000000L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 218, 22);
         else if ((active5 & 0x4000000000000L) != 0L)
            return jjStopAtPos(10, 370);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100L, active6, 0L);
      case 83:
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(10, 67, 55);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 93, 55);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L, active2, 0x20000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, active5, active6);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 306, 55);
         else if ((active5 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(11, 321, 55);
         break;
      case 69:
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 75, 22);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100L, active6, 0L);
      case 72:
      case 104:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 169, 22);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000800L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active5 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 369, 55);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000L);
      case 82:
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(11, 78, 22);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(11, 206, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000000000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000L, active5, 0L, active6, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 282, 55);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, active4, active5, active6);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x100L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x20000000000000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(12, 267, 55);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(12, 287, 55);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x1000000000L, active5, 0x10L, active6, 0x2000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(12, 70, 55);
         break;
      case 78:
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 40, 55);
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1000000000000L);
      case 82:
      case 114:
         if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(12, 224, 22);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x200000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L, active3, active4, active5, active6);
      return 13;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000L);
      case 68:
      case 100:
         if ((active5 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(13, 324, 55);
         else if ((active5 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(13, 328, 55);
         break;
      case 69:
      case 101:
         if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 309, 55);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x1000000000L, active5, 0L, active6, 0x1000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000L, active3, 0x200000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, active3, active4, 0L, active6);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2000L, active3, 0L, active4, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(14, 225, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active6, 0x1000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active6, 0x2000000000000L);
      case 84:
      case 116:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 292, 22);
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L, active1, 0L, active3, 0L, active4, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, active3, active4, 0L, active6);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, old3, old4, 0L, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L, 0L, 0L, 0L, active6);
      return 15;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active6, 0x2000000000000L);
      case 72:
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 56, 22);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x2000L, active6, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active6, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L, 0L, 0L, 0L, active6);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L, 0L, 0L, 0L, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L, 0L, 0L, 0L, active6);
      return 16;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active6, 0x2000000000000L);
      case 80:
      case 112:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(16, 77, 22);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active6, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L, 0L, 0L, 0L, active6);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old6, long active6)
{
   if (((active1 &= old1) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L, 0L, 0L, 0L, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 17;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active6, 0x2000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active6, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private final int jjMoveStringLiteralDfa18_0(long old6, long active6)
{
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, 0L, 0L, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 18;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa19_0(active6, 0x2000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active6, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private final int jjMoveStringLiteralDfa19_0(long old6, long active6)
{
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, 0L, 0L, 0L, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 19;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active6 & 0x1000000000000L) != 0L)
            return jjStopAtPos(19, 432);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active6, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private final int jjMoveStringLiteralDfa20_0(long old6, long active6)
{
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, 0L, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 20;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active6, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private final int jjMoveStringLiteralDfa21_0(long old6, long active6)
{
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, 0L, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active6, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private final int jjMoveStringLiteralDfa22_0(long old6, long active6)
{
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 22;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active6 & 0x2000000000000L) != 0L)
            return jjStopAtPos(22, 433);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 22:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 8:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 16:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 6:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 14:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 49);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 423)
                        kind = 423;
                     jjCheckNAdd(53);
                  }
                  break;
               case 15:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 38:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 18:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(48, 49);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 423)
                        kind = 423;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 423)
                        kind = 423;
                     jjCheckNAdd(45);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 421)
                        kind = 421;
                     jjCheckNAdd(42);
                  }
                  break;
               case 10:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 55:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 19:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 56:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  else if (curChar == 39)
                  {
                     if (kind > 430)
                        kind = 430;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 421)
                        kind = 421;
                     jjCheckNAddStates(3, 8);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(27, 28);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 4:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 59:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  else if (curChar == 34)
                  {
                     if (kind > 418)
                        kind = 418;
                  }
                  break;
               case 12:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 0:
                  if (curChar == 62 && kind > 256)
                     kind = 256;
                  break;
               case 2:
                  if (curChar == 61 && kind > 256)
                     kind = 256;
                  break;
               case 3:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 23:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 34 && kind > 418)
                     kind = 418;
                  break;
               case 26:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 27:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 39 && kind > 430)
                     kind = 430;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 421)
                     kind = 421;
                  jjCheckNAddStates(3, 8);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 421)
                     kind = 421;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 423)
                     kind = 423;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar != 46)
                     break;
                  if (kind > 423)
                     kind = 423;
                  jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 423)
                     kind = 423;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 47:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 424)
                     kind = 424;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 423)
                     kind = 423;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 49);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 350)
                        kind = 350;
                  }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 350)
                        kind = 350;
                  }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 372)
                        kind = 372;
                  }
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 57:
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 56:
               case 27:
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(9, 10);
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 350)
                        kind = 350;
                  }
                  break;
               case 59:
               case 24:
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 417)
                        kind = 417;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 7:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 417)
                     kind = 417;
                  jjCheckNAdd(22);
                  break;
               case 29:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(9, 10);
                  break;
               case 30:
                  if ((0x200000002000L & l) != 0L && kind > 372)
                     kind = 372;
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
                  if ((0x8000000080000L & l) != 0L && kind > 372)
                     kind = 372;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 56:
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 59:
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   46, 47, 49, 42, 43, 44, 46, 47, 49, 39, 40, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\42\42", "\45", "\46", "\47", "\50", "\51", 
"\52", "\53", "\54", "\55", "\56", "\57", "\72", "\73", "\74", "\75", "\76", "\77", 
"\137", "\174", "\133", "\135", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\173", "\175", null, "\74\75", 
"\76\75", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\176", "\41", "\44", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3c1e7ffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
protected char curChar;
public AdqlStoXTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AdqlStoXTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 431)
   {
      jjmatchedKind = 431;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
