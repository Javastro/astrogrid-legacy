/* Generated By: AdqlStoX.jjt,v 1.36.2.4 2008/02/01 09&JJTree&JavaCC: Do not edit this line. AdqlStoXTokenManager.java */
package org.astrogrid.adql ;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;
import java.util.HashSet ;
import java.util.ArrayList ;
import java.util.List ;
import org.astrogrid.adql.v1_0.beans.* ;
import org.astrogrid.stc.region.v1_10.beans.* ;
import org.astrogrid.stc.coords.v1_10.beans.* ;

public class AdqlStoXTokenManager implements AdqlStoXConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20L) != 0L)
            return 62;
         if ((active1 & 0xff800000000000L) != 0L || (active4 & 0x400000200L) != 0L)
         {
            jjmatchedKind = 321;
            return 22;
         }
         if ((active0 & 0x3ffffe0000000L) != 0L || (active1 & 0xff007ffffffc0000L) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0x7ffc00000fffffffL) != 0L || (active4 & 0x601e2ffb7fb7e13bL) != 0L)
         {
            jjmatchedKind = 321;
            return 63;
         }
         if ((active0 & 0x10000L) != 0L)
            return 3;
         if ((active3 & 0x3fc0000000000L) != 0L || (active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 321;
            return 29;
         }
         if ((active0 & 0x20000L) != 0L)
            return 64;
         if ((active0 & 0x58L) != 0L)
            return 65;
         if ((active0 & 0x80L) != 0L)
            return 66;
         if ((active0 & 0x200000L) != 0L || (active4 & 0x400000000000000L) != 0L)
            return 12;
         if ((active5 & 0x18000L) != 0L)
         {
            jjmatchedKind = 325;
            return 67;
         }
         if ((active0 & 0xfffc000000000000L) != 0L || (active1 & 0x3ffffL) != 0L || (active4 & 0x10014000800010c4L) != 0L)
         {
            jjmatchedKind = 321;
            return 46;
         }
         if ((active3 & 0x800003fff0000000L) != 0L || (active4 & 0x8000900000000000L) != 0L)
         {
            jjmatchedKind = 321;
            return 18;
         }
         if ((active0 & 0x400L) != 0L)
            return 68;
         return -1;
      case 1:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x3f000000000L) != 0L || (active4 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 1;
            }
            return 17;
         }
         if ((active0 & 0x1ffdf83fe0000000L) != 0L || (active1 & 0xf3ff7ffffffffc00L) != 0L || (active2 & 0xfffcc79fffff0003L) != 0L || (active3 & 0x7fffe007ffffffffL) != 0L || (active4 & 0xb004afeff837f23fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 1;
            }
            return 63;
         }
         if ((active1 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 1;
            }
            return 21;
         }
         if ((active3 & 0x1c0000000000L) != 0L || (active4 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 1;
            }
            return 28;
         }
         if ((active0 & 0x207c000000000L) != 0L || (active1 & 0xc00000000000000L) != 0L || (active2 & 0x338600000fffcL) != 0L || (active3 & 0x8000000800000000L) != 0L || (active4 & 0x401a001007800100L) != 0L)
            return 63;
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x3ffL) != 0L || (active4 & 0x14000000000c0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 1;
            }
            return 45;
         }
         return -1;
      case 2:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 2;
            }
            return 20;
         }
         if ((active0 & 0xfffd350440000000L) != 0L || (active1 & 0xfae77f9ffff7ffffL) != 0L || (active2 & 0xffdee79fc7fd89fbL) != 0L || (active3 & 0x7fffedf7fa1effffL) != 0L || (active4 & 0xf01e0da4803096ffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 2;
            }
            return 63;
         }
         if ((active3 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 2;
            }
            return 27;
         }
         if ((active3 & 0x20000000000L) != 0L || (active4 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 2;
            }
            return 69;
         }
         if ((active0 & 0xc8bba0000000L) != 0L || (active1 & 0x118006000080000L) != 0L || (active2 & 0x20004038023600L) != 0L || (active3 & 0x8000000005e10000L) != 0L || (active4 & 0x1e24b78076100L) != 0L)
            return 63;
         return -1;
      case 3:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L || (active4 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return 32;
         }
         if ((active3 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return 26;
         }
         if ((active1 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return 69;
         }
         if ((active0 & 0xf84c350660000000L) != 0L || (active1 & 0x72377387c7f3ffffL) != 0L || (active2 & 0xffde860fe7549dfbL) != 0L || (active3 & 0x123eecf03bd4fefcL) != 0L || (active4 & 0xf00019658030f3ffL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return 63;
         }
         if ((active0 & 0x7b1000000000000L) != 0L || (active1 & 0x88c00c1838040000L) != 0L || (active2 & 0x619000a92000L) != 0L || (active3 & 0x6dc10307c00a0103L) != 0L || (active4 & 0x1e048000000400L) != 0L)
            return 63;
         return -1;
      case 4:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 4;
            }
            return 25;
         }
         if ((active0 & 0xe54c250260000000L) != 0L || (active1 & 0x42107b87f7f3f5ffL) != 0L || (active2 & 0xefd8870660149d9bL) != 0L || (active3 & 0x13028f72bc4febcL) != 0L || (active4 & 0x1141803031ffL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 4;
            }
            return 63;
         }
         if ((active4 & 0x8000000000000200L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1800100400000000L) != 0L || (active1 & 0x3027800000000a00L) != 0L || (active2 & 0x1006000987400060L) != 0L || (active3 & 0x120ec40010100040L) != 0L || (active4 & 0x700008240000c000L) != 0L)
            return 63;
         if ((active4 & 0x10020000000000L) != 0L)
            return 32;
         if ((active0 & 0x200800000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 4;
            }
            return 32;
         }
         return -1;
      case 5:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xe54c250220000000L) != 0L || (active1 & 0x106801f3f1f1fcL) != 0L || (active2 & 0x6fd0020600149c9bL) != 0L || (active3 & 0x13000f72bc4d09cL) != 0L || (active4 & 0x104180000118L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 5;
            }
            return 63;
         }
         if ((active0 & 0x200800000000000L) != 0L || (active2 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 5;
            }
            return 32;
         }
         if ((active3 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 5;
            }
            return 24;
         }
         if ((active4 & 0x8000000000000200L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L || (active1 & 0x4200138604020403L) != 0L || (active2 & 0x8008810060000100L) != 0L || (active3 & 0x8280000002e20L) != 0L || (active4 & 0x100003030e7L) != 0L)
            return 63;
         return -1;
      case 6:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x200800000000000L) != 0L || (active2 & 0x40000000000L) != 0L || (active3 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 6;
            }
            return 32;
         }
         if ((active4 & 0x8000000000000200L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xa500050220000000L) != 0L || (active1 & 0x2201f3100170L) != 0L || (active2 & 0x659000020004989bL) != 0L || (active3 & 0x10000f72384009cL) != 0L || (active4 & 0x100000000100L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 6;
            }
            return 63;
         }
         if ((active0 & 0x404c200000000000L) != 0L || (active1 & 0x10480000e1f08cL) != 0L || (active2 & 0xa40020400100400L) != 0L || (active3 & 0x3010000040d000L) != 0L || (active4 & 0x4180000018L) != 0L)
            return 63;
         return -1;
      case 7:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x8500050000000000L) != 0L || (active1 & 0x200e1100138L) != 0L || (active2 & 0x610000000000889aL) != 0L || (active3 & 0xe722000004L) != 0L || (active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 7;
            return 63;
         }
         if ((active4 & 0x8000000000000200L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2008000220000000L) != 0L || (active1 & 0x200112000040L) != 0L || (active2 & 0x490000200041001L) != 0L || (active3 & 0x100001001840098L) != 0L || (active4 & 0x100000000000L) != 0L)
            return 63;
         if ((active0 & 0x200800000000000L) != 0L || (active1 & 0x1e000L) != 0L || (active2 & 0x40000000000L) != 0L || (active3 & 0x8008000L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 7;
            return 32;
         }
         return -1;
      case 8:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0xe1100138L) != 0L || (active2 & 0x2000000000000880L) != 0L || (active3 & 0xa000000004L) != 0L || (active4 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 8;
            }
            return 63;
         }
         if ((active0 & 0x200800000000000L) != 0L || (active1 & 0x1e000L) != 0L || (active2 & 0x40000000000L) != 0L || (active3 & 0x608008000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 8;
            }
            return 32;
         }
         if ((active4 & 0x8000000000000200L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8500010000000000L) != 0L || (active1 & 0x20000000000L) != 0L || (active2 & 0x410000000000801aL) != 0L || (active3 & 0x4122000000L) != 0L)
            return 63;
         return -1;
      case 9:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x1e000L) != 0L || (active2 & 0x40000000000L) != 0L || (active3 & 0x608008000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 9;
            }
            return 32;
         }
         if ((active4 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x40000100L) != 0L || (active2 & 0x80L) != 0L || (active3 & 0xa000000000L) != 0L || (active4 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 9;
            }
            return 63;
         }
         if ((active1 & 0xa1100038L) != 0L || (active2 & 0x2000000000000800L) != 0L || (active3 & 0x4L) != 0L)
            return 63;
         if ((active0 & 0x800000000000L) != 0L)
            return 32;
         return -1;
      case 10:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x1e000L) != 0L || (active2 & 0x40000000000L) != 0L || (active3 & 0x600008000L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 10;
            return 32;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x100L) != 0L || (active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 10;
            return 63;
         }
         if ((active4 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active1 & 0x40000020L) != 0L || (active2 & 0x80L) != 0L || (active3 & 0xa000000000L) != 0L)
            return 63;
         if ((active0 & 0x200000000000000L) != 0L || (active3 & 0x8000000L) != 0L)
            return 32;
         return -1;
      case 11:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 11;
            }
            return 63;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active3 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 321;
               jjmatchedPos = 11;
            }
            return 32;
         }
         if ((active4 & 0x100L) != 0L)
            return 63;
         if ((active1 & 0x1e000L) != 0L || (active2 & 0x40000000000L) != 0L || (active3 & 0x8000L) != 0L)
            return 32;
         return -1;
      case 12:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 63;
         if ((active3 & 0x200000000L) != 0L)
            return 32;
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x8000L) != 0L || (active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 12;
            return 32;
         }
         return -1;
      case 13:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x8000L) != 0L || (active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 13;
            return 32;
         }
         return -1;
      case 14:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 14;
            return 32;
         }
         if ((active3 & 0x400000000L) != 0L)
            return 32;
         return -1;
      case 15:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 15;
            return 32;
         }
         if ((active0 & 0x400000000000000L) != 0L)
            return 32;
         return -1;
      case 16:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x8000L) != 0L)
            return 32;
         return -1;
      case 17:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active5 & 0x18000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active5 & 0x10000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active5 & 0x10000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 325;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 6, 65);
      case 10:
         return jjStartNfaWithStates_0(0, 4, 65);
      case 13:
         return jjStartNfaWithStates_0(0, 5, 62);
      case 32:
         return jjStartNfaWithStates_0(0, 3, 65);
      case 34:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 36:
         return jjStopAtPos(0, 312);
      case 37:
         return jjStopAtPos(0, 8);
      case 38:
         return jjStopAtPos(0, 9);
      case 39:
         return jjStartNfaWithStates_0(0, 10, 68);
      case 40:
         return jjStopAtPos(0, 11);
      case 41:
         return jjStopAtPos(0, 12);
      case 42:
         return jjStopAtPos(0, 13);
      case 43:
         return jjStopAtPos(0, 14);
      case 44:
         return jjStopAtPos(0, 15);
      case 45:
         return jjStartNfaWithStates_0(0, 16, 3);
      case 46:
         return jjStartNfaWithStates_0(0, 17, 64);
      case 47:
         return jjStopAtPos(0, 18);
      case 53:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000L);
      case 54:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x10000L);
      case 58:
         return jjStopAtPos(0, 19);
      case 59:
         return jjStopAtPos(0, 20);
      case 60:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400000000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 22);
      case 62:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x800000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 24);
      case 91:
         return jjStopAtPos(0, 27);
      case 93:
         return jjStopAtPos(0, 28);
      case 95:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x480000L, 0x0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xfffe0000000L, 0x0L, 0x0L, 0x0L, 0x1e000042308000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3f00000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfffc000000000000L, 0x3ffffL, 0x0L, 0x0L, 0x10014000800010c4L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffffc0000L, 0x0L, 0x0L, 0x100030000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ff000000000L, 0x0L, 0x0L, 0x200000008L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff800000000000L, 0x0L, 0x0L, 0x400000200L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f00000000000000L, 0x0L, 0x0L, 0x2000000000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffffL, 0x0L, 0x100L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000L, 0x0L, 0x8800000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fc0000L, 0x0L, 0x20820000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfc000000L, 0x0L, 0x11000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ff00000000L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ffc0000000000L, 0x0L, 0x4000000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffe0000000000000L, 0x0L, 0x3004000010L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1ffL, 0xc4000046002L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xffffe00L, 0x218000000020L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800003fff0000000L, 0x8000900000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fc0000000000L, 0x400L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7c000000000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1f80000000000000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x0L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 310);
      case 124:
         return jjStopAtPos(0, 26);
      case 125:
         return jjStopAtPos(0, 311);
      default :
         return jjMoveNfa_0(9, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x18000L);
      case 61:
         if ((active4 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 314);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 315);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c000000000000L, active1, 0x40008000000c0000L, active2, 0x6000070c0c0000L, active3, 0x3c000010000000L, active4, 0x844000046000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L, active5, 0L);
      case 67:
      case 99:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 282, 63);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0x40800000000L, active3, 0x600L, active4, 0x4000000000000L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000L, active1, 0x10100003ff00000L, active2, 0x1000720000L, active3, 0x200000002001f83fL, active4, 0x180031022L, active5, 0L);
      case 70:
      case 102:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 171, 63);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xf80000000000000L, active1, 0L, active2, 0L, active3, 0x380000040000000L, active4, 0x80000L, active5, 0L);
      case 73:
      case 105:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 292, 63);
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0x20001c0000000L, active2, 0x30800000L, active3, 0x440000780020040L, active4, 0x8000200000000204L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000700000000L, active1, 0x204001000000000L, active2, 0L, active3, 0L, active4, 0x400000008L, active5, 0L);
      case 77:
      case 109:
         if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 279, 63);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 280, 63);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0x40000L, active4, 0x400001L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000L, active1, 0x6000000000L, active2, 0x200000003ff8L, active3, 0x1c0000000000L, active4, 0x8500L, active5, 0L);
      case 79:
      case 111:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe001000000000000L, active1, 0x88380006000003ffL, active2, 0x800040c3010000L, active3, 0xc800000000080180L, active4, 0x14a28000000d0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc00000000000L, active3, 0x600000100000L, active4, 0x18000000L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1e00000L, active4, 0x18000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0x3040000800000c00L, active2, 0x7f02000000000000L, active3, 0x100003f000000000L, active4, 0x7000100000300000L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L, active1, 0x8000000000L, active2, 0x8000L, active3, 0x3800000000000L, active4, 0x2000000000000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x18000000000000L, active5, 0L);
      case 85:
      case 117:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x8000000003f000L, active2, 0x800c038000000000L, active3, 0x6000000L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7f0000000000L, active2, 0L, active3, 0L, active4, 0x200000000L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 63);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0x20000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(2, 275);
         else if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(2, 278);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2780000000000000L, active1, 0x1000000040100000L, active2, 0x100000L, active3, 0x200080f000140003L, active4, 0x18000000000001L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0x12000000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 63);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 283, 63);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 284, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x38000600000L, active2, 0x1000000L, active3, 0x1800L, active4, 0x300020L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 63);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 63);
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 181, 63);
         else if ((active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L, active2, 0x2000040000008L, active3, 0x200000000000L, active4, 0x4000004000006000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0xc0000000400L, active2, 0x710400000000001L, active3, 0x3c1000040000000L, active4, 0L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3800000L, active2, 0x200000L, active3, 0x4L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 63);
         else if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0x20100028002L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0x200L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0x3800000000010010L, active3, 0x10020d0000000000L, active4, 0x2000080000400L, active5, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000L, active3, 0x100000000000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000200000000L, active1, 0x80800004000001L, active2, 0x218000000000L, active3, 0xc000001c02088L, active4, 0x218L, active5, 0L);
      case 77:
      case 109:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 218, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000002L, active2, 0x20100000002L, active3, 0x7a0080000L, active4, 0x8000000000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 301, 63);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 303, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xfcL, active2, 0xa0040020L, active3, 0x4000000000000000L, active4, 0x400000010c0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x2244000800000800L, active2, 0x4000000000008000L, active3, 0L, active4, 0x3004000400000000L, active5, 0L);
      case 80:
      case 112:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 255, 63);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 289, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0x400000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 285, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1200000003f100L, active2, 0x40000000000000L, active3, 0x830000000000400L, active4, 0x8000000004L, active5, 0L);
      case 83:
      case 115:
         if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 302, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0x3c010020000000L, active1, 0x11b8000000L, active2, 0x80000000080980L, active3, 0x800c010L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 63);
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 166, 63);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 208, 63);
         else if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 304, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0x41a40440000000L, active1, 0x801600000040000L, active2, 0xc840604003400L, active3, 0x400000000000000L, active4, 0x100L, active5, 0x18000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8020000400000200L, active2, 0L, active3, 0x20000000000L, active4, 0x190000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x400000L, active3, 0x20L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0x100L, active4, 0x2000000000L, active5, 0L);
      case 88:
      case 120:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 155, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 63);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 63);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 145, 63);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0L);
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000000L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x4008200800400L, active2, 0x801000000L, active3, 0x200000000008L, active4, 0x10000000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000400000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x18000L);
      case 67:
      case 99:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80c000000000000L, active1, 0x10800b0000000L, active2, 0x4100000004000000L, active3, 0x10000000500000L, active4, 0x4L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 192, 63);
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 298, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 63);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 63);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 63);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 63);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 209, 63);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 211, 63);
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 233, 63);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 254, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x10400000000L, active1, 0x10230007000000L, active2, 0x60601024015a2L, active3, 0x400700802204L, active4, 0xc000002000000100L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L, active2, 0x40000L, active3, 0x800000000000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 63);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 250, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100040000000L, active1, 0x4000000000200000L, active2, 0x80800200000008L, active3, 0x1000000000L, active4, 0x400000600aL, active5, 0L);
      case 75:
      case 107:
         if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 251, 63);
         break;
      case 76:
      case 108:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 63);
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 193, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0xe000000000000000L, active1, 0x500000L, active2, 0x8000010000008000L, active3, 0x10040080L, active4, 0x80008200L, active5, 0L);
      case 77:
      case 109:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 63);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 232, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active2, 0x800000000000000L, active3, 0L, active4, 0x100000L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 63);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 174, 63);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 222, 63);
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 305, 63);
         else if ((active4 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x102000000000020cL, active2, 0x1L, active3, 0x10210e000000000L, active4, 0x10180000000000L, active5, 0L);
      case 79:
      case 111:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 63);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 141, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x220000000L, active1, 0L, active2, 0x1000000000000000L, active3, 0x40000000c20L, active4, 0x400000000L, active5, 0L);
      case 80:
      case 112:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x208000000000000L, active3, 0x20000000L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 63);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 240, 63);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 253, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x700000000000000L, active1, 0x40000001f100L, active2, 0x10000000000000L, active3, 0x200000000000000L, active4, 0x100000000L, active5, 0L);
      case 83:
      case 115:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 200, 63);
         else if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 306, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x2900000020830L, active2, 0x400000000000000L, active3, 0x300c000L, active4, 0x1000000000200000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 63);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 63);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 149, 63);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 164, 63);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 266, 63);
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 295, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000040L, active2, 0x40000080000810L, active3, 0x1000000008001010L, active4, 0x1021L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000001L, active2, 0x460000040L, active3, 0xc000000000000L, active4, 0x2000000000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0x2000000000000000L, active3, 0L, active4, 0xc0L, active5, 0L);
      case 87:
      case 119:
         if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 246, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 173, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L, active4, 0x10L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000000200L, active5, 0L);
      case 48:
         if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 297, 32);
         break;
      case 50:
         if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 308, 32);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc50c000000000000L, active1, 0x200400000400000L, active2, 0xa00000000008000L, active3, 0L, active4, 0x4000000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L, active2, 0x8L, active3, 0x2000L, active4, 0x100000000001L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 63);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 299, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0x20000L, active5, 0x18000L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 63);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 63);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 212, 63);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 220, 63);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 239, 63);
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 249, 63);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 252, 63);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 271, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000200000000000L, active1, 0x400001f18cL, active2, 0x4400000000000800L, active3, 0x108000008000000L, active4, 0x1002010c0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 241, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0x10L, active5, 0L);
      case 72:
      case 104:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 63);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 154, 63);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 159, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 270, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000300000042L, active2, 0xa140010000100010L, active3, 0x2000000000d000L, active4, 0x80100000L, active5, 0L);
      case 75:
      case 107:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 150, 63);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 152, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0x40800020000000L, active1, 0x400100000L, active2, 0x10000040000000L, active3, 0x1000040400L, active4, 0x4L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200001L, active2, 0L, active3, 0x200L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 63);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 234, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000040000000L, active2, 0x80L, active3, 0x800L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40040000000L, active1, 0x80020000L, active2, 0x800200000000L, active3, 0x100020400000L, active4, 0x22L, active5, 0L);
      case 80:
      case 112:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x38000000000L, active2, 0L, active3, 0L, active4, 0x2000000000000008L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 63);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 133, 63);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 63);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 63);
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 178, 63);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 188, 63);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 238, 63);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 290, 63);
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 293, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x200033000000L, active2, 0x20400001100L, active3, 0x800014L, active4, 0x4000010000000100L, active5, 0L);
      case 83:
      case 115:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xe100000000L, active4, 0x1000000000000000L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 63);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 63);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 63);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 63);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 134, 63);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 198, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100004000430L, active2, 0x80040020000001L, active3, 0x200003000008L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000800000L, active2, 0x8000000040000L, active3, 0x80000000000L, active4, 0x2000L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x600000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x7000000000000000L, active5, 0x18000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 201, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x200000L, active2, 0x50000400040018L, active3, 0x10002001000080L, active4, 0x100000000000L, active5, 0L);
      case 67:
      case 99:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 191, 63);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 277, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x500000000000000L, active1, 0x40000000000cL, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 203, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000000L, active1, 0L, active2, 0x4000000000000000L, active3, 0x400000L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 63);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 63);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 63);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 63);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 157, 63);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 158, 63);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 197, 63);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 235, 63);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 237, 63);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 258, 63);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 296, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000000000L, active1, 0L, active2, 0x400L, active3, 0x4L, active4, 0x100020000L, active5, 0L);
      case 70:
      case 102:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 168, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 256, 63);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x30000000L, active2, 0x80020000000003L, active3, 0x1000040018L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 63);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 202, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x800000L, active2, 0x2000000000000000L, active3, 0xc000000000L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 63);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 63);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 175, 63);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 257, 63);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 276, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20018001f040L, active2, 0x200100000L, active3, 0x20000000000000L, active4, 0x4080000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x40100000L, active2, 0L, active3, 0x60000d000L, active4, 0x10L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 63);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 261, 63);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 268, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x34000b0L, active2, 0xe00000000000800L, active3, 0x22800000L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 63);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 243, 63);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 269, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x100L, active2, 0x100000000000080L, active3, 0L, active4, 0x108L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 63);
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 136, 63);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 179, 63);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 205, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0xc000010000000000L, active1, 0xa0000000000L, active2, 0x8000L, active3, 0x100000000L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0x100000000000000L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200001000030L, active2, 0x200001002L, active3, 0xc120000000L, active4, 0x200L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L, active4, 0x6000000000000000L, active5, 0L);
      case 67:
      case 99:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 169, 63);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x100100000L, active2, 0L, active3, 0x2000000090L, active4, 0L, active5, 0x18000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 63);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 63);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 63);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 185, 63);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 214, 63);
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 259, 63);
         return jjMoveStringLiteralDfa7_0(active0, 0x208000000000000L, active1, 0x4002000000L, active2, 0x2000000000000000L, active3, 0x100000000000000L, active4, 0x100L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 63);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 148, 63);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 245, 63);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 287, 63);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L, active4, 0x20000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000050000000000L, active1, 0x20000000000L, active2, 0x100000000008080L, active3, 0x2000000L, active4, 0L, active5, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000000000L, active5, 0L);
      case 76:
      case 108:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 63);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 162, 63);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 182, 63);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000000010L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 63);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 63);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 204, 63);
         else if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 236, 63);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 260, 63);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x80000000L, active2, 0L, active3, 0x1600048004L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0x800000L, active4, 0x8000000000000000L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000100L, active2, 0x10000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 138, 63);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 244, 63);
         break;
      case 83:
      case 115:
         if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 288, 63);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 294, 63);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L, active2, 0x800L, active3, 0L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 63);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 63);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 63);
         return jjMoveStringLiteralDfa7_0(active0, 0x500000220000000L, active1, 0x1e008L, active2, 0x9L, active3, 0x1000000L, active4, 0x100000000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L, active2, 0x4000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0x8L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 187, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1e000L, active2, 0L, active3, 0x8000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x18000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(7, 102);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0x300L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 63);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 63);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 63);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 63);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 63);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 63);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 63);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 146, 63);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 186, 63);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 195, 63);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 216, 63);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 300, 63);
         return jjMoveStringLiteralDfa8_0(active0, 0x500000000000000L, active1, 0x80000000L, active2, 0x40000000800L, active3, 0x600000000L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 228, 63);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L, active2, 0x2000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x38L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 75:
      case 107:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 199, 63);
         break;
      case 76:
      case 108:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 63);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 140, 63);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 161, 63);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 183, 63);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0x8000000000000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000010000000000L, active1, 0x20000000100L, active2, 0x100000000008008L, active3, 0L, active4, 0x1000000000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 215, 63);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 248, 63);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x20000000L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 180, 63);
         break;
      case 84:
      case 116:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 96, 63);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 196, 63);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 210, 63);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x60000000L, active2, 0x82L, active3, 0xe000000000L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 128, 63);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(7, 317);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(7, 318);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x600000000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000L, active2, 0x800L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 129, 63);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 190, 63);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 230, 63);
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(8, 319);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x4L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 217, 63);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L, active2, 0x80L, active3, 0xa000000000L, active4, 0x1000000000000000L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(8, 273);
         break;
      case 78:
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 63);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 63);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 63);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 143, 63);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 184, 63);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x130L, active2, 0x40000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000008L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 224, 63);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 131, 63);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0x18000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0x10c000L, active2, 0L, active3, 0L, active4, 0x300L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0x8000L, active4, 0x80L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 132, 63);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 221, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 84, 63);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 88, 63);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0x8000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 32);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xc000L, active2, 0L, active3, 0L, active4, 0x100L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 63);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(9, 316);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xa000000000L, active4, 0x200L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 93, 63);
         break;
      case 83:
      case 115:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 189, 63);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(9, 194, 63);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0x8000L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 95, 63);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 139, 63);
         return jjMoveStringLiteralDfa10_0(active0, 0x200040000000000L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, active5);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(10, 135, 63);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0x8000L, active4, 0L, active5, 0x8000L);
      case 72:
      case 104:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 57, 32);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0x100L, active2, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active4 & 0x80L) != 0L)
            return jjStopAtPos(10, 263);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xc000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 229, 63);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 231, 63);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0x100L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 219, 32);
         else if ((active4 & 0x200L) != 0L)
            return jjStopAtPos(10, 265);
         break;
      case 83:
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 69, 63);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(10, 94, 63);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L, active2, 0x40000000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, active5);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(11, 77, 32);
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0x8000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 170, 32);
         break;
      case 78:
      case 110:
         if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 264, 63);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 82:
      case 114:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 80, 32);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(11, 207, 32);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, 0L, active5);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x10000L);
      case 71:
      case 103:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 72, 63);
         break;
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 42, 63);
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0L, active3, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x8000L);
      case 82:
      case 114:
         if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(12, 225, 32);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000L, active3, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x400000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L, active3, 0L, active5);
      return 13;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x10000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0L, active3, 0L, active5, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000L, active3, 0x400000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, active3, 0L, active5);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8000L, active3, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(14, 226, 32);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x10000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000000L, active1, 0L, active3, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L, 0L, 0L, active5);
      return 15;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active5, 0x10000L);
      case 72:
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 58, 32);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8000L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active5, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L, 0L, 0L, active5);
      return 16;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active5, 0x10000L);
      case 80:
      case 112:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(16, 79, 32);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active5, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old5, long active5)
{
   if (((active1 &= old1) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, 0L, active5);
      return 17;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active5, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active5, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa18_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, 0L, active5);
      return 18;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa19_0(active5, 0x10000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active5, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa19_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
      return 19;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active5 & 0x8000L) != 0L)
            return jjStopAtPos(19, 335);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa20_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
      return 20;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa21_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa22_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
      return 22;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active5 & 0x10000L) != 0L)
            return jjStopAtPos(22, 336);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 62;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 18:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 63:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 328)
                        kind = 328;
                     jjCheckNAddTwoStates(56, 57);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 328)
                        kind = 328;
                     jjCheckNAdd(58);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(52, 53);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 325)
                        kind = 325;
                     jjCheckNAdd(49);
                  }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 328)
                        kind = 328;
                     jjCheckNAdd(61);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 53);
                  break;
               case 26:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 62:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 10)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 27:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 66:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  else if (curChar == 34)
                  {
                     if (kind > 322)
                        kind = 322;
                  }
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 20:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 65:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 69:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 46:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 325)
                        kind = 325;
                     jjCheckNAddStates(6, 11);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(60, 61);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(34, 35);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 21:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 24:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 22:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 68:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 39)
                  {
                     if (kind > 309)
                        kind = 309;
                  }
                  break;
               case 45:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 0:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 1:
                  if (curChar == 10)
                     jjCheckNAddStates(3, 5);
                  break;
               case 2:
                  if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar != 45)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(12, 16);
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(12, 16);
                  break;
               case 6:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(3, 5);
                  break;
               case 7:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(1, 8);
                  break;
               case 8:
                  if (curChar != 10)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(3, 5);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 309)
                     kind = 309;
                  break;
               case 12:
                  if (curChar == 62 && kind > 313)
                     kind = 313;
                  break;
               case 13:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 61 && kind > 313)
                     kind = 313;
                  break;
               case 15:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 33:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 34 && kind > 322)
                     kind = 322;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 325)
                     kind = 325;
                  jjCheckNAddStates(6, 11);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 325)
                     kind = 325;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 51:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 327)
                     kind = 327;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 328)
                     kind = 328;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar != 46)
                     break;
                  if (kind > 328)
                     kind = 328;
                  jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 328)
                     kind = 328;
                  jjCheckNAdd(58);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 53);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 328)
                     kind = 328;
                  jjCheckNAdd(61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  break;
               case 67:
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 66:
               case 34:
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 320)
                        kind = 320;
                  }
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 267)
                        kind = 267;
                  }
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 9:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(17, 18);
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 320)
                        kind = 320;
                  }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 68:
               case 10:
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 5:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(12, 16);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L && kind > 320)
                     kind = 320;
                  break;
               case 19:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 23:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 30:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(32);
                  break;
               case 36:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 37:
                  if ((0x200000002000L & l) != 0L && kind > 267)
                     kind = 267;
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if ((0x8000000080000L & l) != 0L && kind > 267)
                     kind = 267;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 66:
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 68:
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(12, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 62 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   50, 51, 53, 0, 2, 4, 49, 50, 51, 53, 56, 57, 0, 4, 5, 6, 
   7, 46, 47, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\42\42", "\45", "\46", "\47", "\50", 
"\51", "\52", "\53", "\54", "\55", "\56", "\57", "\72", "\73", "\74", "\75", "\76", 
"\77", "\137", "\174", "\133", "\135", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\173", "\175", "\44", null, "\74\75", 
"\76\75", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0x1c1e7L, 
};
static final long[] jjtoSkip = {
   0x7aL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[62];
private final int[] jjstateSet = new int[124];
protected char curChar;
public AdqlStoXTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AdqlStoXTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 62; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 334)
   {
      jjmatchedKind = 334;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
