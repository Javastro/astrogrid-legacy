/* Generated By: AdqlStoX.jjt,v 1.10 2006/09/26 13&JJTree&JavaCC: Do not edit this line. AdqlStoXTokenManager.java */
package org.astrogrid.adql ;
import java.util.* ;
import org.astrogrid.adql.v1_0.beans.* ;

public class AdqlStoXTokenManager implements AdqlStoXConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffe000L) != 0L || (active1 & 0xf8fffffc70000000L) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0x73edff1fffc00020L) != 0L || (active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 275;
            return 55;
         }
         if ((active3 & 0x12000000002fdfL) != 0L)
         {
            jjmatchedKind = 275;
            return 6;
         }
         if ((active1 & 0xfff8000L) != 0L || (active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 275;
            return 12;
         }
         if ((active4 & 0x8000L) != 0L)
            return 2;
         if ((active3 & 0x3fc000L) != 0L)
         {
            jjmatchedKind = 275;
            return 19;
         }
         if ((active1 & 0x7ff8L) != 0L || (active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 275;
            return 27;
         }
         if ((active0 & 0x900L) != 0L)
            return 0;
         if ((active4 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 280;
            return 54;
         }
         if ((active1 & 0x700000000000000L) != 0L || (active3 & 0xc00000000000000L) != 0L)
         {
            jjmatchedKind = 275;
            return 46;
         }
         if ((active1 & 0x380000000L) != 0L)
         {
            jjmatchedKind = 275;
            return 37;
         }
         if ((active4 & 0x180L) != 0L)
            return 53;
         if ((active0 & 0x7ff0000000000000L) != 0L || (active1 & 0x7L) != 0L || (active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 275;
            return 34;
         }
         return -1;
      case 1:
         if ((active0 & 0x40e0000L) != 0L || (active1 & 0x1fe000000000L) != 0L || (active2 & 0x703cL) != 0L || (active3 & 0x340020000000180L) != 0L)
            return 55;
         if ((active3 & 0xc000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 1;
            }
            return 18;
         }
         if ((active1 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 1;
            }
            return 36;
         }
         if ((active3 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 1;
            }
            return 50;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 1;
            }
            return 33;
         }
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x2000000000e00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active0 & 0x7feffffffbf1e000L) != 0L || (active1 & 0xffffe01dfffe7fffL) != 0L || (active2 & 0xffffffffffff8fc3L) != 0L || (active3 & 0x74bdfdffffff207fL) != 0L || (active4 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 1;
            }
            return 55;
         }
         if ((active1 & 0x18000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 1;
            }
            return 11;
         }
         return -1;
      case 2:
         if ((active0 & 0x7ffffffffbf00000L) != 0L || (active1 & 0xfdfeef9fff8f9fdfL) != 0L || (active2 & 0xf3ffffffdfffefc2L) != 0L || (active3 & 0x43c1bcb3ffe7ee7fL) != 0L || (active4 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 2;
            }
            return 55;
         }
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 2;
            }
            return 4;
         }
         if ((active3 & 0x800000000000000L) != 0L)
            return 49;
         if ((active0 & 0x5e000L) != 0L || (active1 & 0x201000000706020L) != 0L || (active2 & 0xc00000020000019L) != 0L || (active3 & 0x343c414c00180100L) != 0L)
            return 55;
         return -1;
      case 3:
         if ((active3 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 3;
            }
            return 22;
         }
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x63dfdfffe3f00000L) != 0L || (active1 & 0xff30079f69ea69c9L) != 0L || (active2 & 0xdbcffff819dce810L) != 0L || (active3 & 0x40032cbbb4e7e82fL) != 0L || (active4 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 3;
            }
            return 55;
         }
         if ((active0 & 0x1c20200018000000L) != 0L || (active1 & 0xcee80096059616L) != 0L || (active2 & 0x20300007c62307c2L) != 0L || (active3 & 0x3c090004b100650L) != 0L)
            return 55;
         return -1;
      case 4:
         if ((active3 & 0x200400000000000L) != 0L)
            return 22;
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x63dfdfffa1900000L) != 0L || (active1 & 0xfa10861f49c96dc9L) != 0L || (active2 & 0xdbcfdfff9cde0f90L) != 0L || (active3 & 0x2283a84c7ac0eL) != 0L || (active4 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 4;
            }
            return 55;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 4;
            }
            return 22;
         }
         if ((active0 & 0x42400000L) != 0L || (active1 & 0x520018020220000L) != 0L || (active2 & 0x20000100e000L) != 0L || (active3 & 0x4001048132204001L) != 0L)
            return 55;
         return -1;
      case 5:
         if ((active0 & 0x200000L) != 0L)
            return 22;
         if ((active0 & 0x61d7c7d3a0900000L) != 0L || (active1 & 0xb800841e09c94408L) != 0L || (active2 & 0xdb0e879f94de0790L) != 0L || (active3 & 0x2083884842c0eL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 5;
            }
            return 55;
         }
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x208082c01000000L) != 0L || (active1 & 0x42100201000029c1L) != 0L || (active2 & 0xc1586008000800L) != 0L || (active3 & 0x200200438000L) != 0L || (active4 & 0x40000L) != 0L)
            return 55;
         return -1;
      case 6:
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x605007c1a0100000L) != 0L || (active1 & 0x8800841e09894008L) != 0L || (active2 & 0x5306859f94420380L) != 0L || (active3 & 0x2000080020408L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 6;
            }
            return 55;
         }
         if ((active0 & 0x187c01200800000L) != 0L || (active1 & 0x3000000000400400L) != 0L || (active2 & 0x8080200009c0410L) != 0L || (active3 & 0x83804842806L) != 0L)
            return 55;
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 6;
            }
            return 22;
         }
         return -1;
      case 7:
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x7800000000000L) != 0L || (active2 & 0x8200000000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 7;
            }
            return 22;
         }
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40400440a0100000L) != 0L || (active1 & 0x8000840000090000L) != 0L || (active2 & 0x4104019c94400380L) != 0L || (active3 & 0x80020400L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 7;
            }
            return 55;
         }
         if ((active0 & 0x2010038100000000L) != 0L || (active1 & 0x800001e09804008L) != 0L || (active2 & 0x1002840300020000L) != 0L || (active3 & 0x200000000000cL) != 0L)
            return 55;
         return -1;
      case 8:
         if ((active0 & 0x4040054020100000L) != 0L || (active1 & 0x8000001001090000L) != 0L || (active2 & 0x4104019c80000280L) != 0L || (active3 & 0x20400L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 8;
            return 55;
         }
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x7800000000000L) != 0L || (active1 & 0x800000000L) != 0L || (active2 & 0x8200000000000000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 8;
            return 22;
         }
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x840000000000L) != 0L || (active2 & 0x14400100L) != 0L || (active3 & 0x80000000L) != 0L)
            return 55;
         return -1;
      case 9:
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000050000100000L) != 0L || (active1 & 0x8000001001010000L) != 0L || (active2 & 0x100018c80000080L) != 0L || (active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 9;
            return 55;
         }
         if ((active0 & 0x40004020000000L) != 0L || (active1 & 0x80000L) != 0L || (active2 & 0x4004001000000200L) != 0L || (active3 & 0x20000L) != 0L)
            return 55;
         if ((active0 & 0x7800000000000L) != 0L || (active1 & 0x800000000L) != 0L || (active2 & 0x8200000000000000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 9;
            return 22;
         }
         return -1;
      case 10:
         if ((active2 & 0x8000000000000000L) != 0L)
            return 22;
         if ((active0 & 0x50000100000L) != 0L || (active1 & 0x8000000001010000L) != 0L || (active2 & 0x100008480000080L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 10;
            return 55;
         }
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x7800000000000L) != 0L || (active1 & 0x800000000L) != 0L || (active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 10;
            return 22;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x1000000000L) != 0L || (active2 & 0x10800000000L) != 0L || (active3 & 0x400L) != 0L)
            return 55;
         return -1;
      case 11:
         if ((active0 & 0x7800000000000L) != 0L || (active2 & 0x200000000000000L) != 0L)
            return 22;
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x50000100000L) != 0L || (active1 & 0x1000000L) != 0L || (active2 & 0x8400000080L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 11;
            }
            return 55;
         }
         if ((active1 & 0x8000000000010000L) != 0L || (active2 & 0x100000080000000L) != 0L)
            return 55;
         if ((active1 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 275;
               jjmatchedPos = 11;
            }
            return 22;
         }
         return -1;
      case 12:
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 12;
            return 22;
         }
         if ((active2 & 0x8400000080L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 12;
            return 55;
         }
         if ((active0 & 0x50000100000L) != 0L || (active1 & 0x1000000L) != 0L)
            return 55;
         return -1;
      case 13:
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 13;
            return 22;
         }
         if ((active2 & 0x8400000080L) != 0L)
            return 55;
         return -1;
      case 14:
         if ((active1 & 0x800000000L) != 0L)
            return 22;
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 14;
            return 22;
         }
         return -1;
      case 15:
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 15;
            return 22;
         }
         return -1;
      case 16:
         if ((active0 & 0x2000000000000L) != 0L)
            return 22;
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active4 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active4 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active4 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 280;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 271, 2);
      case 36:
         return jjStopAtPos(0, 273);
      case 37:
         return jjStopAtPos(0, 266);
      case 38:
         return jjStopAtPos(0, 267);
      case 40:
         return jjStopAtPos(0, 258);
      case 41:
         return jjStopAtPos(0, 259);
      case 42:
         return jjStopAtPos(0, 265);
      case 43:
         return jjStartNfaWithStates_0(0, 263, 53);
      case 44:
         return jjStopAtPos(0, 256);
      case 45:
         return jjStartNfaWithStates_0(0, 264, 53);
      case 46:
         return jjStopAtPos(0, 63);
      case 47:
         return jjStopAtPos(0, 262);
      case 53:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1000000000L);
      case 54:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2000000000L);
      case 58:
         return jjStopAtPos(0, 255);
      case 59:
         return jjStopAtPos(0, 257);
      case 60:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 61:
         return jjStopAtPos(0, 10);
      case 62:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 272);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20L, 0x0L);
      case 91:
         return jjStopAtPos(0, 260);
      case 93:
         return jjStopAtPos(0, 261);
      case 94:
         return jjStopAtPos(0, 270);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1fe000L, 0x0L, 0x0L, 0x23c0000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7e00000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffffff8000000L, 0x0L, 0x0L, 0x4028001000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7ff0000000000000L, 0x7L, 0x0L, 0x2000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ff8L, 0x0L, 0x4000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfff8000L, 0x0L, 0x8000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70000000L, 0x0L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380000000L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ffc00000000L, 0x0L, 0x0L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c00000000000L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc000000000000L, 0x0L, 0x410000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000000000000L, 0x0L, 0xc00000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000000L, 0x3L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fffcL, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffc0000L, 0x60000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ffffff0000000L, 0x1880000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffe0000000000000L, 0x1004300000000000L, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x12000000002fdfL, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fc000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3c00000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfc000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf00000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 5);
      case 124:
         return jjStopAtPos(0, 269);
      case 125:
         return jjStopAtPos(0, 6);
      case 126:
         return jjStopAtPos(0, 268);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000L);
      case 61:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000018200000L, active1, 0x1b00000180018000L, active2, 0x200000300c0000L, active3, 0x410880004c00007L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0x80000000000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0x1c00000000L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xfc0000000c00000L, active1, 0x405c00000020000L, active2, 0xf801fffc0100000L, active3, 0x3000000008L, active4, 0x40000L);
      case 102:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 101, 55);
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x18L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L, active2, 0x1000000000000000L, active3, 0x38000010L, active4, 0L);
      case 105:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 233, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000001000000L, active1, 0x1a0000000c0000L, active2, 0x200000000000L, active3, 0x804000043000040L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0004000L, active1, 0x18L, active2, 0x200000L, active3, 0x8100000000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xe00000000L, active4, 0L);
      case 110:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 133, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L, active1, 0xf8000000020L, active2, 0L, active3, 0xc000L, active4, 0L);
      case 111:
         if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7ff00000000L, active1, 0xe0e0200210700001L, active2, 0x200fc00000000001L, active3, 0x4029450000000100L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xfc0L, active3, 0x70000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x300000000000L, active4, 0L);
      case 114:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180002000000L, active1, 0x63800042L, active2, 0x7c06000L, active3, 0x2000080000e00L, active4, 0L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 108, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0x80L, active2, 0L, active3, 0x40000000382000L, active4, 0L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x300000000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xfe00000100000L, active1, 0xc000004L, active2, 0x10000008008002L, active3, 0x1000000000000000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x30000L, active3, 0x2000000000000000L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7f00L, active2, 0L, active3, 0x4000000000L, active4, 0L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000100000000L, active1, 0x40000020000000L, active2, 0x40000007c0200000L, active3, 0x300000200000600L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0x400008000000L, active3, 0x7L, active4, 0L);
      case 99:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000000000L, active1, 0x2020000000000180L, active2, 0x800000000L, active3, 0L, active4, 0x40000L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 55);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 55);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0x6000L, active3, 0x80000070000L, active4, 0L);
      case 101:
         if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80022000000L, active1, 0xc01c01800608L, active2, 0x4307c0L, active3, 0x1b102050L, active4, 0L);
      case 102:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x4000000000000L, active2, 0x1000000010L, active3, 0L, active4, 0L);
      case 103:
         if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 253, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L, active2, 0x202000040000L, active3, 0x402000000000L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000001800L, active2, 0x11800000L, active3, 0x400010a420c800L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 55);
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000600000000L, active1, 0x40020002040c0000L, active2, 0x91800000000002L, active3, 0x800400000L, active4, 0L);
      case 109:
         if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 252, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L, active1, 0x4L, active2, 0x2000004000000000L, active3, 0L, active4, 0L);
      case 110:
         if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 242, 55);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 244, 55);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 251, 49);
         return jjMoveStringLiteralDfa3_0(active0, 0x40003e001000000L, active1, 0x8010010008000000L, active2, 0L, active3, 0x800000000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100040000000L, active1, 0x80000042000002L, active2, 0x6000000L, active3, 0x80008100000000L, active4, 0L);
      case 112:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 200, 55);
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6000L, active2, 0x18000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xfc40000000000L, active1, 0x400000000600040L, active2, 0x100000000180000L, active3, 0x100000800000L, active4, 0L);
      case 115:
         if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 243, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0x7800000018200000L, active1, 0x20080018010L, active2, 0x8200060000000000L, active3, 0L, active4, 0L);
      case 116:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 128, 55);
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 245, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000900000L, active1, 0x19000c0010020000L, active2, 0x800080000008800L, active3, 0x40000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0x1L, active2, 0x1000000000000000L, active3, 0x4003200000000000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L, active2, 0x20100000000000L, active3, 0L, active4, 0L);
      case 119:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 157, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0xe000000000000L, active3, 0x40000000000L, active4, 0L);
      case 120:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0x8L, active4, 0L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 55);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 112, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x110080003000000L, active1, 0x20000000002080L, active2, 0L, active3, 0x200000030000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 55);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 55);
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2020000000L, active1, 0x8100000008220400L, active2, 0x2000004500000L, active3, 0x100000000L, active4, 0L);
      case 100:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 55);
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 239, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000200000000L, active2, 0x780000000L, active3, 0x800000000L, active4, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 55);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 55);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 55);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 55);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 55);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 180, 55);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 181, 55);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 189, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000200000L, active1, 0x10078001c00100L, active2, 0xc000900000e000L, active3, 0x40000000000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000000L, active2, 0x4000000000000L, active3, 0x800L, active4, 0L);
      case 104:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 55);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 222, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x2000000000000000L, active2, 0x200000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x800000100000000L, active2, 0x100002000000800L, active3, 0x80000000000L, active4, 0L);
      case 107:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 55);
         break;
      case 108:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 55);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 55);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000300000000L, active1, 0x84040L, active2, 0x9810008040000L, active3, 0x1020040007L, active4, 0L);
      case 109:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x8L, active2, 0x800000L, active3, 0L, active4, 0L);
      case 110:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 55);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 149, 55);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 196, 55);
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 219, 55);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 246, 55);
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1c20000000L, active2, 0x1000780L, active3, 0x4203000000200400L, active4, 0L);
      case 111:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 55);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x104800000000L, active3, 0x8000004000L, active4, 0x40000L);
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 55);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 55);
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xa000L, active4, 0L);
      case 114:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 212, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x7c40000000000L, active1, 0L, active2, 0x20000L, active3, 0x2010000000L, active4, 0L);
      case 115:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 198, 55);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 247, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x81040c0000000L, active1, 0x800L, active2, 0x200000010000010L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 55);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 55);
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 55);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 236, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0x6000038000000000L, active1, 0x10000L, active2, 0xd000060000080000L, active3, 0x284000008L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x1000000040000000L, active2, 0x800480000000000L, active3, 0x400000L, active4, 0L);
      case 119:
         if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0L);
      case 121:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 48:
         if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 238, 22);
         break;
      case 50:
         if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 249, 22);
         break;
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8001a200000000L, active1, 0L, active2, 0x100008000800000L, active3, 0x80800000000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0x800000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x80000080000000L, active3, 0x2000200000000L, active4, 0L);
      case 100:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 240, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000000000080L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 55);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 55);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 122, 55);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 192, 55);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 220, 55);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 221, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x7c40100800000L, active1, 0x2000000000000008L, active2, 0x8000000014100010L, active3, 0x2080400000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000090000L, active2, 0L, active3, 0x4000000L, active4, 0L);
      case 103:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 213, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L);
      case 104:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 55);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 55);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000020800000000L, active1, 0x404000L, active2, 0x4200010008480000L, active3, 0x1000800000L, active4, 0L);
      case 107:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 55);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 224, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L, active2, 0x100000000000L, active3, 0L, active4, 0L);
      case 108:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0x8000000200000001L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 55);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 206, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000100002000L, active2, 0x800000000L, active3, 0L, active4, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000100000L, active1, 0xa00000000000000L, active2, 0xa022000040800L, active3, 0x40006L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000180L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 55);
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 143, 55);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 231, 55);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 234, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000001000000L, active1, 0x1000060000000000L, active2, 0xc1000004200L, active3, 0x200000000000L, active4, 0L);
      case 115:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 217, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L, active2, 0x800400000000000L, active3, 0x408L, active4, 0L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 55);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 152, 55);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 173, 55);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 254, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x200084080000000L, active1, 0x1c09800800L, active2, 0x4200000000L, active3, 0x30000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100001000000000L, active1, 0x400L, active2, 0x5000400000000L, active3, 0xa000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x40000000L, active2, 0x4000L, active3, 0L, active4, 0x3000000000L);
      case 52:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 22);
         break;
      case 90:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 97:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 182, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x1000000000080000L, active2, 0x8001000a0080L, active3, 0x2000000002400L, active4, 0L);
      case 99:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 155, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000004000L, active2, 0x8010000040000L, active3, 0x40006L, active4, 0L);
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 55);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 274, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 55);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 55);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 55);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 55);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 166, 55);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 172, 55);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 207, 55);
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 237, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x80800000L, active1, 0x1800000L, active2, 0x800001200000000L, active3, 0x2000020800L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 103:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 225, 55);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000018000000000L, active1, 0x801c08010000L, active2, 0x4040000000000L, active3, 0x8L, active4, 0L);
      case 107:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 55);
         break;
      case 108:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L, active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000000000000400L, active3, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 55);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 139, 55);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 165, 55);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 171, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x2007c20000000000L, active1, 0x800000000000008L, active2, 0x400100000L, active3, 0x81000800000L, active4, 0L);
      case 111:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x200000000L, active2, 0x1200000080000200L, active3, 0x4000000L, active4, 0L);
      case 112:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 55);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 176, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x80004000100000L, active1, 0L, active2, 0x20010800000L, active3, 0L, active4, 0L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 55);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 214, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x40100000000L, active1, 0x40000000000L, active2, 0x4000000000400000L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 55);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 55);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 55);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 55);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 174, 55);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 183, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x1200000000L, active1, 0x400L, active2, 0x8000000010L, active3, 0x880000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x2000000000100L, active3, 0L, active4, 0L);
      case 121:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4);
      return 6;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L);
      case 97:
         if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 227, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x800000000000000L, active2, 0x18000000000L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x40000000L, active2, 0x4000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2040000100000000L, active1, 0x200080000L, active2, 0x840400000000L, active3, 0x400L, active4, 0x3000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 55);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 55);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 55);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 55);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 169, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000L, active2, 0x100L, active3, 0x80000000L, active4, 0L);
      case 103:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 215, 55);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 228, 55);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0x4000L, active2, 0x100000800400000L, active3, 0L, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 107:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 125, 55);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 146, 55);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 179, 55);
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 210, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0L);
      case 108:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 124, 55);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 138, 55);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 147, 55);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 205, 55);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 55);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x18000000000L, active1, 0L, active2, 0x202001000000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0x8000000L, active2, 0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 187, 55);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 203, 55);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 218, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x10000L, active2, 0x10000000L, active3, 0L, active4, 0L);
      case 115:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 132, 55);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 229, 55);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 235, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x8000000000000000L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 55);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 148, 55);
         return jjMoveStringLiteralDfa7_0(active0, 0x7800000000000L, active1, 0x1c00000008L, active2, 0x4000000000000080L, active3, 0x2000000020000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000000000200L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800001800000L, active2, 0x200000000L, active3, 0L, active4, 0L);
      case 121:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 151, 55);
         break;
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4);
      return 7;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x7800000000000L, active1, 0L, active2, 0x200000000000000L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0x3000000000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L, active2, 0x4001000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 55);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 55);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 55);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 195, 55);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 241, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0x800000000000L, active2, 0L, active3, 0x20000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4020000000L, active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L);
      case 107:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 55);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 175, 55);
         break;
      case 108:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 123, 55);
         break;
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 110:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 55);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 188, 55);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x140000000000L, active1, 0L, active2, 0x410400000L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000100L, active3, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 55);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 145, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0x10000L, active2, 0x200L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 55);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 55);
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 160, 55);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 161, 55);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 170, 55);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 177, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000001080000L, active2, 0x10000000000L, active3, 0x400L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L);
      case 120:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 194, 55);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L);
      case 121:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(7, 94);
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(7, 142);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L, active2, 0x100000000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         if ((active3 & 0x20L) != 0L)
            return jjStopAtPos(8, 197);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0L, active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000L, active2, 0x4000000000000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 55);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 154, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x1000000200L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L, active2, 0x10080000000L, active3, 0x400L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0L, active4, 0L);
      case 110:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 150, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0x44020000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L, active2, 0x4000000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 156, 55);
         break;
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000000000080L, active3, 0L, active4, 0x3000000000L);
      case 116:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 55);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 223, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0x4043010000000000L, active1, 0x1010000L, active2, 0L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0L, active2, 0x200000800000000L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L, active4, 0L);
      case 121:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 136, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x810000000000L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 54, 55);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x8000008000000000L, active3, 0L, active4, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000000000000L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 178, 55);
         break;
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(9, 44);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000L, active2, 0x10000000080L, active3, 0x400L, active4, 0L);
      case 114:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 83, 55);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000010000L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 115:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 164, 55);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 190, 55);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0L, active2, 0x200000000000000L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 55);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 38, 55);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 137, 55);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(9, 209, 55);
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4);
      return 10;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L);
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 62, 55);
         break;
      case 101:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 163, 55);
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0x8000000000000000L, active2, 0x200000080000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000100000L, active1, 0L, active2, 0x400000000L, active3, 0L, active4, 0L);
      case 108:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 100, 55);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x3000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 110:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 168, 55);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 202, 55);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 191, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L, active4);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 127, 55);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 159, 55);
         break;
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 47, 22);
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 184, 55);
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L, active1, 0L, active2, 0x8000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0x1000000L, active2, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active1, 0L, active2, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x2000000000L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 50, 22);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 185, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x80L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000L, active2, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400000000L, active4, 0L);
      case 119:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 80, 55);
         break;
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L, active4);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, 0L, active4);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x80L, active4, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 40, 55);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(12, 88, 55);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000L, active2, 0x400000000L, active4, 0x2000000000L);
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 42, 55);
         break;
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(12, 20, 55);
         break;
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, 0L, active4);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, 0L, active4);
      return 13;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x2000000000L);
      case 100:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(13, 162, 55);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 167, 55);
         break;
      case 101:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(13, 135, 55);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800000000L, active2, 0L, active4, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, 0L, active4);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, 0L, active4);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L, active1, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active4, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active4, 0x2000000000L);
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(14, 99, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L, 0L, active4);
      return 15;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active4, 0x2000000000L);
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active4, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old4, long active4)
{
   if (((active0 &= old0) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L, 0L, active4);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active4, 0x2000000000L);
      case 112:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 49, 22);
         break;
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active4, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old4, long active4)
{
   if (((active0 &= old0) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, active4);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active4, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active4, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa18_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, active4);
      return 18;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa19_0(active4, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active4, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa19_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, active4);
      return 19;
   }
   switch(curChar)
   {
      case 110:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(19, 292);
         break;
      case 116:
         return jjMoveStringLiteralDfa20_0(active4, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa20_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, active4);
      return 20;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa21_0(active4, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa21_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, active4);
      return 21;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa22_0(active4, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa22_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, active4);
      return 22;
   }
   switch(curChar)
   {
      case 110:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStopAtPos(22, 293);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, active4);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 18:
               case 22:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 55:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 49:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 6:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 4:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 50:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 12:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 19:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 27:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 46:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 280)
                        kind = 280;
                     jjCheckNAdd(54);
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 279)
                        kind = 279;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(40, 41);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 0:
                  if (curChar == 62 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 61 && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 23:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 34 && kind > 276)
                     kind = 276;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 283)
                     kind = 283;
                  jjCheckNAdd(28);
                  break;
               case 39:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 39 && kind > 290)
                     kind = 290;
                  break;
               case 52:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 279)
                     kind = 279;
                  jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 282)
                     kind = 282;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 280)
                     kind = 280;
                  jjCheckNAdd(54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(29);
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 204)
                        kind = 204;
                  }
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 121)
                  {
                     if (kind > 284)
                        kind = 284;
                  }
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 109)
                     jjAddStates(0, 1);
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 100 && kind > 204)
                     kind = 204;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 110 && kind > 204)
                     kind = 204;
                  break;
               case 15:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  jjCheckNAdd(22);
                  break;
               case 24:
                  jjAddStates(2, 3);
                  break;
               case 26:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 114 && kind > 284)
                     kind = 284;
                  break;
               case 30:
                  if (curChar == 97)
                     jjCheckNAdd(29);
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 35:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 38:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  jjAddStates(4, 5);
                  break;
               case 42:
                  if (curChar == 109)
                     jjAddStates(0, 1);
                  break;
               case 43:
                  if (curChar == 104 && kind > 284)
                     kind = 284;
                  break;
               case 44:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (curChar == 101 && kind > 284)
                     kind = 284;
                  break;
               case 48:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 51:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(4, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   46, 51, 24, 25, 40, 41, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\173", "\175", null, "\74\75", "\76\75", "\75", 
"\74", "\76", "\141\144\144", "\141\154\154", "\141\156\144", "\141\156\171", 
"\141\163", "\141\163\143", "\141\164", 
"\141\165\164\150\157\162\151\172\141\164\151\157\156", "\142\141\163\145\66\64", "\142\145\147\151\156", 
"\142\145\164\167\145\145\156", "\142\151\156\141\162\171", "\142\162\145\141\153", "\142\171", 
"\143\141\163\145", "\143\141\163\164", "\143\150\145\143\153\160\157\151\156\164", 
"\143\154\157\163\145", "\143\154\165\163\164\145\162\145\144", "\143\157\141\154\145\163\143\145", 
"\143\157\154\154\141\164\145", "\143\157\154\165\155\156", "\143\157\155\155\151\164", 
"\143\157\155\160\165\164\145", "\143\157\156\143\141\164", "\143\157\156\163\164\162\141\151\156\164", 
"\143\157\156\164\141\151\156\163", "\143\157\156\164\141\151\156\163\164\141\142\154\145", 
"\143\157\156\164\151\156\165\145", "\143\157\162\162\145\163\160\157\156\144\151\156\147", 
"\143\162\145\141\164\145", "\143\162\157\163\163\40\152\157\151\156", "\143\165\142\145", 
"\143\165\162\162\145\156\164", "\143\165\162\162\145\156\164\137\144\141\164\145", 
"\143\165\162\162\145\156\164\137\164\151\155\145", "\143\165\162\162\145\156\164\137\164\151\155\145\163\164\141\155\160", 
"\143\165\162\162\145\156\164\137\165\163\145\162", "\143\165\162\163\157\162", "\144\141\164\141\142\141\163\145", 
"\144\142\143\143", "\144\145\141\154\154\157\143\141\164\145", "\144\145\143\154\141\162\145", 
"\144\145\146\141\165\154\164", "\144\145\154\145\164\145", "\144\145\156\171", "\144\145\163\143", 
"\144\151\163\153", "\144\151\163\164\151\156\143\164", 
"\144\151\163\164\162\151\142\165\164\145\144", "\56", "\144\157\165\142\154\145", "\144\162\157\160", "\144\165\155\160", 
"\145\154\145\155\145\156\164\163", "\145\154\163\145", "\145\156\144", "\145\162\162\154\166\154", 
"\145\163\143\141\160\145", "\145\170\143\145\160\164", "\145\170\145\143", 
"\145\170\145\143\165\164\145", "\145\170\151\163\164\163", "\145\170\151\164", "\145\170\160\141\156\144", 
"\145\170\160\154\151\143\151\164", "\146\141\163\164", "\146\141\163\164\146\151\162\163\164\162\157\167", 
"\146\145\164\143\150", "\146\151\154\145", "\146\151\154\154\146\141\143\164\157\162", 
"\146\157\162", "\146\157\162\143\145", "\146\157\162\145\151\147\156", 
"\146\162\145\145\164\145\170\164", "\146\162\145\145\164\145\170\164\164\141\142\154\145", "\146\162\157\155", 
"\146\165\154\154", "\146\165\156\143\164\151\157\156", "\147\157\164\157", 
"\147\162\141\156\164", "\147\162\157\165\160\40\142\171", "\150\141\163\150", 
"\150\141\166\151\156\147", "\150\157\154\144\154\157\143\153", "\151\144\145\156\164\151\164\171", 
"\151\144\145\156\164\151\164\171\137\151\156\163\145\162\164", "\151\144\145\156\164\151\164\171\143\157\154", "\151\146", "\151\156", 
"\151\156\144\145\170", "\151\156\156\145\162", "\151\156\163\145\162\164", 
"\151\156\164\145\162\163\145\143\164", "\151\156\164\157", "\151\163", "\152\157\151\156", "\153\145\145\160", 
"\153\145\145\160\146\151\170\145\144", "\153\145\171", "\153\151\154\154", "\154\145\146\164", "\154\151\153\145", 
"\154\151\156\145\156\157", "\154\157\143\141\154", "\154\157\141\144", "\154\157\157\160", 
"\155\141\164\143\150", "\155\141\170\144\157\160", "\155\145\162\147\145", 
"\156\141\164\151\157\156\141\154", "\156\141\164\165\162\141\154", "\156\157\143\150\145\143\153", 
"\156\157\154\157\143\153", "\156\157\156\143\154\165\163\164\145\162\145\144", "\156\157\164", 
"\156\165\154\154", "\157\146", "\157\146\146", "\157\146\146\163\145\164\163", "\157\156", 
"\157\160\145\156", "\157\160\145\156\144\141\164\141\163\157\165\162\143\145", 
"\157\160\145\156\161\165\145\162\171", "\157\160\145\156\162\157\167\163\145\164", "\157\160\145\156\170\155\154", 
"\157\160\164\151\157\156", "\157\162", "\157\162\144\145\162", "\157\162\144\145\162\40\142\171", 
"\157\165\164\145\162", "\157\166\145\162", "\157\166\145\162\154\141\160\163", 
"\160\141\147\154\157\143\153", "\160\141\162\164\151\141\154", "\160\145\162\143\145\156\164", 
"\160\154\141\156", "\160\162\145\143\151\163\151\157\156", "\160\162\151\155\141\162\171", 
"\160\162\151\156\164", "\160\162\157\143", "\160\162\157\143\145\144\165\162\145", 
"\160\165\142\154\151\143", "\162\141\151\163\145\162\162\157\162", "\162\141\167", "\162\145\141\144", 
"\162\145\141\144\143\157\155\155\151\164\145\144", "\162\145\141\144\160\141\163\164", "\162\145\141\144\164\145\170\164", 
"\162\145\141\144\165\156\143\157\155\155\151\164\145\144", "\162\145\143\157\156\146\151\147\165\162\145", 
"\162\145\146\145\162\145\156\143\145\163", "\162\145\147\151\157\156", "\162\145\155\157\164\145", 
"\162\145\160\145\141\164\141\142\154\145\162\145\141\144", "\162\145\160\154\151\143\141\164\151\157\156", 
"\162\145\163\164\157\162\145", "\162\145\163\164\162\151\143\164", "\162\145\164\165\162\156", 
"\162\145\166\157\153\145", "\162\151\147\150\164", "\162\157\142\165\163\164", 
"\162\157\154\154\142\141\143\153", "\162\157\154\154\165\160", "\162\157\167\143\157\165\156\164", 
"\162\157\167\147\165\151\144\143\157\154", "\162\157\167\154\157\143\153", "\162\165\154\145", "\163\141\166\145", 
"\163\143\150\145\155\141", "\163\145\154\145\143\164", 
"\163\145\162\151\141\154\151\172\141\142\154\145", "\163\145\163\163\151\157\156\137\165\163\145\162", "\163\145\164", 
"\163\145\164\165\163\145\162", "\163\150\165\164\144\157\167\156", "\163\157\155\145", 
"\163\164\141\164\151\163\164\151\143\163", "\163\171\163\164\145\155\137\165\163\145\162", "\164\141\142\154\145", 
"\164\141\142\154\157\143\153", "\164\141\142\154\157\143\153\170", "\164\145\170\164\163\151\172\145", 
"\164\150\145\156", "\124\111\115\105\40\132\117\116\105", "\164\151\145\163", "\164\157", 
"\164\157\160", "\164\162\141\156", "\164\162\141\156\163\141\143\164\151\157\156", 
"\164\162\151\147\147\145\162", null, "\164\163\145\161\165\141\154", "\165\156\151\157\156", 
"\165\156\151\161\165\145", "\165\160\144\141\164\145", "\165\160\144\141\164\145\164\145\170\164", 
"\165\160\144\154\157\143\153", "\165\163\145", "\165\163\145\162", "\165\163\151\156\147", 
"\166\141\154\165\145\163", "\166\141\162\171\151\156\147", "\166\151\145\167", "\166\151\145\167\163", 
"\167\141\151\164\146\157\162", "\167\150\145\156", "\167\150\145\162\145", "\167\150\151\154\145", 
"\167\151\164\150", "\167\162\151\164\145\164\145\170\164", "\170\154\157\143\153", 
"\170\155\141\164\143\150", "\170\155\154", "\170\155\154\144\141\164\141", 
"\143\145\151\154\151\156\147", "\144\145\147\162\145\145\163", "\145\170\160", "\146\154\157\157\162", 
"\154\157\147", "\160\151", "\160\157\167\145\162", "\162\141\144\151\141\156\163", 
"\163\161\162\164", "\163\161\165\141\162\145", "\154\157\147\61\60", "\162\141\156\144", 
"\162\157\165\156\144", "\164\162\165\156\143\141\164\145", "\163\151\156", "\143\157\163", 
"\164\141\156", "\143\157\164", "\141\163\151\156", "\141\143\157\163", "\141\164\141\156", 
"\141\164\141\156\62", "\155\141\170", "\155\151\156", "\163\165\155", "\141\166\147", 
"\143\157\165\156\164", "\72", "\54", "\73", "\50", "\51", "\133", "\135", "\57", "\53", "\55", "\52", 
"\45", "\46", "\176", "\174", "\136", "\41", "\77", "\44", 
"\163\145\143\157\156\144", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, 
"\65\55\124\102\104\40\143\141\163\145\105\170\160\162\145\163\163\151\157\156", 
"\66\55\124\102\104\40\143\141\163\164\123\160\145\143\151\146\151\143\141\164\151\157\156", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0x3c1f9fffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
protected char curChar;
public AdqlStoXTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AdqlStoXTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 291)
   {
      jjmatchedKind = 291;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
