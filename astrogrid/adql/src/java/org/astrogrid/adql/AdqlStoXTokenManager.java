/* Generated By: AdqlStoX.jjt,v 1.38.4.1 2008/04/15 14&JJTree&JavaCC: Do not edit this line. AdqlStoXTokenManager.java */
package org.astrogrid.adql ;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;
import java.util.HashSet ;
import java.util.ArrayList ;
import java.util.List ;
import org.astrogrid.adql.v1_0.beans.* ;
import org.astrogrid.stc.region.v1_10.beans.* ;
import org.astrogrid.stc.coords.v1_10.beans.* ;

public class AdqlStoXTokenManager implements AdqlStoXConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L)
            return 75;
         if ((active0 & 0x20000L) != 0L)
            return 3;
         if ((active0 & 0x80000L) != 0L)
            return 76;
         if ((active5 & 0x30000L) != 0L)
         {
            jjmatchedKind = 326;
            return 77;
         }
         if ((active0 & 0xb0L) != 0L)
            return 78;
         if ((active0 & 0xfff8000000000000L) != 0L || (active1 & 0x7ffffL) != 0L || (active4 & 0x2002800100002188L) != 0L)
         {
            jjmatchedKind = 322;
            return 48;
         }
         if ((active0 & 0x40000L) != 0L)
            return 79;
         if ((active1 & 0x1ff000000000000L) != 0L || (active4 & 0x800000400L) != 0L)
         {
            jjmatchedKind = 322;
            return 24;
         }
         if ((active3 & 0x7ffe0000000L) != 0L || (active4 & 0x1200000000001L) != 0L || (active5 & 0x1L) != 0L)
         {
            jjmatchedKind = 322;
            return 20;
         }
         if ((active0 & 0x100L) != 0L)
            return 80;
         if ((active0 & 0x7ffffc0000000L) != 0L || (active1 & 0xfe00fffffff80000L) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xfff800001fffffffL) != 0L || (active4 & 0xc03c5ff6ff6fc276L) != 0L)
         {
            jjmatchedKind = 322;
            return 81;
         }
         if ((active0 & 0x800L) != 0L)
            return 82;
         if ((active0 & 0x400000L) != 0L || (active4 & 0x800000000000000L) != 0L)
            return 14;
         if ((active3 & 0x7f80000000000L) != 0L || (active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 322;
            return 31;
         }
         return -1;
      case 1:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 1;
            }
            return 23;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x380000000000L) != 0L || (active4 & 0x800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 1;
            }
            return 30;
         }
         if ((active0 & 0x3ffbf07fc0000000L) != 0L || (active1 & 0xe7fefffffffff800L) != 0L || (active2 & 0xfff98f3ffffe0007L) != 0L || (active3 & 0xffffc00fffffffffL) != 0L || (active4 & 0x60095fdff06fe47eL) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 1;
            }
            return 81;
         }
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x7ffL) != 0L || (active4 & 0x2800000000180L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 1;
            }
            return 47;
         }
         if ((active0 & 0x40f8000000000L) != 0L || (active1 & 0x1800000000000000L) != 0L || (active2 & 0x670c00001fff8L) != 0L || (active3 & 0x1000000000L) != 0L || (active4 & 0x803400200f000201L) != 0L)
            return 81;
         if ((active3 & 0x7e000000000L) != 0L || (active4 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 1;
            }
            return 19;
         }
         return -1;
      case 2:
         if ((active0 & 0xfffa6a0880000000L) != 0L || (active1 & 0xf5ceff3fffefffffL) != 0L || (active2 & 0xffbdcf3f8ffb13f7L) != 0L || (active3 & 0xffffdbeff43dffffL) != 0L || (active4 & 0xe03c1b4900612dfeL) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 2;
            }
            return 81;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active3 & 0x40000000000L) != 0L || (active4 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 2;
            }
            return 83;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 2;
            }
            return 22;
         }
         if ((active3 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 2;
            }
            return 29;
         }
         if ((active0 & 0x1917740000000L) != 0L || (active1 & 0x23000c000100000L) != 0L || (active2 & 0x40008070046c00L) != 0L || (active3 & 0xbc20000L) != 0L || (active4 & 0x3c496f00ec201L) != 0L)
            return 81;
         return -1;
      case 3:
         if ((active3 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return 28;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return 83;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xf62000000000000L) != 0L || (active1 & 0x1180183070080000L) != 0L || (active2 & 0xc32001524001L) != 0L || (active3 & 0xdb82060f80140206L) != 0L || (active4 & 0x3c090000000800L) != 0L)
            return 81;
         if ((active0 & 0x1000000000000L) != 0L || (active4 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return 34;
         }
         if ((active0 & 0xf0986a0cc0000000L) != 0L || (active1 & 0xe46ee70f8fe7ffffL) != 0L || (active2 & 0xffbd0c1fcea93bf6L) != 0L || (active3 & 0x247dd9e077a9fdf9L) != 0L || (active4 & 0xe00032cb0061e7feL) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return 81;
         }
         return -1;
      case 4:
         if ((active4 & 0x20040000000000L) != 0L)
            return 34;
         if ((active4 & 0x400L) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x401000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 4;
            }
            return 34;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xca984a04c0000000L) != 0L || (active1 & 0x8420f70fefe7ebffL) != 0L || (active2 & 0xdfb10e0cc0293b36L) != 0L || (active3 & 0x26051ee5789fd79L) != 0L || (active4 & 0x2283006063feL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 4;
            }
            return 81;
         }
         if ((active3 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 4;
            }
            return 27;
         }
         if ((active0 & 0x3000200800000000L) != 0L || (active1 & 0x604f000000001400L) != 0L || (active2 & 0x200c00130e8000c0L) != 0L || (active3 & 0x241d880020200080L) != 0L || (active4 & 0xe000104800018000L) != 0L)
            return 81;
         return -1;
      case 5:
         if ((active4 & 0x400L) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active3 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 5;
            }
            return 26;
         }
         if ((active0 & 0xca984a0440000000L) != 0L || (active1 & 0x20d003e7e3e3f9L) != 0L || (active2 & 0xdfa0040c00293936L) != 0L || (active3 & 0x26001ee5789a138L) != 0L || (active4 & 0x208300000230L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 5;
            }
            return 81;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x401000000000000L) != 0L || (active2 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 5;
            }
            return 34;
         }
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x8400270c08040806L) != 0L || (active2 & 0x110200c0000200L) != 0L || (active3 & 0x10500000005c41L) != 0L || (active4 & 0x200006061ceL) != 0L)
            return 81;
         return -1;
      case 6:
         if ((active4 & 0x400L) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x401000000000000L) != 0L || (active2 & 0x80000000000L) != 0L || (active3 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 6;
            }
            return 34;
         }
         if ((active0 & 0x8098400000000000L) != 0L || (active1 & 0x20900001c3e118L) != 0L || (active2 & 0x1480040800200800L) != 0L || (active3 & 0x6020000081a000L) != 0L || (active4 & 0x8300000030L) != 0L)
            return 81;
         if ((active0 & 0x4a000a0440000000L) != 0L || (active1 & 0x4403e62002e1L) != 0L || (active2 & 0xcb20000400093136L) != 0L || (active3 & 0x20001ee47080138L) != 0L || (active4 & 0x200000000200L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 6;
            }
            return 81;
         }
         return -1;
      case 7:
         if ((active4 & 0x400L) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xa000a0000000000L) != 0L || (active1 & 0x401c2200271L) != 0L || (active2 & 0xc200000000011134L) != 0L || (active3 & 0x1ce44000008L) != 0L || (active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 7;
            return 81;
         }
         if ((active0 & 0x4010000440000000L) != 0L || (active1 & 0x400224000080L) != 0L || (active2 & 0x920000400082002L) != 0L || (active3 & 0x200002003080130L) != 0L || (active4 & 0x200000000000L) != 0L)
            return 81;
         if ((active0 & 0x401000000000000L) != 0L || (active1 & 0x3c000L) != 0L || (active2 & 0x80000000000L) != 0L || (active3 & 0x10010000L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 7;
            return 34;
         }
         return -1;
      case 8:
         if ((active4 & 0x400L) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x1c2200270L) != 0L || (active2 & 0x4000000000001100L) != 0L || (active3 & 0x14000000008L) != 0L || (active4 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 8;
            }
            return 81;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x401000000000000L) != 0L || (active1 & 0x3c000L) != 0L || (active2 & 0x80000000000L) != 0L || (active3 & 0xc10010000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 8;
            }
            return 34;
         }
         if ((active0 & 0xa00020000000000L) != 0L || (active1 & 0x40000000001L) != 0L || (active2 & 0x8200000000010034L) != 0L || (active3 & 0x8244000000L) != 0L)
            return 81;
         return -1;
      case 9:
         if ((active4 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 34;
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xc00000000000000L) != 0L || (active1 & 0x3c000L) != 0L || (active2 & 0x80000000000L) != 0L || (active3 & 0xc10010000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 9;
            }
            return 34;
         }
         if ((active1 & 0x142200070L) != 0L || (active2 & 0x4000000000001000L) != 0L || (active3 & 0x8L) != 0L)
            return 81;
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x80000200L) != 0L || (active2 & 0x100L) != 0L || (active3 & 0x14000000000L) != 0L || (active4 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 9;
            }
            return 81;
         }
         return -1;
      case 10:
         if ((active4 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active3 & 0x10000000L) != 0L)
            return 34;
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x3c000L) != 0L || (active2 & 0x80000000000L) != 0L || (active3 & 0xc00010000L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 10;
            return 34;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x200L) != 0L || (active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 10;
            return 81;
         }
         if ((active1 & 0x80000040L) != 0L || (active2 & 0x100L) != 0L || (active3 & 0x14000000000L) != 0L)
            return 81;
         return -1;
      case 11:
         if ((active1 & 0x3c000L) != 0L || (active2 & 0x80000000000L) != 0L || (active3 & 0x10000L) != 0L)
            return 34;
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 11;
            }
            return 81;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active3 & 0xc00000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 322;
               jjmatchedPos = 11;
            }
            return 34;
         }
         if ((active4 & 0x200L) != 0L)
            return 81;
         return -1;
      case 12:
         if ((active3 & 0x400000000L) != 0L)
            return 34;
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x10000L) != 0L || (active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 12;
            return 34;
         }
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x200L) != 0L)
            return 81;
         return -1;
      case 13:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x10000L) != 0L || (active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 13;
            return 34;
         }
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active3 & 0x800000000L) != 0L)
            return 34;
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 14;
            return 34;
         }
         return -1;
      case 15:
         if ((active0 & 0x800000000000000L) != 0L)
            return 34;
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 15;
            return 34;
         }
         return -1;
      case 16:
         if ((active1 & 0x10000L) != 0L)
            return 34;
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active5 & 0x30000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active5 & 0x20000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active5 & 0x20000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 7, 78);
      case 10:
         return jjStartNfaWithStates_0(0, 5, 78);
      case 13:
         return jjStartNfaWithStates_0(0, 6, 75);
      case 32:
         return jjStartNfaWithStates_0(0, 4, 78);
      case 34:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 36:
         return jjStopAtPos(0, 313);
      case 37:
         return jjStopAtPos(0, 9);
      case 38:
         return jjStopAtPos(0, 10);
      case 39:
         return jjStartNfaWithStates_0(0, 11, 82);
      case 40:
         return jjStopAtPos(0, 12);
      case 41:
         return jjStopAtPos(0, 13);
      case 42:
         return jjStopAtPos(0, 14);
      case 43:
         return jjStopAtPos(0, 15);
      case 44:
         return jjStopAtPos(0, 16);
      case 45:
         return jjStartNfaWithStates_0(0, 17, 3);
      case 46:
         return jjStartNfaWithStates_0(0, 18, 79);
      case 47:
         return jjStartNfaWithStates_0(0, 19, 76);
      case 53:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x10000L);
      case 54:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20000L);
      case 58:
         return jjStopAtPos(0, 20);
      case 59:
         return jjStopAtPos(0, 21);
      case 60:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x800000000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 23);
      case 62:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 25);
      case 91:
         return jjStopAtPos(0, 28);
      case 93:
         return jjStopAtPos(0, 29);
      case 95:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x900000L, 0x0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1fffc0000000L, 0x0L, 0x0L, 0x0L, 0x3c000084610000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7e00000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfff8000000000000L, 0x7ffffL, 0x0L, 0x0L, 0x2002800100002188L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ffff80000L, 0x0L, 0x0L, 0x200060000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffe000000000L, 0x0L, 0x0L, 0x400000010L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ff000000000000L, 0x0L, 0x0L, 0x800000400L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e00000000000000L, 0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x1L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fffeL, 0x0L, 0x200L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000L, 0x0L, 0x11000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7f80000L, 0x0L, 0x41040000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1f8000000L, 0x0L, 0x22000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fe00000000L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ff80000000000L, 0x0L, 0x8000000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffc0000000000000L, 0x1L, 0x6008000020L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3feL, 0x18800008c004L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1ffffc00L, 0x430000000040L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7ffe0000000L, 0x1200000000001L, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7f80000000000L, 0x800L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf8000000000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3f00000000000000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x0L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 311);
      case 124:
         return jjStopAtPos(0, 27);
      case 125:
         return jjStopAtPos(0, 312);
      default :
         return jjMoveNfa_0(11, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x30000L);
      case 61:
         if ((active4 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 315);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 316);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xf8000000000000L, active1, 0x8001000000180000L, active2, 0xc0000e18180000L, active3, 0x78000020000000L, active4, 0x108800008c000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L, active5, 0L);
      case 67:
      case 99:
         if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 283, 81);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L, active2, 0x81000000000L, active3, 0xc00L, active4, 0x8000000000000L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000L, active1, 0x20200007fe00000L, active2, 0x2000e40000L, active3, 0x400000004003f07eL, active4, 0x300062044L, active5, 0L);
      case 70:
      case 102:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 172, 81);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f00000000000000L, active1, 0L, active2, 0L, active3, 0x700000080000000L, active4, 0x100000L, active5, 0L);
      case 73:
      case 105:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 293, 81);
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0x4000380000000L, active2, 0x61000000L, active3, 0x880000f00040080L, active4, 0x400000000408L, active5, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000e00000000L, active1, 0x408002000000000L, active2, 0L, active3, 0L, active4, 0x800000010L, active5, 0L);
      case 77:
      case 109:
         if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 280, 81);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 281, 81);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0x80000L, active4, 0x800002L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0xc000000000L, active2, 0x400000007ff0L, active3, 0x380000000000L, active4, 0x10a00L, active5, 0L);
      case 79:
      case 111:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc002000000000000L, active1, 0x1070000c000007ffL, active2, 0x100008186020001L, active3, 0x9000000000100300L, active4, 0x29450000001a1L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1800000000000L, active3, 0xc00000200000L, active4, 0x30000000L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3c00000L, active4, 0x30000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x6080001000001800L, active2, 0xfe04000000000000L, active3, 0x200007e000000000L, active4, 0xe000200000600000L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L, active1, 0x10000000000L, active2, 0x10000L, active3, 0x7000000000000L, active4, 0x4000000000000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x30000000000000L, active5, 0L);
      case 85:
      case 117:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x10000000007e000L, active2, 0x18070000000000L, active3, 0xc000001L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xfe0000000000L, active2, 0L, active3, 0L, active4, 0x400000000L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 81);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L, active4, 0x40000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(2, 276);
         else if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(2, 279);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4f00000000000000L, active1, 0x2000000080200000L, active2, 0x200000L, active3, 0x400101e000280006L, active4, 0x30000000000002L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x24000001L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 81);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 284, 81);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 285, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x70000c00000L, active2, 0x2000000L, active3, 0x3000L, active4, 0x600040L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 81);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 81);
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 182, 81);
         else if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0x4000080000010L, active3, 0x400000000000L, active4, 0x800000800000c000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x180000000800L, active2, 0xe20800000000002L, active3, 0x782000080000000L, active4, 0L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7000000L, active2, 0x400000L, active3, 0x8L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 81);
         else if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0x40200050004L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0x400L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0x7000000000020020L, active3, 0x20041a0000000000L, active4, 0x4000100000800L, active5, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0x200000000000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000400000000L, active1, 0x101000008000003L, active2, 0x430000000000L, active3, 0x18000003804110L, active4, 0x430L, active5, 0L);
      case 77:
      case 109:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 219, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000004L, active2, 0x40200000004L, active3, 0xf40100000L, active4, 0L, active5, 0x1L);
      case 78:
      case 110:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 302, 81);
         else if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 304, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1f8L, active2, 0x140080040L, active3, 0x8000000000000000L, active4, 0x80000002180L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x4488001000001000L, active2, 0x8000000000010000L, active3, 0L, active4, 0x6008000800000000L, active5, 0L);
      case 80:
      case 112:
         if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 256, 81);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 290, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0x800000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 286, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2400000007e200L, active2, 0x80000000000000L, active3, 0x1060000000000800L, active4, 0x10000000008L, active5, 0L);
      case 83:
      case 115:
         if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 303, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0x78020040000000L, active1, 0x2370000000L, active2, 0x100000000101300L, active3, 0x10018020L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 121, 81);
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 167, 81);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 209, 81);
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 305, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0x83480880000000L, active1, 0x1002c00000080000L, active2, 0x19080c08006800L, active3, 0x800000000000000L, active4, 0x200L, active5, 0x30000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000800000400L, active2, 0x1L, active3, 0x40000000000L, active4, 0x320000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x800000L, active3, 0x40L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0x200L, active4, 0x4000000000L, active5, 0L);
      case 88:
      case 120:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 156, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 81);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 81);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 146, 81);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L, active5, 0L);
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x8010401000800L, active2, 0x1002000000L, active3, 0x400000000010L, active4, 0x20000000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000800000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x30000L);
      case 67:
      case 99:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1018000000000000L, active1, 0x2100160000000L, active2, 0x8200000008000000L, active3, 0x20000000a00000L, active4, 0x8L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 193, 81);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 299, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 81);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 81);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 81);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 81);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 210, 81);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 212, 81);
         else if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 234, 81);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 255, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0x20800000000L, active1, 0x2046000e000000L, active2, 0xc0c0204802b44L, active3, 0x800e01004408L, active4, 0x8000004000000200L, active5, 0x1L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L, active2, 0x80000L, active3, 0x1000000000000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 81);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 251, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200080000000L, active1, 0x8000000000400000L, active2, 0x101000400000010L, active3, 0x2000000000L, active4, 0x800000c014L, active5, 0L);
      case 75:
      case 107:
         if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 252, 81);
         break;
      case 76:
      case 108:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 81);
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 194, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000000L, active1, 0xa00001L, active2, 0x20000010000L, active3, 0x20080101L, active4, 0x100010400L, active5, 0L);
      case 77:
      case 109:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 81);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 233, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L, active2, 0x1000000000000000L, active3, 0L, active4, 0x200000L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 81);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 175, 81);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 223, 81);
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 306, 81);
         else if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2040000000000418L, active2, 0x2L, active3, 0x20421c000000000L, active4, 0x20300000000000L, active5, 0L);
      case 79:
      case 111:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 81);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 142, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0x440000000L, active1, 0L, active2, 0x2000000000000000L, active3, 0x80000001840L, active4, 0x800000000L, active5, 0L);
      case 80:
      case 112:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x410000000000000L, active3, 0x40000000L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 81);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 241, 81);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 254, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0xe00000000000000L, active1, 0x80000003e200L, active2, 0x20000000000000L, active3, 0x400000000000000L, active4, 0x200000000L, active5, 0L);
      case 83:
      case 115:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 201, 81);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 307, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x5200000041060L, active2, 0x800000000000000L, active3, 0x6018000L, active4, 0x2000000000400000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 81);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 81);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 150, 81);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 165, 81);
         else if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 267, 81);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 296, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000080L, active2, 0x80000100001020L, active3, 0x2000000010002020L, active4, 0x2042L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000002L, active2, 0x8c0000080L, active3, 0x18000000000000L, active4, 0x4000000000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0x4000000000000000L, active3, 0L, active4, 0x180L, active5, 0L);
      case 87:
      case 119:
         if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 247, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 174, 81);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L, active4, 0x20L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L, active5, 0x1L);
      case 48:
         if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 298, 34);
         break;
      case 50:
         if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 309, 34);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8a18000000000000L, active1, 0x400800000800001L, active2, 0x1400000000010000L, active3, 0L, active4, 0x8000000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L, active2, 0x10L, active3, 0x4000L, active4, 0x200000000002L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 81);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 300, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0x40000L, active5, 0x30000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 81);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 81);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 213, 81);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 221, 81);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 240, 81);
         else if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 250, 81);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 253, 81);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 272, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000400000000000L, active1, 0x800003e318L, active2, 0x8800000000001000L, active3, 0x210000010000000L, active4, 0x200402180L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 242, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0x20L, active5, 0L);
      case 72:
      case 104:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 81);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 155, 81);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 271, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000600000084L, active2, 0x4280020000200020L, active3, 0x4000000001a001L, active4, 0x100200000L, active5, 0L);
      case 75:
      case 107:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 81);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0x81000040000000L, active1, 0x800200000L, active2, 0x20000080000000L, active3, 0x2000080800L, active4, 0x8L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400002L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 81);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 235, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000080000000L, active2, 0x100L, active3, 0x1000L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80080000000L, active1, 0x100040000L, active2, 0x1000400000000L, active3, 0x200040800000L, active4, 0x44L, active5, 0L);
      case 80:
      case 112:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x70000000000L, active2, 0L, active3, 0L, active4, 0x4000000000000010L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 81);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 134, 81);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 154, 81);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 164, 81);
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 179, 81);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 189, 81);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 239, 81);
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 291, 81);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 294, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x400066000000L, active2, 0x40800002200L, active3, 0x1000028L, active4, 0x8000020000000200L, active5, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 161, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1c200000000L, active4, 0x2000000000000000L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 81);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 81);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 81);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 81);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 81);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 199, 81);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200008000860L, active2, 0x100080040000002L, active3, 0x400006000010L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100001000000L, active2, 0x10000000080000L, active3, 0x100000000000L, active4, 0x4000L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc00000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xe000000000000000L, active5, 0x30000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 202, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x400000L, active2, 0xa0000800080030L, active3, 0x20004002000100L, active4, 0x200000000000L, active5, 0L);
      case 67:
      case 99:
         if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 192, 81);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 278, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000000000000L, active1, 0x800000000018L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 204, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000000000L, active1, 0L, active2, 0x8000000000000000L, active3, 0x800000L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 81);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 81);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 81);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 81);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 158, 81);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 159, 81);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 198, 81);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 236, 81);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 238, 81);
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 259, 81);
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 297, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0x1400000000000L, active1, 0L, active2, 0x800L, active3, 0x8L, active4, 0x200040000L, active5, 0L);
      case 70:
      case 102:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 169, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L, active5, 0L);
      case 71:
      case 103:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 257, 81);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x60000000L, active2, 0x100040000000006L, active3, 0x2000080030L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 81);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 203, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x1000000L, active2, 0x4000000000000000L, active3, 0x18000000000L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 81);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 81);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 81);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 176, 81);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 258, 81);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 277, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40030003e080L, active2, 0x400200000L, active3, 0x40000000000000L, active4, 0x8100000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x80200000L, active2, 0L, active3, 0xc0001a000L, active4, 0x20L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 81);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 262, 81);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 269, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x6800160L, active2, 0x1c00000000001000L, active3, 0x45000000L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 81);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 244, 81);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 270, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x200L, active2, 0x200000000000100L, active3, 0L, active4, 0x210L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 81);
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 81);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 180, 81);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 206, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000020000000000L, active1, 0x140000000001L, active2, 0x10000L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0x200000000000000L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0x100L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400002000060L, active2, 0x400002004L, active3, 0x18240000000L, active4, 0x400L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0xc000000000000000L, active5, 0L);
      case 67:
      case 99:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 170, 81);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x200200000L, active2, 0L, active3, 0x4000000120L, active4, 0L, active5, 0x30000L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 81);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 81);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 108, 81);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 186, 81);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 215, 81);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 260, 81);
         return jjMoveStringLiteralDfa7_0(active0, 0x410000000000000L, active1, 0x8004000000L, active2, 0x4000000000000000L, active3, 0x200000000000000L, active4, 0x200L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 81);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 149, 81);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 246, 81);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 288, 81);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L, active4, 0x40000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000000000L, active1, 0x40000000001L, active2, 0x200000000010100L, active3, 0x4000000L, active4, 0L, active5, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L);
      case 76:
      case 108:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 81);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 163, 81);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 183, 81);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000020L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 81);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 81);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 205, 81);
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 237, 81);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 261, 81);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0x100000000L, active2, 0L, active3, 0x2c00090008L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0x1000000L, active4, 0L, active5, 0x1L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000200L, active2, 0x20000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 139, 81);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 245, 81);
         break;
      case 83:
      case 115:
         if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 289, 81);
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 295, 81);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L, active2, 0x1000L, active3, 0L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 81);
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 81);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 81);
         return jjMoveStringLiteralDfa7_0(active0, 0xa00000440000000L, active1, 0x3c010L, active2, 0x12L, active3, 0x2000000L, active4, 0x200000000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0x10L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 188, 81);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x3c000L, active2, 0L, active3, 0x10000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x30000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(7, 103);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L, active4, 0x600L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 81);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 81);
         break;
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 81);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 81);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 81);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 81);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 93, 81);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 147, 81);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 187, 81);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 196, 81);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 217, 81);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 301, 81);
         return jjMoveStringLiteralDfa8_0(active0, 0xa00000000000000L, active1, 0x100000000L, active2, 0x80000001000L, active3, 0xc00000000L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 229, 81);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x70L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 75:
      case 107:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 200, 81);
         break;
      case 76:
      case 108:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 81);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 141, 81);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 162, 81);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 184, 81);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0L, active5, 0x1L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0x40000000201L, active2, 0x200000000010010L, active3, 0L, active4, 0x2000000000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 216, 81);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 249, 81);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0x40000000L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 181, 81);
         break;
      case 84:
      case 116:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 81);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 197, 81);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 211, 81);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc0000000L, active2, 0x104L, active3, 0x1c000000000L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 81);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(7, 318);
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(7, 319);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc00000000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000L, active2, 0x1000L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 130, 81);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 191, 81);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 231, 81);
         else if ((active5 & 0x1L) != 0L)
            return jjStopAtPos(8, 320);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x8L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 218, 81);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000L, active2, 0x100L, active3, 0x14000000000L, active4, 0x2000000000000000L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(8, 274);
         break;
      case 78:
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 81);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 81);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 81);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 144, 81);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 185, 81);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x260L, active2, 0x80000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000010L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 225, 81);
         break;
      case 82:
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 132, 81);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L, active4, 0L, active5, 0x30000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L, active1, 0x218000L, active2, 0L, active3, 0L, active4, 0x600L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0x10000L, active4, 0x100L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 133, 81);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 222, 81);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 85, 81);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 89, 81);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L, active4, 0L, active5, 0x10000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 48, 34);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x18000L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 68, 81);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(9, 317);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x14000000000L, active4, 0x400L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 94, 81);
         break;
      case 83:
      case 115:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 190, 81);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 195, 81);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0x10000L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 96, 81);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 140, 81);
         return jjMoveStringLiteralDfa10_0(active0, 0x400080000000000L, active1, 0x40L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, active5);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(10, 136, 81);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0x10000L, active4, 0L, active5, 0x10000L);
      case 72:
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 58, 34);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0x200L, active2, 0L, active3, 0x800000000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active4 & 0x100L) != 0L)
            return jjStopAtPos(10, 264);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x18000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 230, 81);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 232, 81);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0x200L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 220, 34);
         else if ((active4 & 0x400L) != 0L)
            return jjStopAtPos(10, 266);
         break;
      case 83:
      case 115:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(10, 70, 81);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 95, 81);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L, active2, 0x80000000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, active5);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(11, 78, 34);
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0x10000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 171, 34);
         break;
      case 78:
      case 110:
         if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(11, 265, 81);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0x800000000L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L);
      case 82:
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 34);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 208, 34);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, 0L, active5);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x20000L);
      case 71:
      case 103:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(12, 73, 81);
         break;
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 43, 81);
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L, active1, 0L, active3, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x10000L);
      case 82:
      case 114:
         if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(12, 226, 34);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000L, active3, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x800000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L, active3, 0L, active5);
      return 13;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x20000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000000L, active1, 0L, active3, 0L, active5, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x10000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10000L, active3, 0x800000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, active3, 0L, active5);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10000L, active3, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(14, 227, 34);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x20000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0L, active3, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L, 0L, 0L, active5);
      return 15;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active5, 0x20000L);
      case 72:
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 59, 34);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x10000L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L, 0L, 0L, active5);
      return 16;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active5, 0x20000L);
      case 80:
      case 112:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(16, 80, 34);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old5, long active5)
{
   if (((active1 &= old1) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, 0L, active5);
      return 17;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active5, 0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa18_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, 0L, active5);
      return 18;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa19_0(active5, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa19_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
      return 19;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active5 & 0x10000L) != 0L)
            return jjStopAtPos(19, 336);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active5, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa20_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
      return 20;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active5, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa21_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active5, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa22_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
      return 22;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active5 & 0x20000L) != 0L)
            return jjStopAtPos(22, 337);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 75;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 80:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  else if (curChar == 34)
                  {
                     if (kind > 323)
                        kind = 323;
                  }
                  break;
               case 22:
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 82:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 39)
                  {
                     if (kind > 310)
                        kind = 310;
                  }
                  break;
               case 83:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 75:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 47)
                     jjCheckNAdd(5);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 10)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 329)
                        kind = 329;
                     jjCheckNAddTwoStates(69, 70);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 329)
                        kind = 329;
                     jjCheckNAdd(71);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(65, 66);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     jjCheckNAdd(62);
                  }
                  break;
               case 30:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 81:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 23:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 26:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 19:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 78:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 47)
                     jjCheckNAdd(5);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 329)
                        kind = 329;
                     jjCheckNAdd(74);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 66);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 48:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 24:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 47:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 27:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     jjCheckNAddStates(7, 12);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(73, 74);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(5, 51);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(36, 37);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 20:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 76:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(52, 53);
                  else if (curChar == 47)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddStates(13, 18);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 1:
                  if (curChar == 10)
                     jjCheckNAddStates(0, 3);
                  break;
               case 2:
                  if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar != 45)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(13, 18);
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar != 47)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(13, 18);
                  break;
               case 6:
                  if (curChar == 47)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(13, 18);
                  break;
               case 8:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 3);
                  break;
               case 9:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(1, 10);
                  break;
               case 10:
                  if (curChar != 10)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 3);
                  break;
               case 12:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 39 && kind > 310)
                     kind = 310;
                  break;
               case 14:
                  if (curChar == 62 && kind > 314)
                     kind = 314;
                  break;
               case 15:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 61 && kind > 314)
                     kind = 314;
                  break;
               case 17:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 35:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 34 && kind > 323)
                     kind = 323;
                  break;
               case 50:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(5, 51);
                  break;
               case 51:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 52:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar == 42)
                     jjCheckNAddStates(19, 21);
                  break;
               case 54:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 53);
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 53);
                  break;
               case 56:
                  if (curChar != 47)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(22, 24);
                  break;
               case 57:
                  if (curChar == 47)
                     jjCheckNAdd(51);
                  break;
               case 58:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(57);
                  break;
               case 59:
                  if (curChar != 10)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(57);
                  break;
               case 60:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  jjCheckNAddStates(7, 12);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  jjCheckNAdd(62);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 64:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 328)
                     kind = 328;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 329)
                     kind = 329;
                  jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar != 46)
                     break;
                  if (kind > 329)
                     kind = 329;
                  jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 329)
                     kind = 329;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 66);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 329)
                     kind = 329;
                  jjCheckNAdd(74);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 80:
               case 36:
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 82:
               case 12:
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                  }
                  break;
               case 77:
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                  }
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 268)
                        kind = 268;
                  }
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(27, 28);
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 7:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(13, 18);
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L && kind > 321)
                     kind = 321;
                  break;
               case 21:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 25:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 32:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(34);
                  break;
               case 38:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 39:
                  if ((0x200000002000L & l) != 0L && kind > 268)
                     kind = 268;
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 49:
                  if ((0x8000000080000L & l) != 0L && kind > 268)
                     kind = 268;
                  break;
               case 52:
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
               case 55:
                  jjCheckNAddTwoStates(55, 53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 80:
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 82:
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(13, 18);
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 75 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   0, 2, 4, 6, 63, 64, 66, 62, 63, 64, 66, 69, 70, 0, 4, 6, 
   7, 8, 9, 53, 54, 56, 57, 58, 60, 67, 68, 48, 49, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\42\42", "\45", "\46", "\47", 
"\50", "\51", "\52", "\53", "\54", "\55", "\56", "\57", "\72", "\73", "\74", "\75", 
"\76", "\77", "\137", "\174", "\133", "\135", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\173", "\175", "\44", null, 
"\74\75", "\76\75", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0x383cfL, 
};
static final long[] jjtoSkip = {
   0xf2L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[75];
private final int[] jjstateSet = new int[150];
protected char curChar;
public AdqlStoXTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AdqlStoXTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 75; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 335)
   {
      jjmatchedKind = 335;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
