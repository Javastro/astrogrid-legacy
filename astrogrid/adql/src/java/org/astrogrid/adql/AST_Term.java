/* Generated By: AdqlStoX.jjt,v 1.33.2.4 2006-12-19 14&JJTree: Do not edit this line. AST_Term.java */

package org.astrogrid.adql;

import org.astrogrid.adql.v1_0.beans.BinaryExprType;
import org.astrogrid.adql.v1_0.beans.BinaryOperatorType;
import org.astrogrid.adql.v1_0.beans.ScalarExpressionType;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_Term extends SimpleNode {
    
    private static Log log = LogFactory.getLog( AST_Term.class ) ;
    
    Token binaryOpToken ; 

    public AST_Term(AdqlStoX p, int id) {
        super(p, id);
    }

    public void setBinaryOp( Token t ) {
        binaryOpToken = t ;
    }

    public void jjtClose() {
        int childCount = jjtGetNumChildren() ;
        if( log.isDebugEnabled() ) { 
            log.debug( "childCount: " + childCount ) ; 
        }
        if( childCount == 1 ) {
            setGeneratedObject( children[0].getGeneratedObject() ) ;
        }
        else {
            BinaryExprType beType = BinaryExprType.Factory.newInstance() ;
            beType.setOper( BinaryOperatorType.Enum.forString( binaryOpToken.image ) ) ;
            if( log.isDebugEnabled() ) { log.debug( "binaryOpToken: " + binaryOpToken.image ) ; }
            ScalarExpressionType[] args = new ScalarExpressionType[2] ;      
            for( int i=0; i<childCount; i++ ) {
                args[i] = (ScalarExpressionType)children[i].getGeneratedObject() ;
                if( log.isDebugEnabled() ) { 
                    log.debug( "arg " + i + ": " + args[i] ) ; 
                }
            }
            beType.setArgArray( args ) ;
            setGeneratedObject( beType ) ;
        }
    }

}
