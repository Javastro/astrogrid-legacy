<?xml version="1.0"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/Attic/build.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2003/11/16 18:24:34 $</cvs:date>
    | <cvs:version>$Revision: 1.47 $</cvs:version>
    | <cvs:log>
    |   $Log: build.xml,v $
    |   Revision 1.47  2003/11/16 18:24:34  dave
    |   Merged dev branch back into HEAD
    |
    |   Revision 1.46.2.12  2003/11/16 15:03:08  dave
    |   Fixed cvs snafu in build.xml
    |
    |   Revision 1.46.2.11  2003/11/16 14:08:54  dave
    |   Replaced tabs with spaces
    |
    |   Revision 1.46.2.10  2003/11/14 13:42:54  dave
    |   Fixed typo in build.xml
    |
    |   Revision 1.46.2.9  2003/11/14 13:16:20  dave
    |   Experimening with  Jelly code
    |
    |   Revision 1.46.2.8  2003/11/13 10:41:54  dave
    |   Version number or SNAPSHOT in release files
    |
    |   Revision 1.46.2.7  2003/11/11 15:47:30  dave
    |   Fixed jar cache delete
    |
    |   Revision 1.46.2.6  2003/11/11 15:11:50  dave
    |   Changed the remote repository to use machine at Cambridge
    |
    |   Revision 1.46.2.5  2003/11/11 14:44:03  dave
    |   Got the JUnit tests working
    |
    |   Revision 1.46.2.4  2003/11/10 05:14:08  dave
    |   Added JTA dependency for Castor tools.
    |
    |   Revision 1.46.2.3  2003/11/10 04:29:07  dave
    |   Fixed problems with jar versions
    |
    |   Revision 1.46.2.2  2003/11/09 21:12:52  dave
    |   Got the main build process to work
    |
    |   Revision 1.46.2.1  2003/11/07 23:20:53  dave
    |   Got the main libraries and classpaths done
    |
    |   Revision 1.46  2003/11/06 15:35:25  dave
    |   Replaced tabs with spaces
    |
    |   Revision 1.45  2003/10/09 03:40:45  dave
    |   Added loadConfig() to the policy delegates
    |
    |   Revision 1.44  2003/10/09 01:38:30  dave
    |   Added JUnite tests for policy delegates
    |
    |   Revision 1.43  2003/09/24 21:56:06  dave
    |   Added setPassword() to AccountManager
    |
    |   Revision 1.42  2003/09/24 15:47:37  dave
    |   Added policy database loader tools.
    |
    |   Revision 1.41  2003/09/22 13:48:04  dave
    |   Updates to the community/portal build
    |
    |   Revision 1.40  2003/09/19 21:49:56  pah
    |   server junit tests now running of in-memory database
    |
    |   Revision 1.39  2003/09/18 15:50:03  dave
    |   Fixing bugs in configuration
    |
    |   Revision 1.38  2003/09/17 19:47:21  dave
    |   1) Fixed classnotfound problems in the build.
    |   2) Added the JUnit task to add the initial accounts and groups.
    |   3) Got the build to work together with the portal.
    |   4) Fixed some bugs in the Account handling.
    |
    |   Revision 1.37  2003/09/17 15:15:11  pah
    |   got the server side authentication tests task to work
    |
    |   Revision 1.36  2003/09/17 14:07:08  pah
    |   updated where the jars are built to
    |
    |   Revision 1.35  2003/09/17 09:27:28  KevinBenson
    |   aded myspace delegate stuff
    |
    |   Revision 1.34  2003/09/16 22:23:24  pah
    |   authentication unit tests working under eclipse server and client
    |
    |   Revision 1.33  2003/09/16 11:42:46  pah
    |   authentication.BUILD working properly now
    |
    |   Revision 1.32  2003/09/16 11:07:51  pah
    |   authentication service build nearly working
    |
    |   Revision 1.31  2003/09/15 21:51:45  pah
    |   authentication database backend tested
    |
    |   Revision 1.30  2003/09/15 06:42:41  pah
    |   added in test config for authentication
    |
    |   Revision 1.29  2003/09/13 02:18:52  dave
    |   Extended the jConfig configuration code.
    |
    |   Revision 1.28  2003/09/12 11:16:09  KevinBenson
    |   added the jconfig into it.
    |
    |   Revision 1.27  2003/09/11 03:15:06  dave
    |   1) Implemented PolicyService internals - no tests yet.
    |   2) Added getLocalAccountGroups and getRemoteAccountGroups to PolicyManager.
    |   3) Added remote access to groups.
    |
    |   Revision 1.26  2003/09/10 20:49:57  pah
    |   Authentication Service without database backend
    |
    |   Revision 1.25  2003/09/10 06:50:22  dave
    |   Added remote test task
    |
    |   Revision 1.24  2003/09/10 06:03:27  dave
    |   Added remote capability to Accounts
    |
    |   Revision 1.23  2003/09/10 02:56:03  dave
    |   Added PermissionManager and tests
    |
    |   Revision 1.22  2003/09/10 00:08:45  dave
    |   Added getGroupMembers, ResourceIdent and JUnit tests for ResourceManager
    |
    |   Revision 1.21  2003/09/09 19:21:18  KevinBenson
    |   added ResourceManager include to the build.xml
    |
    |   Revision 1.20  2003/09/09 18:46:08  pah
    |   athorization build more in line with eclipse and other workgroup structures
    |
    |   Revision 1.19  2003/09/09 17:24:36  pah
    |   some more authorization tasks added - wip - committed to reduce conflicts
    |
    |   Revision 1.18  2003/09/09 14:51:47  dave
    |   Added delGroupMember - only local accounts and groups to start with.
    |
    |   Revision 1.17  2003/09/09 13:48:09  dave
    |   Added addGroupMember - only local accounts and groups to start with.
    |
    |   Revision 1.16  2003/09/09 10:02:17  dave
    |   Fixed problems introduced by conflicts.
    |
    |   Revision 1.15  2003/09/08 21:01:28  dave
    |   Added PATCH to build.xml to include classes in Castor mapping - still broke though
    |
    |   Revision 1.14  2003/09/08 20:28:50  dave
    |   Added CommunityIdent, with isLocal() and isValid()
    |
    |   Revision 1.13  2003/09/08 16:02:47  KevinBenson
    |   finally an authentication piece that is building.
    |
    |   Revision 1.12  2003/09/08 11:01:35  KevinBenson
    |   A check in of the Authentication authenticateToken roughdraft and some changes to the groudata and community data
    |   along with an AdministrationDelegate
    |
    |   Revision 1.11  2003/09/07 11:29:41  pah
    |   added some initial authentication targets
    |
    |   Revision 1.10  2003/09/06 20:10:06  dave
    |   Split PolicyManager into separate components.
    |
    |   Revision 1.9  2003/09/04 23:58:10  dave
    |   Experimenting with using our own DataObjects rather than the Axis generated ones ... seems to work so far
    |
    |   Revision 1.8  2003/09/04 23:33:05  dave
    |   Implemented the core account manager methods - needs data object to return results
    |
    |   Revision 1.7  2003/09/03 16:12:05  dave
    |   Fixed hard coded database address in build.xml
    |
    |   Revision 1.6  2003/09/03 16:06:01  dave
    |   Fixed axis wait in build.xml
    |
    |   Revision 1.5  2003/09/03 15:43:49  dave
    |   Added extra wait to Axis reload
    |
    |   Revision 1.4  2003/09/03 15:23:33  dave
    |   Split API into two services, PolicyService and PolicyManager
    |
    |   Revision 1.3  2003/09/03 10:42:19  dave
    |   Fixed missing task in build.xml
    |
    |   Revision 1.2  2003/09/03 06:39:13  dave
    |   Rationalised things into one set of SOAP stubs and one set of data objects for both client and server.
    |
    |   Revision 1.1  2003/08/28 17:33:56  dave
    |   Initial policy prototype
    |
    | </cvs:log>
    |
    +-->
<project default="init" basedir="." name="Community">
    <!--+
        | README
        | In the process of changing this over to using Maven to do the build.
        | To build the Community code, please use either project.RELEASE or project.SNAPSHOT tasks from Maven.
        +-->

    <!--+
        | The project build directory.
        +-->
    <property name="project.home"    value="${basedir}"/>

    <!--+
        | The project build version.
        | ${astrogrid.version}.${astrogrid.iteration}.${astrogrid.week}
        | Note :- This should be set from within Maven.
        +-->
    <property name="project.version" value="1.4.1"/>

    <!--+
        | User preferences.
        | This is where to put local properties eg.tomcat installation path.
        +-->
    <property file="${user.home}/ant.properties"/>

    <!--+
        | Prefix for system properties.
        +-->
    <property environment="env"/>

    <!-- ================ Project tasks ================ -->
    <!-- Initialise the build environment -->
    <target name="init">
        <echo message=""/>

        <!-- Build timestamp -->
        <tstamp>
            <format property="build.time" pattern="yyyy.MM.dd.HH.mm.ss"/>
            <format property="build.date" pattern="yyyy.MM.dd"/>
        </tstamp>

        <!-- Display the current settings -->
        <echo message="os.name      : ${os.name}"/>
        <echo message="os.arch      : ${os.arch}"/>
        <echo message="os.version   : ${os.version}"/>
        <echo message=""/>

        <echo message="user.home    : ${user.home}"/>
        <echo message=""/>

        <echo message="java.version : ${java.version}"/>
        <echo message="java.home    : ${java.home}"/>
        <echo message="JAVA.HOME    : ${env.JAVA_HOME}"/>
        <echo message=""/>

        <echo message="ant.version  : ${ant.version}"/>
        <echo message="ant.home     : ${ant.home}"/>
        <echo message=""/>

        <echo message="castor.version : ${castor.version}"/>
        <echo message=""/>

        <echo message="junit.version  : ${junit.version}"/>
        <echo message=""/>

        <echo message="hsqldb.version : ${hsqldb.version}"/>
        <echo message="hsqldb.home    : ${hsqldb.home}"/>
        <echo message=""/>

        <echo message="tomcat.version : ${tomcat.version}"/>
        <echo message="tomcat.home    : ${tomcat.home}"/>
        <echo message="tomcat.url     : ${tomcat.url}"/>
        <echo message=""/>

        <echo message="axis.version   : ${axis.version}"/>
        <echo message="axis.home      : ${axis.home}"/>
        <echo message="axis.url       : ${axis.url}"/>
        <echo message=""/>

        <echo message="maven.home    : ${maven.home.local}"/>
        <echo message="maven.repo    : ${maven.repo.local}"/>
        <echo message=""/>

        <echo message="build.home     : ${basedir}"/>
        <echo message="build.file     : ${ant.file}"/>
        <echo message="build.date     : ${build.date}"/>
        <echo message="build.time     : ${build.time}"/>

        <echo message=""/>
    </target>

    <!-- ================ Ant tasks ================ -->
    <!--+
        | Ant properties.
        | This is available anyway when running inside Ant.
        | When running inside Maven, we need to set it manually.
        +-->
    <property name="ant.version" value="1.5.4"/>

    <!--+
        | The Ant library classpath.
        +-->
    <path id="ant.classpath">
        <!--+
            | When running inside Ant, ${ant.home} points to the current Ant installation
            +-->
        <pathelement location="${ant.home}/lib/ant.jar"/>
        <pathelement location="${ant.home}/lib/optional.jar"/>
        <!--+
            | When running inside Maven, you can't get at the Ant libraries directly.
            | So we need to download another copy of the Ant jars into the Maven repository.
            | Result is that we might be building with one version of Ant, and Maven is using a different one to run the Ant tasks.
            +-->
        <pathelement location="${jar.cache.local}/ant/jars/ant-${ant.version}.jar"/>
        <pathelement location="${jar.cache.local}/ant/jars/ant-optional-${ant.version}.jar"/>
    </path>
    
    <!--+
        | Run an Ant task in a forked VM.
        | Requires two properties, the task in task.name and a path refenece in task.path.
        | This allows us more control over the classpath.
        +-->
    <target name="java.ant" depends="init">
        <java fork="true" classname="org.apache.tools.ant.Main">
            <classpath>
                <path refid="${task.classpath}"/>
            </classpath>
            <arg value="${task.name}"/>
        </java>
    </target>

    <!-- ================ Maven tasks ================ -->
    <!--+
        | These tasks provide the tools to populate a Maven style jar repository.
        | This means that you can run the tasks as standard Ant tasks, or as Maven tasks, and the classpaths should still woork.
        +-->

    <!--+
        | Read our Maven settings.
        +-->
    <property file="${project.home}/build.properties"/>
    <property file="${project.home}/project.properties"/>

    <!--+
        | Our local jar repository.
        | By default, this is set to the same location as the Maven repository.
        +-->
    <property name="jar.cache.local" value="${maven.repo.local}"/>

    <!--+
        | Our remote jar repository.
        | At the moment, this only supports one remote repository.
        | I hope to extende this to use the same list as maven.repo.remote.
    <property name="jar.cache.remote" value="http://codon.demon.co.uk/installs/java/maven"/>
        +-->
    <property name="jar.cache.remote" value="http://capc49.ast.cam.ac.uk/maven"/>

    <!--+
        | Download the a jar file.
        +-->
    <target name="jar.cache.fetch" depends="">
        <echo message=""/>
        <echo message="Downloading ${jar.name}"/>
        <echo message="  Remote : ${jar.cache.remote}"/>
        <echo message="  Local  : ${jar.cache.local}"/>
        <!-- Create the cache directory -->
        <mkdir dir="${jar.cache.local}/${jar.group}/jars"/>
        <!-- Download the jar file -->
        <get verbose="true" usetimestamp="true"
            src="${jar.cache.remote}/${jar.group}/jars/${jar.name}"
            dest="${jar.cache.local}/${jar.group}/jars/${jar.name}"
            />
    </target>

    <!--+
        | Clear out the Maven repository.
        +-->
    <target name="jar.cache.clear" depends="">
        <echo message=""/>
        <echo message="Clearing local repository"/>
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${jar.cache.local}" includes="*"/>
        </delete>
    </target>


    <!-- ================ Tomcat tasks ================ -->
    <!--+
        | Tomcat properties.
        +-->
    <property name="tomcat.home"    value="/usr/java/servers/tomcat/jakarta-tomcat-4.1.24-LE-jdk14"/>
    <property name="tomcat.host"    value="localhost"/>
    <property name="tomcat.port"    value="8080"/>
    <property name="tomcat.server"  value="${tomcat.host}:${tomcat.port}"/>
    <property name="tomcat.url"     value="http://${tomcat.server}"/>
    <property name="tomcat.timeout" value="60"/>

    <!--+
        | Tomcat manager properties.
        +-->
    <property name="tomcat.manager.url"      value="${tomcat.url}/manager"/>
    <property name="tomcat.manager.username" value="astrogrid"/>
    <property name="tomcat.manager.password" value="please"/>

    <!--+
        | Bootstrap classpath for Tomcat
        +-->
    <path id="tomcat.classpath.bootstrap">
        <pathelement location="${env.JAVA_HOME}/lib/tools.jar"/>
        <pathelement location="${tomcat.home}/bin/bootstrap.jar"/>
    </path>

    <!--+
        | Endorsed libraries for Tomcat.
        +-->
    <path id="tomcat.classpath.endorsed">
        <pathelement path="${tomcat.home}/bin"/>
        <pathelement path="${tomcat.home}/common/endorsed"/>
    </path>

    <!--+
        | Tomcat servlet libraries.
        +-->
    <path id="tomcat.classpath.servlet">
        <pathelement location="${tomcat.home}/common/lib/servlet.jar"/>
    </path>

    <!-- Define the Tomcat manager tasks -->
    <target name="tomcat.tasks" depends="">
        <taskdef name="tomcat.deploy"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.DeployTask"/>
        <taskdef name="tomcat.install"   classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.InstallTask"/>
        <taskdef name="tomcat.list"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ListTask"/>
        <taskdef name="tomcat.reload"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ReloadTask"/>
        <taskdef name="tomcat.remove"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RemoveTask"/>
        <taskdef name="tomcat.resources" classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ResourcesTask"/>
        <taskdef name="tomcat.roles"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RolesTask"/>
        <taskdef name="tomcat.start"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StartTask"/>
        <taskdef name="tomcat.stop"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StopTask"/>
        <taskdef name="tomcat.undeploy"  classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.UndeployTask"/>
    </target>

    <!--+
        | Start Tomcat in a separate VM.
        +-->
    <target name="tomcat.start" depends="">
        <!-- Start Tomcat in a separate VM -->
        <java taskname="tomcat" classname="org.apache.catalina.startup.Bootstrap" fork="true" dir="${tomcat.home}/bin">
            <!-- Use the bootstrap classpath -->
            <classpath refid="tomcat.classpath.bootstrap"/>
            <!-- These replace the -D command line arguments -->
            <sysproperty key="java.endorsed.dirs" path="${tomcat.classpath.endorsed}"/>
            <sysproperty key="catalina.base"      path="${tomcat.home}"/>
            <sysproperty key="catalina.home"      path="${tomcat.home}"/>
            <sysproperty key="java.io.tmpdir"     path="${tomcat.home}/temp"/>
            <!-- Select the server JVM (fails on Linux JDK 1.4.0) -->
            <!-- <jvmarg value="-server"/> -->
            <!-- Args for the Tomcat Bootstrap class -->
            <arg value="start"/>
        </java>
    </target>

    <!--+
        | Stop Tomcat.
        +-->
    <target name="tomcat.stop" depends="">
        <!-- Stop Tomcat -->
        <java taskname="tomcat" classname="org.apache.catalina.startup.Bootstrap" fork="true">
            <!-- Use the bootstrap classpath -->
            <classpath refid="tomcat.classpath.bootstrap"/>
            <!-- These replace the -D command line arguments -->
            <sysproperty key="java.endorsed.dirs" path="${tomcat.classpath.endorsed}"/>
            <sysproperty key="catalina.base"      path="${tomcat.home}"/>
            <sysproperty key="catalina.home"      path="${tomcat.home}"/>
            <sysproperty key="java.io.tmpdir"     path="${tomcat.home}/temp"/>
            <!-- Select the server JVM (fails on Linux JDK 1.4.0) -->
            <!-- <jvmarg value="-server"/> -->
            <!-- Args for the Tomcat Bootstrap class -->
            <arg value="stop"/>
        </java>
    </target>

    <!--+
        | Wait for Tomcat to respond.
        +-->
    <target name="tomcat.wait" depends="">
        <echo message=""/>
        <echo message="Waiting for Tomcat ...."/>
        <echo message="URL : ${tomcat.url}/"/>
        <waitfor maxwait="60" maxwaitunit="second" checkevery="500">
            <http url="${tomcat.url}/"/>
        </waitfor>
    </target>

    <!--+
        | Wait for Tomcat manager to respond.
        +-->
    <target name="tomcat.manager.wait" depends="">
        <echo message=""/>
        <echo message="Waiting for Tomcat manager ...."/>
        <echo message="URL : ${tomcat.manager.url}/"/>
        <waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
            <http url="${tomcat.manager.url}/"/>
        </waitfor>
    </target>

    <!--+
        | Delete the Tomcat working files.
        +-->
    <target name="tomcat.clean.work" depends="">
        <echo message=""/>
        <echo message="Cleaning Tomcat temp files ...."/>
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${tomcat.home}/work" includes="**"/>
        </delete>
        <echo message="Cleaning Tomcat log files ...."/>
        <delete failonerror="false">
            <fileset dir="${tomcat.home}/logs" includes="*"/>
        </delete>
    </target>

    <!--+
        | Delete the Tomcat endorsed libraries
        +-->
    <target name="tomcat.clean.endorsed">
        <echo message="Cleaning Tomcat endorsed libraries ...."/>
        <delete verbose="false" failonerror="false">
            <fileset dir="${tomcat.home}/common/endorsed">
                <include name="*.jar"/>
                <include name="**.jar"/>
            </fileset>
        </delete>
    </target>

    <!--+
        | Install Tomcat.
        +-->
    <target name="tomcat.SETUP" depends="">
        <!-- Project assumes Tomcat is installed -->
    </target>

    <!--+
        | Prepare Tomcat.
        +-->
    <target name="tomcat.PREPARE" depends="">
        <!--+
            | Patch the Tomcat endorsed classes to enable Axis 1.1 on JDK 1.4.1.
            | This needs to be done BEFORE Tomcat starts.
            +-->
        <copy verbose="true" toDir="${tomcat.home}/common/endorsed">
            <fileset dir="${jar.cache.local}/jaf/jars">
                <include name="jaf-${jaf.version}.jar"/>
            </fileset>
            <!--+
                | Required for Tomcat 27 (overrides the existing ones).
            <fileset dir="${jar.cache.local}/xerces/jars">
                <include name="xerces-${xerces.version}.jar"/>
            </fileset>
            <fileset dir="${jar.cache.local}/xml-apis/jars">
                <include name="xml-apis-${xml-apis.version}.jar"/>
            </fileset>
                +-->
        </copy>
    </target>

    <!--+
        | Reset Tomcat.
        +-->
    <target name="tomcat.RESET" depends="">
        <antcall target="tomcat.clean.work"/>
        <!--+
            | ZRQ Need to remove this for Tomcat 27
            +-->
        <antcall target="tomcat.clean.endorsed"/>
    </target>

    <!-- ================ JUnit tasks ================ -->
    <!--+
        | There is a classloader problem with calling JUnit tasks from within Ant.
        | To run a junit task, the JUnit binary needs to be in the main Ant classpath.
        | This means that we need to have the JUnit library in our classpath *before* we launch Ant.
        | I havn't found a nice fix for this yet, so you need to put the Junit library in your classpath.
        +-->

    <!--+
        | JUnit properties.
        +-->
    <property name="junit.version" value="3.8.1"/>

    <!--+
        | The JUnit library classpath.
        +-->
    <path id="junit.classpath">
        <pathelement location="${jar.cache.local}/junit/jars/junit-${junit.version}.jar"/>
    </path>

    <!--+
        | Install JUnit.
        +-->
    <target name="junit.SETUP" depends="">
        <antcall target="jar.cache.fetch">
            <param name="jar.group"   value="junit"/>
            <param name="jar.name"    value="junit-${junit.version}.jar"/>
        </antcall>
    </target>

    <!--+
        | Prepare JUnit.
        +-->
    <target name="junit.PREPARE" depends="">
    </target>

    <!--+
        | Run a set of JUnit tests in the current VM.
        | This task is designed to be called from a forked VM to give us more control over the classpath.
        +-->
    <target name="junit.task" depends="">
        <!-- Create our reports directory -->
        <mkdir dir="${junit.target}/junit"/>
        <!-- Run our JUnitTestCase tests -->
        <junit printsummary="yes" haltonfailure="yes" haltonerror="yes" showoutput="yes" fork="false">
            <!-- Generate an XML log file -->
            <formatter type="xml"/>
            <!-- Run all the target JUnitTestCase tests -->
            <batchtest todir="${junit.target}/junit">
                <fileset dir="${junit.target}/classes">
                    <include name="**/junit/**/JUnitTestCase.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

<!--+
    | Useful JUnit tools ....
    | http://jtestcase.sourceforge.net/
    | http://xmlunit.sourceforge.net/
    +-->

    <!-- ================ Castor tasks ================ -->
    <!--+
        | Castor properties.
        +-->
    <property name="castor.version" value="0.9.5"/>
    <property name="jta.version" value="1.0.1"/>

    <!--+
        | The Castor library classpath.
        +-->
    <path id="castor.classpath">
        <pathelement location="${jar.cache.local}/castor/jars/castor-${castor.version}.jar"/>
        <pathelement location="${jar.cache.local}/castor/jars/castor-${castor.version}-xml.jar"/>
        <pathelement location="${jar.cache.local}/jta/jars/jta-${jta.version}.jar"/>
    </path>

    <!--+
        | Install Castor.
        +-->
    <target name="castor.SETUP" depends="">
        <antcall target="jar.cache.fetch">
            <param name="jar.group"   value="castor"/>
            <param name="jar.name"    value="castor-${castor.version}.jar"/>
        </antcall>
        <antcall target="jar.cache.fetch">
            <param name="jar.group"   value="castor"/>
            <param name="jar.name"    value="castor-${castor.version}-xml.jar"/>
        </antcall>
        <antcall target="jar.cache.fetch">
            <param name="jar.group"   value="jta"/>
            <param name="jar.name"    value="jta-${jta.version}.jar"/>
        </antcall>
    </target>

    <!--+
        | Prepare Castor.
        +-->
    <target name="castor.PREPARE" depends="">
    </target>

    <!-- ================ Xerces tasks ================ -->
    <!--+
        | Xerces properties.
        +-->
    <property name="xerces.version"   value="2.4.0"/>
    <property name="xml-apis.version" value="1.0.b2"/>

    <!--+
        | The Xerces library classpath.
        +-->
    <path id="xerces.classpath">
        <pathelement location="${jar.cache.local}/xerces/jars/xerces-${xerces.version}.jar"/>
        <pathelement location="${jar.cache.local}/xml-apis/jars/xml-apis-${xml-apis.version}.jar"/>
    </path>

    <!--+
        | Install Xerces.
        +-->
    <target name="xerces.SETUP" depends="">
        <antcall target="jar.cache.fetch">
            <param name="jar.group" value="xerces"/>
            <param name="jar.name"  value="xerces-${xerces.version}.jar"/>
        </antcall>
        <antcall target="jar.cache.fetch">
            <param name="jar.group" value="xml-apis"/>
            <param name="jar.name"  value="xml-apis-${xml-apis.version}.jar"/>
        </antcall>
    </target>

    <!--+
        | Prepare Xerces.
        +-->
    <target name="xerces.PREPARE" depends="">
    </target>


    <!-- ================ JConfig tasks ================ -->
    <!--+
        | JConfig properties.
        +-->
    <property name="jconfig.version" value="2.2"/>

    <!--+
        | Set the JConfig library classpath.
        +-->
    <path id="jconfig.classpath">
        <pathelement location="${jar.cache.local}/jconfig/jars/jconfig-${jconfig.version}.jar"/>
    </path>

    <!--+
        | Install JConfig.
        +-->
    <target name="jconfig.SETUP" depends="">
        <antcall target="jar.cache.fetch">
            <param name="jar.group" value="jconfig"/>
            <param name="jar.name"  value="jconfig-${jconfig.version}.jar"/>
        </antcall>
    </target>

    <!--+
        | Prepare JConfig.
        +-->
    <target name="jconfig.PREPARE" depends="">
    </target>

    <!-- ================ Hsqldb tasks ================ -->
    <!--+
        | Hsqldb properties.
        +-->
    <property name="hsqldb.version"  value="1.7.1"/>
    <property name="hsqldb.home"     value="${basedir}/build/hsqldb"/>
    <property name="hsqldb.host"     value="localhost"/>
    <property name="hsqldb.port"     value="9001"/>
    <property name="hsqldb.name"     value="policy"/>
    <property name="hsqldb.user"     value="sa"/>
    <property name="hsqldb.pass"     value="veritas"/>
    <property name="hsqldb.timeout"  value="60"/>

    <property name="hsqldb.url"      value="jdbc:hsqldb:hsql://${hsqldb.host}:${hsqldb.port}"/>

    <!--+
        | The Hsqldb library classpath.
        +-->
    <path id="hsqldb.classpath">
        <pathelement location="${jar.cache.local}/hsqldb/jars/hsqldb-${hsqldb.version}.jar"/>
    </path>

    <!--+
        | Install Hsqldb.
        +-->
    <target name="hsqldb.SETUP" depends="">
        <antcall target="jar.cache.fetch">
            <param name="jar.group" value="hsqldb"/>
            <param name="jar.name"  value="hsqldb-${hsqldb.version}.jar"/>
        </antcall>
    </target>

    <!--+
        | Prepare Hsqldb.
        +-->
    <target name="hsqldb.PREPARE" depends="">
    </target>

    <!--+
        | Create the Hsqldb server properties.
        | Can be overriden by command line args in hsqldb.start.
        +-->
    <target name="hsqldb.properties" depends="">
        <echo message=""/>
        <echo message="Creating Hsqldb properties ...."/>
        <mkdir dir="${hsqldb.home}"/>
        <!-- Create the properties file -->
        <propertyfile file="${hsqldb.home}/server.properties" comment="Hqsldb server config">
            <entry key="server.port"           value="${hsqldb.port}"/>
            <entry key="server.database"       value="${hsqldb.name}"/>
            <entry key="server.no_system_exit" value="true"/>
        </propertyfile>
    </target>

    <!--+
        | Start the Hsqldb database server.
        +-->
    <target name="hsqldb.start" depends="">
        <echo message=""/>
        <echo message="Starting Hqsldb ...."/>
        <mkdir dir="${hsqldb.home}"/>
        <java taskname="hsqldb" classname="org.hsqldb.Server" fork="true" dir="${hsqldb.home}">
            <!-- Use the Hsqldb classpath -->
            <classpath refid="hsqldb.classpath"/>
            <!-- Args for the Hsqldb server -->
            <arg value="-database"/>
            <arg value="${hsqldb.name}"/>
            <arg value="-port"/>
            <arg value="${hsqldb.port}"/>
        </java>
    </target>

    <!--+
        | Stop the Hsqldb database server.
        +-->
    <target name="hsqldb.stop" depends="">
        <echo message=""/>
        <echo message="Stopping Hqsldb ...."/>
        <java taskname="hsqldb" classname="org.hsqldb.util.ShutdownServer" fork="true" dir="${hsqldb.home}">
            <!-- Use the Hsqldb classpath -->
            <classpath refid="hsqldb.classpath"/>
            <!-- Args for the Hsqldb server -->
            <arg value="-url"/>
            <arg value="${hsqldb.url}"/>
            <arg value="-user"/>
            <arg value="${hsqldb.user}"/>
            <arg value="-password"/>
            <arg value="${hsqldb.pass}"/>
            <arg value="-shutdownarg"/>
            <arg value=""/>
        </java>
    </target>

    <!--+
        | Wait for the Hsqldb database to start.
        +-->
    <target name="hsqldb.wait" depends="">
        <echo message=""/>
        <echo message="Waiting for Hqsldb ...."/>
        <waitfor maxwait="${hsqldb.timeout}" maxwaitunit="second" checkevery="500">
            <socket server="${hsqldb.host}" port="${hsqldb.port}"/>
        </waitfor>
    </target>

    <!--+
        | Initialise the Hsqldb database.
        | This only needs to run once, when a new database is created.
        +-->
    <target name="hsqldb.init" depends="">
        <echo message=""/>
        <echo message="Initialising Hqsldb ...."/>
        <sql driver="org.hsqldb.jdbcDriver"
             url="${hsqldb.url}"
             classpathref="hsqldb.classpath"
             userid="sa"
             password=""
             print="true"
            >
            <![CDATA[
                set password "${hsqldb.pass}" ;
            ]]>
        </sql>
    </target>

    <!--+
        | Delete our Hsqldb data.
        +-->
    <target name="hsqldb.delete" depends="">
        <delete dir="${hsqldb.home}" failonerror="false"/>
    </target>

    <!--+
        | Build our Hsqldb database.
        +-->
    <target name="hsqldb.BUILD" depends="">
        <antcall target="hsqldb.wait"/>
        <antcall target="hsqldb.init"/>
        <antcall target="hsqldb.database.create"/>
    </target>

    <!--+
        | Reset our Hsqldb database.
        +-->
    <target name="hsqldb.RESET" depends="">
        <antcall target="hsqldb.delete"/>
    </target>

    <!-- ================ Database tasks ================ -->

    <!--+
        | Create our database tables.
        +-->
    <target name="hsqldb.database.create" depends="">
        <echo message=""/>
        <echo message="Creating Hqsldb tables ...."/>
        <sql driver="org.hsqldb.jdbcDriver"
             url="${hsqldb.url}"
             classpathref="hsqldb.classpath"
             userid="${hsqldb.user}"
             password="${hsqldb.pass}"
             print="true"
            >
            <transaction src="src/sql/hsqldb/create.sql"/>
        </sql>
    </target>

    <!--+
        | Select all rows from our database tables.
        +-->
    <target name="hsqldb.database.select" depends="">
        <sql driver="org.hsqldb.jdbcDriver"
             url="${hsqldb.url}"
             classpathref="hsqldb.classpath"
             userid="${hsqldb.user}"
             password="${hsqldb.pass}"
             print="true"
            >
            <![CDATA[
                SELECT * FROM communities ;
                SELECT * FROM accounts    ;
                SELECT * FROM groups      ;
                SELECT * FROM resources   ;
                SELECT * FROM members     ;
                SELECT * FROM permissions ;
            ]]>
        </sql>
    </target>

    <!--+
        | Delete all rows from our database tables.
        +-->
    <target name="hsqldb.database.delete" depends="">
        <sql driver="org.hsqldb.jdbcDriver"
             url="${hsqldb.url}"
             classpathref="hsqldb.classpath"
             userid="${hsqldb.user}"
             password="${hsqldb.pass}"
             print="true"
            >
            <![CDATA[
                DELETE FROM groups      ;
                DELETE FROM members     ;
                DELETE FROM accounts    ;
                DELETE FROM resources   ;
                DELETE FROM communities ;
                DELETE FROM permissions ;
            ]]>
        </sql>
    </target>

    <!-- ================ JAF tasks ================ -->
    <!--+
        | We need this to install activation.jar into the endorsed directory for Axis-1.1 with JDK-1.4.2.
        | There is a problem with downloading the JAF files, Sun require you to say 'yes' to the licence agreement.
        | We need to add jaf to the maven repository (but there may be licence issues with making it public).
        +-->

    <!--+
        | JAF properties.
        +-->
    <property name="jaf.version" value="1.0.2"/>

    <!--+
        | The JAF library classpath.
        +-->
    <path id="jaf.classpath">
        <pathelement location="${jar.cache.local}/jaf/jars/jaf-${jaf.version}.jar"/>
    </path>

    <!--+
        | Install JAF.
        +-->
    <target name="jaf.SETUP" depends="">
        <antcall target="jar.cache.fetch">
            <param name="jar.group" value="jaf"/>
            <param name="jar.name"  value="jaf-${jaf.version}.jar"/>
        </antcall>
    </target>

    <!--+
        | Prepare JAF.
        +-->
    <target name="jaf.PREPARE" depends="">
    </target>

    <!-- ================ Axis tasks ================ -->
    <!--+
        | Axis properties.
        +-->
    <property name="axis.version" value="1.1"/>
    <property name="axis.home"    value="${basedir}/build/axis"/>
    <property name="axis.webapp"  value="${axis.home}/webapp"/>
    <property name="axis.host"    value="localhost"/>
    <property name="axis.port"    value="8080"/>
    <property name="axis.server"  value="${axis.host}:${axis.port}"/>
    <property name="axis.servlet" value="axis"/>
    <property name="axis.url"     value="http://${axis.server}/${axis.servlet}"/>
    <property name="axis.timeout" value="60"/>

    <!--+
        | The Axis library classpath.
        +-->
    <path id="axis.classpath">
        <!--+
            | Use tha jar files in the Maven repository.
        <pathelement location="${jar.cache.local}/axis/jars/axis-${axis.version}.jar"/>
        <pathelement location="${jar.cache.local}/axis/jars/axis-ant-${axis.version}.jar"/>
            +-->
        <!--+
            | Or, just use the jar files in the Axis webapp.
            +-->
        <pathelement location="${axis.webapp}/WEB-INF/lib/axis.jar"/>
        <pathelement location="${axis.webapp}/WEB-INF/lib/axis-ant.jar"/>
        <!--+
            | These jars are required by the Java2Wsdl task
            +-->
        <pathelement location="${axis.webapp}/WEB-INF/lib/saaj.jar"/>
        <pathelement location="${axis.webapp}/WEB-INF/lib/wsdl4j.jar"/>
        <pathelement location="${axis.webapp}/WEB-INF/lib/jaxrpc.jar"/>
        <pathelement location="${axis.webapp}/WEB-INF/lib/commons-logging.jar"/>
        <pathelement location="${axis.webapp}/WEB-INF/lib/commons-discovery.jar"/>

    </path>

    <!--+
        | Delete the Axis directory.
        +-->
    <target name="axis.delete" depends="">
        <delete dir="${axis.home}"/>
    </target>

    <!--+
        | Install the Axis libraries.
        +-->
    <target name="axis.webapp.fetch" depends="">
        <!--+
            | Get the Axis jars files.
            | Deprecated, just get the Axis war file.
        <antcall target="jar.cache.fetch">
            <param name="jar.group" value="axis"/>
            <param name="jar.name"  value="axis-${axis.version}.jar"/>
        </antcall>
        <antcall target="jar.cache.fetch">
            <param name="jar.group" value="axis"/>
            <param name="jar.name"  value="axis-ant-${axis.version}.jar"/>
        </antcall>
            +-->
        <!--+
            | Get the Axis webapp war file.
            +-->
        <antcall target="jar.cache.fetch">
            <param name="jar.group" value="axis"/>
            <param name="jar.name"  value="axis-${axis.version}.war"/>
        </antcall>
    </target>

    <!--+
        | Unpack our Axis webapp war file.
        +-->
    <target name="axis.webapp.unwar" depends="">
        <unwar src="${jar.cache.local}/axis/wars/axis-${axis.version}.war" dest="${axis.home}/webapp"/>
    </target>

    <!--+
        | Wrap up our Axis webapp into a war file.
        | TODO Make the war file name configurable.
        +-->
    <target name="axis.webapp.war" depends="">
        <war destfile="${axis.home}/axis.war" webxml="${axis.home}/webapp/WEB-INF/web.xml">
            <!-- Add the Axis libraries -->
            <lib dir="${axis.home}/webapp/WEB-INF/lib"/>
            <!-- Add our class files -->
            <classes dir="${axis.home}/webapp/WEB-INF/classes"/>
            <!-- Add the basic jsp page -->
            <fileset dir="${axis.home}/webapp">
                <include name="index.html"/>
                <include name="happyaxis.jsp"/>
            </fileset>
            <!--+
                | Add our own jar files
            <lib dir="${axis.home}/webapp/lib"/>
                +-->
        </war>
    </target>

    <!--+
        | Install the 3rd party jars our service(s) depend on.
        +-->
    <target name="axis.external.install" depends="">
        <!-- Copy the 3rd party libraries into our Axis WEB-INF/lib directory -->
        <copy verbose="true" todir="${axis.webapp}/WEB-INF/lib">
            <fileset dir="${jar.cache.local}/castor/jars">
                <include name="castor-${castor.version}.jar"/>
                <include name="castor-${castor.version}-xml.jar"/>
            </fileset>
            <fileset dir="${jar.cache.local}/jta/jars">
                <include name="jta-${jta.version}.jar"/>
            </fileset>
            <fileset dir="${jar.cache.local}/xerces/jars">
                <include name="xerces-${xerces.version}.jar"/>
            </fileset>
            <fileset dir="${jar.cache.local}/xml-apis/jars">
                <include name="xml-apis-${xml-apis.version}.jar"/>
            </fileset>
            <fileset dir="${jar.cache.local}/hsqldb/jars">
                <include name="hsqldb-${hsqldb.version}.jar"/>
            </fileset>
            <fileset dir="${jar.cache.local}/jconfig/jars">
                <include name="jconfig-${jconfig.version}.jar"/>
            </fileset>
            <!--+
                | TODO - Use our own Maven repository for this ?
                +-->
            <fileset dir="${basedir}/depends/myspace">
                <include name="myspace-client.jar"/>
            </fileset>
        </copy>
    </target>

    <!--+
        | Install our Axis webapp.
        +-->
    <target name="axis.SETUP" depends="">
        <antcall target="axis.webapp.fetch"/>
        <antcall target="axis.webapp.unwar"/>
    </target>

    <!--+
        | Prepare Axis.
        +-->
    <target name="axis.PREPARE" depends="">
    </target>

    <!--+
        | Install our Axis webapp.
        +-->
    <target name="axis.webapp.install" depends="tomcat.tasks">
        <!-- Wait for the Tomcat manager -->
        <antcall target="tomcat.manager.wait"/>
        <!-- Install our webapp -->
        <echo message=""/>
        <echo message="Installing Axis webapp ...."/>
        <tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}" war="file://${axis.webapp}"/>
    </target>

    <!--+
        | Start our Axis webapp.
        +-->
    <target name="axis.webapp.start" depends="tomcat.tasks">
        <!-- Wait for the Tomcat manager -->
        <antcall target="tomcat.manager.wait"/>
        <!-- Start our webapp -->
        <tomcat.start username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
    </target>

    <!--+
        | Stop our Axis webapp.
        +-->
    <target name="axis.webapp.stop" depends="tomcat.tasks">
        <!-- Wait for the Tomcat manager -->
        <antcall target="tomcat.manager.wait"/>
        <!-- Stop our webapp -->
        <tomcat.stop username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
    </target>

    <!--+
        | Reload our Axis webapp.
        +-->
    <target name="axis.webapp.reload" depends="tomcat.tasks">
        <!-- Wait for the Axis service -->
        <antcall target="axis.wait"/>
        <!-- Wait for the Tomcat manager -->
        <antcall target="tomcat.manager.wait"/>
        <!-- Reload our webapp -->
        <tomcat.reload username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
    </target>

    <!--+
        | Remove our Axis webapp.
        +-->
    <target name="axis.webapp.remove" depends="tomcat.tasks">
        <!-- Wait for the Tomcat manager -->
        <antcall target="tomcat.manager.wait"/>
        <!-- Remove our webapp -->
        <tomcat.remove username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
    </target>

    <!--+
        | Wait for Axis to respond.
        | This just check that calling happyaxis.jsp responds, not the content.
        | It would be nice to use something like HttpUnit to check that Axis really is happy.
        +-->
    <target name="axis.wait" depends="">
        <echo message=""/>
        <echo message="Waiting for Axis webapp ...."/>
        <echo message="URL : ${axis.url}/happyaxis.jsp"/>
        <waitfor maxwait="${axis.timeout}" maxwaitunit="second" checkevery="500">
            <http url="${axis.url}/happyaxis.jsp"/>
        </waitfor>
    </target>

    <!--+
        | Define the Axis manager tasks.
        +-->
    <target name="axis.tasks" depends="">
        <taskdef name="axis.admin" classname="org.apache.axis.tools.ant.axis.AdminClientTask">
            <classpath>
                <!-- Our Axis libraries -->
                <path refid="axis.classpath"/>
                <!-- Tomcat servlet libraries (required for Axis 1.0) -->
                <path refid="tomcat.classpath.servlet"/>
            </classpath>
        </taskdef>
        <taskdef name="axis.wsdl2java" classpathref="axis.classpath" classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask"/>
        <taskdef name="axis.java2wsdl" classpathref="axis.classpath" classname="org.apache.axis.tools.ant.wsdl.Java2WsdlAntTask"/>
    </target>

    <!--+
        | Reset Axis.
        +-->
    <target name="axis.RESET" depends="">
        <!-- Delete any additional libraries -->
        <delete verbose="true" failonerror="false" includeEmptyDirs="true">
            <fileset dir="${axis.webapp}/WEB-INF/lib">
                <!-- Exclude the Axis libraries -->
                <exclude name="axis-ant.jar"/>
                <exclude name="axis.jar"/>
                <exclude name="commons-discovery.jar"/>
                <exclude name="commons-logging.jar"/>
                <exclude name="jaxrpc.jar"/>
                <exclude name="jta1.0.1.jar"/>
                <exclude name="log4j-1.2.8.jar"/>
                <exclude name="saaj.jar"/>
                <exclude name="wsdl4j.jar"/>
            </fileset>
        </delete>
        <!-- Delete any additional classes -->
        <delete verbose="true" failonerror="false" includeEmptyDirs="true">
            <fileset dir="${axis.webapp}/WEB-INF/classes">
                <!-- Exclude the Axis samples -->
                <exclude name="samples/**"/>
            </fileset>
        </delete>
    </target>

    <!-- ================ Policy tasks ================ -->

    <property name="policy.base" value="${basedir}/build/policy"/>

    <property name="policy.service.base" value="${policy.base}/service"/>
    <property name="policy.manager.base" value="${policy.base}/manager"/>
    <property name="policy.server.base"  value="${policy.base}/server"/>
    <property name="policy.client.base"  value="${policy.base}/client"/>

    <property name="policy.server.jar"  value="astrogrid-community-policy-server-${project.version}.jar"/>
    <property name="policy.client.jar"  value="astrogrid-community-policy-client-${project.version}.jar"/>

    <!--+
        | The Policy server classpath.
        +-->
    <path id="policy.server.classpath">
        <!-- The Axis libraries -->
        <path refid="axis.classpath"/>
        <!-- The Castor libraries -->
        <path refid="castor.classpath"/>
        <!-- The Xerces libraries -->
        <path refid="xerces.classpath"/>
        <!-- The Hsqldb libraries -->
        <path refid="hsqldb.classpath"/>
        <!-- The JConfig libraries -->
        <path refid="jconfig.classpath"/>

        <!-- Our policy jar -->
        <pathelement path="${policy.base}/jar/${policy.server.jar}"/>
        <!--+
            | Our authentication jar
        <pathelement path="${installkitdir}/${authentication.server.jar}"/>
            +-->
        <pathelement path="${authentication.build}/jar/${authentication.server.jar}"/>
    </path>

    <!--+
        | The Policy client classpath.
        +-->
    <path id="policy.client.classpath">
        <!-- The Axis libraries -->
        <path refid="axis.classpath"/>
        <!-- The JConfig libraries -->
        <path refid="jconfig.classpath"/>
        <!-- Our client classes -->
        <pathelement path="${policy.base}/jar/${policy.client.jar}"/>
    </path>

    <!--+
        | Delete our build directory.
        +-->
    <target name="policy.delete" depends="">
        <delete dir="build/policy" failonerror="false"/>
    </target>

    <!--+
        | Compile our PolicyService interface classes.
        | These are the Java classes for the service interface, used to generate the service WSDL.
        +-->
    <target name="policy.service.javac" depends="">
        <!-- Create our build directory -->
        <mkdir dir="${policy.service.base}/classes"/>
        <!-- Compile the interface classes -->
        <javac srcdir="src/java"
               destdir="${policy.service.base}/classes"
               debug="on"
               deprecation="on"
               optimize="on"
               >
            <include name="org/astrogrid/community/policy/data/*.java"/>
            <include name="org/astrogrid/community/policy/server/PolicyService.java"/>
            <classpath>
                <!-- The JConfig libraries -->
                <path refid="jconfig.classpath"/>
            </classpath>
        </javac>
    </target>

    <!--+
        | Compile our PolicyManager interface classes.
        | These are the Java classes for the service interface, used to generate the service WSDL.
        +-->
    <target name="policy.manager.javac" depends="">
        <!-- Create our build directory -->
        <mkdir dir="${policy.manager.base}/classes"/>
        <!-- Compile the interface classes -->
        <javac srcdir="src/java"
               destdir="${policy.manager.base}/classes"
               debug="on"
               deprecation="on"
               optimize="on"
               >
            <include name="org/astrogrid/community/policy/data/*.java"/>
            <include name="org/astrogrid/community/policy/server/PolicyManager.java"/>
            <classpath>
                <!-- The JConfig libraries -->
                <path refid="jconfig.classpath"/>
            </classpath>
        </javac>
    </target>

    <!--+
        | Generate the PolicyService WSDL description from our Java class.
        | This generates the service WSDL based on the Java interface classes.
        +-->
    <target name="policy.service.java2wsdl" depends="axis.tasks">
        <echo message=""/>
        <echo message="Creating PolicyService WSDL from Java ...."/>
        <!-- Create our wsdl directory -->
        <mkdir dir="${policy.service.base}/wsdl/java2wsdl"/>
        <!-- Generate our WSDL description -->
        <axis.java2wsdl
            output="${policy.service.base}/wsdl/java2wsdl/PolicyService.wsdl"
            classname="org.astrogrid.community.policy.server.PolicyService"
            location="${axis.url}/services/PolicyService"
            methods="getServiceStatus, checkPermissions, checkMembership"
            namespace="urn:server.policy.community.astrogrid.org"
            namespaceimpl="urn:impl.server.policy.community.astrogrid.org"
            style="RPC"
            >
            <!-- The classpath to find the PolicyService classes -->
            <classpath>
                <path location="${policy.service.base}/classes"/>
            </classpath>
        </axis.java2wsdl>
    </target>

    <!--+
        | Generate the PolicyManager WSDL description from our Java class.
        | This generates the manager WSDL based on the Java interface classes.
        +-->
    <target name="policy.manager.java2wsdl" depends="axis.tasks">
        <echo message=""/>
        <echo message="Creating PolicyManager WSDL from Java ...."/>
        <!-- Create our wsdl directory -->
        <mkdir dir="${policy.manager.base}/wsdl/java2wsdl"/>
        <!-- Generate our WSDL description -->
        <axis.java2wsdl
            output="${policy.manager.base}/wsdl/java2wsdl/PolicyManager.wsdl"
            classname="org.astrogrid.community.policy.server.PolicyManager"
            location="${axis.url}/services/PolicyManager"
            namespace="urn:server.policy.community.astrogrid.org"
            namespaceimpl="urn:impl.server.policy.community.astrogrid.org"
            style="RPC"
            >
            <!-- The classpath to find the PolicyManager classes -->
            <classpath>
                <path location="${policy.manager.base}/classes"/>
            </classpath>
        </axis.java2wsdl>
    </target>

    <!--+
        | Generate the PolicyService code from our WSDL description.
        | This generates the Axis stubs and templates from the WSDL description.
        +-->
    <target name="policy.service.wsdl2java" depends="axis.tasks">
        <echo message=""/>
        <echo message="Creating PolicyService code from WSDL ...."/>
        <!-- Create our java directory -->
        <mkdir dir="${policy.service.base}/java"/>
        <!-- Generate the Java code -->
        <axis.wsdl2java
            verbose="false"
            serverside="true"
            skeletondeploy="false"
            output="${policy.service.base}/java"
            url="file://${policy.service.base}/wsdl/java2wsdl/PolicyService.wsdl"
            >
            <mapping namespace="urn:server.policy.community.astrogrid.org" package="org.astrogrid.community.policy.server"/>
            <mapping namespace="urn:data.policy.community.astrogrid.org"   package="org.astrogrid.community.policy.data"/>
        </axis.wsdl2java>
    </target>

    <!--+
        | Generate the PolicyManager code from our WSDL description.
        | This generates the Axis stubs and templates from the WSDL description.
        +-->
    <target name="policy.manager.wsdl2java" depends="axis.tasks">
        <echo message=""/>
        <echo message="Creating PolicyManager code from WSDL ...."/>
        <!-- Create our java directory -->
        <mkdir dir="${policy.manager.base}/java"/>
        <!-- Generate the Java code -->
        <axis.wsdl2java
            verbose="false"
            serverside="true"
            skeletondeploy="false"
            output="${policy.manager.base}/java"
            url="file://${policy.manager.base}/wsdl/java2wsdl/PolicyManager.wsdl"
            >
            <mapping namespace="urn:server.policy.community.astrogrid.org" package="org.astrogrid.community.policy.server"/>
            <mapping namespace="urn:data.policy.community.astrogrid.org"   package="org.astrogrid.community.policy.data"/>
        </axis.wsdl2java>
    </target>

    <!--+
        | Modify the PolicyService WSDD deployment descriptor.
        | This modifies the deployment descriptor to use our own implementation classes rather than the template generated from the WSDL.
        +-->
    <target name="policy.service.wsdd.xslt" depends="">
        <!-- Create our wsdd directory -->
        <mkdir dir="${policy.service.base}/wsdd"/>
        <!-- Transform the deploy wsdd -->
        <xslt style="src/xsl/build/policy/wsdd.xsl"
              in="${policy.service.base}/java/org/astrogrid/community/policy/server/deploy.wsdd"
              out="${policy.service.base}/wsdd/PolicyServiceDeploy.wsdd">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="impl"    expression="org.astrogrid.community.policy.server.PolicyServiceImpl"/>
            <param name="service" expression="PolicyService"/>
        </xslt>
        <!-- Copy the undeploy wsdd -->
        <copy verbose="false"
              tofile="${policy.service.base}/wsdd/PolicyServiceUndeploy.wsdd"
              file="${policy.service.base}/java/org/astrogrid/community/policy/server/undeploy.wsdd"
              />
    </target>

    <!--+
        | Modify the PolicyManager WSDD deployment descriptor.
        | This modifies the deployment descriptor to use our own implementation classes rather than the template generated from the WSDL.
        +-->
    <target name="policy.manager.wsdd.xslt" depends="">
        <!-- Create our wsdd directory -->
        <mkdir dir="${policy.manager.base}/wsdd"/>
        <!-- Transform the deploy wsdd -->
        <xslt style="src/xsl/build/policy/wsdd.xsl"
              in="${policy.manager.base}/java/org/astrogrid/community/policy/server/deploy.wsdd"
              out="${policy.manager.base}/wsdd/PolicyManagerDeploy.wsdd">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="impl"    expression="org.astrogrid.community.policy.server.PolicyManagerImpl"/>
            <param name="service" expression="PolicyManager"/>
        </xslt>
        <!-- Copy the undeploy wsdd -->
        <copy verbose="false"
              toFile="${policy.manager.base}/wsdd/PolicyManagerUndeploy.wsdd"
              file="${policy.manager.base}/java/org/astrogrid/community/policy/server/undeploy.wsdd"
              />
    </target>

    <!--+
        | Prepare the server code.
        | This combines our own Java source with the code generated from the service WSDL.
        | Uses the Axis generated stubs and data objects.
        | Uses our service interface and implementation.
        | I plan to use our data objects when I update them.
        +-->
    <target name="policy.server.prepare" depends="">
        <!-- Copy the Java source code -->
        <copy verbose="false" todir="${policy.server.base}/java">
            <!-- Copy the PolicyService wsdl2java generated source -->
            <fileset dir="${policy.service.base}/java">
                <!-- Include the generated PolicyService stubs -->
                <include name="org/astrogrid/community/policy/server/PolicyServiceService.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyServiceServiceLocator.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyServiceSoapBindingStub.java"/>
                <!-- Include the generated data objects -->
                <!-- <include name="org/astrogrid/community/policy/data/*.java"/> -->
            </fileset>
            <!-- Copy the PolicyService wsdl2java generated source -->
            <fileset dir="${policy.manager.base}/java">
                <!-- Include the generated PolicyManager stubs -->
                <include name="org/astrogrid/community/policy/server/PolicyManagerService.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyManagerServiceLocator.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyManagerSoapBindingStub.java"/>
                <!-- Include the generated data objects -->
                <!-- <include name="org/astrogrid/community/policy/data/*.java"/> -->
            </fileset>
            <!--+
                | Copy our own Java source.
                | Yes, we could probably just get all of the java files using 'org/astrogrid/community/policy/server**'
                | However, at this point I wanted to be specific about which classes are included.
                | If I have time to re-visit this I'll have a go at tidying it up a bit.
                +-->
            <fileset dir="src/java">
                <!-- Include our PolicyService interface and implementation -->
                <include name="org/astrogrid/community/policy/server/PolicyService.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyServiceImpl.java"/>
                <!-- Include our PolicyManager interface and implementation -->
                <include name="org/astrogrid/community/policy/server/PolicyManager.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyManagerImpl.java"/>
                <!-- Include our DatabaseManager interface and implementation -->
                <include name="org/astrogrid/community/policy/server/DatabaseManager.java"/>
                <include name="org/astrogrid/community/policy/server/DatabaseManagerImpl.java"/>
                <!-- Include our AccountManager interface and implementation -->
                <include name="org/astrogrid/community/policy/server/AccountManager.java"/>
                <include name="org/astrogrid/community/policy/server/AccountManagerImpl.java"/>
                <!-- Include our ResourceManager interface and implementation -->
                <include name="org/astrogrid/community/policy/server/ResourceManager.java"/>
                <include name="org/astrogrid/community/policy/server/ResourceManagerImpl.java"/>
                <!-- Include our GroupManager interface and implementation -->
                <include name="org/astrogrid/community/policy/server/GroupManager.java"/>
                <include name="org/astrogrid/community/policy/server/GroupManagerImpl.java"/>
                <!-- Include our CommunityManager interface and implementation -->
                <include name="org/astrogrid/community/policy/server/CommunityManager.java"/>
                <include name="org/astrogrid/community/policy/server/CommunityManagerImpl.java"/>
                <!-- Include our PermissionManager interface and implementation -->
                <include name="org/astrogrid/community/policy/server/PermissionManager.java"/>
                <include name="org/astrogrid/community/policy/server/PermissionManagerImpl.java"/>
                <!-- Include our Configuration implementation -->
                <include name="org/astrogrid/community/policy/server/CommunityConfigImpl.java"/>
                <!-- Include our common objects -->
                <include name="org/astrogrid/community/common/**"/>
                <!-- Include our data objects -->
                <include name="org/astrogrid/community/policy/data/*.java"/>
                <!-- Include our JUnit tests -->
                <include name="org/astrogrid/community/policy/server/junit/**"/>
                <!-- Include the policy loader classes -->
                <include name="org/astrogrid/community/policy/loader/**"/>
            <!--+
                | PATCH : Include the authentication data objects
                | Required because the Castor mapping refers to org.astrogrid.community.authentication.data.SecurityToken.
                | May cause problems if we want to deploy these in separate jars :-(
                +-->
                <include name="org/astrogrid/community/authentication/data/SecurityToken.java"/>
                <include name="org/astrogrid/community/service/authentication/data/SecurityToken.java"/>
            </fileset>
        </copy>
    </target>

    <!--+
        | Prepare the client code.
        | This combines our own Java source with the code generated from the service WSDL.
        | Uses the Axis generated stubs and data objects.
        | Uses our service interface and implementation.
        | I plan to use our data objects when I update them.
        +-->
    <target name="policy.client.prepare" depends="">
        <!-- Copy the Java source code -->
        <copy verbose="false" todir="${policy.client.base}/java">
            <!-- Copy the PolicyService wsdl2java generated source -->
            <fileset dir="${policy.service.base}/java">
                <!-- Include the generated PolicyService service and locator -->
                <include name="org/astrogrid/community/policy/server/PolicyServiceService.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyServiceServiceLocator.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyServiceSoapBindingStub.java"/>
                <!-- Include the generated data objects -->
                <!-- <include name="org/astrogrid/community/policy/data/*.java"/> -->
            </fileset>
            <!-- Copy the PolicyManager wsdl2java generated source -->
            <fileset dir="${policy.manager.base}/java">
                <!-- Include the generated PolicyManager service and locator -->
                <include name="org/astrogrid/community/policy/server/PolicyManagerService.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyManagerServiceLocator.java"/>
                <include name="org/astrogrid/community/policy/server/PolicyManagerSoapBindingStub.java"/>
                <!-- Include the generated data objects -->
                <!-- <include name="org/astrogrid/community/policy/data/*.java"/> -->
            </fileset>
            <!-- Copy our own Java source -->
            <fileset dir="src/java">
                <!-- Include our PolicyService interface -->
                <include name="org/astrogrid/community/policy/server/PolicyService.java"/>
                <!-- Include our PolicyManager interface -->
                <include name="org/astrogrid/community/policy/server/PolicyManager.java"/>
                <!-- Include our AccountManager interface -->
                <include name="org/astrogrid/community/policy/server/AccountManager.java"/>
                <!-- Include our ResourceManager interface -->
                <include name="org/astrogrid/community/policy/server/ResourceManager.java"/>
                <!-- Include our GroupManager interface -->
                <include name="org/astrogrid/community/policy/server/GroupManager.java"/>
                <!-- Include our CommunityManager interface -->
                <include name="org/astrogrid/community/policy/server/CommunityManager.java"/>
                <!-- Include our PermissionManager interface -->
                <include name="org/astrogrid/community/policy/server/PermissionManager.java"/>

                <!-- Include our common objects -->
                <include name="org/astrogrid/community/common/**"/>
                <!-- Include our data objects -->
                <include name="org/astrogrid/community/policy/data/**"/>
                <!-- Include our delegate objects -->
                <include name="org/astrogrid/community/delegate/policy/**"/>
                <!-- Include our JUnit tests -->
                <include name="org/astrogrid/community/policy/client/junit/**"/>

            <!--+
                | PATCH : Include the authentication data objects
                | Required because the Castor mapping refers to org.astrogrid.community.authentication.data.SecurityToken.
                | May cause problems if we want to deploy these in separate jars :-(
                <include name="org/astrogrid/community/authentication/data/SecurityToken.java"/>
                <include name="org/astrogrid/community/service/authentication/data/SecurityToken.java"/>
                +-->

            </fileset>
        </copy>
    </target>

    <!--+
        | Compile our server classes.
        +-->
    <target name="policy.server.javac" depends="">

        <echo message="policy.server.javac ...."/>

        <!-- Create our build directory -->
        <mkdir dir="${policy.server.base}/classes"/>
        <!-- Compile the server classes -->
        <javac srcdir="${policy.server.base}/java"
               destdir="${policy.server.base}/classes"
               debug="on"
               deprecation="on"
               optimize="on"
               >
            <include name="org/astrogrid/community/common/**"/>
            <include name="org/astrogrid/community/policy/data/**"/>
            <include name="org/astrogrid/community/policy/server/**"/>
            <include name="org/astrogrid/community/policy/loader/**"/>
            <!--+
                | PATCH : Include the authentication data objects
                | Required because the Castor mapping refers to org.astrogrid.community.authentication.data.SecurityToken.
                | May cause problems if we want to deploy these in separate jars :-(
                +-->
            <include name="org/astrogrid/community/authentication/data/SecurityToken.java"/>
            <include name="org/astrogrid/community/service/authentication/data/SecurityToken.java"/>

            <classpath>
                <!-- Include the JUnit libraries -->
                <path refid="junit.classpath"/>
                <!-- Include the Castor libraries -->
                <path refid="castor.classpath"/>
                <!-- Include the Axis libraries -->
                <path refid="axis.classpath"/>
                <!-- Include the JConfig libraries -->
                <path refid="jconfig.classpath"/>
                <!-- Include the myspace delegate -->
                <path refid="myspace.classpath"/>

                <!-- Include the Ant classes -->
                <path refid="ant.classpath"/>

            </classpath>
        </javac>
    </target>

    <!--+
        | Compile our client classes.
        +-->
    <target name="policy.client.javac" depends="">
        <!-- Create our build directory -->
        <mkdir dir="${policy.client.base}/classes"/>
        <!-- Compile the client classes -->
        <javac srcdir="${policy.client.base}/java"
               destdir="${policy.client.base}/classes"
               debug="on"
               deprecation="on"
               optimize="on"
               >
            <include name="org/astrogrid/community/common/*.java"/>
            <include name="org/astrogrid/community/policy/data/**"/>
            <include name="org/astrogrid/community/policy/server/**"/>
            <include name="org/astrogrid/community/policy/client/**"/>
            <include name="org/astrogrid/community/delegate/policy/**"/>
            <classpath>
                <!-- Include the JUnit libraries -->
                <path refid="junit.classpath"/>
                <!-- Include the JConfig libraries -->
                <path refid="jconfig.classpath"/>
                <!-- Include the Axis libraries -->
                <path refid="axis.classpath"/>
            </classpath>
        </javac>
    </target>

    <!--+
        | Jar our server classes.
        +-->
    <target name="policy.server.jar" depends="">
        <!-- Create our build directory -->
        <mkdir dir="${policy.base}/jar"/>
        <!-- Create our jar file -->
        <jar destfile="${policy.base}/jar/${policy.server.jar}">
            <!-- Copy our own Java source -->
            <fileset dir="${policy.server.base}/classes">
                <include name="org/astrogrid/community/common/**"/>
                <include name="org/astrogrid/community/policy/data/**"/>
                <include name="org/astrogrid/community/policy/server/**"/>
                <include name="org/astrogrid/community/policy/loader/**"/>
                <!--+
                    | PATCH : Include the auth data objects
                    | Required because the Castor mapping refers to org.astrogrid.community.authentication.data.SecurityToken.
                    | May cause problems if we want to deploy these in separate jars :-(
                    +-->
                <include name="org/astrogrid/community/authentication/data/SecurityToken.class"/>
                <include name="org/astrogrid/community/service/authentication/data/SecurityToken.class"/>
            </fileset>
        </jar>
    </target>

    <!--+
        | Jar our client classes.
        +-->
    <target name="policy.client.jar" depends="">
        <!-- Create our build directory -->
        <mkdir dir="${policy.base}/jar"/>
        <!-- Create our jar file -->
        <jar destfile="${policy.base}/jar/${policy.client.jar}">
            <!-- Copy our own Java source -->
            <fileset dir="${policy.client.base}/classes">
                <include name="org/astrogrid/community/common/**"/>
                <include name="org/astrogrid/community/policy/data/**"/>
                <include name="org/astrogrid/community/policy/server/**"/>
                <include name="org/astrogrid/community/policy/client/**"/>
                <include name="org/astrogrid/community/delegate/policy/**"/>
            </fileset>
        </jar>
    </target>

    <!--+
        | Build our policy service.
        +-->
    <target name="policy.BUILD" depends="init">
        <antcall target="policy.delete"/>

        <antcall target="policy.service.javac"/>
        <antcall target="policy.service.java2wsdl"/>
        <antcall target="policy.service.wsdl2java"/>
        <antcall target="policy.service.wsdd.xslt"/>

        <antcall target="policy.manager.javac"/>
        <antcall target="policy.manager.java2wsdl"/>
        <antcall target="policy.manager.wsdl2java"/>
        <antcall target="policy.manager.wsdd.xslt"/>

        <antcall target="policy.server.prepare"/>
        <antcall target="policy.server.javac"/>
        <antcall target="policy.server.jar"/>

        <antcall target="policy.client.prepare"/>
        <antcall target="policy.client.javac"/>
        <antcall target="policy.client.jar"/>
    </target>

    <!-- What is this doing here ? -->
    <path id="myspace.classpath">
        <pathelement location="${basedir}/depends/myspace/myspace-client.jar"/>
    </path>

    <!--+
        | Install our service jars.
        +-->
    <target name="policy.server.install" depends="">
        <!-- Copy the 3rd party libraries into our Axis WEB-INF/lib directory -->
        <antcall target="axis.external.install"/>
        <!-- Copy our jar into the Axis WEB-INF/lib directory -->
        <copy verbose="true" todir="${axis.webapp}/WEB-INF/lib">
            <fileset dir="${policy.base}/jar">
                <include name="${policy.server.jar}"/>
            </fileset>
        </copy>
    </target>

    <!--+
        | Remove our Axis service files.
        +-->
    <target name="policy.server.remove" depends="axis.tasks">
        <!-- Remove our jar from the Axis WEB-INF/lib directory -->
        <delete verbose="true" failonerror="false">
            <fileset dir="${axis.webapp}/WEB-INF/lib">
                <include name="policy-server*"/>
            </fileset>
        </delete>
    </target>

    <!--+
        | Deploy our PolicyService service (using the axis admin client).
        | Needs the Axis service running to connect to the admin service.
        +-->
    <target name="policy.service.deploy.live" depends="axis.tasks">
        <!-- Wait for the Axis service -->
        <antcall target="axis.wait"/>
        <!-- Deploy our PolicyService service -->
        <axis.admin
            port="${axis.port}"
            hostname="${axis.host}"
            servletpath="/${axis.servlet}/services/AdminService"
            debug="true"
            xmlfile="${policy.service.base}/wsdd/PolicyServiceDeploy.wsdd"
            />
    </target>

    <!--+
        | Deploy our PolicyManager service (using the axis admin client).
        | Needs the Axis service running to connect to the admin service.
        +-->
    <target name="policy.manager.deploy.live" depends="axis.tasks">
        <!-- Wait for the Axis service -->
        <antcall target="axis.wait"/>
        <!-- Deploy our PolicyManager service -->
        <axis.admin
            port="${axis.port}"
            hostname="${axis.host}"
            servletpath="/${axis.servlet}/services/AdminService"
            debug="true"
            xmlfile="${policy.manager.base}/wsdd/PolicyManagerDeploy.wsdd"
            />
    </target>

    <!--+
        | Deploy our Policy services (using the axis admin client).
        | Needs the Axis service running to connect to the admin service.
        +-->
    <target name="policy.server.deploy.live" depends="axis.tasks">
        <antcall target="policy.service.deploy.live"/>
        <antcall target="policy.manager.deploy.live"/>
    </target>

    <!--+
        | Undeploy our PolicyService service (using the axis admin client).
        | Needs the Axis service running to connect to the admin service.
        +-->
    <target name="policy.service.undeploy.live" depends="axis.tasks">
        <!-- Wait for the Axis service -->
        <antcall target="axis.wait"/>
        <!-- Remove our WebService -->
        <axis.admin
            port="${axis.port}"
            hostname="${axis.host}"
            servletpath="/${axis.servlet}/services/AdminService"
            debug="true"
            xmlfile="${policy.service.base}/wsdd/PolicyServiceUndeploy.wsdd"
            />
    </target>

    <!--+
        | Undeploy our PolicyManager service (using the axis admin client).
        | Needs the Axis service running to connect to the admin service.
        +-->
    <target name="policy.manager.undeploy.live" depends="axis.tasks">
        <!-- Wait for the Axis service -->
        <antcall target="axis.wait"/>
        <!-- Remove our WebService -->
        <axis.admin
            port="${axis.port}"
            hostname="${axis.host}"
            servletpath="/${axis.servlet}/services/AdminService"
            debug="true"
            xmlfile="${policy.manager.base}/wsdd/PolicyManagerUndeploy.wsdd"
            />
    </target>

    <!--+
        | Undeploy our Policy services (using the axis admin client).
        | Needs the Axis service running to connect to the admin service.
        +-->
    <target name="policy.server.undeploy" depends="axis.tasks">
        <antcall target="policy.service.undeploy.live"/>
        <antcall target="policy.manager.undeploy.live"/>
    </target>

    <!--+
        | Request the WSDL description from our PolicyService service.
        | Used as an initial check that our service has been deployed.
        +-->
    <target name="policy.service.axis2wsdl" depends="">
        <echo message=""/>
        <echo message="Requesting WSDL from Axis ...."/>
        <!-- Create our wsdl directory -->
        <mkdir dir="${policy.service.base}/wsdl/axis2wsdl"/>
        <!-- Request our WSDL description -->
        <get verbose="true" usetimestamp="true"
            src="${axis.url}/services/PolicyService?wsdl"
            dest="${policy.service.base}/wsdl/axis2wsdl/PolicyService.wsdl"
            />
    </target>

    <!--+
        | Request the WSDL description from our PolicyManager service.
        | Used as an initial check that our service has been deployed.
        +-->
    <target name="policy.manager.axis2wsdl" depends="">
        <echo message=""/>
        <echo message="Requesting WSDL from Axis ...."/>
        <!-- Create our wsdl directory -->
        <mkdir dir="${policy.manager.base}/wsdl/axis2wsdl"/>
        <!-- Request our WSDL description -->
        <get verbose="true" usetimestamp="true"
            src="${axis.url}/services/PolicyManager?wsdl"
            dest="${policy.manager.base}/wsdl/axis2wsdl/PolicyManager.wsdl"
            />
    </target>

    <!--+
        | Request the WSDL description for our Axis services.
        +-->
    <target name="policy.server.axis2wsdl" depends="axis.tasks">
        <antcall target="policy.service.axis2wsdl"/>
        <antcall target="policy.manager.axis2wsdl"/>
    </target>

    <!--+
        | Deploy our policy services.
        | If we were just copying our classes into the Axis/WEB-INF/classes directory, then no need to re-load Axis.
        | Because we are installing our classes as a jar file into the Axis/WEB-INF/lib directory, we need to re-load Axis before we can deploy the service.
        +-->
    <target name="policy.DEPLOY" depends="">
        <!-- Install our jar file -->
        <antcall target="policy.server.install"/>
        <!-- Reload Axis -->
        <antcall target="axis.webapp.reload"/>
        <!-- Deploy our service -->
        <antcall target="policy.server.deploy.live"/>
        <!-- Check we can read our service WSDL -->
        <antcall target="policy.server.axis2wsdl"/>
    </target>

    <!--+
        | Remove our policy service.
        +-->
    <target name="policy.REMOVE" depends="">
        <!-- Remove our service -->
        <antcall target="policy.server.undeploy"/>
        <antcall target="policy.server.remove"/>
    </target>

    <!--+
        | Reload our policy service.
        +-->
    <target name="policy.RELOAD" depends="">
        <!-- Remove our service -->
        <antcall target="policy.REMOVE"/>
        <!-- Deploy our service -->
        <antcall target="policy.DEPLOY"/>
    </target>

    <!--+
        | Run our server side JUnit tests.
        +-->
    <target name="policy.server.junit" depends="">
        <!-- Create our reports directory -->
        <mkdir dir="${policy.base}/junit"/>
        <!-- Run our JUnitTestCase tests -->
        <junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath>
                <!-- The Policy classes -->
                <path refid="policy.server.classpath"/>
            </classpath>
            <!-- Generate an XML log file -->
            <formatter type="xml"/>
            <!-- Pass in the location of the config file -->
            <sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
            <!-- Run the target JUnitTestCase tests -->
            <batchtest todir="${policy.base}/junit">
                <fileset dir="${policy.server.base}/classes">
                    <include name="org/astrogrid/community/common/junit/**/JUnit*.class"/>
                    <include name="org/astrogrid/community/policy/server/junit/**/JUnitGroup*.class"/>
                    <include name="org/astrogrid/community/policy/server/junit/**/JUnitAccount*.class"/>
                    <include name="org/astrogrid/community/policy/server/junit/**/JUnitResource*.class"/>
                    <include name="org/astrogrid/community/policy/server/junit/**/JUnitCommunity*.class"/>
                    <include name="org/astrogrid/community/policy/server/junit/**/JUnitPermission*.class"/>
                    <include name="org/astrogrid/community/policy/server/junit/**/JUnitGroupMember*.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!--+
        | Run our client JUnit tests.
        +-->
    <target name="policy.client.junit" depends="">
        <!-- Create our reports directory -->
        <mkdir dir="${policy.base}/junit"/>
        <!-- Run our JUnitTestCase tests -->
        <junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath>
                <!-- The Policy classes -->
                <path refid="policy.client.classpath"/>
            </classpath>
            <!-- Generate an XML log file -->
            <formatter type="xml"/>
            <!-- Pass in the location of the config file -->
            <sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
            <!-- Run the target JUnitTestCase tests -->
            <batchtest todir="${policy.base}/junit">
                <fileset dir="${policy.client.base}/classes">
<!--
                    <include name="org/astrogrid/community/policy/client/junit/manager/**"/>
-->
                    <include name="org/astrogrid/community/policy/client/junit/service/**"/>

                </fileset>
            </batchtest>
        </junit>
    </target>

    <!--+
        | Run our delegate JUnit tests.
        +-->
    <target name="policy.delegate.junit" depends="">
        <!-- Create our reports directory -->
        <mkdir dir="${policy.base}/junit"/>
        <!-- Run our JUnitTestCase tests -->
        <junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath>
                <!-- The Policy classes -->
                <path refid="policy.client.classpath"/>
            </classpath>
            <!-- Generate an XML log file -->
            <formatter type="xml"/>
            <!--+
                | Pass in the location of the config file
            <sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
            <sysproperty key="org.astrogrid.community.community.host" value="methionine"/>
                +-->
            <sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
            <!-- Run the target JUnitTestCase tests -->
            <batchtest todir="${policy.base}/junit">
                <fileset dir="${policy.client.base}/classes">
                    <include name="org/astrogrid/community/delegate/policy/junit/**"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!--+
        | Run our remote client tests.
        +-->
    <target name="policy.remote.junit" depends="">
        <!-- Create our reports directory -->
        <mkdir dir="${policy.base}/junit"/>
        <!-- Run our JUnitTestCase tests -->
        <junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath>
                <!-- The Policy classes -->
                <path refid="policy.client.classpath"/>
            </classpath>
            <!-- Generate an XML log file -->
            <formatter type="xml"/>
            <!-- Run the target JUnitTestCase tests -->
            <batchtest todir="${policy.base}/junit">
                <fileset dir="${policy.client.base}/classes">
                    <include name="org/astrogrid/community/policy/client/junit/**/JUnitRemoteGroup*.class"/>
                    <include name="org/astrogrid/community/policy/client/junit/**/JUnitRemoteAccount*.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!--+
        | Test our policy service.
        +-->
    <target name="policy.TEST" depends="">
        <!-- Reset our database -->
        <antcall target="hsqldb.database.delete"/>
        <!-- Run our server side tests -->
        <antcall target="policy.server.junit"/>
        <!-- Run our client side tests -->
        <antcall target="policy.client.junit"/>
        <!-- Display our database -->
        <antcall target="hsqldb.database.select"/>
    </target>

    <!--+
        | Run the initial accounts test.
        | This uses a server side JUnit test to add the initial Accounts and Groups.
        | This should be replaced by the XML loader ASAP.
        +-->
    <target name="policy.server.init" depends="">
        <!-- Create our reports directory -->
        <mkdir dir="${policy.base}/junit"/>
        <!-- Run our JUnitTestCase tests -->
        <junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath>
                <!-- The Policy classes -->
                <path refid="policy.server.classpath"/>
                <!-- The Auth classes -->
                <path refid="authentication.client.classpath"/>
            </classpath>
            <!-- Generate an XML log file -->
            <formatter type="xml"/>
            <!-- Pass in the location of the config file -->
            <sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
            <!-- Run the target JUnitTestCase tests -->
            <batchtest todir="${policy.base}/junit">
                <fileset dir="${policy.server.base}/classes">
                    <include name="org/astrogrid/community/policy/server/junit/manager/InitialAccountLoader.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!--+
        | Test our policy service.
        +-->
    <target name="policy.REMOTE-TEST" depends="">
        <!-- Reset our database -->
        <antcall target="hsqldb.database.delete"/>
        <!-- Run our remote tests -->
        <antcall target="policy.remote.junit"/>
        <!-- Display our database -->
        <antcall target="hsqldb.database.select"/>
    </target>

    <!-- ================ Database loader tasks ================ -->
    <!--+
        | The Policy data location.
        +-->
    <property name="policy.xml.test" value="src/xml/policy/test"/>
    <property name="policy.xml.data" value="src/xml/policy/data"/>

    <!--+
        | Run our database loader JUnit tests.
        +-->
    <target name="policy.loader.junit" depends="">
        <!-- Create our reports directory -->
        <mkdir dir="${policy.base}/junit"/>
        <!-- Run our JUnitTestCase tests -->
        <junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath>
                <!-- The Policy classes -->
                <path refid="policy.server.classpath"/>
            </classpath>
            <!-- Generate an XML log file -->
            <formatter type="xml"/>
            <!-- Pass in the location of the config file -->
            <sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
            <!-- Pass in the location of the test data -->
            <sysproperty key="org.astrogrid.community.data" value="${policy.xml.test}"/>
            <!-- Run the target JUnitTestCase tests -->
            <batchtest todir="${policy.base}/junit">
                <fileset dir="${policy.server.base}/classes">
                    <include name="org/astrogrid/community/policy/loader/junit/JUnit*.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!--+
        | Run our policy loader task.
        +-->
    <target name="policy.loader" depends="">
        <echo message=""/>
        <echo message="Loading policy data ...."/>
        <echo message="  Community name : ${community.name}"/>
        <!-- Define our policy-loader task -->
        <taskdef name="policy.loader" classname="org.astrogrid.community.policy.loader.PolicyLoader">
            <classpath>
                <!-- The Axis libraries -->
                <path refid="axis.classpath"/>
                <!-- Our policy jar -->
                <pathelement path="${policy.base}/jar/${policy.server.jar}"/>
            </classpath>
        </taskdef>
        <!-- Process our data files -->
        <policy.loader>
            <fileset dir="${policy.xml.data}">
                <include name="${community.name}.xml"/>
            </fileset>
        </policy.loader>
    </target>

    <!-- ================ Configuration tasks ================ -->
    <!--+
        | Configuration properties.
        +-->
    <property name="config.base" value="${basedir}/build/config"></property>
    <property name="config.file" value="${config.base}/astrogrid-community-config.xml"></property>

    <!--+
        | Delete our configuration files.
        +-->
    <target name="config.delete" depends="">
        <delete dir="${config.base}" failonerror="false"/>
    </target>

    <!--+
        | Build our jConfig configuration file(s).
        | This uses an XSL transform to set the correct paths in our jConfig configuration file.
        +-->
    <target name="config.jconfig" depends="">
        <echo message=""/>
        <echo message="Building community config ...."/>
        <!-- Create our config directory -->
        <mkdir dir="${config.base}"/>
        <!-- Copy our database mapping files -->
        <copy verbose="false" overwrite="true" toDir="${config.base}">
            <fileset dir="src/castor/hsqldb">
                <include name="astrogrid-community-database.xml"/>
                <include name="astrogrid-community-mapping.xml"/>
            </fileset>
        </copy>
        <!-- Copy our config files -->
        <copy verbose="false" overwrite="true" toDir="${config.base}">
            <fileset dir="src/config">
                <include name="astrogrid-community-config.xml"/>
            </fileset>
        </copy>
        <!-- Transform our config file, filling in the correct values -->
        <antcall target="config.xslt">
            <param name="property.name"  value="database.name"/>
            <param name="property.value" value="${hsqldb.name}"/>
        </antcall>
        <antcall target="config.xslt">
            <param name="property.name"  value="database.config"/>
            <param name="property.value" value="${config.base}/astrogrid-community-database.xml"/>
        </antcall>
        <antcall target="config.xslt">
            <param name="property.name"  value="database.mapping"/>
            <param name="property.value" value="${config.base}/astrogrid-community-mapping.xml"/>
        </antcall>
    </target>

    <!--+
        | Transform our config file, setting a named property.
        +-->
    <target name="config.xslt" depends="">

        <echo message=""/>
        <echo message="Updating community config ...."/>
        <echo message="  Config file    : ${config.file}"/>
        <echo message="  Property name  : ${property.name}"/>
        <echo message="  Property value : ${property.value}"/>

        <!-- Transform our config file, filling in the specified value -->
        <xslt style="src/xsl/build/config/config.xsl"
              in="${config.file}"
              out="${config.file}.new">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="category"         expression="org.astrogrid.community"/>
            <param name="property.name"    expression="${property.name}"/>
            <param name="property.value"   expression="${property.value}"/>
        </xslt>
        <!-- Replace our existing config.xml with the new one -->
        <move file="${config.file}.new" tofile="${config.file}" overwrite="true" failonerror="false"/>
    </target>

    <!--+
        | Modify a generic webapp web.xml to include our JNDI property.
        | This uses an XSL transform to add the path to our config file to the Axis web.xml.
        | This will be picked up by our WebService using a JNDI lookup call.
        +-->
    <target name="config.webapp.jndi" depends="">
        <echo message=""/>
        <echo message="Modifying WebApp web.xml ...."/>
        <echo message="  Target webapp : ${target.webapp}"/>
        <echo message="  Target config : ${target.config}"/>
        <!-- Copy the existing web.xml to a backup file -->
        <copy file="${target.webapp}/WEB-INF/web.xml" tofile="${target.webapp}/WEB-INF/web.xml.old" overwrite="true" failonerror="false"/>
        <!-- Transform the target web.xml, adding our JNDI property -->
        <xslt style="src/xsl/build/config/webapp.xsl"
              in="${target.webapp}/WEB-INF/web.xml"
              out="${target.webapp}/WEB-INF/web.xml.new">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="property.name"  expression="org.astrogrid.community.config"/>
            <param name="property.value" expression="${target.config}"/>
        </xslt>
        <!-- Replace the existing web.xml with the new one -->
        <move file="${target.webapp}/WEB-INF/web.xml.new" tofile="${target.webapp}/WEB-INF/web.xml" overwrite="true" failonerror="false"/>
    </target>

    <!--+
        | Build our jConfig configuration.
        +-->
    <target name="config.BUILD" depends="">
        <antcall target="config.delete"/>
        <antcall target="config.jconfig"/>
        <antcall target="config.webapp.jndi">
            <param name="target.webapp" value="${axis.webapp}"/>
            <param name="target.config" value="${config.file}"/>
        </antcall>
    </target>

    <!-- ================ Authentication tasks ================ -->
    <property name="auth.testdir" value="${basedir}/test"></property>

    <property name="authentication.build" value="${basedir}/build/authentication"/>
    <property name="authentication.classes" value="${basedir}/build/authentication/classes"></property> <!-- use the eclipse build for now -->

    <property name="authentication.server.jar"  value="astrogrig-community-auth-server-${project.version}.jar"/>
    <property name="authentication.client.jar"  value="astrogrig-community-auth-client-${project.version}.jar"/>
    
    <target name="authentication.delete" depends="">
        <delete dir="${authentication.build}" failonerror="false"/>
    </target>
    
    
    <path id="authentication.client.classpath">
        <!-- The Axis libraries -->
        <path refid="axis.classpath"/>
        <!-- Our client classes -->
        <pathelement path="${authentication.build}/jar/${authentication.client.jar}"/>
    </path>
    <path id="authentication.server.classpath">
        <path refid="axis.classpath"></path>
        <path refid="castor.classpath"></path>
        <pathelement path="${authentication.build}/jar/${authentication.server.jar}"/>
    </path>

    <target name="authentication.testSetup" description="moves various config files from the main tree into the test tree prior to testing">
        <antcall target="authentication.genTestSetup">
            <param name="testbase" value="${auth.testdir}/java"/>
        </antcall>
    </target>

    <target name="authentication.testSetupJunit" description="sets up test file for the ant junit tests">
        <antcall target="authentication.genTestSetup">
            <param name="testbase" value="${authentication.build}/testclasses"/>
        </antcall>
    </target>

    <target name="authentication.genTestSetup">
        <copy file="${basedir}/src/sql/hsqldb/create.sql" todir="${testbase}/org/astrogrid/community/common/db/">
        </copy>
        <copy file="${basedir}/src/castor/hsqldb/mapping.xml" todir="${auth.testdir}/config/"></copy>
        <echo file="${testbase}/org/astrogrid/community/common/Test.properties" append="false">
database.mapping=file://${auth.testdir}/config/mapping.xml
database.config=file://${auth.testdir}/config/databaseinmemory.xml
database.name=${hsqldb.name}
database.url=jdbc:hsqldb:test/data/policy
database.password=
database.user=sa
        </echo>
    </target>
    
    <!--+
        | Ensure that the appropriate file is compiled
        +-->
    <target name="authentication.server.javac" depends="">
        <!-- Create our build directory -->
        <mkdir dir="${authentication.build}/classes"/>
        <!-- Compile the interface classes -->
        <javac srcdir="src/java"
               destdir="${authentication.build}/classes"
               debug="on"
               deprecation="on"
               optimize="on"
               >
            <include name="org/astrogrid/community/authentication/*.java"/>
            <include name="org/astrogrid/community/authentication/data/*.java"/>
            <classpath>
            <path refid="castor.classpath"></path>
            <path refid="jconfig.classpath"/>
            <path refid="logging.classpath"/>
            </classpath>
        </javac>
    </target>

    <!--+
        | Generate the authenticationService WSDL description from our Java class.
        | This generates the service WSDL based on the Java interface classes.
        +-->
    <target name="authentication.service.java2wsdl" depends="axis.tasks,authentication.server.javac">
        <echo message=""/>
        <echo message="Creating authenticationService WSDL from Java ...."/>
        <!-- Create our wsdl directory -->
        <mkdir dir="${basedir}/wsdl/"/>
        <!-- Generate our WSDL description -->
        <axis.java2wsdl
            output="${basedir}/wsdl/AuthenticationService.wsdl"
            classname="org.astrogrid.community.authentication.TokenAuthenticator"
            location="${axis.url}/services/AuthenticationService"
            namespace="urn:server.authentication.community.astrogrid.org"
            namespaceimpl="urn:impl.server.authentication.community.astrogrid.org"
            implclass="org.astrogrid.community.authentication.TokenAuthenticationServer"
            style="RPC"
            >
            <mapping package="org.astrogrid.community.authentication.data" namespace="urn:data.authentication.community.astrogrid.org" />
            <!-- The classpath to find the authenticationService classes -->
            <classpath>
                <path location="${authentication.build}/classes"/>
                <path refid="castor.classpath"></path>
                <path refid="logging.classpath"/>
            </classpath>
        </axis.java2wsdl>
    </target>

    <!--+
        | Generate the authenticationService code from our WSDL description.
        | This generates the Axis stubs and templates from the WSDL description.
        +-->
    <target name="authentication.client.wsdl2java" depends="axis.tasks">
        <echo message=""/>
        <echo message="Creating authenticationService Client code from WSDL ...."/>
        <!-- Create our java directory -->
        <mkdir dir="${basedir}/src/java"/>
        <!-- Generate the Java code -->
        <axis.wsdl2java
            verbose="true"
            serverside="false"
            skeletondeploy="false"
            testcase="true"
            output="${basedir}/src/java"
            url="file://${basedir}/wsdl/AuthenticationService.wsdl"
            >
            <mapping namespace="urn:server.authentication.community.astrogrid.org" package="org.astrogrid.community.delegate.authentication"/>
            <mapping namespace="urn:data.authentication.community.astrogrid.org"   package="org.astrogrid.community.service.authentication.data"/>
        </axis.wsdl2java>
    </target>
    
    <target name="authentication.service.wsdl2java" depends="axis.tasks">
        <echo message=""/>
        <echo message="Creating authenticationService Server Code from WSDL ...."/>
        <!-- Create our java directory -->
        <mkdir dir="${basedir}/src/java"/>
        <!-- Generate the Java code -->
        <axis.wsdl2java
            verbose="true"
            serverside="true"
            skeletondeploy="false"
            testcase="false"
            output="${basedir}/src/java"
            url="file://${basedir}/wsdl/AuthenticationService.wsdl"
            >
            <mapping namespace="urn:server.authentication.community.astrogrid.org" package="org.astrogrid.community.service.authentication"/>
            <mapping namespace="urn:data.authentication.community.astrogrid.org"   package="org.astrogrid.community.service.authentication.data"/>
        </axis.wsdl2java>
        <mkdir dir="${basedir}/wsdd/AuthenticationService" />
        <move todir="${basedir}/wsdd/AuthenticationService" >
        <fileset dir="${basedir}/src/java/org/astrogrid/community/service/authentication" ><include name="*.wsdd"/></fileset></move>
        <delete><fileset dir="${basedir}/src/java/org/astrogrid/community/service/authentication"
         includes="AuthenticationServiceSoapBindingStub.java,TokenAuthenticatorService.java,TokenAuthenticatorServiceLocator.java"/>
        </delete>
    </target>

    <!--+
        | Compile authentication classes - could be all the classes except errors are forcing the excludes....
        |
        | Should NOT be all of the classes, we want to keep a clear separation between authentication and policy, and keep client and server side separate..
        | The aim is to end up with four separate jars, policy and auth, server and client.
        | With only a few of the common classes shared between them.
        | Compiling 'all' and then excluding the ones you don't want is a bit like 'import package.*' in Java.
        | Better to be explicit which classes you DO want to complile.
        | That way when somone adds a new class to another section of the source code, this task don't break.
        +-->
    <target name="authentication.javac" depends="" description="compile all the classes related to authentication">
        <!-- Create our build directory -->
        <mkdir dir="${authentication.build}/classes"/>
        <!-- Compile the server classes -->
        <javac srcdir="${basedir}/src/java"
               destdir="${authentication.build}/classes"
               debug="on"
               deprecation="on"
               optimize="on"
               verbose="off"
               >
            <include name="org/astrogrid/community/**"/>
            <exclude name="org/astrogrid/community/policy/client/**"/>
            <exclude name="org/astrogrid/community/policy/server/**"/>
            <exclude name="org/astrogrid/community/policy/loader/**"/>
            <exclude name="org/astrogrid/community/auth/**"/>
            <exclude name="org/astrogrid/community/delegate/policy/**"/> 
            <!--+
                | Excluding the ant and xml parser classes for now.
                | At the moment, these are only used in the policy loader.
                +-->
            <exclude name="org/astrogrid/community/common/util/ant/**"/>
            <exclude name="org/astrogrid/community/common/util/xml/**"/>
            <classpath>
                <!-- Include the JUnit libraries -->
                <path refid="junit.classpath"/>
                <!-- Include the Castor libraries -->
                <path refid="castor.classpath"/>
                <!-- Include the Axis libraries -->
                <path refid="axis.classpath"/>
                <path refid="jconfig.classpath"/>
            </classpath>
        </javac>
    </target>

    <target name="authentication.test.javac" depends="authentication.javac" description="compile all the test case classes related to authentication">
        <!-- Create our build directory -->
        <mkdir dir="${authentication.build}/testclasses"/>
        <!-- Compile the server classes -->
        <javac srcdir="${basedir}/test/java"
               destdir="${authentication.build}/testclasses"
               debug="on"
               deprecation="on"
               optimize="on"
               verbose="off"
               >
             <include name="org/astrogrid/community/**"/>
            <classpath>
                <pathelement location="${authentication.build}/classes"/>
                <!-- Include the JUnit libraries -->
                <path refid="junit.classpath"/>
                <!-- Include the Castor libraries -->
                <path refid="castor.classpath"/>
                <!-- Include the Axis libraries -->
                <path refid="axis.classpath"/>
                <path refid="jconfig.classpath"/>
                
                
            </classpath>
        </javac>
    </target>

    <!--+
        | Jar our server classes.
        +-->
    <target name="authentication.server.jar" depends="authentication.javac">
        <!-- Create our jar file -->
        <mkdir dir="${authentication.build}/jar"/>
        <jar destfile="${authentication.build}/jar/${authentication.server.jar}">
            <!-- Copy our own Java source -->
            <fileset dir="${authentication.classes}">
                <include name="org/astrogrid/community/authentication/**"/>
                <include name="org/astrogrid/community/service/authentication/**"/>
                <include name="org/astrogrid/community/policy/data/**"/>
                <include name="org/astrogrid/community/common/**"/>
                <exclude name="**/junit/**" />
            </fileset>
        </jar>
    </target>

    <!--+
        | Jar our client classes.
        +-->
    <target name="authentication.client.jar" depends="">
        <!-- Create our build directory -->

        <mkdir dir="${authentication.build}/jar"/>
        
        <!-- Create our jar file -->
        <jar destfile="${authentication.build}/jar/${authentication.client.jar}">
            <!-- Copy our own Java source -->
            <fileset dir="${authentication.classes}">
                <include name="org/astrogrid/community/authentication/data/**"/>
                <include name="org/astrogrid/community/authentication/server/**"/>
                <include name="org/astrogrid/community/delegate/authentication/**"/>
                <include name="org/astrogrid/community/service/authentication/data/**"/>
                <include name="org/astrogrid/community/common/**"/>
                <exclude name="**/junit/**" />
            </fileset>
        </jar>
    </target>

    <!--+
        | Build our server config files.
        | Not sure of the best place to put these at the moment.
        | The mapping file should not change, so probably should be in the jar.
        | The database file should be user configurable, so should NOT be in the jar.
        +-->
    <target name="authentication.server.config" depends="">
        <!-- Create our config directory -->
        <mkdir dir="${authentication.build}/config"/>
        <!-- Copy our database mapping files -->
        <copy verbose="false" overwrite="true" toDir="${authentication.build}/config">
            <fileset dir="src/castor/hsqldb">
                <include name="astrogrid-community-database.xml"/>
                <include name="astrogrid-community-mapping.xml"/>
            </fileset>
        </copy>
    </target>
    
    <target name="authentication.GENSERVICE" depends="" description="regenerates the WSDL and client stubs for the service">
        <antcall target="authentication.delete"/>
        <antcall target="authentication.server.javac"/>
        <antcall target="authentication.service.java2wsdl"/>
        <antcall target="authentication.service.wsdl2java"/>
        <antcall target="authentication.client.wsdl2java" />
    </target>

    <!--+
        | Build our authentication service.
        +-->
    <target name="authentication.BUILD" depends="">
        <antcall target="authentication.delete" />
        <antcall target="authentication.javac"/>
        <antcall target="authentication.server.config"/>
        <antcall target="authentication.server.jar"/>
        <antcall target="authentication.client.jar"/>
    </target>

    <!--+
        | Install our service jars.
        +-->
    <target name="authentication.server.install" depends="">
        <!-- Copy the 3rd party libraries into our Axis WEB-INF/lib directory -->
        <antcall target="axis.external.install"/>
        <!-- Copy our jar into the Axis WEB-INF/lib directory -->
        <copy verbose="true" todir="${axis.webapp}/WEB-INF/lib">
            <fileset dir="${authentication.build}/jar">
                <include name="${authentication.server.jar}"/>
            </fileset>
        </copy>
    </target>

    <!--+
        | Remove our Axis service files.
        +-->
    <target name="authentication.server.remove" depends="axis.tasks">
        <!-- Remove our jar from the Axis WEB-INF/lib directory -->
        <delete verbose="true" failonerror="false">
            <fileset dir="${axis.webapp}/WEB-INF/lib">
                <include name="authentication-server*"/>
            </fileset>
        </delete>
    </target>

    <!--+
        | Deploy our authenticationService service.
        +-->
    <target name="authentication.service.deploy.live" depends="axis.tasks">
        <!-- Wait for the Axis service -->
        <antcall target="axis.wait"/>
        <!-- Deploy our authenticationService service -->
        <axis.admin
            port="${axis.port}"
            hostname="${axis.host}"
            servletpath="/${axis.servlet}/services/AdminService"
            debug="true"
            xmlfile="${basedir}/wsdd/AuthenticationService/deploy.wsdd"
            />
    </target>
    <target name="authentication.service.undeploy.live" depends="axis.tasks">
        <!-- Wait for the Axis service -->
        <antcall target="axis.wait"/>
        <!-- Deploy our authenticationService service -->
        <axis.admin
            port="${axis.port}"
            hostname="${axis.host}"
            servletpath="/${axis.servlet}/services/AdminService"
            debug="true"
            xmlfile="${basedir}/wsdd/AuthenticationService/undeploy.wsdd"
            />
    </target>

    <target name="authentication.service.axis2wsdl" depends="">
        <echo message=""/>
        <echo message="Requesting WSDL from Axis ...."/>
        <!-- Create our wsdl directory -->
        <mkdir dir="${authentication.build}/wsdl/axis2wsdl"/>
        <!-- Request our WSDL description -->
        <get verbose="true" usetimestamp="true"
            src="${axis.url}/services/AuthenticationService?wsdl"
            dest="${authentication.build}/wsdl/axis2wsdl/AuthenticationService.wsdl"
            />
    </target>
    

    <!--+
        | Deploy our policy services.
        | If we were just copying our classes into the Axis/WEB-INF/classes directory, then no need to re-load Axis.
        | Because we are installing our classes as a jar file into the Axis/WEB-INF/lib directory, we need to re-load Axis before we can deploy the service.
        +-->
    <target name="authentication.DEPLOY" depends="authentication.server.jar">
        <!-- Install our jar file -->
        <antcall target="authentication.server.install"/>
        <!-- Reload Axis -->
        <antcall target="axis.webapp.reload"/>
        <!-- Deploy our service -->
        <antcall target="authentication.service.deploy.live"/>
        <!-- Check we can read our service WSDL -->
        <antcall target="authentication.service.axis2wsdl"/>
    </target>

    <!--+
        | Remove our policy service.
        +-->
    <target name="authentication.REMOVE" depends="">
        <!-- Remove our service -->
        <antcall target="authentication.server.undeploy"/>
        <antcall target="authentication.server.remove"/>
    </target>

    <!--+
        | Reload our policy service.
        +-->
    <target name="authentication.RELOAD" depends="">
        <!-- Remove our service -->
        <antcall target="authentication.REMOVE"/>
        <!-- Deploy our service -->
        <antcall target="authentication.DEPLOY"/>
    </target>

    <!--+
        | Run our server side JUnit tests.
        +-->
    <target name="authentication.server.junit" depends="authentication.test.javac,authentication.testSetupJunit,hsqldb.delete">
        <!-- Create our reports directory -->
        <mkdir dir="${authentication.build}/junit"/>
        <!-- Run our JUnitTestCase tests -->
        <junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath>
                <!-- The Policy classes -->
                <path refid="authentication.server.classpath"/>
                <pathelement location="${authentication.build}/testclasses/"/>
            </classpath>
            <!-- Generate an XML log file -->
            <formatter type="xml"/>
            <!-- Pass in the server config properties -->
            <!-- Run the target JUnitTestCase tests -->
            <batchtest todir="${authentication.build}/junit">
                <fileset dir="${authentication.build}/testclasses">
                   <exclude name="**/delegate/**"/>
                   <exclude name="**/HsqlDBInMemTestCase.class"/>
                   <exclude name="**/UnitTestData.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!--+
        | Run our client JUnit tests.
        +-->
    <target name="authentication.client.junit" depends="authentication.test.javac">
        <!-- Create our reports directory -->
        <mkdir dir="${authentication.build}/junit"/>
        <antcall target="authentication.database.showtestdata"></antcall>
        <!-- Run our JUnitTestCase tests -->
        <junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath>
                <!-- The Policy classes -->
                <path refid="authentication.client.classpath"/>
                <pathelement location="${authentication.build}/testclasses/"/>
            </classpath>
            <!-- Generate an XML log file -->
            <formatter type="xml"/>
            <!-- Run the target JUnitTestCase tests -->
            <batchtest todir="${authentication.build}/junit" haltonfailure="no">
                <fileset dir="${authentication.build}/testclasses/">
                    <include name="**/delegate/**"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="authentication.database.loadtestdata" depends="">
        <sql driver="org.hsqldb.jdbcDriver"
             url="${hsqldb.url}"
             classpathref="hsqldb.classpath"
             userid="${hsqldb.user}"
             password="${hsqldb.pass}"
             print="true"
             src="${auth.testdir}/java/org/astrogrid/community/common/db/testData.sql"
            />
    </target>
        <target name="authentication.database.showtestdata" depends="">
        <sql driver="org.hsqldb.jdbcDriver"
             url="${hsqldb.url}"
             classpathref="hsqldb.classpath"
             userid="${hsqldb.user}"
             password="${hsqldb.pass}"
             print="true"
            >
            <![CDATA[
                SELECT * FROM accounts    ;
                SELECT * FROM securitytokens;
            ]]>
        </sql>
    </target>
    

    <!--+
        | Test our policy service.
        +-->
    <target name="authentication.TEST" depends="authentication.testSetup">
        <!-- Reset our database -->
        <antcall target="hsqldb.database.delete"/>
        <!-- Run our server side tests -->
        <antcall target="authentication.server.junit"/>
        <!-- Run our client side tests -->
        <antcall target="authentication.client.junit"/>
        <!-- Display our database -->
        <antcall target="hsqldb.database.select"/>
    </target>

    <!-- ================ Project tasks ================ -->
    <!--+
        | Download our 3rd party components.
        +-->
    <target name="project.SETUP" depends="init">
        <antcall target="jaf.SETUP"/>
        <antcall target="axis.SETUP"/>
        <antcall target="junit.SETUP"/>
        <antcall target="castor.SETUP"/>
        <antcall target="xerces.SETUP"/>
        <antcall target="jconfig.SETUP"/>
        <antcall target="hsqldb.SETUP"/>
        <antcall target="tomcat.SETUP"/>
    </target>

    <!--+
        | Reset our 3rd party components.
        +-->
    <target name="project.RESET" depends="init">
        <echo message=""/>
        <echo message="Resetting project components ...."/>
        <antcall target="axis.RESET"/>
        <antcall target="hsqldb.RESET"/>
        <antcall target="tomcat.RESET"/>
        <echo message=""/>
        <echo message="Ok, project components reset."/>
    </target>

    <!--+
        | Prepare our 3rd party components.
        +-->
    <target name="project.PREPARE" depends="init">
        <echo message=""/>
        <echo message="Preparing project components ...."/>
        <antcall target="jaf.PREPARE"/>
        <antcall target="axis.PREPARE"/>
        <antcall target="junit.PREPARE"/>
        <antcall target="castor.PREPARE"/>
        <antcall target="xerces.PREPARE"/>
        <antcall target="jconfig.PREPARE"/>
        <antcall target="hsqldb.PREPARE"/>
        <antcall target="tomcat.PREPARE"/>
        <echo message=""/>
        <echo message="Ok, project components prepared."/>
    </target>

    <!--+
        | Install our project WebApps ....
        | Needs Tomcat already running.
        +-->
    <target name="project.WEBAPPS" depends="init">
        <echo message=""/>
        <echo message="Installing project WebApps ...."/>
        <!-- Install our Axis webapp -->
        <antcall target="axis.webapp.install"/>
        <echo message=""/>
        <echo message="Ok, project WebApps installed."/>
    </target>

    <!--+
        | Start Tomcat and install our Webapps.
        +-->
    <target name="tomcat.START" depends="">
        <parallel>
            <!-- Start tomcat in a separate JVM -->
            <sequential>
                <antcall target="tomcat.start"/>
            </sequential>
            <!-- Install our Webapps -->
            <sequential>
                <antcall target="project.WEBAPPS"/>
            </sequential>
        </parallel>
    </target>

    <!--+
        | Start Hsqldb and initialise our database.
        +-->
    <target name="hsqldb.START" depends="">
        <parallel>
            <!-- Start hsqldb in a separate JVM -->
            <sequential>
                <antcall target="hsqldb.start"/>
            </sequential>
            <!-- Initialise our database -->
            <sequential>
                <antcall target="hsqldb.BUILD"/>
            </sequential>
        </parallel>
    </target>

    <!--+
        | Start both the Tomcat and Hsqldb servers.
        +-->
    <target name="project.START" depends="init">
        <!-- Reset all of the components -->
        <antcall target="project.RESET"/>
        <!-- Prepare all of the components -->
        <antcall target="project.PREPARE"/>
        <parallel>
            <!-- Start tomcat in a separate JVM -->
            <sequential>
                <antcall target="tomcat.START"/>
            </sequential>
            <!-- Start hsqldb in a separate JVM -->
            <sequential>
                <antcall target="hsqldb.START"/>
            </sequential>
        </parallel>
    </target>

    <!--+
        | Build our project components.
        +-->
    <target name="project.BUILD" depends="init">
        <antcall target="config.BUILD"/>
        <antcall target="policy.BUILD"/>
        <antcall target="authentication.BUILD"/>
    </target>

    <!--+
        | Deploy our project components.
        +-->
    <target name="project.DEPLOY" depends="init">
        <antcall target="policy.DEPLOY"/>
        <antcall target="authentication.DEPLOY"/>
    </target>

    <!--+
        | Test our project components.
        +-->
    <target name="project.TEST" depends="init">
        <antcall target="policy.TEST"/>
    </target>

    <!--+
        | Build and test our project components.
        +-->
    <target name="project.RETEST" depends="init">
        <antcall target="project.BUILD"/>
        <antcall target="project.DEPLOY"/>
        <antcall target="project.TEST"/>
    </target>

    <!--+
        | Re-build everything from clean.
        +-->
    <target name="project.EVERYTHING" depends="init">
        <!-- Delete everything -->
        <delete dir="build" failonerror="false"/>
        <!-- Install everything -->
        <antcall target="project.SETUP"/>
        <parallel>
            <!-- Start the servers -->
            <sequential>
                <antcall target="project.START"/>
            </sequential>
            <!-- Build and deploy our services -->
            <sequential>
                <antcall target="project.BUILD"/>
                <antcall target="project.DEPLOY"/>
                <antcall target="project.TEST"/>
            </sequential>
        </parallel>
    </target>

    <!--+
        | Create our release jars.
        | TODO - Create an Axis webapp war file for deployment.
        +-->
    <target name="project.release" depends="">

        <!-- Build our jar files -->
        <antcall target="policy.BUILD"/>
        <antcall target="authentication.BUILD"/>
        <!-- Create the release directory -->
        <mkdir dir="release"/>
        <!-- Create the client directories -->
        <mkdir dir="release/client"/>
        <mkdir dir="release/client/jar"/>
        <mkdir dir="release/client/config"/>
        <!-- Copy our community jars -->
        <copy verbose="true" overwrite="true" toDir="release/client/jar">
            <fileset dir="${policy.base}/jar">
                <include name="${policy.client.jar}"/>
            </fileset>
            <fileset dir="${authentication.build}/jar">
                <include name="${authentication.client.jar}"/>
            </fileset>
        </copy>
        <!-- Copy our client config file -->
        <copy verbose="false" overwrite="true"
            file="src/config/astrogrid-community-config.xml"
            toFile="release/client/config/astrogrid-community-config-${project.version}.xml"/>

        <!-- Create the server directories -->
        <mkdir dir="release/server"/>
        <mkdir dir="release/server/jar"/>
        <mkdir dir="release/server/config"/>
        <!-- Copy our community jars -->
        <copy verbose="true" overwrite="true" toDir="release/server/jar">
            <fileset dir="${policy.base}/jar">
                <include name="${policy.client.jar}"/>
                <include name="${policy.server.jar}"/>
            </fileset>
            <fileset dir="${authentication.build}/jar">
                <include name="${authentication.client.jar}"/>
                <include name="${authentication.server.jar}"/>
            </fileset>
        </copy>
        <!-- Copy our database mapping files -->
        <copy verbose="false" overwrite="true"
            file="src/castor/hsqldb/astrogrid-community-database.xml"
            toFile="release/server/config/astrogrid-community-database-${project.version}.xml"/>
        <copy verbose="false" overwrite="true"
            file="src/castor/hsqldb/astrogrid-community-mapping.xml"
            toFile="release/server/config/astrogrid-community-mapping-${project.version}.xml"/>
        <!-- Copy our server config file -->
        <copy verbose="false" overwrite="true"
            file="src/config/astrogrid-community-config.xml"
            toFile="release/server/config/astrogrid-community-config-${project.version}.xml"/>
    </target>




    <!--+
        | TODO - notes
OK Version numbers in our jar files.
OK Snapshot jar files.
Version numbers and build dates in our jar manifest files.

Build a complete Axis web-app.
Deployment Ant tasks.
Deploy off-line into Axis by adding our wsdd to the axis wsdd.
Deploy on-line into Axis by calling the Axis manager task.

Configuration Ant tasks.
Add our JNDI property into the Axis web.xml
Add our JNDI property into the Tomcat server.xml
Add our config files into Axis WEB-INF
Add our config files into Tomcat conf

        |
        +-->

    <!--+
        |
To run from command line.
    project.SETUP
    project.START
Then, in separate command line.
    project.BUILD
    project.DEPLOY
    project.TEST
To repeat
    project.RETEST
        |
        +-->


    <!--+
        | Quick re-test for the database load
        +-->
    <target name="policy.LOAD-TEST" depends="">
        <!-- Build our server code -->
        <antcall target="policy.server.prepare"/>
        <antcall target="policy.server.javac"/>
        <antcall target="policy.server.jar"/>
        <!-- Run our loader tests -->
        <!-- <antcall target="policy.loader.junit"/> -->
        <antcall target="policy.loader">
            <param name="community.name"  value="codon.demon.co.uk"/>
        </antcall>
        <!-- Display our database contents -->
        <antcall target="hsqldb.database.select"/>
    </target>

    <!--+
        | Load our database.
        +-->
    <target name="policy.LOAD" depends="">
        <!-- Run our loader tests -->
        <antcall target="policy.loader">
            <param name="community.name"  value="codon.demon.co.uk"/>
        </antcall>
        <!-- Display our database contents -->
        <antcall target="hsqldb.database.select"/>
    </target>

<!-- Un-attributed stuff -->
<!--
    <property name="logging.home" value="${basedir}/build/logging"></property>
    <path id= "logging.classpath">
    <pathelement location="${logging.home}/commons-logging.jar"/>
    </path>
-->

    <!--+
        | Deploy a service using the admin tools to modify the service.wsdd.
        | This requires the service jars in the Axis lib directory.
        | This does not require the Axis service running.
        | Params :
        |   service.wsdd.path - location of the service deployment descriptor
        +-->
    <target name="axis.deploy.service.static" depends="">
        <java classname="org.apache.axis.utils.Admin"
            dir="${axis.home}/webapp/WEB-INF"
            fork="yes"
            failonerror="true">
            <arg value="server"/>
            <arg value="${service.wsdd.path}"/>
            <classpath>
                <!-- Include all the jars in the Axis lib directory -->
                <fileset dir="${axis.home}/webapp/WEB-INF/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <!--+
        | Deploy our Policy services using the admin tools to modify the service.wsdd.
        | This does not need the Axis service running.
        +-->
    <target name="policy.server.deploy.static" depends="">
        <antcall target="axis.deploy.service.static">
            <param name="service.wsdd.path" value="${policy.service.base}/wsdd/PolicyServiceDeploy.wsdd"/>
        </antcall>
        <antcall target="axis.deploy.service.static">
            <param name="service.wsdd.path" value="${policy.manager.base}/wsdd/PolicyManagerDeploy.wsdd"/>
        </antcall>
    </target>

    <!--+
        | Deploy our Authentication service using the admin tools to modify the service.wsdd.
        | This does not need the Axis service running.
        +-->
    <target name="auth.server.deploy.static" depends="">
        <antcall target="deploy.wsdd">
            <param name="service.wsdd.path" value="${basedir}/wsdd/AuthenticationService/deploy.wsdd"/>
        </antcall>
    </target>

</project>

