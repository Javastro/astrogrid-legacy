<?xml version="1.0"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/Attic/build.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2003/09/24 15:47:37 $</cvs:date>
    | <cvs:version>$Revision: 1.42 $</cvs:version>
    | <cvs:log>
    |   $Log: build.xml,v $
    |   Revision 1.42  2003/09/24 15:47:37  dave
    |   Added policy database loader tools.
    |
    |   Revision 1.41  2003/09/22 13:48:04  dave
    |   Updates to the community/portal build
    |
    |   Revision 1.40  2003/09/19 21:49:56  pah
    |   server junit tests now running of in-memory database
    |
    |   Revision 1.39  2003/09/18 15:50:03  dave
    |   Fixing bugs in configuration
    |
    |   Revision 1.38  2003/09/17 19:47:21  dave
    |   1) Fixed classnotfound problems in the build.
    |   2) Added the JUnit task to add the initial accounts and groups.
    |   3) Got the build to work together with the portal.
    |   4) Fixed some bugs in the Account handling.
    |
    |   Revision 1.37  2003/09/17 15:15:11  pah
    |   got the server side authentication tests task to work
    |
    |   Revision 1.36  2003/09/17 14:07:08  pah
    |   updated where the jars are built to
    |
    |   Revision 1.35  2003/09/17 09:27:28  KevinBenson
    |   aded myspace delegate stuff
    |
    |   Revision 1.34  2003/09/16 22:23:24  pah
    |   authentication unit tests working under eclipse server and client
    |
    |   Revision 1.33  2003/09/16 11:42:46  pah
    |   authentication.BUILD working properly now
    |
    |   Revision 1.32  2003/09/16 11:07:51  pah
    |   authentication service build nearly working
    |
    |   Revision 1.31  2003/09/15 21:51:45  pah
    |   authentication database backend tested
    |
    |   Revision 1.30  2003/09/15 06:42:41  pah
    |   added in test config for authentication
    |
    |   Revision 1.29  2003/09/13 02:18:52  dave
    |   Extended the jConfig configuration code.
    |
    |   Revision 1.28  2003/09/12 11:16:09  KevinBenson
    |   added the jconfig into it.
    |
    |   Revision 1.27  2003/09/11 03:15:06  dave
    |   1) Implemented PolicyService internals - no tests yet.
    |   2) Added getLocalAccountGroups and getRemoteAccountGroups to PolicyManager.
    |   3) Added remote access to groups.
    |
    |   Revision 1.26  2003/09/10 20:49:57  pah
    |   Authentication Service without database backend
    |
    |   Revision 1.25  2003/09/10 06:50:22  dave
    |   Added remote test task
    |
    |   Revision 1.24  2003/09/10 06:03:27  dave
    |   Added remote capability to Accounts
    |
    |   Revision 1.23  2003/09/10 02:56:03  dave
    |   Added PermissionManager and tests
    |
    |   Revision 1.22  2003/09/10 00:08:45  dave
    |   Added getGroupMembers, ResourceIdent and JUnit tests for ResourceManager
    |
    |   Revision 1.21  2003/09/09 19:21:18  KevinBenson
    |   added ResourceManager include to the build.xml
    |
    |   Revision 1.20  2003/09/09 18:46:08  pah
    |   athorization build more in line with eclipse and other workgroup structures
    |
    |   Revision 1.19  2003/09/09 17:24:36  pah
    |   some more authorization tasks added - wip - committed to reduce conflicts
    |
    |   Revision 1.18  2003/09/09 14:51:47  dave
    |   Added delGroupMember - only local accounts and groups to start with.
    |
    |   Revision 1.17  2003/09/09 13:48:09  dave
    |   Added addGroupMember - only local accounts and groups to start with.
    |
    |   Revision 1.16  2003/09/09 10:02:17  dave
    |   Fixed problems introduced by conflicts.
    |
    |   Revision 1.15  2003/09/08 21:01:28  dave
    |   Added PATCH to build.xml to include classes in Castor mapping - still broke though
    |
    |   Revision 1.14  2003/09/08 20:28:50  dave
    |   Added CommunityIdent, with isLocal() and isValid()
    |
    |   Revision 1.13  2003/09/08 16:02:47  KevinBenson
    |   finally an authentication piece that is building.
    |
    |   Revision 1.12  2003/09/08 11:01:35  KevinBenson
    |   A check in of the Authentication authenticateToken roughdraft and some changes to the groudata and community data
    |   along with an AdministrationDelegate
    |
    |   Revision 1.11  2003/09/07 11:29:41  pah
    |   added some initial authentication targets
    |
    |   Revision 1.10  2003/09/06 20:10:06  dave
    |   Split PolicyManager into separate components.
    |
    |   Revision 1.9  2003/09/04 23:58:10  dave
    |   Experimenting with using our own DataObjects rather than the Axis generated ones ... seems to work so far
    |
    |   Revision 1.8  2003/09/04 23:33:05  dave
    |   Implemented the core account manager methods - needs data object to return results
    |
    |   Revision 1.7  2003/09/03 16:12:05  dave
    |   Fixed hard coded database address in build.xml
    |
    |   Revision 1.6  2003/09/03 16:06:01  dave
    |   Fixed axis wait in build.xml
    |
    |   Revision 1.5  2003/09/03 15:43:49  dave
    |   Added extra wait to Axis reload
    |
    |   Revision 1.4  2003/09/03 15:23:33  dave
    |   Split API into two services, PolicyService and PolicyManager
    |
    |   Revision 1.3  2003/09/03 10:42:19  dave
    |   Fixed missing task in build.xml
    |
    |   Revision 1.2  2003/09/03 06:39:13  dave
    |   Rationalised things into one set of SOAP stubs and one set of data objects for both client and server.
    |
    |   Revision 1.1  2003/08/28 17:33:56  dave
    |   Initial policy prototype
    |
    | </cvs:log>
    |
    +-->
<project default="init" basedir="." name="Community">

	<!-- Project build properties -->
	<property name="project.home"    value="${basedir}"/>
	<property name="project.name"    value="ast-policy"/>
	<property name="project.version" value="1.0"/>
	<property name="testdir" value="${basedir}/test"></property>
	<property name="installkitdir" value="${basedir}/install"></property>

	<!--+
		| User preferences.
		| This is where to put local properties eg.tomcat installation path.
		+-->
	<property file="${user.home}/ant.properties"/>

	<!--+
		| Prefix for system properties.
		+-->
	<property environment="env"/>

	<!-- ================ Project tasks ================ -->
	<!-- Initialise the build environment -->
	<target name="init">
		<!-- Prefix for system environment properties -->
		<property environment="env"/>

		<!-- Build timestamp -->
		<tstamp>
			<format property="build.time" pattern="yyyy.MM.dd.HH.mm.ss"/>
			<format property="build.date" pattern="yyyy.MM.dd"/>
		</tstamp>

		<!-- Build name -->
		<property name="build.name" value="${project.name}-${project.version}"/>

		<!-- Display the current settings -->
		<echo message="os.name      : ${os.name}"/>
		<echo message="os.arch      : ${os.arch}"/>
		<echo message="os.version   : ${os.version}"/>
		<echo message=""/>

		<echo message="user.home    : ${user.home}"/>
		<echo message=""/>

		<echo message="java.version : ${java.version}"/>
		<echo message="java.home    : ${java.home}"/>
		<echo message="JAVA.HOME    : ${env.JAVA_HOME}"/>
		<echo message=""/>

		<echo message="ant.version  : ${ant.version}"/>
		<echo message="ant.home     : ${ant.home}"/>
		<echo message=""/>

		<echo message="junit.version : ${junit.version}"/>
		<echo message="junit.home    : ${junit.home}"/>
		<echo message=""/>

		<echo message="castor.version : ${castor.version}"/>
		<echo message="castor.home    : ${castor.home}"/>
		<echo message=""/>

		<echo message="hsqldb.version : ${hsqldb.version}"/>
		<echo message="hsqldb.home    : ${hsqldb.home}"/>
		<echo message=""/>

		<echo message="tomcat.version : ${tomcat.version}"/>
		<echo message="tomcat.home    : ${tomcat.home}"/>
		<echo message="tomcat.url     : ${tomcat.url}"/>
		<echo message=""/>

		<echo message="axis.version   : ${axis.version}"/>
		<echo message="axis.home      : ${axis.home}"/>
		<echo message="axis.url       : ${axis.url}"/>
		<echo message=""/>

		<echo message="build.home     : ${basedir}"/>
		<echo message="build.file     : ${ant.file}"/>
		<echo message="build.date     : ${build.date}"/>
		<echo message="build.time     : ${build.time}"/>
	</target>

	<!-- ================ Ant tasks ================ -->
	<!--+
		| The Ant library classpath.
		+-->
	<path id="ant.classpath">
		<pathelement location="${ant.home}/lib/ant.jar"/>
		<pathelement location="${ant.home}/lib/optional.jar"/>
	</path>
	
	<!--+
		| Run an Ant task in a forked VM.
		| Requires two properties, the task in task.name and a path refenece in task.path.
		| This allows us more control over the classpath.
		+-->
	<target name="java.ant" depends="init">
		<java fork="true" classname="org.apache.tools.ant.Main">
			<classpath>
				<path refid="${task.classpath}"/>
			</classpath>
			<arg value="${task.name}"/>
		</java>
	</target>

	<!-- ================ JUnit tasks ================ -->
	<!--+
		| There is a classloader problem with JUnit.
		| To run a junit task, the JUnit binary needs to be in the main Ant classpath.
		| This means that we need to JUnit library in our classpath before we launch Ant.
		| I havn't found a nice fix for this yet, so you need to have the Junit library in your classpath.
		+-->
	<!--+
		| JUnit properties.
		+-->
	<property name="junit.base"    value="${basedir}/build/junit"/>
	<property name="junit.version" value="3.8.1"/>
	<property name="junit.name"    value="junit${junit.version}"/>
	<property name="junit.dist"    value="http://belnet.dl.sourceforge.net/sourceforge/junit/junit${junit.version}.zip"/>
	<property name="junit.home"    value="${junit.base}/${junit.name}"/>

	<!--+
		| The JUnit library classpath.
		+-->
	<path id="junit.classpath">
		<pathelement location="${junit.home}/junit.jar"/>
	</path>

	<!--+
		| Delete the JUnit directory.
		+-->
	<target name="junit.delete" depends="">
		<delete dir="${junit.base}"/>
	</target>

	<!--+
		| Download the JUnit binary.
		+-->
	<target name="junit.dist.fetch" depends="">
		<mkdir dir="${junit.base}"/>
		<get verbose="true" usetimestamp="true"
			src="${junit.dist}"
			dest="${junit.base}/junit-${junit.version}.zip"
			/>
	</target>

	<!--+
		| Unzip the JUnit binary.
		+-->
	<target name="junit.dist.unzip" depends="">
		<unzip src="${junit.base}/junit-${junit.version}.zip" dest="${junit.base}"/>
	</target>

	<!--+
		| Install JUnit.
		+-->
	<target name="junit.INSTALL" depends="">
		<antcall target="junit.dist.fetch"/>
		<antcall target="junit.dist.unzip"/>
	</target>

	<!--+
		| Prepare JUnit.
		+-->
	<target name="junit.PREPARE" depends="">
	</target>

	<!--+
		| Run a set of JUnit tests in the current VM.
		| This task is designed to be called from a forked VM to give us more control over the classpath.
		+-->
	<target name="junit.task" depends="">
		<!-- Create our reports directory -->
		<mkdir dir="${junit.target}/junit"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="yes" haltonerror="yes" showoutput="yes" fork="false">
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run all the target JUnitTestCase tests -->
			<batchtest todir="${junit.target}/junit">
				<fileset dir="${junit.target}/classes">
					<include name="**/junit/**/JUnitTestCase.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
		| Install the JUnit javadoc as a webapp.
		+-->
	<target name="junit.docs.install" depends="tomcat.tasks">
		<echo message=""/>
		<echo message="Installing JUnit documentation ...."/>
		<!-- Copy the web.xml file -->
		<copy file="src/webapps/docs/WEB-INF/web.xml" todir="${junit.home}/javadoc/WEB-INF"/>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our webapp -->
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/junit-docs" war="file://${junit.home}/javadoc"/>
	</target>

<!--+
	| Useful JUnit tools ....
	| http://jtestcase.sourceforge.net/
	| http://xmlunit.sourceforge.net/
	+-->

	<!-- ================ Tomcat tasks ================ -->
	<!--+
		| Tomcat properties.
		+-->
	<property name="tomcat.home"    value="/usr/java/servers/tomcat/jakarta-tomcat-4.1.24-LE-jdk14"/>
	<property name="tomcat.host"    value="localhost"/>
	<property name="tomcat.port"    value="8080"/>
	<property name="tomcat.server"  value="${tomcat.host}:${tomcat.port}"/>
	<property name="tomcat.url"     value="http://${tomcat.server}"/>
	<property name="tomcat.timeout" value="60"/>

	<!--+
		| Tomcat manager properties.
		+-->
	<property name="tomcat.manager.url"      value="${tomcat.url}/manager"/>
	<property name="tomcat.manager.username" value="astrogrid"/>
	<property name="tomcat.manager.password" value="please"/>

	<!--+
		| Bootstrap classpath for Tomcat
		+-->
	<path id="tomcat.classpath.bootstrap">
		<pathelement location="${env.JAVA_HOME}/lib/tools.jar"/>
		<pathelement location="${tomcat.home}/bin/bootstrap.jar"/>
	</path>

	<!--+
		| Endorsed libraries for Tomcat.
		+-->
	<path id="tomcat.classpath.endorsed">
		<pathelement path="${tomcat.home}/bin"/>
		<pathelement path="${tomcat.home}/common/endorsed"/>
	</path>

	<!--+
		| Tomcat servlet libraries.
		+-->
	<path id="tomcat.classpath.servlet">
		<pathelement location="${tomcat.home}/common/lib/servlet.jar"/>
	</path>

	<!-- Define the Tomcat manager tasks -->
	<target name="tomcat.tasks" depends="">
		<taskdef name="tomcat.deploy"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.DeployTask"/>
		<taskdef name="tomcat.install"   classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.InstallTask"/>
		<taskdef name="tomcat.list"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ListTask"/>
		<taskdef name="tomcat.reload"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ReloadTask"/>
		<taskdef name="tomcat.remove"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RemoveTask"/>
		<taskdef name="tomcat.resources" classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ResourcesTask"/>
		<taskdef name="tomcat.roles"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RolesTask"/>
		<taskdef name="tomcat.start"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StartTask"/>
		<taskdef name="tomcat.stop"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StopTask"/>
		<taskdef name="tomcat.undeploy"  classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.UndeployTask"/>
	</target>

	<!--+
		| Start Tomcat in a separate VM.
		+-->
	<target name="tomcat.start" depends="">
		<!-- Start Tomcat in a separate VM -->
		<java taskname="tomcat" classname="org.apache.catalina.startup.Bootstrap" fork="true" dir="${tomcat.home}/bin">
			<!-- Use the bootstrap classpath -->
			<classpath refid="tomcat.classpath.bootstrap"/>
			<!-- These replace the -D command line arguments -->
			<sysproperty key="java.endorsed.dirs" path="${tomcat.classpath.endorsed}"/>
			<sysproperty key="catalina.base"      path="${tomcat.home}"/>
			<sysproperty key="catalina.home"      path="${tomcat.home}"/>
			<sysproperty key="java.io.tmpdir"     path="${tomcat.home}/temp"/>
			<!-- Select the server JVM (fails on Linux JDK 1.4.0) -->
			<!-- <jvmarg value="-server"/> -->
			<!-- Args for the Tomcat Bootstrap class -->
			<arg value="start"/>
		</java>
	</target>

	<!--+
		| Stop Tomcat.
		+-->
	<target name="tomcat.stop" depends="">
		<!-- Stop Tomcat -->
		<java taskname="tomcat" classname="org.apache.catalina.startup.Bootstrap" fork="true">
			<!-- Use the bootstrap classpath -->
			<classpath refid="tomcat.classpath.bootstrap"/>
			<!-- These replace the -D command line arguments -->
			<sysproperty key="java.endorsed.dirs" path="${tomcat.classpath.endorsed}"/>
			<sysproperty key="catalina.base"      path="${tomcat.home}"/>
			<sysproperty key="catalina.home"      path="${tomcat.home}"/>
			<sysproperty key="java.io.tmpdir"     path="${tomcat.home}/temp"/>
			<!-- Select the server JVM (fails on Linux JDK 1.4.0) -->
			<!-- <jvmarg value="-server"/> -->
			<!-- Args for the Tomcat Bootstrap class -->
			<arg value="stop"/>
		</java>
	</target>

	<!--+
		| Wait for Tomcat to respond.
		+-->
	<target name="tomcat.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Tomcat ...."/>
		<echo message="URL : ${tomcat.url}/"/>
		<waitfor maxwait="60" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.url}/"/>
		</waitfor>
	</target>

	<!--+
		| Wait for Tomcat manager to respond.
		+-->
	<target name="tomcat.manager.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Tomcat manager ...."/>
		<echo message="URL : ${tomcat.manager.url}/"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.manager.url}/"/>
		</waitfor>
	</target>

	<!--+
		| Delete the Tomcat working files.
		+-->
	<target name="tomcat.clean.work" depends="">
		<echo message=""/>
		<echo message="Cleaning Tomcat temp files ...."/>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tomcat.home}/work" includes="**"/>
		</delete>
		<echo message="Cleaning Tomcat log files ...."/>
		<delete failonerror="false">
			<fileset dir="${tomcat.home}/logs" includes="*"/>
		</delete>
	</target>

	<!--+
		| Delete the Tomcat endorsed libraries
		+-->
	<target name="tomcat.clean.endorsed">
		<echo message="Cleaning Tomcat endorsed libraries ...."/>
		<delete verbose="false" failonerror="false">
			<fileset dir="${tomcat.home}/common/endorsed">
				<include name="*.jar"/>
				<include name="**.jar"/>
			</fileset>
		</delete>
	</target>

	<!--+
		| Install Tomcat.
		+-->
	<target name="tomcat.INSTALL" depends="">
		<!-- Project assumes Tomcat is installed -->
	</target>

	<!--+
		| Prepare Tomcat.
		+-->
	<target name="tomcat.PREPARE" depends="">
	</target>

	<!--+
		| Reset Tomcat.
		+-->
	<target name="tomcat.RESET" depends="">
		<antcall target="tomcat.clean.work"/>
		<antcall target="tomcat.clean.endorsed"/>
	</target>

	<!-- ================ Castor tasks ================ -->
	<!--+
		| Castor properties.
		+-->
	<property name="castor.base"    value="${basedir}/build/castor"/>
	<property name="castor.version" value="0.9.5"/>
	<property name="castor.dist"    value="ftp://ftp.exolab.org/pub/castor/castor_${castor.version}/castor-${castor.version}.zip"/>
	<property name="castor.home"    value="${castor.base}/castor-${castor.version}"/>

	<!--+
		| The Castor library classpath.
		+-->
	<path id="castor.classpath">
		<pathelement location="${castor.home}/castor-${castor.version}.jar"/>
		<pathelement location="${castor.home}/castor-${castor.version}-xml.jar"/>
	</path>

	<!--+
		| Delete the Castor directory.
		+-->
	<target name="castor.delete" depends="">
		<delete dir="${castor.base}"/>
	</target>

	<!--+
		| Download the Castor binary.
		+-->
	<target name="castor.dist.fetch" depends="">
		<mkdir dir="${castor.base}"/>
		<get verbose="true" usetimestamp="true"
			src="${castor.dist}"
			dest="${castor.base}/castor-${castor.version}.zip"
			/>
	</target>

	<!--+
		| Unzip the Castor binary.
		+-->
	<target name="castor.dist.unzip" depends="">
		<unzip src="${castor.base}/castor-${castor.version}.zip" dest="${castor.base}"/>
	</target>

	<!--+
		| Unzip the Castor examples.
		+-->
	<target name="castor.examples.unzip" depends="">
		<unzip src="${castor.home}/examples.zip" dest="${castor.home}"/>
	</target>

	<!--+
		| Install Castor.
		+-->
	<target name="castor.INSTALL" depends="">
		<antcall target="castor.dist.fetch"/>
		<antcall target="castor.dist.unzip"/>
	</target>

	<!--+
		| Prepare Castor.
		+-->
	<target name="castor.PREPARE" depends="">
	</target>

	<!--+
		| Install the Castor javadoc as a webapp.
		+-->
	<target name="castor.docs.install" depends="tomcat.tasks">
		<echo message=""/>
		<echo message="Installing Castor documentation ...."/>
		<!-- Copy the web.xml file -->
		<copy file="src/webapps/docs/WEB-INF/web.xml" todir="${castor.home}/doc/WEB-INF"/>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our webapp -->
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/castor-docs" war="file://${castor.home}/doc"/>
	</target>

	<!-- ================ Xerces tasks ================ -->
	<!--+
		| Xerces properties.
		+-->
	<property name="xerces.base"    value="${basedir}/build/xerces"/>
	<property name="xerces.version" value="2.5.0"/>
	<property name="xerces.name"    value="xerces-2_5_0"/>
	<property name="xerces.dist"    value="http://xml.apache.org/dist/xerces-j/Xerces-J-bin.${xerces.version}.zip"/>
	<property name="xerces.home"    value="${xerces.base}/${xerces.name}"/>

	<!--+
		| The Xerces library classpath.
		+-->
	<path id="xerces.classpath">
		<pathelement location="${xerces.home}/xml-apis.jar"/>
		<pathelement location="${xerces.home}/xercesImpl.jar"/>
	</path>

	<!--+
		| Delete the Xerces directory.
		+-->
	<target name="xerces.delete" depends="">
		<delete dir="${xerces.base}"/>
	</target>

	<!--+
		| Download the Xerces binary.
		+-->
	<target name="xerces.dist.fetch" depends="">
		<mkdir dir="${xerces.base}"/>
		<get verbose="true" usetimestamp="true"
			src="${xerces.dist}"
			dest="${xerces.base}/xerces-${xerces.version}.zip"
			/>
	</target>

	<!--+
		| Unzip the Xerces binary.
		+-->
	<target name="xerces.dist.unzip" depends="">
		<unzip src="${xerces.base}/xerces-${xerces.version}.zip" dest="${xerces.base}"/>
	</target>

	<!--+
		| Install Xerces.
		+-->
	<target name="xerces.INSTALL" depends="">
		<antcall target="xerces.dist.fetch"/>
		<antcall target="xerces.dist.unzip"/>
	</target>

	<!--+
		| Prepare Xerces.
		+-->
	<target name="xerces.PREPARE" depends="">
	</target>

	<!--+
		| Install the Xerces docs as a webapp.
		+-->
	<target name="xerces.docs.install" depends="tomcat.tasks">
		<echo message=""/>
		<echo message="Installing Xerces documentation ...."/>
		<!-- Copy the web.xml file -->
		<copy file="src/webapps/docs/WEB-INF/web.xml" todir="${xerces.home}/docs/WEB-INF"/>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our webapp -->
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/xerces-docs" war="file://${xerces.home}/docs"/>
	</target>
	
	<property name="logging.home" value="${basedir}/build/logging"></property>
	<path id= "logging.classpath">
	<pathelement location="${logging.home}/commons-logging.jar"/>
	</path>

	<!-- ================ JConfig tasks ================ -->
	<!--+
		| JConfig properties.
		+-->
	<property name="jconfig.base"    value="${basedir}/build/jconfig"/>
	<property name="jconfig.name"    value="jConfig"/>
	<property name="jconfig.version" value="2.2"/>
	<property name="jconfig.dist"    value="http://belnet.dl.sourceforge.net/sourceforge/jconfig/jconfig-bin-v${jconfig.version}.zip"/>
	<property name="jconfig.home"    value="${jconfig.base}/${jconfig.name}"/>

	<!--+
		| The JConfig library classpath.
		+-->
	<path id="jconfig.classpath">
		<pathelement location="${jconfig.home}/dist/jconfig.jar"/>
	</path>

	<!--+
		| Delete the JConfig directory.
		+-->
	<target name="jconfig.delete" depends="">
		<delete dir="${jconfig.base}"/>
	</target>

	<!--+
		| Download the JConfig binary.
		+-->
	<target name="jconfig.dist.fetch" depends="">
		<mkdir dir="${jconfig.base}"/>
		<get verbose="true" usetimestamp="true"
			src="${jconfig.dist}"
			dest="${jconfig.base}/jconfig-${jconfig.version}.zip"
			/>
	</target>

	<!--+
		| Unzip the JConfig binary.
		+-->
	<target name="jconfig.dist.unzip" depends="">
		<unzip src="${jconfig.base}/jconfig-${jconfig.version}.zip" dest="${jconfig.base}"/>
	</target>

	<!--+
		| Install JConfig.
		+-->
	<target name="jconfig.INSTALL" depends="">
		<antcall target="jconfig.dist.fetch"/>
		<antcall target="jconfig.dist.unzip"/>
	</target>

	<!--+
		| Prepare JConfig.
		+-->
	<target name="jconfig.PREPARE" depends="">
	</target>

	<!--+
		| Install the JConfig docs as a webapp.
		+-->
	<target name="jconfig.docs.install" depends="tomcat.tasks">
		<echo message=""/>
		<echo message="Installing JConfig documentation ...."/>
		<!-- Copy the web.xml file -->
		<copy file="src/webapps/docs/WEB-INF/web.xml" todir="${jconfig.home}/javadoc/WEB-INF"/>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our webapp -->
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/jconfig-docs" war="file://${jconfig.home}/javadoc"/>
	</target>

	<!-- ================ Hsqldb tasks ================ -->
	<!--+
		| Hsqldb properties.
		+-->
	<property name="hsqldb.base"     value="${basedir}/build/hsqldb"/>
	<property name="hsqldb.version"  value="1_7_1"/>
	<property name="hsqldb.name"     value="hsqldb"/>
	<property name="hsqldb.dist"     value="http://belnet.dl.sourceforge.net/sourceforge/hsqldb/hsqldb_${hsqldb.version}.zip"/>
	<property name="hsqldb.home"     value="${hsqldb.base}/${hsqldb.name}"/>
	<property name="hsqldb.data"     value="${hsqldb.base}/data"/>
	<property name="hsqldb.host"     value="localhost"/>
	<property name="hsqldb.port"     value="9001"/>
	<property name="hsqldb.database" value="policy"/>
	<property name="hsqldb.user"     value="sa"/>
	<property name="hsqldb.pass"     value="veritas"/>
	<property name="hsqldb.timeout"  value="60"/>

	<property name="hsqldb.url"      value="jdbc:hsqldb:hsql://${hsqldb.host}:${hsqldb.port}"/>

	<!--+
		| The Hsqldb library classpath.
		+-->
	<path id="hsqldb.classpath">
		<pathelement location="${hsqldb.home}/lib/hsqldb.jar"/>
	</path>

	<!--+
		| Delete the Hsqldb directory.
		+-->
	<target name="hsqldb.delete" depends="">
		<delete dir="${hsqldb.base}"/>
	</target>

	<!--+
		| Download the Hsqldb binary.
		+-->
	<target name="hsqldb.dist.fetch" depends="">
		<mkdir dir="${hsqldb.base}"/>
		<get verbose="true" usetimestamp="true"
			src="${hsqldb.dist}"
			dest="${hsqldb.base}/hsqldb-${hsqldb.version}.zip"
			/>
	</target>

	<!--+
		| Unzip the Hsqldb binary.
		+-->
	<target name="hsqldb.dist.unzip" depends="">
		<unzip src="${hsqldb.base}/hsqldb-${hsqldb.version}.zip" dest="${hsqldb.base}"/>
	</target>

	<!--+
		| Install Hsqldb.
		+-->
	<target name="hsqldb.INSTALL" depends="">
		<antcall target="hsqldb.dist.fetch"/>
		<antcall target="hsqldb.dist.unzip"/>
	</target>

	<!--+
		| Prepare Hsqldb.
		+-->
	<target name="hsqldb.PREPARE" depends="">
	</target>

	<!--+
		| Create the Hsqldb server properties.
		| Can be overriden by command line args in hsqldb.start.
		+-->
	<target name="hsqldb.properties" depends="">
		<echo message=""/>
		<echo message="Creating Hsqldb properties ...."/>
		<mkdir dir="${hsqldb.data}"/>
		<!-- Create the properties file -->
		<propertyfile file="${hsqldb.data}/server.properties" comment="Hqsldb server config">
			<entry key="server.port"           value="${hsqldb.port}"/>
			<entry key="server.database"       value="${hsqldb.database}"/>
			<entry key="server.no_system_exit" value="true"/>
		</propertyfile>
	</target>

	<!--+
		| Start the Hsqldb database server.
		+-->
	<target name="hsqldb.start" depends="">
		<echo message=""/>
		<echo message="Starting Hqsldb ...."/>
		<mkdir dir="${hsqldb.data}"/>
		<java taskname="hsqldb" classname="org.hsqldb.Server" fork="true" dir="${hsqldb.data}">
			<!-- Use the Hsqldb classpath -->
			<classpath refid="hsqldb.classpath"/>
			<!-- Args for the Hsqldb server -->
			<arg value="-database"/>
			<arg value="${hsqldb.database}"/>
			<arg value="-port"/>
			<arg value="${hsqldb.port}"/>
		</java>
	</target>

	<!--+
		| Stop the Hsqldb database server.
		+-->
	<target name="hsqldb.stop" depends="">
		<echo message=""/>
		<echo message="Stopping Hqsldb ...."/>
		<java taskname="hsqldb" classname="org.hsqldb.util.ShutdownServer" fork="true" dir="${hsqldb.data}">
			<!-- Use the Hsqldb classpath -->
			<classpath refid="hsqldb.classpath"/>
			<!-- Args for the Hsqldb server -->
			<arg value="-url"/>
			<arg value="${hsqldb.url}"/>
			<arg value="-user"/>
			<arg value="${hsqldb.user}"/>
			<arg value="-password"/>
			<arg value="${hsqldb.pass}"/>
			<arg value="-shutdownarg"/>
			<arg value=""/>
		</java>
	</target>

	<!--+
		| Wait for the Hsqldb database to start.
		+-->
	<target name="hsqldb.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Hqsldb ...."/>
		<waitfor maxwait="${hsqldb.timeout}" maxwaitunit="second" checkevery="500">
			<socket server="${hsqldb.host}" port="${hsqldb.port}"/>
		</waitfor>
	</target>

	<!--+
		| Initialise the Hsqldb database.
		| This only needs to run once, when a new database is created.
		+-->
	<target name="hsqldb.database.init" depends="">
		<echo message=""/>
		<echo message="Initialising Hqsldb ...."/>
		<sql driver="org.hsqldb.jdbcDriver"
		     url="${hsqldb.url}"
		     classpathref="hsqldb.classpath"
		     userid="sa"
		     password=""
		     print="true"
			>
			<![CDATA[
				set password "${hsqldb.pass}" ;
			]]>
		</sql>
	</target>

	<!--+
		| Create our database tables.
		+-->
	<target name="hsqldb.database.create" depends="">
		<echo message=""/>
		<echo message="Creating Hqsldb tables ...."/>
		<sql driver="org.hsqldb.jdbcDriver"
		     url="${hsqldb.url}"
		     classpathref="hsqldb.classpath"
		     userid="${hsqldb.user}"
		     password="${hsqldb.pass}"
		     print="true"
			>
			<transaction src="src/sql/hsqldb/create.sql"/>
		</sql>
	</target>

	<!--+
		| Delete our Hsqldb data.
		+-->
	<target name="hsqldb.data.delete" depends="">
		<delete dir="${hsqldb.data}" failonerror="false"/>
	</target>

	<!--+
		| Build our Hsqldb database.
		+-->
	<target name="hsqldb.BUILD" depends="">
		<antcall target="hsqldb.wait"/>
		<antcall target="hsqldb.database.init"/>
		<antcall target="hsqldb.database.create"/>
	</target>

	<!--+
		| Reset our Hsqldb database.
		+-->
	<target name="hsqldb.RESET" depends="">
		<antcall target="hsqldb.data.delete"/>
	</target>

	<!--+
		| Install the Hsqldb docs as a webapp.
		+-->
	<target name="hsqldb.docs.install" depends="tomcat.tasks">
		<echo message=""/>
		<echo message="Installing Hsqldb documentation ...."/>
		<!-- Copy the web.xml file -->
		<copy file="src/webapps/docs/WEB-INF/web.xml" todir="${hsqldb.home}/doc/WEB-INF"/>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our webapp -->
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/hsqldb-docs" war="file://${hsqldb.home}/doc"/>
	</target>

	<!-- ================ Database tasks ================ -->

	<!--+
		| Select all rows from our database tables.
		+-->
	<target name="hsqldb.database.select" depends="">
		<sql driver="org.hsqldb.jdbcDriver"
		     url="${hsqldb.url}"
		     classpathref="hsqldb.classpath"
		     userid="${hsqldb.user}"
		     password="${hsqldb.pass}"
		     print="true"
			>
			<![CDATA[
				SELECT * FROM communities ;
				SELECT * FROM accounts    ;
				SELECT * FROM groups      ;
				SELECT * FROM resources   ;
				SELECT * FROM members     ;
				SELECT * FROM permissions ;
			]]>
		</sql>
	</target>

	<!--+
		| Delete all rows from our database tables.
		+-->
	<target name="hsqldb.database.delete" depends="">
		<sql driver="org.hsqldb.jdbcDriver"
		     url="${hsqldb.url}"
		     classpathref="hsqldb.classpath"
		     userid="${hsqldb.user}"
		     password="${hsqldb.pass}"
		     print="true"
			>
			<![CDATA[
				DELETE FROM groups      ;
				DELETE FROM members     ;
				DELETE FROM accounts    ;
				DELETE FROM resources   ;
				DELETE FROM communities ;
				DELETE FROM permissions ;
			]]>
		</sql>
	</target>

	<!-- ================ JAF tasks ================ -->
	<!--+
		| We only need this to install activation.jar into the Tomcat endorsed directory for Axis.
		| Once we have the dependencies sorted, this should go.
		| Required with JDK 1.4.2
		| There is a problem with downloading the JAF files, Sun require you to say 'yes' to the licence agreement.
		| This means that we can't just download from a public server using an Ant task.
		| For now, I've included the JAF binary in cvs.
		+-->
	<!--+
		| JAF properties.
		+-->
	<property name="jaf.zip"  value="${basedir}/depends/jaf/jaf-1.0.2.zip"/>
	<property name="jaf.base" value="${basedir}/build/jaf"/>
	<property name="jaf.home" value="${basedir}/build/jaf/jaf-1.0.2"/>

	<!--+
		| Delete the JAF directory.
		+-->
	<target name="jaf.delete" depends="">
		<delete dir="${jaf.base}" failonerror="false"/>
	</target>

	<!--+
		| Unpack the JAF binary.
		+--> 
	<target name="jaf.dist.unzip" depends="">
		<mkdir dir="${jaf.base}"/>
		<unzip src="${jaf.zip}" dest="${jaf.base}"/>
	</target>

	<!--+
		| Install JAF.
		+-->
	<target name="jaf.INSTALL" depends="">
		<antcall target="jaf.dist.unzip"/>
	</target>

	<!--+
		| Prepare JAF.
		+-->
	<target name="jaf.PREPARE" depends="">
	</target>

	<!-- ================ Axis tasks ================ -->
	<!--+
		| Axis properties.
		+-->
	<property name="axis.base"    value="${basedir}/build/axis"/>
	<property name="axis.version" value="1.1"/>
	<property name="axis.dist"    value="http://ws.apache.org/axis/dist/1_1/axis-1_1.zip"/>
	<property name="axis.zip"     value="${axis.base}/axis-${axis.version}.zip"/>

	<property name="axis.home"    value="${axis.base}/axis-1_1"/>
	<property name="axis.webapp"  value="${axis.home}/webapps/axis"/>
	<property name="axis.host"    value="localhost"/>
	<property name="axis.port"    value="8080"/>
	<property name="axis.server"  value="${axis.host}:${axis.port}"/>
	<property name="axis.servlet" value="axis"/>
	<property name="axis.url"     value="http://${axis.server}/${axis.servlet}"/>
	<property name="axis.timeout" value="60"/>

	<!--+
		| The Axis library classpath.
		+-->
	<path id="axis.classpath">
		<pathelement location="${axis.webapp}/WEB-INF/lib/axis.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/axis-ant.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/commons-discovery.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/commons-logging.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/jaxrpc.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/saaj.jar"/>
		<pathelement location="${axis.webapp}/WEB-INF/lib/wsdl4j.jar"/>
	</path>

	<!--+
		| Delete the Axis directory.
		+-->
	<target name="axis.delete" depends="">
		<delete dir="${axis.base}"/>
	</target>

	<!--+
		| Download the Axis binary.
		+-->
	<target name="axis.dist.fetch" depends="">
		<mkdir dir="${axis.base}"/>
		<get verbose="true" usetimestamp="true"
			src="${axis.dist}"
			dest="${axis.zip}"
			/>
	</target>

	<!--+
		| Unzip the Axis binary.
		+-->
	<target name="axis.dist.unzip" depends="">
		<mkdir dir="${axis.base}"/>
		<unzip src="${axis.zip}" dest="${axis.base}"/>
	</target>

	<!--+
		| Patch the Tomcat endorsed classes to enable Axis.
		| Copy activation.jar into the Tomcat endorsed directory.
		| Required with Axis 1.1 on JDK 1.4.2
		| This needs to be done befoe Tomcat starts.
		+-->
	<target name="axis.endorsed.patch" depends="">
		<copy verbose="true" file="${jaf.home}/activation.jar" toDir="${tomcat.home}/common/endorsed"/>
	</target>

	<!--+
		| Install our Axis webapp.
		+-->
	<target name="axis.webapp.install" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our webapp -->
		<echo message=""/>
		<echo message="Installing Axis webapp ...."/>
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}" war="file://${axis.webapp}"/>
	</target>

	<!--+
		| Start our Axis webapp.
		+-->
	<target name="axis.webapp.start" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Start our webapp -->
		<tomcat.start username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!--+
		| Stop our Axis webapp.
		+-->
	<target name="axis.webapp.stop" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Stop our webapp -->
		<tomcat.stop username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!--+
		| Reload our Axis webapp.
		+-->
	<target name="axis.webapp.reload" depends="tomcat.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Reload our webapp -->
		<tomcat.reload username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!--+
		| Remove our Axis webapp.
		+-->
	<target name="axis.webapp.remove" depends="tomcat.tasks">
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Remove our webapp -->
		<tomcat.remove username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/${axis.servlet}"/>
	</target>

	<!--+
		| Wait for Axis to respond.
		| This just check that calling happyaxis.jsp responds, not the content.
		| It would be nice to use something like HttpUnit to check that Axis really is happy.
		+-->
	<target name="axis.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Axis webapp ...."/>
		<echo message="URL : ${axis.url}/happyaxis.jsp"/>
		<waitfor maxwait="${axis.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${axis.url}/happyaxis.jsp"/>
		</waitfor>
	</target>

	<!--+
		| Define the Axis manager tasks.
		+-->
	<target name="axis.tasks" depends="">
		<taskdef name="axis.admin" classname="org.apache.axis.tools.ant.axis.AdminClientTask">
			<classpath>
				<!-- Our Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- Tomcat servlet libraries (required for Axis 1.0) -->
				<path refid="tomcat.classpath.servlet"/>
			</classpath>
		</taskdef>
		<taskdef name="axis.wsdl2java" classpathref="axis.classpath" classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask"/>
		<taskdef name="axis.java2wsdl" classpathref="axis.classpath" classname="org.apache.axis.tools.ant.wsdl.Java2WsdlAntTask"/>
	</target>

	<!--+
		| Install Axis.
		+-->
	<target name="axis.INSTALL" depends="">
		<!-- Download Axis binary -->
		<antcall target="axis.dist.fetch"/>
		<!-- Unpack the Axis binary -->
		<antcall target="axis.dist.unzip"/>
	</target>

	<!--+
		| Prepare Axis.
		+-->
	<target name="axis.PREPARE" depends="">
		<!-- Add the Axis endorsed classes to Tomcat -->
		<antcall target="axis.endorsed.patch"/>
	</target>

	<!--+
		| Reset Axis.
		+-->
	<target name="axis.RESET" depends="">
		<!-- Delete any additional libraries -->
		<delete verbose="true" failonerror="false" includeEmptyDirs="true">
			<fileset dir="${axis.webapp}/WEB-INF/lib">
				<!-- Exclude the Axis libraries -->
				<exclude name="axis-ant.jar"/>
				<exclude name="axis.jar"/>
				<exclude name="commons-discovery.jar"/>
				<exclude name="commons-logging.jar"/>
				<exclude name="jaxrpc.jar"/>
				<exclude name="jta1.0.1.jar"/>
				<exclude name="log4j-1.2.8.jar"/>
				<exclude name="saaj.jar"/>
				<exclude name="wsdl4j.jar"/>
			</fileset>
		</delete>
		<!-- Delete any additional classes -->
		<delete verbose="true" failonerror="false" includeEmptyDirs="true">
			<fileset dir="${axis.webapp}/WEB-INF/classes">
				<!-- Exclude the Axis samples -->
				<exclude name="samples/**"/>
			</fileset>
		</delete>
	</target>

	<!--+
		| Install the Axis docs as a webapp.
		+-->
	<target name="axis.docs.install" depends="tomcat.tasks">
		<echo message=""/>
		<echo message="Installing Axis documentation ...."/>
		<!-- Copy the web.xml file -->
		<copy file="src/webapps/docs/WEB-INF/web.xml" todir="${axis.home}/docs/WEB-INF"/>
		<!-- Wait for the Tomcat manager -->
		<antcall target="tomcat.manager.wait"/>
		<!-- Install our webapp -->
		<tomcat.install username="${tomcat.manager.username}" password="${tomcat.manager.password}" url="${tomcat.manager.url}" path="/axis-docs" war="file://${axis.home}/docs"/>
	</target>

	<!-- ================ Policy tasks ================ -->

	<property name="policy.base" value="${basedir}/build/policy"/>

	<property name="policy.service.base" value="${policy.base}/service"/>
	<property name="policy.manager.base" value="${policy.base}/manager"/>
	<property name="policy.server.base"  value="${policy.base}/server"/>
	<property name="policy.client.base"  value="${policy.base}/client"/>

	<property name="policy.server.jar"  value="policy-server-${project.version}.jar"/>
	<property name="policy.client.jar"  value="policy-client-${project.version}.jar"/>

	<!--+
		| The Policy server classpath.
		+-->
	<path id="policy.server.classpath">
		<!-- The Axis libraries -->
		<path refid="axis.classpath"/>
		<!-- The Castor libraries -->
		<path refid="castor.classpath"/>
		<!-- The Xerces libraries -->
		<path refid="xerces.classpath"/>
		<!-- The Hsqldb libraries -->
		<path refid="hsqldb.classpath"/>
		<!-- The JConfig libraries -->
		<path refid="jconfig.classpath"/>

		<!-- Our policy jar -->
		<pathelement path="${policy.base}/jar/${policy.server.jar}"/>
		<!-- Our authentication jar -->
		<pathelement path="${installkitdir}/${authentication.server.jar}"/>
	</path>

	<!--+
		| The Policy client classpath.
		+-->
	<path id="policy.client.classpath">
		<!-- The Axis libraries -->
		<path refid="axis.classpath"/>
		<!-- The JConfig libraries -->
		<path refid="jconfig.classpath"/>
		<!-- Our client classes -->
		<pathelement path="${policy.base}/jar/${policy.client.jar}"/>
	</path>

	<!--+
		| Delete our build directory.
		+-->
	<target name="policy.delete" depends="">
		<delete dir="build/policy" failonerror="false"/>
	</target>

	<!--+
		| Compile our PolicyService interface classes.
		| These are the Java classes for the service interface, used to generate the service WSDL.
		+-->
	<target name="policy.service.javac" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${policy.service.base}/classes"/>
		<!-- Compile the interface classes -->
		<javac srcdir="src/java"
		       destdir="${policy.service.base}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<include name="org/astrogrid/community/policy/data/*.java"/>
			<include name="org/astrogrid/community/policy/server/PolicyService.java"/>
			<classpath>
				<!-- The JConfig libraries -->
				<path refid="jconfig.classpath"/>
			</classpath>
		</javac>
	</target>

	<!--+
		| Compile our PolicyManager interface classes.
		| These are the Java classes for the service interface, used to generate the service WSDL.
		+-->
	<target name="policy.manager.javac" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${policy.manager.base}/classes"/>
		<!-- Compile the interface classes -->
		<javac srcdir="src/java"
		       destdir="${policy.manager.base}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<include name="org/astrogrid/community/policy/data/*.java"/>
			<include name="org/astrogrid/community/policy/server/PolicyManager.java"/>
			<classpath>
				<!-- The JConfig libraries -->
				<path refid="jconfig.classpath"/>
			</classpath>
		</javac>
	</target>

	<!--+
		| Generate the PolicyService WSDL description from our Java class.
		| This generates the service WSDL based on the Java interface classes.
		+-->
	<target name="policy.service.java2wsdl" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating PolicyService WSDL from Java ...."/>
		<!-- Create our wsdl directory -->
		<mkdir dir="${policy.service.base}/wsdl/java2wsdl"/>
		<!-- Generate our WSDL description -->
		<axis.java2wsdl
			output="${policy.service.base}/wsdl/java2wsdl/PolicyService.wsdl"
			classname="org.astrogrid.community.policy.server.PolicyService"
			location="${axis.url}/services/PolicyService"
			methods="getServiceStatus, checkPermissions, checkMembership"
			namespace="urn:server.policy.community.astrogrid.org"
			namespaceimpl="urn:impl.server.policy.community.astrogrid.org"
			style="RPC"
			>
			<!-- The classpath to find the PolicyService classes -->
			<classpath>
				<path location="${policy.service.base}/classes"/>
			</classpath>
		</axis.java2wsdl>
	</target>

	<!--+
		| Generate the PolicyManager WSDL description from our Java class.
		| This generates the manager WSDL based on the Java interface classes.
		+-->
	<target name="policy.manager.java2wsdl" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating PolicyManager WSDL from Java ...."/>
		<!-- Create our wsdl directory -->
		<mkdir dir="${policy.manager.base}/wsdl/java2wsdl"/>
		<!-- Generate our WSDL description -->
		<axis.java2wsdl
			output="${policy.manager.base}/wsdl/java2wsdl/PolicyManager.wsdl"
			classname="org.astrogrid.community.policy.server.PolicyManager"
			location="${axis.url}/services/PolicyManager"
			namespace="urn:server.policy.community.astrogrid.org"
			namespaceimpl="urn:impl.server.policy.community.astrogrid.org"
			style="RPC"
			>
			<!-- The classpath to find the PolicyManager classes -->
			<classpath>
				<path location="${policy.manager.base}/classes"/>
			</classpath>
		</axis.java2wsdl>
	</target>

	<!--+
		| Generate the PolicyService code from our WSDL description.
		| This generates the Axis stubs and templates from the WSDL description.
		+-->
	<target name="policy.service.wsdl2java" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating PolicyService code from WSDL ...."/>
		<!-- Create our java directory -->
		<mkdir dir="${policy.service.base}/java"/>
		<!-- Generate the Java code -->
		<axis.wsdl2java
			verbose="false"
			serverside="true"
			skeletondeploy="false"
			output="${policy.service.base}/java"
			url="file://${policy.service.base}/wsdl/java2wsdl/PolicyService.wsdl"
			>
			<mapping namespace="urn:server.policy.community.astrogrid.org" package="org.astrogrid.community.policy.server"/>
			<mapping namespace="urn:data.policy.community.astrogrid.org"   package="org.astrogrid.community.policy.data"/>
		</axis.wsdl2java>
	</target>

	<!--+
		| Generate the PolicyManager code from our WSDL description.
		| This generates the Axis stubs and templates from the WSDL description.
		+-->
	<target name="policy.manager.wsdl2java" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating PolicyManager code from WSDL ...."/>
		<!-- Create our java directory -->
		<mkdir dir="${policy.manager.base}/java"/>
		<!-- Generate the Java code -->
		<axis.wsdl2java
			verbose="false"
			serverside="true"
			skeletondeploy="false"
			output="${policy.manager.base}/java"
			url="file://${policy.manager.base}/wsdl/java2wsdl/PolicyManager.wsdl"
			>
			<mapping namespace="urn:server.policy.community.astrogrid.org" package="org.astrogrid.community.policy.server"/>
			<mapping namespace="urn:data.policy.community.astrogrid.org"   package="org.astrogrid.community.policy.data"/>
		</axis.wsdl2java>
	</target>

	<!--+
		| Modify the PolicyService WSDD deployment descriptor.
		| This modifies the deployment descriptor to use our own implementation classes rather than the template generated from the WSDL.
		+-->
	<target name="policy.service.wsdd.xslt" depends="">
		<!-- Create our wsdd directory -->
		<mkdir dir="${policy.service.base}/wsdd"/>
		<!-- Transform the deploy wsdd -->
		<xslt style="src/xsl/build/policy/wsdd.xsl"
		      in="${policy.service.base}/java/org/astrogrid/community/policy/server/deploy.wsdd"
		      out="${policy.service.base}/wsdd/PolicyServiceDeploy.wsdd">
			<outputproperty name="method" value="xml"/>
			<outputproperty name="indent" value="yes"/>
			<!-- Set the XSL params -->
			<param name="impl"    expression="org.astrogrid.community.policy.server.PolicyServiceImpl"/>
			<param name="service" expression="PolicyService"/>
		</xslt>
		<!-- Copy the undeploy wsdd -->
		<copy verbose="false"
		      tofile="${policy.service.base}/wsdd/PolicyServiceUndeploy.wsdd"
		      file="${policy.service.base}/java/org/astrogrid/community/policy/server/undeploy.wsdd"
		      />
	</target>

	<!--+
		| Modify the PolicyManager WSDD deployment descriptor.
		| This modifies the deployment descriptor to use our own implementation classes rather than the template generated from the WSDL.
		+-->
	<target name="policy.manager.wsdd.xslt" depends="">
		<!-- Create our wsdd directory -->
		<mkdir dir="${policy.manager.base}/wsdd"/>
		<!-- Transform the deploy wsdd -->
		<xslt style="src/xsl/build/policy/wsdd.xsl"
		      in="${policy.manager.base}/java/org/astrogrid/community/policy/server/deploy.wsdd"
		      out="${policy.manager.base}/wsdd/PolicyManagerDeploy.wsdd">
			<outputproperty name="method" value="xml"/>
			<outputproperty name="indent" value="yes"/>
			<!-- Set the XSL params -->
			<param name="impl"    expression="org.astrogrid.community.policy.server.PolicyManagerImpl"/>
			<param name="service" expression="PolicyManager"/>
		</xslt>
		<!-- Copy the undeploy wsdd -->
		<copy verbose="false"
		      toFile="${policy.manager.base}/wsdd/PolicyManagerUndeploy.wsdd"
		      file="${policy.manager.base}/java/org/astrogrid/community/policy/server/undeploy.wsdd"
		      />
	</target>

	<!--+
		| Prepare the server code.
		| This combines our own Java source with the code generated from the service WSDL.
		| Uses the Axis generated stubs and data objects.
		| Uses our service interface and implementation.
		| I plan to use our data objects when I update them.
		+-->
	<target name="policy.server.prepare" depends="">
		<!-- Copy the Java source code -->
		<copy verbose="false" todir="${policy.server.base}/java">
			<!-- Copy the PolicyService wsdl2java generated source -->
			<fileset dir="${policy.service.base}/java">
				<!-- Include the generated PolicyService stubs -->
				<include name="org/astrogrid/community/policy/server/PolicyServiceService.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyServiceServiceLocator.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyServiceSoapBindingStub.java"/>
				<!-- Include the generated data objects -->
				<!-- <include name="org/astrogrid/community/policy/data/*.java"/> -->
			</fileset>
			<!-- Copy the PolicyService wsdl2java generated source -->
			<fileset dir="${policy.manager.base}/java">
				<!-- Include the generated PolicyManager stubs -->
				<include name="org/astrogrid/community/policy/server/PolicyManagerService.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyManagerServiceLocator.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyManagerSoapBindingStub.java"/>
				<!-- Include the generated data objects -->
				<!-- <include name="org/astrogrid/community/policy/data/*.java"/> -->
			</fileset>
			<!-- Copy our own Java source -->
			<fileset dir="src/java">
				<!-- Include our PolicyService interface and implementation -->
				<include name="org/astrogrid/community/policy/server/PolicyService.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyServiceImpl.java"/>
				<!-- Include our PolicyManager interface and implementation -->
				<include name="org/astrogrid/community/policy/server/PolicyManager.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyManagerImpl.java"/>
				<!-- Include our DatabaseManager interface and implementation -->
				<include name="org/astrogrid/community/policy/server/DatabaseManager.java"/>
				<include name="org/astrogrid/community/policy/server/DatabaseManagerImpl.java"/>
				<!-- Include our AccountManager interface and implementation -->
				<include name="org/astrogrid/community/policy/server/AccountManager.java"/>
				<include name="org/astrogrid/community/policy/server/AccountManagerImpl.java"/>
				<!-- Include our ResourceManager interface and implementation -->
				<include name="org/astrogrid/community/policy/server/ResourceManager.java"/>
				<include name="org/astrogrid/community/policy/server/ResourceManagerImpl.java"/>
				
				<!-- Include our GroupManager interface and implementation -->
				<include name="org/astrogrid/community/policy/server/GroupManager.java"/>
				<include name="org/astrogrid/community/policy/server/GroupManagerImpl.java"/>
				<!-- Include our CommunityManager interface and implementation -->
				<include name="org/astrogrid/community/policy/server/CommunityManager.java"/>
				<include name="org/astrogrid/community/policy/server/CommunityManagerImpl.java"/>

				<!-- Include our PermissionManager interface and implementation -->
				<include name="org/astrogrid/community/policy/server/PermissionManager.java"/>
				<include name="org/astrogrid/community/policy/server/PermissionManagerImpl.java"/>

				<!-- Include our Configuration implementation -->
				<include name="org/astrogrid/community/policy/server/CommunityConfigImpl.java"/>

				<!-- Include our common objects -->
				<include name="org/astrogrid/community/common/**"/>
				<!-- Include our data objects -->
				<include name="org/astrogrid/community/policy/data/*.java"/>
				<!-- Include our JUnit tests -->
				<include name="org/astrogrid/community/policy/server/junit/**"/>

				<!-- Include the policy loader classes -->
				<include name="org/astrogrid/community/policy/loader/**"/>

			<!--+
				| PATCH : Include the authentication data objects
				| Required because the Castor mapping refers to org.astrogrid.community.authentication.data.SecurityToken.
				| May cause problems if we want to deploy these in separate jars :-(
				+-->
				<include name="org/astrogrid/community/authentication/data/SecurityToken.java"/>
				<include name="org/astrogrid/community/service/authentication/data/SecurityToken.java"/>

			</fileset>
		</copy>
	</target>

	<!--+
		| Prepare the client code.
		| This combines our own Java source with the code generated from the service WSDL.
		| Uses the Axis generated stubs and data objects.
		| Uses our service interface and implementation.
		| I plan to use our data objects when I update them.
		+-->
	<target name="policy.client.prepare" depends="">
		<!-- Copy the Java source code -->
		<copy verbose="false" todir="${policy.client.base}/java">
			<!-- Copy the PolicyService wsdl2java generated source -->
			<fileset dir="${policy.service.base}/java">
				<!-- Include the generated PolicyService service and locator -->
				<include name="org/astrogrid/community/policy/server/PolicyServiceService.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyServiceServiceLocator.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyServiceSoapBindingStub.java"/>
				<!-- Include the generated data objects -->
				<!-- <include name="org/astrogrid/community/policy/data/*.java"/> -->
			</fileset>
			<!-- Copy the PolicyManager wsdl2java generated source -->
			<fileset dir="${policy.manager.base}/java">
				<!-- Include the generated PolicyManager service and locator -->
				<include name="org/astrogrid/community/policy/server/PolicyManagerService.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyManagerServiceLocator.java"/>
				<include name="org/astrogrid/community/policy/server/PolicyManagerSoapBindingStub.java"/>
				<!-- Include the generated data objects -->
				<!-- <include name="org/astrogrid/community/policy/data/*.java"/> -->
			</fileset>
			<!-- Copy our own Java source -->
			<fileset dir="src/java">
				<!-- Include our delegate objects -->
				<include name="org/astrogrid/community/delegate/policy/*.java"/>
				<!-- Include our PolicyService interface -->
				<include name="org/astrogrid/community/policy/server/PolicyService.java"/>
				<!-- Include our PolicyManager interface -->
				<include name="org/astrogrid/community/policy/server/PolicyManager.java"/>
				<!-- Include our AccountManager interface -->
				<include name="org/astrogrid/community/policy/server/AccountManager.java"/>
				<!-- Include our ResourceManager interface -->
				<include name="org/astrogrid/community/policy/server/ResourceManager.java"/>
				<!-- Include our GroupManager interface -->
				<include name="org/astrogrid/community/policy/server/GroupManager.java"/>
				<!-- Include our CommunityManager interface -->
				<include name="org/astrogrid/community/policy/server/CommunityManager.java"/>
				<!-- Include our PermissionManager interface -->
				<include name="org/astrogrid/community/policy/server/PermissionManager.java"/>

				<!-- Include our common objects -->
				<include name="org/astrogrid/community/common/**"/>
				<!-- Include our data objects -->
				<include name="org/astrogrid/community/policy/data/**"/>
				<!-- Include our JUnit tests -->
				<include name="org/astrogrid/community/policy/client/junit/**"/>

			<!--+
				| PATCH : Include the authentication data objects
				| Required because the Castor mapping refers to org.astrogrid.community.authentication.data.SecurityToken.
				| May cause problems if we want to deploy these in separate jars :-(
				<include name="org/astrogrid/community/authentication/data/SecurityToken.java"/>
				<include name="org/astrogrid/community/service/authentication/data/SecurityToken.java"/>
				+-->

			</fileset>
		</copy>
	</target>

	<!--+
		| Compile our server classes.
		+-->
	<target name="policy.server.javac" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${policy.server.base}/classes"/>
		<!-- Compile the server classes -->
		<javac srcdir="${policy.server.base}/java"
		       destdir="${policy.server.base}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<include name="org/astrogrid/community/common/**"/>
			<include name="org/astrogrid/community/policy/data/**"/>
			<include name="org/astrogrid/community/policy/server/**"/>
			<include name="org/astrogrid/community/policy/loader/**"/>
			<!--+
				| PATCH : Include the authentication data objects
				| Required because the Castor mapping refers to org.astrogrid.community.authentication.data.SecurityToken.
				| May cause problems if we want to deploy these in separate jars :-(
				+-->
			<include name="org/astrogrid/community/authentication/data/SecurityToken.java"/>
			<include name="org/astrogrid/community/service/authentication/data/SecurityToken.java"/>

			<classpath>
				<!-- Include the JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- Include the Castor libraries -->
				<path refid="castor.classpath"/>
				<!-- Include the Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- Include the JConfig libraries -->
				<path refid="jconfig.classpath"/>
				<!-- include the myspace libraries of the delegate -->
				<path refid="myspace.classpath"/>

			</classpath>
		</javac>
	</target>

	<!--+
		| Compile our client classes.
		+-->
	<target name="policy.client.javac" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${policy.client.base}/classes"/>
		<!-- Compile the client classes -->
		<javac srcdir="${policy.client.base}/java"
		       destdir="${policy.client.base}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<include name="org/astrogrid/community/common/*.java"/>
			<include name="org/astrogrid/community/policy/data/**"/>
			<include name="org/astrogrid/community/policy/server/**"/>
			<include name="org/astrogrid/community/policy/client/**"/>
			<include name="org/astrogrid/community/delegate/policy/**"/>
			<classpath>
				<!-- Include the JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- Include the JConfig libraries -->
				<path refid="jconfig.classpath"/>
				<!-- Include the Axis libraries -->
				<path refid="axis.classpath"/>
			</classpath>
		</javac>
	</target>

	<!--+
		| Jar our server classes.
		+-->
	<target name="policy.server.jar" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${policy.base}/jar"/>
		<!-- Create our jar file -->
		<jar destfile="${policy.base}/jar/${policy.server.jar}">
			<!-- Copy our own Java source -->
			<fileset dir="${policy.server.base}/classes">
				<include name="org/astrogrid/community/common/**"/>
				<include name="org/astrogrid/community/policy/data/**"/>
				<include name="org/astrogrid/community/policy/server/**"/>
				<!-- ZRQ -->
				<include name="org/astrogrid/community/policy/loader/**"/>
				<!--+
					| PATCH : Include the auth data objects
					| Required because the Castor mapping refers to org.astrogrid.community.authentication.data.SecurityToken.
					| May cause problems if we want to deploy these in separate jars :-(
					+-->
				<include name="org/astrogrid/community/authentication/data/SecurityToken.class"/>
				<include name="org/astrogrid/community/service/authentication/data/SecurityToken.class"/>
			</fileset>
		</jar>
	</target>

	<!--+
		| Jar our client classes.
		+-->
	<target name="policy.client.jar" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${policy.base}/jar"/>
		<!-- Create our jar file -->
		<jar destfile="${policy.base}/jar/${policy.client.jar}">
			<!-- Copy our own Java source -->
			<fileset dir="${policy.client.base}/classes">
				<include name="org/astrogrid/community/common/**"/>
				<include name="org/astrogrid/community/policy/data/**"/>
				<include name="org/astrogrid/community/policy/server/**"/>
				<include name="org/astrogrid/community/policy/client/**"/>
				<include name="org/astrogrid/community/delegate/policy/**"/>
			</fileset>
		</jar>
	</target>

	<!--+
	    | Build our policy service.
	    +-->
	<target name="policy.BUILD" depends="">
		<antcall target="policy.delete"/>

		<antcall target="policy.service.javac"/>
		<antcall target="policy.service.java2wsdl"/>
		<antcall target="policy.service.wsdl2java"/>
		<antcall target="policy.service.wsdd.xslt"/>

		<antcall target="policy.manager.javac"/>
		<antcall target="policy.manager.java2wsdl"/>
		<antcall target="policy.manager.wsdl2java"/>
		<antcall target="policy.manager.wsdd.xslt"/>

		<antcall target="policy.server.prepare"/>
		<antcall target="policy.server.javac"/>
		<antcall target="policy.server.jar"/>

		<antcall target="policy.client.prepare"/>
		<antcall target="policy.client.javac"/>
		<antcall target="policy.client.jar"/>
	</target>

	<path id="myspace.classpath">
		<pathelement location="${basedir}/depends/myspace/myspace-client.jar"/>
	</path>

	<!--+
		| Install our service jars.
		+-->
	<target name="policy.server.install" depends="">
		<!-- Copy the 3rd party libraries into our Axis WEB-INF/lib directory -->
		<copy verbose="true" todir="${axis.webapp}/WEB-INF/lib">
			<fileset dir="${castor.home}">
				<include name="jta1.0.1.jar"/>
				<include name="castor-${castor.version}.jar"/>
				<include name="castor-${castor.version}-xml.jar"/>
			</fileset>
			<fileset dir="${xerces.home}">
				<include name="xml-apis.jar"/>
				<include name="xercesImpl.jar"/>
			</fileset>
			<fileset dir="${hsqldb.home}/lib">
				<include name="hsqldb.jar"/>
			</fileset>
			<fileset dir="${jconfig.home}/dist">
				<include name="jconfig.jar"/>
			</fileset>
			<fileset dir="${basedir}/depends/myspace">
				<include name="myspace-client.jar"/>
			</fileset>
		</copy>
		<!-- Copy our jar into the Axis WEB-INF/lib directory -->
		<copy verbose="true" todir="${axis.webapp}/WEB-INF/lib">
			<fileset dir="${policy.base}/jar">
				<include name="${policy.server.jar}"/>
			</fileset>
		</copy>
	</target>

	<!--+
		| Remove our Axis service files.
		+-->
	<target name="policy.server.remove" depends="axis.tasks">
		<!-- Remove our jar from the Axis WEB-INF/lib directory -->
		<delete verbose="true" failonerror="false">
			<fileset dir="${axis.webapp}/WEB-INF/lib">
				<include name="policy-server*"/>
			</fileset>
		</delete>
	</target>

	<!--+
		| Deploy our PolicyService service.
		+-->
	<target name="policy.service.deploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Deploy our PolicyService service -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${policy.service.base}/wsdd/PolicyServiceDeploy.wsdd"
			/>
	</target>

	<!--+
		| Deploy our PolicyManager service.
		+-->
	<target name="policy.manager.deploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Deploy our PolicyManager service -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${policy.manager.base}/wsdd/PolicyManagerDeploy.wsdd"
			/>
	</target>

	<!--+
		| Deploy our Axis services.
		+-->
	<target name="policy.server.deploy" depends="axis.tasks">
		<antcall target="policy.service.deploy"/>
		<antcall target="policy.manager.deploy"/>
	</target>

	<!--+
		| Undeploy our PolicyService service.
		+-->
	<target name="policy.service.undeploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Remove our WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${policy.service.base}/wsdd/PolicyServiceUndeploy.wsdd"
			/>
	</target>

	<!--+
		| Undeploy our PolicyManager service.
		+-->
	<target name="policy.manager.undeploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Remove our WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${policy.manager.base}/wsdd/PolicyManagerUndeploy.wsdd"
			/>
	</target>

	<!--+
		| Undeploy our Axis services.
		+-->
	<target name="policy.server.undeploy" depends="axis.tasks">
		<antcall target="policy.service.undeploy"/>
		<antcall target="policy.manager.undeploy"/>
	</target>

	<!--+
	    | Request the WSDL description from our PolicyService service.
	    | Used as an initial check that our service has been deployed.
	    +-->
	<target name="policy.service.axis2wsdl" depends="">
		<echo message=""/>
		<echo message="Requesting WSDL from Axis ...."/>
		<!-- Create our wsdl directory -->
		<mkdir dir="${policy.service.base}/wsdl/axis2wsdl"/>
		<!-- Request our WSDL description -->
		<get verbose="true" usetimestamp="true"
			src="${axis.url}/services/PolicyService?wsdl"
			dest="${policy.service.base}/wsdl/axis2wsdl/PolicyService.wsdl"
			/>
	</target>

	<!--+
	    | Request the WSDL description from our PolicyManager service.
	    | Used as an initial check that our service has been deployed.
	    +-->
	<target name="policy.manager.axis2wsdl" depends="">
		<echo message=""/>
		<echo message="Requesting WSDL from Axis ...."/>
		<!-- Create our wsdl directory -->
		<mkdir dir="${policy.manager.base}/wsdl/axis2wsdl"/>
		<!-- Request our WSDL description -->
		<get verbose="true" usetimestamp="true"
			src="${axis.url}/services/PolicyManager?wsdl"
			dest="${policy.manager.base}/wsdl/axis2wsdl/PolicyManager.wsdl"
			/>
	</target>

	<!--+
		| Request the WSDL description for our Axis services.
		+-->
	<target name="policy.server.axis2wsdl" depends="axis.tasks">
		<antcall target="policy.service.axis2wsdl"/>
		<antcall target="policy.manager.axis2wsdl"/>
	</target>

	<!--+
	    | Deploy our policy services.
	    | If we were just copying our classes into the Axis/WEB-INF/classes directory, then no need to re-load Axis.
	    | Because we are installing our classes as a jar file into the Axis/WEB-INF/lib directory, we need to re-load Axis before we can deploy the service.
	    +-->
	<target name="policy.DEPLOY" depends="">
		<!-- Install our jar file -->
		<antcall target="policy.server.install"/>
		<!-- Reload Axis -->
		<antcall target="axis.webapp.reload"/>
		<!-- Deploy our service -->
		<antcall target="policy.server.deploy"/>
		<!-- Check we can read our service WSDL -->
		<antcall target="policy.server.axis2wsdl"/>
	</target>

	<!--+
	    | Remove our policy service.
	    +-->
	<target name="policy.REMOVE" depends="">
		<!-- Remove our service -->
		<antcall target="policy.server.undeploy"/>
		<antcall target="policy.server.remove"/>
	</target>

	<!--+
	    | Reload our policy service.
	    +-->
	<target name="policy.RELOAD" depends="">
		<!-- Remove our service -->
		<antcall target="policy.REMOVE"/>
		<!-- Deploy our service -->
		<antcall target="policy.DEPLOY"/>
	</target>

	<!--+
		| Run our server side JUnit tests.
		+-->
	<target name="policy.server.junit" depends="">
		<!-- Create our reports directory -->
		<mkdir dir="${policy.base}/junit"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<!-- The Policy classes -->
				<path refid="policy.server.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Pass in the location of the config file -->
			<sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${policy.base}/junit">
				<fileset dir="${policy.server.base}/classes">
					<include name="org/astrogrid/community/common/junit/**/JUnit*.class"/>
					<include name="org/astrogrid/community/policy/server/junit/**/JUnitGroup*.class"/>
					<include name="org/astrogrid/community/policy/server/junit/**/JUnitAccount*.class"/>
					<include name="org/astrogrid/community/policy/server/junit/**/JUnitResource*.class"/>
					<include name="org/astrogrid/community/policy/server/junit/**/JUnitCommunity*.class"/>
					<include name="org/astrogrid/community/policy/server/junit/**/JUnitPermission*.class"/>
					<include name="org/astrogrid/community/policy/server/junit/**/JUnitGroupMember*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
		| Run our client JUnit tests.
		+-->
	<target name="policy.client.junit" depends="">
		<!-- Create our reports directory -->
		<mkdir dir="${policy.base}/junit"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<!-- The Policy classes -->
				<path refid="policy.client.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Pass in the location of the config file -->
			<sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${policy.base}/junit">
				<fileset dir="${policy.client.base}/classes">
					<include name="org/astrogrid/community/policy/client/junit/**/JUnitGroup*.class"/>
					<include name="org/astrogrid/community/policy/client/junit/**/JUnitAccount*.class"/>
					<include name="org/astrogrid/community/policy/client/junit/**/JUnitResource*.class"/>
					<include name="org/astrogrid/community/policy/client/junit/**/JUnitCommunity*.class"/>
					<include name="org/astrogrid/community/policy/client/junit/**/JUnitPermission*.class"/>
					<include name="org/astrogrid/community/policy/client/junit/**/JUnitGroupMember*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
		| Run our remote client tests.
		+-->
	<target name="policy.remote.junit" depends="">
		<!-- Create our reports directory -->
		<mkdir dir="${policy.base}/junit"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<!-- The Policy classes -->
				<path refid="policy.client.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${policy.base}/junit">
				<fileset dir="${policy.client.base}/classes">
					<include name="org/astrogrid/community/policy/client/junit/**/JUnitRemoteGroup*.class"/>
					<include name="org/astrogrid/community/policy/client/junit/**/JUnitRemoteAccount*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Test our policy service.
	    +-->
	<target name="policy.TEST" depends="">
		<!-- Reset our database -->
		<antcall target="hsqldb.database.delete"/>
		<!-- Run our server side tests -->
		<antcall target="policy.server.junit"/>
		<!-- Run our client side tests -->
	<antcall target="policy.client.junit"/>
		<!-- Display our database -->
	<antcall target="hsqldb.database.select"/>
	</target>

	<!--+
		| Run the initial accounts test.
		| This uses a server side JUnit test to add the initial Accounts and Groups.
		| This should be replaced by the XML loader ASAP.
		+-->
	<target name="policy.server.init" depends="">
		<!-- Create our reports directory -->
		<mkdir dir="${policy.base}/junit"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<!-- The Policy classes -->
				<path refid="policy.server.classpath"/>
				<!-- The Auth classes -->
				<path refid="authentication.client.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Pass in the location of the config file -->
			<sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${policy.base}/junit">
				<fileset dir="${policy.server.base}/classes">
					<include name="org/astrogrid/community/policy/server/junit/manager/InitialAccountLoader.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Test our policy service.
	    +-->
	<target name="policy.REMOTE-TEST" depends="">
		<!-- Reset our database -->
		<antcall target="hsqldb.database.delete"/>
		<!-- Run our remote tests -->
		<antcall target="policy.remote.junit"/>
		<!-- Display our database -->
		<antcall target="hsqldb.database.select"/>
	</target>

	<!-- ================ Database loader tasks ================ -->
	<!--+
	    | The Policy data location.
	    +-->
	<property name="policy.xml.test" value="src/xml/policy/test"/>
	<property name="policy.xml.data" value="src/xml/policy/data"/>

	<!--+
		| Run our database loader JUnit tests.
		+-->
	<target name="policy.loader.junit" depends="">
		<!-- Create our reports directory -->
		<mkdir dir="${policy.base}/junit"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<!-- The Policy classes -->
				<path refid="policy.server.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Pass in the location of the config file -->
			<sysproperty key="org.astrogrid.community.config" value="${config.file}"/>
			<!-- Pass in the location of the test data -->
			<sysproperty key="org.astrogrid.community.data" value="${policy.xml.test}"/>
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${policy.base}/junit">
				<fileset dir="${policy.server.base}/classes">
					<include name="org/astrogrid/community/policy/loader/junit/JUnit*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Run our policy loader task.
	    +-->
	<target name="policy.loader" depends="">
		<echo message=""/>
		<echo message="Loading policy data ...."/>
		<echo message="  Community name : ${community.name}"/>
		<!-- Define our policy-loader task -->
		<taskdef name="policy.loader" classname="org.astrogrid.community.policy.loader.PolicyLoader">
			<classpath>
				<!-- The Axis libraries -->
				<path refid="axis.classpath"/>
				<!-- Our policy jar -->
				<pathelement path="${policy.base}/jar/${policy.server.jar}"/>
			</classpath>
		</taskdef>
		<!-- Process our data files -->
		<policy.loader>
			<fileset dir="${policy.xml.data}">
				<include name="${community.name}.xml"/>
			</fileset>
		</policy.loader>
	</target>

<!--
Start of Authentication "auth" tasks
-->
	<!-- ================ auth tasks ================ -->

	<property name="auth.base" value="${basedir}/build/auth"/>

	<property name="auth.service.base" value="${auth.base}/service"/>
<!--	<property name="auth.manager.base" value="${auth.base}/manager"/> -->
	<property name="auth.server.base"  value="${auth.base}/server"/>
	<property name="auth.client.base"  value="${auth.base}/client"/>

	<property name="auth.server.jar"  value="auth-server-${project.version}.jar"/>
	<property name="auth.client.jar"  value="auth-client-${project.version}.jar"/>

	<!--+
		| The auth server classpath.
		+-->
	<path id="auth.server.classpath">
		<!-- The Axis libraries -->
		<path refid="axis.classpath"/>
		<!-- The Castor libraries -->
		<path refid="castor.classpath"/>
		<!-- The Xerces libraries -->
		<path refid="xerces.classpath"/>
		<!-- The Hsqldb libraries -->
		<path refid="hsqldb.classpath"/>
		<!-- Our server jar -->
		<pathelement path="${auth.base}/jar/${auth.server.jar}"/>
	</path>

	<!--+
		| The auth client classpath.
		+-->
	<path id="auth.client.classpath">
		<!-- The Axis libraries -->
		<path refid="axis.classpath"/>
		<!-- Our client classes -->
		<pathelement path="${auth.base}/jar/${auth.client.jar}"/>
	</path>

	<!--+
		| Delete our build directory.
		+-->
	<target name="auth.delete" depends="">
		<delete dir="build/auth" failonerror="false"/>
	</target>

	<!--+
		| Compile our authService interface classes.
		| These are the Java classes for the service interface, used to generate the service WSDL.
		+-->
	<target name="auth.service.javac" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${auth.service.base}/classes"/>
		<!-- Compile the interface classes -->
		<javac srcdir="src/java"
		       destdir="${auth.service.base}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<include name="org/astrogrid/community/auth/data/*.java"/>
			<include name="org/astrogrid/community/auth/server/AuthenticationManager.java"/>
			<classpath>
			</classpath>
		</javac>
	</target>


	<!--+
		| Generate the authService WSDL description from our Java class.
		| This generates the service WSDL based on the Java interface classes.
		+-->
	<target name="auth.service.java2wsdl" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating authService WSDL from Java ...."/>
		<!-- Create our wsdl directory -->
		<mkdir dir="${auth.service.base}/wsdl/java2wsdl"/>
		<!-- Generate our WSDL description -->
		<axis.java2wsdl
			output="${auth.service.base}/wsdl/java2wsdl/authService.wsdl"
			classname="org.astrogrid.community.auth.server.AuthenticationManager"
			location="${axis.url}/services/authService"
			methods="authenticateToken"
			namespace="urn:server.auth.community.astrogrid.org"
			namespaceimpl="urn:impl.server.auth.community.astrogrid.org"
			style="RPC"
			>
			<!-- The classpath to find the authService classes -->
			<classpath>
				<path location="${auth.service.base}/classes"/>
			</classpath>
		</axis.java2wsdl>
	</target>

	<!--+
		| Generate the authService code from our WSDL description.
		| This generates the Axis stubs and templates from the WSDL description.
		+-->
	<target name="auth.service.wsdl2java" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating authService code from WSDL ...."/>
		<!-- Create our java directory -->
		<mkdir dir="${auth.service.base}/java"/>
		<!-- Generate the Java code -->
		<axis.wsdl2java
			verbose="false"
			serverside="true"
			skeletondeploy="false"
			output="${auth.service.base}/java"
			url="file://${auth.service.base}/wsdl/java2wsdl/authService.wsdl"
			>
			<mapping namespace="urn:server.auth.community.astrogrid.org" package="org.astrogrid.community.auth.server"/>
			<mapping namespace="urn:data.auth.community.astrogrid.org"   package="org.astrogrid.community.auth.data"/>
		</axis.wsdl2java>
	</target>


	<!--+
		| Modify the authService WSDD deployment descriptor.
		| This modifies the deployment descriptor to use our own implementation classes rather than the template generated from the WSDL.
		+-->
	<target name="auth.service.wsdd.xslt" depends="">
		<!-- Create our wsdd directory -->
		<mkdir dir="${auth.service.base}/wsdd"/>
		<!-- Transform the deploy wsdd -->
		<xslt style="src/xsl/build/auth/wsdd.xsl"
		      in="${auth.service.base}/java/org/astrogrid/community/auth/server/deploy.wsdd"
		      out="${auth.service.base}/wsdd/AuthenticationManagerDeploy.wsdd">
			<outputproperty name="method" value="xml"/>
			<outputproperty name="indent" value="yes"/>
			<!-- Set the XSL params -->
			<param name="impl"    expression="org.astrogrid.community.auth.server.AuthenticationManagerImpl"/>
			<param name="service" expression="AuthenticationManager"/>
		</xslt>
		<!-- Copy the undeploy wsdd -->
		<copy verbose="false"
		      tofile="${auth.service.base}/wsdd/AuthenticationManagerUndeploy.wsdd"
		      file="${auth.service.base}/java/org/astrogrid/community/auth/server/undeploy.wsdd"
		      />
	</target>


	<!--+
		| Prepare the server code.
		| This combines our own Java source with the code generated from the service WSDL.
		| Uses the Axis generated stubs and data objects.
		| Uses our service interface and implementation.
		| I plan to use our data objects when I update them.
		+-->
	<target name="auth.server.prepare" depends="">
		<!-- Copy the Java source code -->
		<copy verbose="false" todir="${auth.server.base}/java">
			<!-- Copy the authService wsdl2java generated source -->
			<fileset dir="${auth.service.base}/java">
				<!-- Include the generated authService stubs -->
				<include name="org/astrogrid/community/auth/server/AuthenticationManagerService.java"/>
				<include name="org/astrogrid/community/auth/server/AuthenticationManagerServiceLocator.java"/>
				<include name="org/astrogrid/community/auth/server/AuthServiceSoapBindingStub.java"/>
				<!-- Include the generated data objects -->
				<!-- <include name="org/astrogrid/community/auth/data/*.java"/> -->
			</fileset>

			<!-- Copy our own Java source -->
			<fileset dir="src/java">
				<!-- Include our authManager interface and implementation -->
				<!-- Include our delegate objects -->
				<include name="org/astrogrid/community/delegate/authentication/*2*.java"/>
				
				<include name="org/astrogrid/community/auth/server/AuthenticationManager.java"/>
				<include name="org/astrogrid/community/auth/server/AuthenticationManagerImpl.java"/>
				<!-- Include our data objects -->
				<include name="org/astrogrid/community/auth/data/*.java"/>
				<!-- Include our JUnit tests 
				<include name="org/astrogrid/community/authentication/server/junit/**"/>
				-->
			</fileset>
		</copy>
	</target>

	<!--+
		| Prepare the client code.
		| This combines our own Java source with the code generated from the service WSDL.
		| Uses the Axis generated stubs and data objects.
		| Uses our service interface and implementation.
		| I plan to use our data objects when I update them.
		+-->
	<target name="auth.client.prepare" depends="">
		<!-- Copy the Java source code -->
		<copy verbose="false" todir="${auth.client.base}/java">
			<!-- Copy the authManager wsdl2java generated source -->
			<fileset dir="${auth.service.base}/java">
				<!-- Include the generated authService stubs -->
				<include name="org/astrogrid/community/auth/server/AuthenticationManagerService.java"/>
				<include name="org/astrogrid/community/auth/server/AuthenticationManagerServiceLocator.java"/>
				<include name="org/astrogrid/community/auth/server/AuthServiceSoapBindingStub.java"/>
				<!-- Include the generated data objects -->
				<!-- <include name="org/astrogrid/community/auth/data/*.java"/> -->
			</fileset>
			<!-- Copy our own Java source -->
			<fileset dir="src/java">
				<!-- Include our delegate objects -->
				<include name="org/astrogrid/community/delegate/authentication/*2*.java"/>
				<!-- Include our authManager interface -->
				<include name="org/astrogrid/community/auth/server/AuthenticationManager.java"/>

				<!-- Include our data objects -->
				<include name="org/astrogrid/community/auth/data/*.java"/>
				<!-- Include our JUnit tests 
				<include name="org/astrogrid/community/auth/client/junit/**"/>
				-->
			</fileset>
		</copy>
	</target>

	<!--+
		| Compile our server classes.
		+-->
	<target name="auth.server.javac" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${auth.server.base}/classes"/>
		<!-- Compile the server classes -->
		<javac srcdir="${auth.server.base}/java"
		       destdir="${auth.server.base}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<include name="org/astrogrid/community/auth/data/**"/>
			<include name="org/astrogrid/community/auth/server/**"/>
			<include name="org/astrogrid/community/delegate/authentication/**"/>
			<classpath>
				<!-- Include the JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- Include the Castor libraries -->
				<path refid="castor.classpath"/>
				<!-- Include the Axis libraries -->
				<path refid="axis.classpath"/>
				<path refid="policy.client.classpath" />
			</classpath>
		</javac>
	</target>

	<!--+
		| Compile our client classes.
		+-->
	<target name="auth.client.javac" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${auth.client.base}/classes"/>
		<!-- Compile the client classes -->
		<javac srcdir="${auth.client.base}/java"
		       destdir="${auth.client.base}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<include name="org/astrogrid/community/auth/data/**"/>
			<include name="org/astrogrid/community/auth/server/**"/>
			<include name="org/astrogrid/community/auth/client/**"/>
			<include name="org/astrogrid/community/delegate/authentication/**"/>
			<classpath>
				<!-- Include the JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- Include the Axis libraries -->
				<path refid="axis.classpath"/>
			</classpath>
		</javac>
	</target>

	<!--+
		| Jar our server classes.
		+-->
	<target name="auth.server.jar" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${auth.base}/jar"/>
		<!-- Create our jar file -->
		<jar destfile="${auth.base}/jar/${auth.server.jar}">
			<!-- Copy our own Java source -->
			<fileset dir="${auth.server.base}/classes">
				<include name="org/astrogrid/community/auth/data/**"/>
				<include name="org/astrogrid/community/auth/server/**"/>
			</fileset>
		</jar>
	</target>

	<!--+
		| Jar our client classes.
		+-->
	<target name="auth.client.jar" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${auth.base}/jar"/>
		<!-- Create our jar file -->
		<jar destfile="${auth.base}/jar/${auth.client.jar}">
			<!-- Copy our own Java source -->
			<fileset dir="${auth.client.base}/classes">
				<include name="org/astrogrid/community/auth/data/**"/>
				<include name="org/astrogrid/community/auth/server/**"/>
				<include name="org/astrogrid/community/auth/client/**"/>
				<include name="org/astrogrid/community/delegate/auth/**"/>
			</fileset>
		</jar>
	</target>

	<!--+
		| Build our server config files.
		| Not sure of the best place to put these at the moment.
		| The mapping file should not change, so probably should be in the jar.
		| The database file should be user configurable, so should NOT be in the jar.
		+-->
	<target name="auth.server.config" depends="">
		<!-- Create our config directory -->
		<mkdir dir="${auth.server.base}/config"/>
		<!-- Copy our database mapping files -->
		<copy verbose="false" overwrite="true" toDir="${auth.server.base}/config">
			<fileset dir="src/castor/hsqldb">
				<include name="database.xml"/>
				<include name="mapping.xml"/>
			</fileset>
		</copy>
	</target>

	<!--+
	    | Build our auth service.
	    +-->
	<target name="auth.BUILD" depends="">
		<antcall target="auth.delete"/>

		<antcall target="auth.service.javac"/>
		<antcall target="auth.service.java2wsdl"/>
		<antcall target="auth.service.wsdl2java"/>
		<antcall target="auth.service.wsdd.xslt"/>

		<antcall target="auth.server.prepare"/>
		<antcall target="auth.server.javac"/>
		<antcall target="auth.server.config"/>
		<antcall target="auth.server.jar"/>

		<antcall target="auth.client.prepare"/>
		<antcall target="auth.client.javac"/>
		<antcall target="auth.client.jar"/>
	</target>

	<!--+
		| Install our service jars.
		+-->
	<target name="auth.server.install" depends="">
		<!-- Copy the 3rd party libraries into our Axis WEB-INF/lib directory -->
		<copy verbose="true" todir="${axis.webapp}/WEB-INF/lib">
			<fileset dir="${castor.home}">
				<include name="jta1.0.1.jar"/>
				<include name="castor-${castor.version}.jar"/>
				<include name="castor-${castor.version}-xml.jar"/>
			</fileset>
			<fileset dir="${xerces.home}">
				<include name="xml-apis.jar"/>
				<include name="xercesImpl.jar"/>
			</fileset>
			<fileset dir="${hsqldb.home}/lib">
				<include name="hsqldb.jar"/>
			</fileset>
		</copy>
		<!-- Copy our jar into the Axis WEB-INF/lib directory -->
		<copy verbose="true" todir="${axis.webapp}/WEB-INF/lib">
			<fileset dir="${auth.base}/jar">
				<include name="${auth.server.jar}"/>
			</fileset>
		</copy>
	</target>

	<!--+
		| Remove our Axis service files.
		+-->
	<target name="auth.server.remove" depends="axis.tasks">
		<!-- Remove our jar from the Axis WEB-INF/lib directory -->
		<delete verbose="true" failonerror="false">
			<fileset dir="${axis.webapp}/WEB-INF/lib">
				<include name="auth-server*"/>
			</fileset>
		</delete>
	</target>

	<!--+
		| Deploy our authService service.
		+-->
	<target name="auth.service.deploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Deploy our authService service -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${auth.service.base}/wsdd/authServiceDeploy.wsdd"
			/>
	</target>

	<!--+
		| Deploy our authManager service.
		+-->
	<target name="auth.manager.deploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Deploy our authManager service -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${auth.manager.base}/wsdd/authManagerDeploy.wsdd"
			/>
	</target>

	<!--+
		| Deploy our Axis services.
		+-->
	<target name="auth.server.deploy" depends="axis.tasks">
		<antcall target="auth.service.deploy"/>
		<antcall target="auth.manager.deploy"/>
	</target>

	<!--+
		| Undeploy our authService service.
		+-->
	<target name="auth.service.undeploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Remove our WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${auth.service.base}/wsdd/authServiceUndeploy.wsdd"
			/>
	</target>

	<!--+
		| Undeploy our authManager service.
		+-->
	<target name="auth.manager.undeploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Remove our WebService -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${auth.manager.base}/wsdd/authManagerUndeploy.wsdd"
			/>
	</target>

	<!--+
		| Undeploy our Axis services.
		+-->
	<target name="auth.server.undeploy" depends="axis.tasks">
		<antcall target="auth.service.undeploy"/>
		<antcall target="auth.manager.undeploy"/>
	</target>

	<!--+
	    | Request the WSDL description from our authService service.
	    | Used as an initial check that our service has been deployed.
	    +-->
	<target name="auth.service.axis2wsdl" depends="">
		<echo message=""/>
		<echo message="Requesting WSDL from Axis ...."/>
		<!-- Create our wsdl directory -->
		<mkdir dir="${auth.service.base}/wsdl/axis2wsdl"/>
		<!-- Request our WSDL description -->
		<get verbose="true" usetimestamp="true"
			src="${axis.url}/services/authService?wsdl"
			dest="${auth.service.base}/wsdl/axis2wsdl/authService.wsdl"
			/>
	</target>

	<!--+
	    | Request the WSDL description from our authManager service.
	    | Used as an initial check that our service has been deployed.
	    +-->
	<target name="auth.manager.axis2wsdl" depends="">
		<echo message=""/>
		<echo message="Requesting WSDL from Axis ...."/>
		<!-- Create our wsdl directory -->
		<mkdir dir="${auth.manager.base}/wsdl/axis2wsdl"/>
		<!-- Request our WSDL description -->
		<get verbose="true" usetimestamp="true"
			src="${axis.url}/services/authManager?wsdl"
			dest="${auth.manager.base}/wsdl/axis2wsdl/authManager.wsdl"
			/>
	</target>

	<!--+
		| Request the WSDL description for our Axis services.
		+-->
	<target name="auth.server.axis2wsdl" depends="axis.tasks">
		<antcall target="auth.service.axis2wsdl"/>
		<antcall target="auth.manager.axis2wsdl"/>
	</target>

	<!--+
	    | Deploy our auth services.
	    | If we were just copying our classes into the Axis/WEB-INF/classes directory, then no need to re-load Axis.
	    | Because we are installing our classes as a jar file into the Axis/WEB-INF/lib directory, we need to re-load Axis before we can deploy the service.
	    +-->
	<target name="auth.DEPLOY" depends="">
		<!-- Install our jar file -->
		<antcall target="auth.server.install"/>
		<!-- Reload Axis -->
		<antcall target="axis.webapp.reload"/>
		<!-- Deploy our service -->
		<antcall target="auth.server.deploy"/>
		<!-- Check we can read our service WSDL -->
		<antcall target="auth.server.axis2wsdl"/>
	</target>

	<!--+
	    | Remove our auth service.
	    +-->
	<target name="auth.REMOVE" depends="">
		<!-- Remove our service -->
		<antcall target="auth.server.undeploy"/>
		<antcall target="auth.server.remove"/>
	</target>

	<!--+
	    | Reload our auth service.
	    +-->
	<target name="auth.RELOAD" depends="">
		<!-- Remove our service -->
		<antcall target="auth.REMOVE"/>
		<!-- Deploy our service -->
		<antcall target="auth.DEPLOY"/>
	</target>

	<!--+
		| Run our server side JUnit tests.
		+-->
	<target name="auth.server.junit" depends="">
		<!-- Create our reports directory -->
		<mkdir dir="${auth.base}/junit"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<!-- The auth classes -->
				<path refid="auth.server.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>

			<!-- Pass in the server config properties -->
			<sysproperty key="org.astrogrid.auth.server.mapping"          value="file://${auth.server.base}/config/mapping.xml"/>
			<sysproperty key="org.astrogrid.auth.server.database.config"  value="file://${auth.server.base}/config/database.xml"/>
			<sysproperty key="org.astrogrid.auth.server.database.name"    value="${hsqldb.database}"/>

			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${auth.base}/junit">
				<fileset dir="${auth.server.base}/classes">
					<include name="org/astrogrid/community/auth/server/junit/**/JUnit*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
		| Run our client JUnit tests.
		+-->
	<target name="auth.client.junit" depends="">
		<!-- Create our reports directory -->
		<mkdir dir="${auth.base}/junit"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<!-- The auth classes -->
				<path refid="auth.client.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${auth.base}/junit">
				<fileset dir="${auth.client.base}/classes">
					<include name="org/astrogrid/community/auth/client/junit/**/JUnit*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
	    | Test our auth service.
	    +-->
	<target name="auth.TEST" depends="">
		<!-- Reset our database -->
		<antcall target="hsqldb.database.delete"/>
		<!-- Run our server side tests -->
		<antcall target="auth.server.junit"/>
		<!-- Run our client side tests -->
		<antcall target="auth.client.junit"/>
		<!-- Display our database -->
		<antcall target="hsqldb.database.select"/>
	</target>

<!-- 
	End of Authentication tasks
-->


	<!-- ================ Configuration tasks ================ -->
	<!--+
	    | Configuration properties.
	    +-->
	<property name="config.base" value="${basedir}/build/config"></property>
	<property name="config.file" value="${config.base}/config.xml"></property>

	<!--+
		| Delete our configuration files.
		+-->
	<target name="config.delete" depends="">
		<delete dir="${config.base}" failonerror="false"/>
	</target>

	<!--+
		| Build our jConfig configuration file(s).
		| This uses an XSL transform to set the correct paths in our jConfig configuration file.
		+-->
	<target name="config.jconfig" depends="">
		<echo message=""/>
		<echo message="Building community config ...."/>
		<!-- Create our config directory -->
		<mkdir dir="${config.base}"/>
		<!-- Copy our database mapping files -->
		<copy verbose="false" overwrite="true" toDir="${config.base}">
			<fileset dir="src/castor/hsqldb">
				<include name="database.xml"/>
				<include name="mapping.xml"/>
			</fileset>
		</copy>
		<!-- Copy our config files -->
		<copy verbose="false" overwrite="true" toDir="${config.base}">
			<fileset dir="src/config">
				<include name="config.xml"/>
			</fileset>
		</copy>
		<!-- Transform our config file, filling in the correct values -->
		<antcall target="config.xslt">
			<param name="property.name"  value="database.name"/>
			<param name="property.value" value="${hsqldb.database}"/>
		</antcall>
		<antcall target="config.xslt">
			<param name="property.name"  value="database.config"/>
			<param name="property.value" value="${config.base}/database.xml"/>
		</antcall>
		<antcall target="config.xslt">
			<param name="property.name"  value="database.mapping"/>
			<param name="property.value" value="${config.base}/mapping.xml"/>
		</antcall>
	</target>

	<!--+
		| Transform our config file, setting a named property.
		+-->
	<target name="config.xslt" depends="">

		<echo message=""/>
		<echo message="Updating community config ...."/>
		<echo message="  Config file    : ${config.file}"/>
		<echo message="  Property name  : ${property.name}"/>
		<echo message="  Property value : ${property.value}"/>

		<!-- Transform our config file, filling in the specified value -->
		<xslt style="src/xsl/build/config/config.xsl"
		      in="${config.file}"
		      out="${config.file}.new">
			<outputproperty name="method" value="xml"/>
			<outputproperty name="indent" value="yes"/>
			<!-- Set the XSL params -->
			<param name="category"         expression="org.astrogrid.community"/>
			<param name="property.name"    expression="${property.name}"/>
			<param name="property.value"   expression="${property.value}"/>
		</xslt>
		<!-- Replace our existing config.xml with the new one -->
		<move file="${config.file}.new" tofile="${config.file}" overwrite="true" failonerror="false"/>
	</target>

	<!--+
		| Modify a generic webapp web.xml to include our JNDI property.
		| This uses an XSL transform to add the path to our config file to the Axis web.xml.
		| This will be picked up by our WebService using a JNDI lookup call.
		+-->
	<target name="config.webapp.jndi" depends="">
		<echo message=""/>
		<echo message="Modifying WebApp web.xml ...."/>
		<echo message="  Target webapp : ${target.webapp}"/>
		<echo message="  Target config : ${target.config}"/>
		<!-- Copy the existing web.xml to a backup file -->
		<copy file="${target.webapp}/WEB-INF/web.xml" tofile="${target.webapp}/WEB-INF/web.xml.old" overwrite="true" failonerror="false"/>
		<!-- Transform the target web.xml, adding our JNDI property -->
		<xslt style="src/xsl/build/config/webapp.xsl"
		      in="${target.webapp}/WEB-INF/web.xml"
		      out="${target.webapp}/WEB-INF/web.xml.new">
			<outputproperty name="method" value="xml"/>
			<outputproperty name="indent" value="yes"/>
			<!-- Set the XSL params -->
			<param name="property.name"  expression="org.astrogrid.community.config"/>
			<param name="property.value" expression="${target.config}"/>
		</xslt>
		<!-- Replace the existing web.xml with the new one -->
		<move file="${target.webapp}/WEB-INF/web.xml.new" tofile="${target.webapp}/WEB-INF/web.xml" overwrite="true" failonerror="false"/>
	</target>

	<!--+
		| Build our jConfig configuration.
		+-->
	<target name="config.BUILD" depends="">
		<antcall target="config.delete"/>
		<antcall target="config.jconfig"/>
		<antcall target="config.webapp.jndi">
			<param name="target.webapp" value="${axis.webapp}"/>
			<param name="target.config" value="${config.file}"/>
		</antcall>
	</target>

	<!-- ================ Project tasks ================ -->
	<!--+
	    | Download our 3rd party components.
	    +-->
	<target name="project.INSTALL" depends="init">
		<antcall target="jaf.INSTALL"/>
		<antcall target="axis.INSTALL"/>
		<antcall target="junit.INSTALL"/>
		<antcall target="castor.INSTALL"/>
		<antcall target="xerces.INSTALL"/>
		<antcall target="jconfig.INSTALL"/>
		<antcall target="hsqldb.INSTALL"/>
		<antcall target="tomcat.INSTALL"/>
	</target>

	<!--+
	    | Reset our 3rd party components.
	    +-->
	<target name="project.RESET" depends="init">
		<echo message=""/>
		<echo message="Resetting project components ...."/>
		<antcall target="axis.RESET"/>
		<antcall target="hsqldb.RESET"/>
		<antcall target="tomcat.RESET"/>
		<echo message=""/>
		<echo message="Ok, project components reset."/>
	</target>

	<!--+
	    | Prepare our 3rd party components.
	    +-->
	<target name="project.PREPARE" depends="init">
		<echo message=""/>
		<echo message="Preparing project components ...."/>
		<antcall target="jaf.PREPARE"/>
		<antcall target="axis.PREPARE"/>
		<antcall target="junit.PREPARE"/>
		<antcall target="castor.PREPARE"/>
		<antcall target="xerces.PREPARE"/>
		<antcall target="jconfig.PREPARE"/>
		<antcall target="hsqldb.PREPARE"/>
		<antcall target="tomcat.PREPARE"/>
		<echo message=""/>
		<echo message="Ok, project components prepared."/>
	</target>

	<!--+
	    | Install our project WebApps ....
	    | Needs Tomcat already running.
	    +-->
	<target name="project.WEBAPPS" depends="init">
		<echo message=""/>
		<echo message="Installing project WebApps ...."/>
		<!-- Install our Axis webapp -->
		<antcall target="axis.webapp.install"/>
		<!-- Install our documentation webapps -->
		<antcall target="axis.docs.install"/>
		<antcall target="junit.docs.install"/>
		<antcall target="castor.docs.install"/>
		<antcall target="xerces.docs.install"/>
		<antcall target="hsqldb.docs.install"/>
		<echo message=""/>
		<echo message="Ok, project WebApps installed."/>
	</target>

	<!--+
		| Start Tomcat and install our Webapps.
		+-->
	<target name="tomcat.START" depends="">
		<parallel>
			<!-- Start tomcat in a separate JVM -->
			<sequential>
				<antcall target="tomcat.start"/>
			</sequential>
			<!-- Install our Webapps -->
			<sequential>
				<antcall target="project.WEBAPPS"/>
			</sequential>
		</parallel>
	</target>

	<!--+
		| Start Hsqldb and initialise our database.
		+-->
	<target name="hsqldb.START" depends="">
		<parallel>
			<!-- Start hsqldb in a separate JVM -->
			<sequential>
				<antcall target="hsqldb.start"/>
			</sequential>
			<!-- Initialise our database -->
			<sequential>
				<antcall target="hsqldb.BUILD"/>
			</sequential>
		</parallel>
	</target>

	<!--+
		| Start both the Tomcat and Hsqldb servers.
		+-->
	<target name="project.START" depends="init">
		<!-- Reset all of the components -->
		<antcall target="project.RESET"/>
		<!-- Prepare all of the components -->
		<antcall target="project.PREPARE"/>
		<parallel>
			<!-- Start tomcat in a separate JVM -->
			<sequential>
				<antcall target="tomcat.START"/>
			</sequential>
			<!-- Start hsqldb in a separate JVM -->
			<sequential>
				<antcall target="hsqldb.START"/>
			</sequential>
		</parallel>
	</target>

	<!--+
	    | Build our project components.
	    +-->
	<target name="project.BUILD" depends="init">
		<antcall target="config.BUILD"/>
		<antcall target="policy.BUILD"/>
		<antcall target="authentication.BUILD"/>
	</target>

	<!--+
	    | Deploy our project components.
	    +-->
	<target name="project.DEPLOY" depends="init">
		<antcall target="policy.DEPLOY"/>
		<antcall target="authentication.DEPLOY"/>
	</target>

	<!--+
	    | Test our project components.
	    +-->
	<target name="project.TEST" depends="init">
		<antcall target="policy.TEST"/>
	</target>

	<!--+
	    | Build and test our project components.
	    +-->
	<target name="project.RETEST" depends="init">
		<antcall target="project.BUILD"/>
		<antcall target="project.DEPLOY"/>
		<antcall target="project.TEST"/>
	</target>

	<!--+
	    | Re-build everything from clean.
	    +-->
	<target name="project.EVERYTHING" depends="init">
		<!-- Delete everything -->
		<delete dir="build" failonerror="false"/>
		<!-- Install everything -->
		<antcall target="project.INSTALL"/>
		<parallel>
			<!-- Start the servers -->
			<sequential>
				<antcall target="project.START"/>
			</sequential>
			<!-- Build and deploy our services -->
			<sequential>
				<antcall target="project.BUILD"/>
				<antcall target="project.DEPLOY"/>
				<antcall target="project.TEST"/>
			</sequential>
		</parallel>
	</target>

	<!-- Build a release -->
	<target name="project.RELEASE" depends="">
		<!-- TBD -->
	</target>
	
	<!-- Authentication tasks -->
	<property name="authentication.build" value="${basedir}/build/authentication"/>
	<property name="authentication.classes" value="${basedir}/build/authentication/classes"></property> <!-- use the eclipse build for now -->

	<property name="authentication.server.jar"  value="authentication-server-${project.version}.jar"/>
	<property name="authentication.client.jar"  value="authentication-client-${project.version}.jar"/>
	
		<target name="authentication.delete" depends="">
		<delete dir="${authentication.build}" failonerror="false"/>
	</target>
	
	
    <path id="authentication.client.classpath">
		<!-- The Axis libraries -->
		<path refid="axis.classpath"/>
		<!-- Our client classes -->
		<pathelement path="${authentication.build}/install/${authentication.client.jar}"/>
	</path>
	<path id="authentication.server.classpath">
	<path refid="axis.classpath"></path>
	<path refid="castor.classpath"></path>
	<pathelement path="${authentication.build}/install/${authentication.server.jar}"/>
	</path>
	
	
	<target name="authentication.testSetup" description="moves various config files from the main tree into the test tree prior to testing">
		    <antcall target="authentication.genTestSetup">
	    <param name="testbase" value="${testdir}/java"/>
	    </antcall>
	</target>
	
	<target name="authentication.testSetupJunit" description="sets up test file for the ant junit tests">
	    <antcall target="authentication.genTestSetup">
	    <param name="testbase" value="${authentication.build}/testclasses"/>
	    </antcall>
	</target>	

	
	
	<target name="authentication.genTestSetup">
	    <copy file="${basedir}/src/sql/hsqldb/create.sql" todir="${testbase}/org/astrogrid/community/common/db/">
	    </copy>
	    <copy file="${basedir}/src/castor/hsqldb/mapping.xml" todir="${testdir}/config/"></copy>
	    <echo file="${testbase}/org/astrogrid/community/common/Test.properties" append="false">
database.mapping=file://${testdir}/config/mapping.xml
database.config=file://${testdir}/config/databaseinmemory.xml
database.name=${hsqldb.database}
database.url=jdbc:hsqldb:test/data/policy
database.password=
database.user=sa
			</echo>
	
	</target>
	
	<!--+
	    | Ensure that the appropriate file is compiled
	    +-->
	
		<target name="authentication.server.javac" depends="">
		<!-- Create our build directory -->
		<mkdir dir="${authentication.build}/classes"/>
		<!-- Compile the interface classes -->
		<javac srcdir="src/java"
		       destdir="${authentication.build}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       >
			<include name="org/astrogrid/community/authentication/*.java"/>
			<include name="org/astrogrid/community/authentication/data/*.java"/>
			<classpath>
			<path refid="castor.classpath"></path>
			<path refid="jconfig.classpath"/>
			<path refid="logging.classpath"/>
			</classpath>
		</javac>
	</target>

	<!--+
		| Generate the authenticationService WSDL description from our Java class.
		| This generates the service WSDL based on the Java interface classes.
		+-->
	<target name="authentication.service.java2wsdl" depends="axis.tasks,authentication.server.javac">
		<echo message=""/>
		<echo message="Creating authenticationService WSDL from Java ...."/>
		<!-- Create our wsdl directory -->
		<mkdir dir="${basedir}/wsdl/"/>
		<!-- Generate our WSDL description -->
		<axis.java2wsdl
			output="${basedir}/wsdl/AuthenticationService.wsdl"
			classname="org.astrogrid.community.authentication.TokenAuthenticator"
			location="${axis.url}/services/AuthenticationService"
			namespace="urn:server.authentication.community.astrogrid.org"
			namespaceimpl="urn:impl.server.authentication.community.astrogrid.org"
			implclass="org.astrogrid.community.authentication.TokenAuthenticationServer"
			style="RPC"
			>
			<mapping package="org.astrogrid.community.authentication.data" namespace="urn:data.authentication.community.astrogrid.org" />
			<!-- The classpath to find the authenticationService classes -->
			<classpath>
				<path location="${authentication.build}/classes"/>
				<path refid="castor.classpath"></path>
				<path refid="logging.classpath"/>
			</classpath>
		</axis.java2wsdl>
	</target>

	<!--+
		| Generate the authenticationService code from our WSDL description.
		| This generates the Axis stubs and templates from the WSDL description.
		+-->
	<target name="authentication.client.wsdl2java" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating authenticationService Client code from WSDL ...."/>
		<!-- Create our java directory -->
		<mkdir dir="${basedir}/src/java"/>
		<!-- Generate the Java code -->
		<axis.wsdl2java
			verbose="true"
			serverside="false"
			skeletondeploy="false"
			testcase="true"
			output="${basedir}/src/java"
			url="file://${basedir}/wsdl/AuthenticationService.wsdl"
			>
			<mapping namespace="urn:server.authentication.community.astrogrid.org" package="org.astrogrid.community.delegate.authentication"/>
			<mapping namespace="urn:data.authentication.community.astrogrid.org"   package="org.astrogrid.community.service.authentication.data"/>
		</axis.wsdl2java>
	</target>
	
	<target name="authentication.service.wsdl2java" depends="axis.tasks">
		<echo message=""/>
		<echo message="Creating authenticationService Server Code from WSDL ...."/>
		<!-- Create our java directory -->
		<mkdir dir="${basedir}/src/java"/>
		<!-- Generate the Java code -->
		<axis.wsdl2java
			verbose="true"
			serverside="true"
			skeletondeploy="false"
			testcase="false"
			output="${basedir}/src/java"
			url="file://${basedir}/wsdl/AuthenticationService.wsdl"
			>
			<mapping namespace="urn:server.authentication.community.astrogrid.org" package="org.astrogrid.community.service.authentication"/>
			<mapping namespace="urn:data.authentication.community.astrogrid.org"   package="org.astrogrid.community.service.authentication.data"/>
		</axis.wsdl2java>
		<mkdir dir="${basedir}/wsdd/AuthenticationService" />
		<move todir="${basedir}/wsdd/AuthenticationService" >
		<fileset dir="${basedir}/src/java/org/astrogrid/community/service/authentication" ><include name="*.wsdd"/></fileset></move>
		<delete><fileset dir="${basedir}/src/java/org/astrogrid/community/service/authentication"
		 includes="AuthenticationServiceSoapBindingStub.java,TokenAuthenticatorService.java,TokenAuthenticatorServiceLocator.java"/>
		
		</delete>
	</target>

	<!--+
		| Compile authentication classes - could be all the classes except errors are forcing the excludes....
		+-->
	<target name="authentication.javac" depends="" description="compile all the classes related to authentication">
		<!-- Create our build directory -->
		<mkdir dir="${authentication.build}/classes"/>
		<!-- Compile the server classes -->
		<javac srcdir="${basedir}/src/java"
		       destdir="${authentication.build}/classes"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       verbose="off"
		       >
		     <include name="org/astrogrid/community/**"/>
		       <exclude name="org/astrogrid/community/policy/client/**"/>
		       <exclude name="org/astrogrid/community/policy/server/**"/>
		       <exclude name="org/astrogrid/community/policy/loader/**"/>
		       <exclude name="org/astrogrid/community/auth/**"/>
		       <exclude name="org/astrogrid/community/delegate/policy/**"/> 

			<classpath>
				<!-- Include the JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- Include the Castor libraries -->
				<path refid="castor.classpath"/>
				<!-- Include the Axis libraries -->
				<path refid="axis.classpath"/>
				<path refid="jconfig.classpath"/>
			</classpath>
		</javac>
	</target>

	<target name="authentication.test.javac" depends="authentication.javac" description="compile all the test case classes related to authentication">
		<!-- Create our build directory -->
		<mkdir dir="${authentication.build}/testclasses"/>
		<!-- Compile the server classes -->
		<javac srcdir="${basedir}/test/java"
		       destdir="${authentication.build}/testclasses"
		       debug="on"
		       deprecation="on"
		       optimize="on"
		       verbose="off"
		       >
		     <include name="org/astrogrid/community/**"/>
			<classpath>
				<pathelement location="${authentication.build}/classes"/>
				<!-- Include the JUnit libraries -->
				<path refid="junit.classpath"/>
				<!-- Include the Castor libraries -->
				<path refid="castor.classpath"/>
				<!-- Include the Axis libraries -->
				<path refid="axis.classpath"/>
				<path refid="jconfig.classpath"/>
				
				
			</classpath>
		</javac>
	</target>

	<!--+
		| Jar our server classes.
		+-->
	<target name="authentication.server.jar" depends="authentication.javac">
		<!-- Create our jar file -->
		<mkdir dir="${authentication.build}/install"/>
		<jar destfile="${authentication.build}/install/${authentication.server.jar}">
			<!-- Copy our own Java source -->
			<fileset dir="${authentication.classes}">
				<include name="org/astrogrid/community/authentication/**"/>
				<include name="org/astrogrid/community/service/authentication/**"/>
				<include name="org/astrogrid/community/policy/data/**"/>
				<include name="org/astrogrid/community/common/**"/>
				<exclude name="**/junit/**" />
			</fileset>
		</jar>
	</target>

	<!--+
		| Jar our client classes.
		+-->
	<target name="authentication.client.jar" depends="">
		<!-- Create our build directory -->

		<mkdir dir="${authentication.build}/install"/>
		
		<!-- Create our jar file -->
		<jar destfile="${authentication.build}/install/${authentication.client.jar}">
			<!-- Copy our own Java source -->
			<fileset dir="${authentication.classes}">
				<include name="org/astrogrid/community/authentication/data/**"/>
				<include name="org/astrogrid/community/authentication/server/**"/>
				<include name="org/astrogrid/community/delegate/authentication/**"/>
				<include name="org/astrogrid/community/service/authentication/data/**"/>
				<include name="org/astrogrid/community/common/**"/>
				<exclude name="**/junit/**" />
			</fileset>
		</jar>
	</target>

	<!--+
		| Build our server config files.
		| Not sure of the best place to put these at the moment.
		| The mapping file should not change, so probably should be in the jar.
		| The database file should be user configurable, so should NOT be in the jar.
		+-->
	<target name="authentication.server.config" depends="">
		<!-- Create our config directory -->
		<mkdir dir="${authentication.build}/config"/>
		<!-- Copy our database mapping files -->
		<copy verbose="false" overwrite="true" toDir="${authentication.build}/config">
			<fileset dir="src/castor/hsqldb">
				<include name="database.xml"/>
				<include name="mapping.xml"/>
			</fileset>
		</copy>
	</target>
	
	<target name="authentication.GENSERVICE" depends="" description="regenerates the WSDL and client stubs for the service">
		<antcall target="authentication.delete"/>
		<antcall target="authentication.server.javac"/>
		<antcall target="authentication.service.java2wsdl"/>
		<antcall target="authentication.service.wsdl2java"/>
		<antcall target="authentication.client.wsdl2java" />	
	</target>

	<!--+
	    | Build our authentication service.
	    +-->
	<target name="authentication.BUILD" depends="">
	    <antcall target="authentication.delete" />
		<antcall target="authentication.javac"/>
		<antcall target="authentication.server.config"/>
		<antcall target="authentication.server.jar"/>
		<antcall target="authentication.client.jar"/>
	</target>

	<!--+
		| Install our service jars.
		+-->
	<target name="authentication.server.install" depends="">
		<!-- Copy the 3rd party libraries into our Axis WEB-INF/lib directory -->
		<copy verbose="true" todir="${axis.webapp}/WEB-INF/lib">
			<fileset dir="${castor.home}">
				<include name="jta1.0.1.jar"/>
				<include name="castor-${castor.version}.jar"/>
				<include name="castor-${castor.version}-xml.jar"/>
			</fileset>
			<fileset dir="${xerces.home}">
				<include name="xml-apis.jar"/>
				<include name="xercesImpl.jar"/>
			</fileset>
			<fileset dir="${hsqldb.home}/lib">
				<include name="hsqldb.jar"/>
			</fileset>
			<fileset dir="${jconfig.home}/dist">
				<include name="jconfig.jar"/>
			</fileset>
			
		</copy>
		<!-- Copy our jar into the Axis WEB-INF/lib directory -->
		<copy verbose="true" todir="${axis.webapp}/WEB-INF/lib">
			<fileset dir="${authentication.build}/install">
				<include name="${authentication.server.jar}"/>
			</fileset>
		</copy>
	</target>

	<!--+
		| Remove our Axis service files.
		+-->
	<target name="authentication.server.remove" depends="axis.tasks">
		<!-- Remove our jar from the Axis WEB-INF/lib directory -->
		<delete verbose="true" failonerror="false">
			<fileset dir="${axis.webapp}/WEB-INF/lib">
				<include name="authentication-server*"/>
			</fileset>
		</delete>
	</target>

	<!--+
		| Deploy our authenticationService service.
		+-->
	<target name="authentication.service.deploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Deploy our authenticationService service -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${basedir}/wsdd/AuthenticationService/deploy.wsdd"
			/>
	</target>
	<target name="authentication.service.undeploy" depends="axis.tasks">
		<!-- Wait for the Axis service -->
		<antcall target="axis.wait"/>
		<!-- Deploy our authenticationService service -->
		<axis.admin
			port="${axis.port}"
			hostname="${axis.host}"
			servletpath="/${axis.servlet}/services/AdminService"
			debug="true"
			xmlfile="${basedir}/wsdd/AuthenticationService/undeploy.wsdd"
			/>
	</target>
	
		<target name="authentication.service.axis2wsdl" depends="">
		<echo message=""/>
		<echo message="Requesting WSDL from Axis ...."/>
		<!-- Create our wsdl directory -->
		<mkdir dir="${authentication.build}/wsdl/axis2wsdl"/>
		<!-- Request our WSDL description -->
		<get verbose="true" usetimestamp="true"
			src="${axis.url}/services/AuthenticationService?wsdl"
			dest="${authentication.build}/wsdl/axis2wsdl/AuthenticationService.wsdl"
			/>
	</target>
	

		<!--+
	    | Deploy our policy services.
	    | If we were just copying our classes into the Axis/WEB-INF/classes directory, then no need to re-load Axis.
	    | Because we are installing our classes as a jar file into the Axis/WEB-INF/lib directory, we need to re-load Axis before we can deploy the service.
	    +-->
	<target name="authentication.DEPLOY" depends="authentication.server.jar">
		<!-- Install our jar file -->
		<antcall target="authentication.server.install"/>
		<!-- Reload Axis -->
		<antcall target="axis.webapp.reload"/>
		<!-- Deploy our service -->
		<antcall target="authentication.service.deploy"/>
		<!-- Check we can read our service WSDL -->
		<antcall target="authentication.service.axis2wsdl"/>
	</target>

	<!--+
	    | Remove our policy service.
	    +-->
	<target name="authentication.REMOVE" depends="">
		<!-- Remove our service -->
		<antcall target="authentication.server.undeploy"/>
		<antcall target="authentication.server.remove"/>
	</target>

	<!--+
	    | Reload our policy service.
	    +-->
	<target name="authentication.RELOAD" depends="">
		<!-- Remove our service -->
		<antcall target="authentication.REMOVE"/>
		<!-- Deploy our service -->
		<antcall target="authentication.DEPLOY"/>
	</target>

	<!--+
		| Run our server side JUnit tests.
		+-->
	<target name="authentication.server.junit" depends="authentication.test.javac,authentication.testSetupJunit,hsqldb.data.delete">
		<!-- Create our reports directory -->
		<mkdir dir="${authentication.build}/junit"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<!-- The Policy classes -->
				<path refid="authentication.server.classpath"/>
				<pathelement location="${authentication.build}/testclasses/"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Pass in the server config properties -->
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${authentication.build}/junit">
				<fileset dir="${authentication.build}/testclasses">
				   <exclude name="**/delegate/**"/>
				   <exclude name="**/HsqlDBInMemTestCase.class"/>
				   <exclude name="**/UnitTestData.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--+
		| Run our client JUnit tests.
		+-->
	<target name="authentication.client.junit" depends="authentication.test.javac">
		<!-- Create our reports directory -->
		<mkdir dir="${authentication.build}/junit"/>
		<antcall target="authentication.database.showtestdata"></antcall>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<!-- The Policy classes -->
				<path refid="authentication.client.classpath"/>
				<pathelement location="${authentication.build}/testclasses/"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${authentication.build}/junit" haltonfailure="no">
				<fileset dir="${authentication.build}/testclasses/">
					<include name="**/delegate/**"/>			
				</fileset>
			</batchtest>
		</junit>
	</target>
	
    <target name="authentication.database.loadtestdata" depends="">
		<sql driver="org.hsqldb.jdbcDriver"
		     url="${hsqldb.url}"
		     classpathref="hsqldb.classpath"
		     userid="${hsqldb.user}"
		     password="${hsqldb.pass}"
		     print="true"
		     src="${testdir}/java/org/astrogrid/community/common/db/testData.sql"
			/>
		
	</target>
		<target name="authentication.database.showtestdata" depends="">
		<sql driver="org.hsqldb.jdbcDriver"
		     url="${hsqldb.url}"
		     classpathref="hsqldb.classpath"
		     userid="${hsqldb.user}"
		     password="${hsqldb.pass}"
		     print="true"
			>
			<![CDATA[
				SELECT * FROM accounts    ;
				SELECT * FROM securitytokens;
			]]>
		</sql>
	</target>
	

	<!--+
	    | Test our policy service.
	    +-->
	<target name="authentication.TEST" depends="authentication.testSetup">
		<!-- Reset our database -->
		<antcall target="hsqldb.database.delete"/>
		<!-- Run our server side tests -->
		<antcall target="authentication.server.junit"/>
		<!-- Run our client side tests -->
		<antcall target="authentication.client.junit"/>
		<!-- Display our database -->
		<antcall target="hsqldb.database.select"/>
	</target>
		
	
	<!-- End Authentication tasks -->

	<!--+
		|
To run from command line.
	project.INSTALL
	project.START
Then, in separate command line.
	project.BUILD
	project.DEPLOY
	project.TEST
To repeat
	project.RETEST
		|
		+-->


	<!--+
	    | Quick re-test for the database load
	    +-->
	<target name="policy.LOAD-TEST" depends="">
		<!-- Build our server code -->
		<antcall target="policy.server.prepare"/>
		<antcall target="policy.server.javac"/>
		<antcall target="policy.server.jar"/>
		<!-- Copy our test data -->
		<antcall target="policy.loader.data"/>
		<!-- Run our loader tests -->
		<!-- <antcall target="policy.loader.junit"/> -->
		<antcall target="policy.loader"/>
		<!-- Display our database contents -->
		<antcall target="hsqldb.database.select"/>
	</target>

</project>

