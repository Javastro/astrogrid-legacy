<?xml version="1.0" encoding="UTF-8"?>
<!--+
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/resolver/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2004/07/14 13:50:07 $</cvs:date>
    | <cvs:version>$Revision: 1.12 $</cvs:version>
    | <cvs:log>
    |   $Log: maven.xml,v $
    |   Revision 1.12  2004/07/14 13:50:07  dave
    |   Merged development branch, dave-dev-200406301228, into HEAD
    |
    |   Revision 1.11.4.1  2004/07/13 11:50:43  dave
    |   Tidied up the file headers
    |
    |   Revision 1.11  2004/06/29 22:21:47  dave
    |   Merged development branch, dave-dev-200406291222, into HEAD
    |
    |   Revision 1.10.8.2  2004/06/29 15:38:22  dave
    |   Removed sub-project site goals
    |
    |   Revision 1.10.8.1  2004/06/29 13:31:03  dave
    |   Removed the extra site goal
    |
    |   Revision 1.10  2004/06/18 13:45:20  dave
    |   Merged development branch, dave-dev-200406081614, into HEAD
    |
    |   Revision 1.9.18.1  2004/06/17 13:38:59  dave
    |   Tidied up old CVS log entries
    |
    | </cvs:log>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:deploy="deploy"
    xmlns:astro="org.astrogrid.community"
    xmlns:custom="org.astrogrid.community.resolver"
    default="astrogrid-rebuild-snapshot"
    >

    <!--+
        | Import the common from our parent project.
        | Looks like this gets included anyway, possibly because our project inherits from ../maven.project.xml ?
    <core:import inherit="true" file="${maven.build.dir}/../../maven/maven.xml"/>
        +-->

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>

    <!-- ================ Custom tags ================ -->

    <!--+
        | Define our local tag library.
        +-->
    <define:taglib uri="org.astrogrid.community.resolver">
        <!--+
            | Deploy a service into the local Axis config.
            | Attrib : service.name  eg. PolicyManager
            | Attrib : service.class eg. org.astrogrid.community.common.policy.manager.PolicyManager
            | Attrib : service.file  eg. local.manager.policy.xml
            +-->
        <define:tag name="register.service.local">
            <ant:echo message=""/>
            <ant:echo message="Registering local service"/>
            <ant:echo message="  Service name  : ${service.name}"/>
            <ant:echo message="  Service class : ${service.class}"/>
            <ant:echo message="  Service file  : ${service.file}"/>
            <ant:echo message="  Service wsdl  : ${wsdlDir}/${service.name}.wsdl"/>
            <ant:echo message="  Service href  : local:///${service.name}"/>
            <!--+
                | Modify the service WSDL to include a 'local://..' url.
                +-->
            <ant:xslt style="${basedir}/src/xsl/registry/service.wsdl.xsl"
                  in="${wsdlDir}/${service.name}.wsdl"
                  out="${wsdlDir}/${service.name}.tmp">
                <outputproperty name="method" value="xml"/>
                <outputproperty name="indent" value="yes"/>
                <param name="service.name" expression="${service.name}"/>
                <param name="service.href" expression="local:///${service.name}"/>
            </ant:xslt>
            <ant:move overwrite="true" file="${wsdlDir}/${service.name}.tmp" toFile="${wsdlDir}/${service.name}.wsdl"/>
            <!--+
                | Create the registry entry that points to the service WSDL.
                +-->
            <ant:xslt style="${basedir}/src/xsl/registry/service.entry.xsl"
                  in="${basedir}/src/config/registry/service.entry.xml"
                  out="${org.astrogrid.registry.data}/local/${service.file}">
                <outputproperty name="method" value="xml"/>
                <outputproperty name="indent" value="yes"/>
                <param name="service.authority" expression="${org.astrogrid.community.ident}"/>
                <param name="service.resource"  expression="${service.class}"/>
                <param name="service.wsdl"      expression="file:///${wsdlDir}/${service.name}.wsdl"/>
            </ant:xslt>
            <!--+
                | Add the config property reference.
                +-->
            <ant:propertyfile file="${maven.build.dir}/config/registry.properties">
                <entry
                    key="${org.astrogrid.community.ident}/${service.class}"
                    value="file:///${maven.build.dir}/config/registry/local/${service.file}"/>
            </ant:propertyfile>
        </define:tag>
    </define:taglib>

    <!-- ================ Reactor goals ================ -->

    <!--+
        | Clean, build and install our snapshot jar.
        +-->
    <goal name="astrogrid-rebuild-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean"/>
        <attainGoal name="astrogrid-install-snapshot"/>
    </goal>

    <!--+
        | Clean our build target.
        +-->
    <goal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean:clean"/>
    </goal>

    <!--+
        | Build and install our component jar.
        +-->
    <goal name="astrogrid-install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Build our jar.
            +-->
        <attainGoal name="jar:jar"/>
        <!--+
            | Install our jar.
            +-->
        <core:set var="astrogrid.artifact.type" value="jar"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="install-local"/>
        <!--+
            | Build our zip file.
            +-->
        <attainGoal name="build.zipfile"/>
        <!--+
            | Install our zip file.
            +-->
        <core:set var="astrogrid.artifact.type" value="zip"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="install-local"/>
    </goal>

    <!--+
        | Build and install our snapshot jar.
        +-->
    <goal name="astrogrid-install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot name.
            +-->
        <maven:snapshot project="${pom}"/>
        <core:set var="maven.final.name" value="${snapshotSignature}"/>
        <!--+
            | Build our jar.
            +-->
        <attainGoal name="jar:jar"/>
        <!--+
            | Install our SNAPSHOT jar.
            +-->
        <core:set var="astrogrid.artifact.type" value="jar"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="install-local-snapshot"/>
        <!--+
            | Build our zip file.
            +-->
        <attainGoal name="build.zipfile"/>
        <!--+
            | Install our SNAPSHOT zip.
            +-->
        <core:set var="astrogrid.artifact.type" value="zip"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="install-local-snapshot"/>
    </goal>

    <!--+
        | Build and deploy our component jar.
        +-->
    <goal name="astrogrid-deploy-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our artifact jar.
            +-->
        <attainGoal name="astrogrid-install-artifact"/>
        <!--+
            | Deploy our jar.
            +-->
        <core:set var="astrogrid.artifact.type" value="jar"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="deploy-local"/>
        <!--+
            | Deploy our zip.
            +-->
        <core:set var="astrogrid.artifact.type" value="zip"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="deploy-local"/>
    </goal>

    <!--+
        | Build and deploy our snapshot jar.
        +-->
    <goal name="astrogrid-deploy-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot jar.
            +-->
        <attainGoal name="astrogrid-install-snapshot"/>
        <!--+
            | Deploy our SNAPSHOT jar.
            +-->
        <core:set var="astrogrid.artifact.type" value="jar"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="deploy-local-snapshot"/>
        <!--+
            | Deploy our SNAPSHOT zip.
            +-->
        <core:set var="astrogrid.artifact.type" value="zip"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="deploy-local-snapshot"/>
    </goal>

    <!-- ================ Component goals ================ -->

    <!--+
        | Prepare for the java:compile task.
        | Generate the WSDL and Java stubs for our service interface(s).
        +-->
    <preGoal name="java:compile">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for java:compile ...."/>
        <!--+
            | Initialise our Axis tools
            +-->
        <attainGoal name="init.tools"/>
        <!--+
            | Create our output directories.
            +-->
        <ant:mkdir dir="${wsdlDir}"/>
        <ant:mkdir dir="${tempDir}"/>
        <ant:mkdir dir="${javaDir}"/>
    </preGoal>

    <!--+
        | Deploy our WebServices into our local Axis WebApp.
        +-->
    <preGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing services for tests"/>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Check the JUnit test settings.
            +-->
        <ant:echo message=""/>
        <ant:echo message="JUnit fork VM - ${maven.junit.fork}"/>
        <ant:echo message="JUnit test directory : ${maven.junit.dir}"/>
        <!--+
            | Initialise our config files.
        <attainGoal name="init.config"/>
            +-->
        <!--+
            | Initialise our mock services.
            +-->
        <attainGoal name="init.mocks"/>
    </preGoal>

    <!--+
        | Clean up after our tests.
        +-->
    <postGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Cleaning up after JUnit tests"/>
    </postGoal>

    <!--+
        | Prepare the files for the jar goal.
        | Adds the generated WSDL files into the jar META-INF.
        +-->
    <preGoal name="jar:jar">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for jar:jar ...."/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Create the META-INF directory.
            +-->
        <ant:mkdir dir="${maven.build.dest}/META-INF"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdl"/>
    </preGoal>

    <!--+
        | Initialise our mock WebServices.
        | This generates and deploys the WSDL for our mock services.
        +-->
    <goal name="init.mocks">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Initialising mock services ...."/>
        <!--+
            | Initialise our Axis tools
            +-->
        <attainGoal name="init.tools"/>
        <!--+
            | Create our output directories.
            +-->
        <ant:mkdir dir="${wsdlDir}"/>
        <ant:mkdir dir="${tempDir}"/>
        <ant:mkdir dir="${javaDir}"/>
        <!--+
            | Generate our DatabaseManager WSDL and stubs.
            +-->
        <astro:service.generate
            service.name="DatabaseManager"
            service.wsdd="org/astrogrid/community/common/database/manager/deploy.wsdd"
            service.class="org.astrogrid.community.common.database.manager.DatabaseManagerMock"
            service.interface="org.astrogrid.community.common.database.manager.DatabaseManager"
            service.namespace="urn:manager.database.common.community.astrogrid.org"
            />
        <!--+
            | Generate our PolicyManager WSDL and stubs.
            +-->
        <astro:service.generate
            service.name="PolicyManager"
            service.wsdd="org/astrogrid/community/common/policy/manager/deploy.wsdd"
            service.class="org.astrogrid.community.common.policy.manager.PolicyManagerMock"
            service.interface="org.astrogrid.community.common.policy.manager.PolicyManager"
            service.namespace="urn:manager.policy.common.community.astrogrid.org"
            />
        <!--+
            | Generate our PolicyService WSDL and stubs.
            +-->
        <astro:service.generate
            service.name="PolicyService"
            service.wsdd="org/astrogrid/community/common/policy/service/deploy.wsdd"
            service.class="org.astrogrid.community.common.policy.service.PolicyServiceMock"
            service.interface="org.astrogrid.community.common.policy.service.PolicyService"
            service.namespace="urn:service.policy.common.community.astrogrid.org"
            />
        <!--+
            | Generate our SecurityManager WSDL and stubs.
            +-->
        <astro:service.generate
            service.name="SecurityManager"
            service.wsdd="org/astrogrid/community/common/security/manager/deploy.wsdd"
            service.class="org.astrogrid.community.common.security.manager.SecurityManagerMock"
            service.interface="org.astrogrid.community.common.security.manager.SecurityManager"
            service.namespace="urn:manager.security.common.community.astrogrid.org"
            />
        <!--+
            | Generate our SecurityService WSDL and stubs.
            +-->
        <astro:service.generate
            service.name="SecurityService"
            service.wsdd="org/astrogrid/community/common/security/service/deploy.wsdd"
            service.class="org.astrogrid.community.common.security.service.SecurityServiceMock"
            service.interface="org.astrogrid.community.common.security.service.SecurityService"
            service.namespace="urn:service.security.common.community.astrogrid.org"
            />
        <!--+
            | Deploy our services.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Deploying WebServices ..."/>
        <astro:service.deploy service.name="DatabaseManager"/>
        <astro:service.deploy service.name="PolicyManager"/>
        <astro:service.deploy service.name="PolicyService"/>
        <astro:service.deploy service.name="SecurityManager"/>
        <astro:service.deploy service.name="SecurityService"/>
        <!--+
            | Register our local services
            +-->
        <custom:register.service.local
            service.name="PolicyManager"
            service.class="org.astrogrid.community.common.policy.manager.PolicyManager"
            service.file="org.astrogrid.local.policy.manager.xml"
            />
        <custom:register.service.local
            service.name="PolicyService"
            service.class="org.astrogrid.community.common.policy.service.PolicyService"
            service.file="org.astrogrid.local.policy.service.xml"
            />
        <custom:register.service.local
            service.name="SecurityManager"
            service.class="org.astrogrid.community.common.security.manager.SecurityManager"
            service.file="org.astrogrid.local.security.manager.xml"
            />
        <custom:register.service.local
            service.name="SecurityService"
            service.class="org.astrogrid.community.common.security.service.SecurityService"
            service.file="org.astrogrid.local.security.service.xml"
            />
    </goal>

    <!--+
        | Initialise our config files.
        | No longer used ..
        +-->
    <goal name="init.config">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Initialising config files ...."/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Create our config directories.
            +-->
        <ant:mkdir dir="${maven.build.dir}/config"/>
        <ant:mkdir dir="${maven.build.dir}/config/registry"/>
        <ant:mkdir dir="${maven.build.dir}/config/community"/>
        <!--+
            | Copy our config files.
        <ant:copy todir="${maven.build.dir}/config">
            <fileset dir="src/config"/>
        </ant:copy>
            +-->
    </goal>

<!-- =============== -->

    <!--+
        | Add our Community jars.
        +-->
    <goal name="install.client">
        <ant:echo message="Installing Community client jar ...."/>
        <!--+
            | Check if we have already done this.
            +-->
        <core:if test="${!clientDone}">
            <ant:echo message="...."/>
            <core:set var="clientDone" value="true"/>
            <!--+
                | Create our target directory.
                +-->
            <ant:mkdir dir="${maven.build.dir}/resolver/jar"/>
            <!--+
                | Project.getDependencyPath() only works for jar and ejb files.
                | See : http://maven.apache.org/xref/org/apache/maven/DependencyClasspathBuilder.html#100
                | Means we have to do this the long way round .... by iterating through our list of artifacts.
                +-->
            <core:forEach var="artifact" items="${pom.getArtifacts()}">
                <!--+
                    | If the artifact matches our criteria.
                    +-->
                <core:if test="${artifact.dependency.getProperty('jar.fileset')=='true'}">
                    <ant:echo message="Found Community jar"/>
                    <ant:echo message="  Ident    : ${artifact.getDependency().getId()}"/>
                    <ant:echo message="  Version  : ${artifact.getDependency().getVersion()}"/>
                    <ant:echo message="  Type     : ${artifact.getDependency().getType()}"/>
                    <ant:echo message="  Name     : ${artifact.getName()}"/>
                    <ant:echo message="  Path     : ${artifact.getPath()}"/>
                    <!--+
                        | Copy the jar file to our target directory.
                        +-->
                    <ant:copy file="${artifact.getPath()}" toDir="${maven.build.dir}/resolver/jar"/>
                </core:if>
            </core:forEach>
        </core:if>
    </goal>

    <!--+
        | Copy our 3rd party libraries.
        +-->
    <goal name="install.depends">
        <ant:echo message="Installing 3rd party libraries ...."/>
        <!--+
            | Check if we have already done this.
            +-->
        <core:if test="${!libsDone}">
            <ant:echo message="...."/>
            <core:set var="libsDone" value="true"/>
            <!--+
                | Create our target directory.
                +-->
            <ant:mkdir dir="${maven.build.dir}/resolver/lib"/>
            <!--+
                | Project.getDependencyPath() only works for jar and ejb files.
                | See : http://maven.apache.org/xref/org/apache/maven/DependencyClasspathBuilder.html#100
                | Means we have to do this the long way round .... by iterating through our list of artifacts.
                +-->
            <core:forEach var="artifact" items="${pom.getArtifacts()}">
                <!--+
                    | If the artifact matches our criteria.
                    +-->
                <core:if test="${artifact.dependency.getProperty('lib.fileset')=='true'}">
                    <ant:echo message="Found 3rd party library"/>
                    <ant:echo message="  Ident    : ${artifact.getDependency().getId()}"/>
                    <ant:echo message="  Version  : ${artifact.getDependency().getVersion()}"/>
                    <ant:echo message="  Type     : ${artifact.getDependency().getType()}"/>
                    <ant:echo message="  Name     : ${artifact.getName()}"/>
                    <ant:echo message="  Path     : ${artifact.getPath()}"/>
                    <!--+
                        | Copy the jar file to our target directory.
                        +-->
                    <ant:copy file="${artifact.getPath()}" toFile="${maven.build.dir}/resolver/lib/${artifact.getName()}"/>
                </core:if>
            </core:forEach>
        </core:if>
    </goal>

    <!--+
        | Copy our Axis libraries.
        +-->
    <goal name="install.axis">
        <ant:echo message="Installing Axis libraries ...."/>
        <!--+
            | Initialise our Axis libraries
            +-->
        <attainGoal name="init.paths"/>
        <attainGoal name="init.classpath"/>
        <!--+
            | Copy all the jars from the Axis lib directory.
            +-->
        <ant:copy toDir="${maven.build.dir}/resolver/lib">
            <fileset dir="${axisDir}/WEB-INF/lib">
                <include name="*.jar"/>
            </fileset>
        </ant:copy>
    </goal>

    <!--+
        | Copy our ant script and tools.
        +-->
    <goal name="install.tools">
        <ant:echo message="Installing Ant script and tools ...."/>
        <!--+
            | Copy our Ant script and properties.
            +-->
        <ant:copy toDir="${maven.build.dir}/resolver">
            <fileset dir="src/ant">
                <include name="*.xml"/>
                <include name="*.properties"/>
            </fileset>
        </ant:copy>
        <!--+
            | Copy our configuration data.
            +-->
        <ant:copy toDir="${maven.build.dir}/resolver/config">
            <fileset dir="src/config">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </ant:copy>
        <!--+
            | Copy our resolver library.
            | TODO - This should either be SNAPSHOT or version.
            +-->
        <ant:copy toDir="${maven.build.dir}/resolver/jar">
            <fileset dir="${maven.build.dir}">
                <include name="${maven.final.name}.jar"/>
            </fileset>
        </ant:copy>
    </goal>

    <!--+
        | Create our zipfile.
        | We could use the Maven dist plugin, but quite frankly, I'm tired of suprises.
        +-->
    <goal name="build.zipfile">
        <!--+
            | Install the zipfile components.
            +-->
        <attainGoal name="install.client"/>
        <attainGoal name="install.depends"/>
        <attainGoal name="install.axis"/>
        <attainGoal name="install.tools"/>
        <!--+
            | Create our zip file.
            +-->
        <ant:zip
            zipfile="${maven.build.dir}/${maven.final.name}.zip"
            compress="true"
            basedir="${maven.build.dir}/resolver"
            />
    </goal>
</project>
