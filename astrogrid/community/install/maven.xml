<?xml version="1.0" encoding="UTF-8"?>
<!--+
    | Maven build tasks for the AstroGrid community webapp.
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/install/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2004/03/30 01:40:03 $</cvs:date>
    | <cvs:version>$Revision: 1.11 $</cvs:version>
    | <cvs:log>
    |   $Log: maven.xml,v $
    |   Revision 1.11  2004/03/30 01:40:03  dave
    |   Merged development branch, dave-dev-200403242058, into HEAD
    |
    |   Revision 1.10.4.2  2004/03/30 01:38:14  dave
    |   Refactored resolver and install toolkits.
    |
    |   Revision 1.10.4.1  2004/03/28 02:00:55  dave
    |   Added database management tasks.
    |
    |   Revision 1.10  2004/03/23 16:34:08  dave
    |   Merged development branch, dave-dev-200403191458, into HEAD
    |
    |   Revision 1.9.2.1  2004/03/23 11:11:53  dave
    |   No comment ....
    |
    |   Revision 1.9  2004/03/19 14:43:14  dave
    |   Merged development branch, dave-dev-200403151155, into HEAD
    |
    |   Revision 1.8.2.2  2004/03/19 00:14:59  dave
    |   Changed clean target
    |
    |   Revision 1.8.2.1  2004/03/18 13:37:22  dave
    |   Added default clean-build goal
    |
    | </cvs:log>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:deploy="deploy"
    default="astrogrid-rebuild-snapshot"
    >


    <!--+
        | Import the goals from our parent project.
        | Looks like this gets included anyway, possibly because our project inherits from ../maven.project.xml ?
    <core:import inherit="true" file="${maven.build.dir}/../../maven/maven.xml"/>
        +-->

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>

    <!-- ================ Reactor goals ================ -->

    <!--+
        | Clean, build and install our snapshot jar.
        +-->
    <goal name="astrogrid-rebuild-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean"/>
        <attainGoal name="astrogrid-install-snapshot"/>
    </goal>

    <!--+
        | Clean our build target.
        +-->
    <goal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean:clean"/>
    </goal>

    <!--+
        | Build and install our toolkit.
        +-->
    <goal name="astrogrid-install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Build our jar file.
            +-->
        <attainGoal name="build.jarfile"/>
        <!--+
            | Install our jar file.
            +-->
        <core:set var="astrogrid.artifact.type" value="jar"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="install-local"/>
        <!--+
            | Build our zip file.
            +-->
        <attainGoal name="build.zipfile"/>
        <!--+
            | Install our zip file.
            +-->
        <core:set var="astrogrid.artifact.type" value="zip"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="install-local"/>
    </goal>

    <!--+
        | Build and install our SNAPSHOT toolkit.
        +-->
    <goal name="astrogrid-install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot name.
            +-->
        <maven:snapshot project="${pom}"/>
        <core:set var="maven.final.name" value="${snapshotSignature}"/>
        <!--+
            | Build our jar file.
            +-->
        <attainGoal name="build.jarfile"/>
        <!--+
            | Install our SNAPSHOT jar.
            +-->
        <core:set var="astrogrid.artifact.type" value="jar"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="install-local-snapshot"/>
        <!--+
            | Build our zip file.
            +-->
        <attainGoal name="build.zipfile"/>
        <!--+
            | Install our SNAPSHOT zip.
            +-->
        <core:set var="astrogrid.artifact.type" value="zip"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="install-local-snapshot"/>
    </goal>

    <!--+
        | Build and deploy our toolkit.
        +-->
    <goal name="astrogrid-deploy-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our artifact jar.
            +-->
        <attainGoal name="astrogrid-install-artifact"/>
        <!--+
            | Deploy our jar.
            +-->
        <core:set var="astrogrid.artifact.type" value="jar"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="deploy-local"/>
        <!--+
            | Deploy our zip.
            +-->
        <core:set var="astrogrid.artifact.type" value="zip"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="deploy-local"/>
    </goal>

    <!--+
        | Build and deploy our SNAPSHOT toolkit.
        +-->
    <goal name="astrogrid-deploy-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our artifact jar.
            +-->
        <attainGoal name="astrogrid-install-snapshot"/>
        <!--+
            | Deploy our SNAPSHOT jar.
            +-->
        <core:set var="astrogrid.artifact.type" value="jar"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="deploy-local-snapshot"/>
        <!--+
            | Deploy our SNAPSHOT zip.
            +-->
        <core:set var="astrogrid.artifact.type" value="zip"/>
        <core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
        <attainGoal name="deploy-local-snapshot"/>
    </goal>

    <!--+
        | Build our component website.
        +-->
    <goal name="site">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="site:generate"/>
        <!--+
            | Add stuff here to put together the install instructions ....
            +-->
    </goal>

    <!-- ================ Project goals ================ -->

    <!--+
        | Add our Community WebApp war file.
        +-->
    <goal name="install.webapp">
        <ant:echo message="Installing Community webapp war ...."/>
        <!--+
            | Check if we have already done this.
            +-->
        <core:if test="${!webappDone}">
            <ant:echo message="...."/>
            <core:set var="webappDone" value="true"/>
            <!--+
                | Create our target directory.
                +-->
            <ant:mkdir dir="${maven.build.dir}/install/war"/>
            <!--+
                | Project.getDependencyPath() only works for jar and ejb files.
                | See : http://maven.apache.org/xref/org/apache/maven/DependencyClasspathBuilder.html#100
                | Means we have to do this the long way round .... by iterating through our list of artifacts.
                +-->
            <core:forEach var="artifact" items="${pom.getArtifacts()}">
                <!--+
                    | If the artifact matches our criteria.
                    +-->
                <core:if test="${artifact.dependency.getProperty('war.fileset')=='true'}">
                    <ant:echo message="Found Community webapp"/>
                    <ant:echo message="  Ident    : ${artifact.getDependency().getId()}"/>
                    <ant:echo message="  Type     : ${artifact.getDependency().getType()}"/>
                    <ant:echo message="  Name     : ${artifact.getName()}"/>
                    <ant:echo message="  Path     : ${artifact.getPath()}"/>
                    <!--+
                        | Copy the war file to our target directory.
                        +-->
                    <ant:copy file="${artifact.getPath()}" toDir="${maven.build.dir}/install/war"/>
                </core:if>
            </core:forEach>
        </core:if>
    </goal>

    <!--+
        | Add our Community jars.
        +-->
    <goal name="install.client">
        <ant:echo message="Installing Community client jar ...."/>
        <!--+
            | Check if we have already done this.
            +-->
        <core:if test="${!clientDone}">
            <ant:echo message="...."/>
            <core:set var="clientDone" value="true"/>
            <!--+
                | Create our target directory.
                +-->
            <ant:mkdir dir="${maven.build.dir}/install/lib"/>
            <!--+
                | Project.getDependencyPath() only works for jar and ejb files.
                | See : http://maven.apache.org/xref/org/apache/maven/DependencyClasspathBuilder.html#100
                | Means we have to do this the long way round .... by iterating through our list of artifacts.
                +-->
            <core:forEach var="artifact" items="${pom.getArtifacts()}">
                <!--+
                    | If the artifact matches our criteria.
                    +-->
                <core:if test="${artifact.dependency.getProperty('jar.fileset')=='true'}">
                    <ant:echo message="Found Community jar"/>
                    <ant:echo message="  Ident    : ${artifact.getDependency().getId()}"/>
                    <ant:echo message="  Version  : ${artifact.getDependency().getVersion()}"/>
                    <ant:echo message="  Type     : ${artifact.getDependency().getType()}"/>
                    <ant:echo message="  Name     : ${artifact.getName()}"/>
                    <ant:echo message="  Path     : ${artifact.getPath()}"/>
                    <!--+
                        | Copy the jar file to our target directory.
                        +-->
                    <ant:copy file="${artifact.getPath()}" toDir="${maven.build.dir}/install/jar"/>
                </core:if>
            </core:forEach>
        </core:if>
    </goal>

    <!--+
        | Copy our 3rd party libraries.
        +-->
    <goal name="install.depends">
        <ant:echo message="Installing 3rd party libraries ...."/>
        <!--+
            | Check if we have already done this.
            +-->
        <core:if test="${!libsDone}">
            <ant:echo message="...."/>
            <core:set var="libsDone" value="true"/>
            <!--+
                | Create our target directory.
                +-->
            <ant:mkdir dir="${maven.build.dir}/install/lib"/>
            <!--+
                | Project.getDependencyPath() only works for jar and ejb files.
                | See : http://maven.apache.org/xref/org/apache/maven/DependencyClasspathBuilder.html#100
                | Means we have to do this the long way round .... by iterating through our list of artifacts.
                +-->
            <core:forEach var="artifact" items="${pom.getArtifacts()}">
                <!--+
                    | If the artifact matches our criteria.
                    +-->
                <core:if test="${artifact.dependency.getProperty('lib.fileset')=='true'}">
                    <ant:echo message="Found 3rd party library"/>
                    <ant:echo message="  Ident    : ${artifact.getDependency().getId()}"/>
                    <ant:echo message="  Version  : ${artifact.getDependency().getVersion()}"/>
                    <ant:echo message="  Type     : ${artifact.getDependency().getType()}"/>
                    <ant:echo message="  Name     : ${artifact.getName()}"/>
                    <ant:echo message="  Path     : ${artifact.getPath()}"/>
                    <!--+
                        | Copy the jar file to our target directory.
                        +-->
                    <ant:copy file="${artifact.getPath()}" toFile="${maven.build.dir}/install/lib/${artifact.getName()}"/>
                </core:if>
            </core:forEach>
        </core:if>
    </goal>

    <!--+
        | Copy our Axis libraries.
        +-->
    <goal name="install.axis">
        <ant:echo message="Installing Axis libraries ...."/>
        <!--+
            | Initialise our Axis libraries
            +-->
        <attainGoal name="init.paths"/>
        <attainGoal name="init.classpath"/>
        <!--+
            | Copy all the jars from the Axis lib directory.
            +-->
        <ant:copy toDir="${maven.build.dir}/install/lib">
            <fileset dir="${axisDir}/WEB-INF/lib">
                <include name="*.jar"/>
            </fileset>
        </ant:copy>
    </goal>

    <!--+
        | Copy our ant script and tools.
        +-->
    <goal name="install.tools">
        <ant:echo message="Installing Ant script and tools ...."/>
        <!--+
            | Create our directories.
            +-->
        <ant:mkdir dir="${maven.build.dir}/install/xsl"/>
        <ant:mkdir dir="${maven.build.dir}/install/xml"/>
        <!--+
            | Copy our Ant script and properties.
            +-->
        <ant:copy toDir="${maven.build.dir}/install">
            <fileset dir="src/ant">
                <include name="*.xml"/>
                <include name="*.properties"/>
            </fileset>
        </ant:copy>
        <!--+
            | Copy our xsl transforms.
            +-->
        <ant:copy toDir="${maven.build.dir}/install/xsl">
            <fileset dir="src/xsl">
                <include name="**/*.xsl"/>
            </fileset>
        </ant:copy>
        <!--+
            | Copy our configuration data.
            +-->
        <ant:copy toDir="${maven.build.dir}/install/config">
            <fileset dir="src/config">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </ant:copy>
        <!--+
            | Copy our install library.
            | TODO - This should either be SNAPSHOT or version.
            +-->
        <ant:copy toDir="${maven.build.dir}/install/jar">
            <fileset dir="${maven.build.dir}">
                <include name="${maven.final.name}.jar"/>
            </fileset>
        </ant:copy>
    </goal>

    <!--+
        | Create our zipfile.
        | We could use the Maven dist plugin, but quite frankly, I'm tired of suprises.
        +-->
    <goal name="build.zipfile">
        <!--+
            | Install the zipfile components.
            +-->
        <attainGoal name="install.webapp"/>
        <attainGoal name="install.client"/>
        <attainGoal name="install.depends"/>
        <attainGoal name="install.axis"/>
        <attainGoal name="install.tools"/>
        <!--+
            | Create our zip file.
            +-->
        <ant:zip
            zipfile="${maven.build.dir}/${maven.final.name}.zip"
            compress="true"
            basedir="${maven.build.dir}/install"
            />
    </goal>

    <!--+
        | Build our jar file.
        +-->
    <goal name="build.jarfile">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Building toolkit jar ...."/>
        <!--+
            | Build and test our tools.
            +-->
        <attainGoal name="jar:jar"/>
    </goal>

    <!--+
        | Setup our JUnit tests.
        +-->
    <preGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing services for tests"/>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Create our config directories.
            +-->
        <ant:mkdir dir="${maven.build.dir}/config"/>
        <ant:mkdir dir="${maven.build.dir}/config/registry"/>
        <ant:mkdir dir="${maven.build.dir}/config/community"/>
        <!--+
            | Copy our config files.
            +-->
        <ant:copy todir="${maven.build.dir}/config">
            <fileset dir="src/config"/>
        </ant:copy>
        <!--+
            | Check the JUnit test settings.
            +-->
        <ant:echo message=""/>
        <ant:echo message="JUnit fork VM - ${maven.junit.fork}"/>
        <ant:echo message="JUnit test directory : ${maven.junit.dir}"/>
        <ant:echo message=""/>
    </preGoal>
</project>
