<?xml version="1.0"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/install/src/ant/Attic/deploy.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2004/02/12 06:56:45 $</cvs:date>
    | <cvs:version>$Revision: 1.3 $</cvs:version>
    | <cvs:log>
    |   $Log: deploy.xml,v $
    |   Revision 1.3  2004/02/12 06:56:45  dave
    |   Merged development branch, dave-dev-200401131047, into HEAD
    |
    |   Revision 1.2.4.2  2004/02/12 06:26:37  dave
    |   Reconfiguring install toolkit
    |
    |   Revision 1.2.4.1  2004/02/10 00:40:37  dave
    |   Added install tooklit to the Maven build.
    |   Changed Maven project to use 'org.astrogrid' as the group name.
    |   Fixed dependencies that used the original group name.
    |
    |   Revision 1.2  2004/01/07 10:45:39  dave
    |   Merged development branch, dave-dev-20031224, back into HEAD
    |
    |   Revision 1.1.2.1  2004/01/05 06:47:18  dave
    |   Moved policy data classes into policy.data package
    |
    | </cvs:log>
    |
    | Webapp deployment script.
    | Adds all of the components in the right places and sets up the configuration files.
    |
    |
    +-->
<project default="init" basedir="." name="community-install">

    <!--+
        | Prefix for system properties.
        +-->
    <property environment="env"/>

    <!--+
        | TODO ... local properties file.
        +-->

    <!--+
        | The location of your Tomcat installation.
        | If you don't have the CATALINA_HOME environment variable set, then you can set this to a specific location.
    <property name="tomcat.home"    value="/usr/java/servers/tomcat/jakarta-tomcat-4.1.24-LE-jdk14"/>
    <property name="tomcat.home"    value="/usr/local/jakarta-tomcat-4.1.24"/>
        +-->
    <property name="tomcat.home"    value="${env.CATALINA_HOME}"/>

    <!--+
        | The community webapp name.
        +-->
    <property name="webapp.name" value="astrogrid-community"/>
    <!--+
        | The community warfile name.
        +-->
    <property name="warfile.name" value="astrogrid-community-webapp-SNAPSHOT"/>

    <!--+
        | Your community name.
        | This is used to configure your community service, and to load the initial data.
        | If you change this, then you need to create a corresponding data file to load the initial community data.
        +-->
    <property name="community.name" value="test.astrogrid.org"/>

    <!--+
        | Config files location.
        | The default is to put the config files in '/etc/astrogrid'.
        | However, most systems require root permissions to create the directories in '/etc'.
        | Change this property if you want to relocate the config files.
        +-->
    <property name="config.home" value="/etc/astrogrid/community"/>

    <!--+
        | Database files location.
        | The default is to put the config files in '/var/astrogrid'.
        | However, most systems require root permissions to create the directories in '/etc'.
        | Change this property if you want to relocate the database files.
        +-->
    <property name="data.home" value="/var/astrogrid/community"/>

    <!--+
        | The base directory.
        | This is the location where this install kit is located.
        +-->
    <property name="project.home"    value="${basedir}"/>

    <!--+
        | Hsqldb properties.
        | These configure the Hsqldb database.
        +-->
    <property name="hsqldb.user"     value="sa"/>
    <property name="hsqldb.pass"     value=""/>
    <property name="hsqldb.version"  value="1.7.1"/>
    <property name="hsqldb.name"     value="community"/>
    <property name="hsqldb.location" value="${data.home}"/>
    <property name="hsqldb.url"      value="jdbc:hsqldb:${hsqldb.location}/${hsqldb.name}"/>

    <!--+
        | The config tools classpath.
        | These are the jar files used by the deployment tools.
        +-->
    <path id="config.classpath">
        <fileset dir="${basedir}/jar">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- ================ Tomcat tasks ================ -->
    <!--+
        | Tomcat properties.
        +-->
    <property name="tomcat.host"    value="localhost"/>
    <property name="tomcat.port"    value="8080"/>
    <property name="tomcat.server"  value="${tomcat.host}:${tomcat.port}"/>
    <property name="tomcat.url"     value="http://${tomcat.server}"/>
    <property name="tomcat.timeout" value="60"/>

    <!--+
        | Tomcat manager properties.
        | Need to update these with name and password from real tomcat config.
        +-->
	<property name="tomcat.manager.url"      value="${tomcat.url}/manager"/>
	<property name="tomcat.manager.username" value="astrogrid"/>
	<property name="tomcat.manager.password" value="please"/>

    <!--+
        | Tomcat distribution properties.
        | This is just an experiment ... to see if it is possible.
        +-->
    <property name="tomcat.source"  value="http://codon.demon.co.uk/installs/java/maven/tomcat/zips"/>
    <property name="tomcat.version" value="4.1.27"/>

    <!--+
        | Bootstrap classpath for Tomcat
        +-->
    <path id="tomcat.classpath.bootstrap">
        <pathelement location="${env.JAVA_HOME}/lib/tools.jar"/>
        <pathelement location="${tomcat.home}/bin/bootstrap.jar"/>
    </path>

    <!--+
        | Endorsed libraries for Tomcat.
        +-->
    <path id="tomcat.classpath.endorsed">
        <pathelement path="${tomcat.home}/bin"/>
        <pathelement path="${tomcat.home}/common/endorsed"/>
    </path>

    <!--+
        | Tomcat servlet libraries.
        +-->
    <path id="tomcat.classpath.servlet">
        <pathelement location="${tomcat.home}/common/lib/servlet.jar"/>
    </path>

    <!--+
    	| Define the Tomcat manager tasks
    	+-->
    <target name="tomcat.tasks" depends="">
        <taskdef name="tomcat.deploy"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.DeployTask"/>
        <taskdef name="tomcat.install"   classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.InstallTask"/>
        <taskdef name="tomcat.list"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ListTask"/>
        <taskdef name="tomcat.reload"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ReloadTask"/>
        <taskdef name="tomcat.remove"    classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RemoveTask"/>
        <taskdef name="tomcat.resources" classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.ResourcesTask"/>
        <taskdef name="tomcat.roles"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.RolesTask"/>
        <taskdef name="tomcat.start"     classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StartTask"/>
        <taskdef name="tomcat.stop"      classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.StopTask"/>
        <taskdef name="tomcat.undeploy"  classpath="${tomcat.home}/server/lib/catalina-ant.jar" classname="org.apache.catalina.ant.UndeployTask"/>
    </target>

    <!--+
    	| Download and install Tomcat.
    	+-->
    <target name="tomcat.install" depends="">
    </target>

    <!--+
        | Start Tomcat in a separate VM.
        +-->
    <target name="tomcat.start" depends="">
        <!-- Start Tomcat in a separate VM -->
        <java taskname="tomcat" classname="org.apache.catalina.startup.Bootstrap" fork="true" dir="${tomcat.home}/bin">
            <!-- Use the bootstrap classpath -->
            <classpath refid="tomcat.classpath.bootstrap"/>
            <!-- These replace the -D command line arguments -->
            <sysproperty key="java.endorsed.dirs" path="${tomcat.classpath.endorsed}"/>
            <sysproperty key="catalina.base"      path="${tomcat.home}"/>
            <sysproperty key="catalina.home"      path="${tomcat.home}"/>
            <sysproperty key="java.io.tmpdir"     path="${tomcat.home}/temp"/>
            <!-- Select the server JVM (fails on Linux JDK 1.4.0) -->
            <!-- <jvmarg value="-server"/> -->
            <!-- Args for the Tomcat Bootstrap class -->
            <arg value="start"/>
        </java>
    </target>

    <!--+
        | Stop Tomcat.
        +-->
    <target name="tomcat.stop" depends="">
        <!-- Stop Tomcat -->
        <java taskname="tomcat" classname="org.apache.catalina.startup.Bootstrap" fork="true">
            <!-- Use the bootstrap classpath -->
            <classpath refid="tomcat.classpath.bootstrap"/>
            <!-- These replace the -D command line arguments -->
            <sysproperty key="java.endorsed.dirs" path="${tomcat.classpath.endorsed}"/>
            <sysproperty key="catalina.base"      path="${tomcat.home}"/>
            <sysproperty key="catalina.home"      path="${tomcat.home}"/>
            <sysproperty key="java.io.tmpdir"     path="${tomcat.home}/temp"/>
            <!-- Select the server JVM (fails on Linux JDK 1.4.0) -->
            <!-- <jvmarg value="-server"/> -->
            <!-- Args for the Tomcat Bootstrap class -->
            <arg value="stop"/>
        </java>
    </target>

    <!--+
        | Wait for Tomcat to respond.
        +-->
    <target name="tomcat.wait" depends="">
        <echo message=""/>
        <echo message="Waiting for Tomcat ...."/>
        <echo message="URL : ${tomcat.url}/"/>
        <waitfor maxwait="60" maxwaitunit="second" checkevery="500">
            <http url="${tomcat.url}/"/>
        </waitfor>
    </target>

	<!--+
		| Wait for the Tomcat manager to respond.
		+-->
	<target name="tomcat.manager.wait" depends="">
		<echo message=""/>
		<echo message="Waiting for Tomcat manager ...."/>
		<echo message="URL : ${tomcat.manager.url}/"/>
		<waitfor maxwait="${tomcat.timeout}" maxwaitunit="second" checkevery="500">
			<http url="${tomcat.manager.url}/"/>
		</waitfor>
	</target>

	<!--+
		| Clean the Tomcat log files.
		+-->
	<target name="tomcat.clean.log" depends="">
		<echo message=""/>
		<echo message="Cleaning Tomcat log files ...."/>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tomcat.home}/logs" includes="*"/>
		</delete>
	</target>

	<!--+
		| Clean the Tomcat work files.
		+-->
	<target name="tomcat.clean.work" depends="">
		<echo message=""/>
		<echo message="Cleaning Tomcat work files ...."/>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tomcat.home}/work" includes="**"/>
		</delete>
	</target>

	<!--+
		| Clean the Tomcat endorsed libraries.
		+-->
	<target name="tomcat.clean.endorsed" depends="">
		<echo message=""/>
		<echo message="Cleaning Tomcat endorsed libraries ...."/>
		<delete verbose="false" failonerror="false">
			<fileset dir="${tomcat.home}/common/endorsed">
				<include name="*.jar"/>
				<include name="**.jar"/>
				<include name="**/*.jar"/>
				<include name="**/**.jar"/>
			</fileset>
		</delete>
	</target>

	<!--+
		| Clean the Tomcat files.
		+-->
	<target name="tomcat.clean" depends="">
		<antcall target="tomcat.clean.log"/>
		<antcall target="tomcat.clean.work"/>
	</target>

    <!-- ================ Config tasks ================ -->
    <!--+
        | Transform our config file, setting a named property.
        | This is a sub-task, used to set the configuration properties.
        +-->
    <target name="config.xslt" depends="">
        <echo message=""/>
        <echo message="Updating community config ...."/>
        <echo message="  Config file    : ${config.file}"/>
        <echo message="  Property name  : ${property.name}"/>
        <echo message="  Property value : ${property.value}"/>
        <!-- Transform our config file, filling in the specified value -->
        <xslt style="${basedir}/xsl/config.xsl"
              in="${config.file}"
              out="${config.file}.new">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="category"         expression="org.astrogrid.community"/>
            <param name="property.name"    expression="${property.name}"/>
            <param name="property.value"   expression="${property.value}"/>
        </xslt>
        <!-- Replace our existing config.xml with the new one -->
        <move file="${config.file}.new" tofile="${config.file}" overwrite="true" failonerror="false"/>
    </target>

    <!-- ================ Webapp tasks ================ -->
    <!--+
        | Webapp properties.
        +-->
    <property name="webapp.home" value="${tomcat.home}/webapps/${webapp.name}"/>

    <!--+
        | Deploy our webapp war file into Tomcat (offline).
        +-->
    <target name="deploy.webapp" depends="">
        <!-- Delete any existing war file -->
        <delete verbose="true" failonerror="false" file="${tomcat.home}/webapps/${webapp.name}.war"/>
        <!-- Delete any existing webapp -->
        <delete verbose="true" failonerror="false" includeEmptyDirs="true" dir="${tomcat.home}/webapps/${webapp.name}"/>
        <!-- Deploy our war file into Tomcat -->
        <copy verbose="true" file="${basedir}/war/${warfile.name}.war" toFile="${tomcat.home}/webapps/${webapp.name}.war"/>
    </target>

    <!--+
        | Deploy our config files.
        | At the moment, this will overwrite any existing config files.
        | TODO, move existing config files to backups ??
        +-->
    <target name="deploy.config" depends="">
        <mkdir dir="${config.home}"/>
        <copy verbose="true" file="${basedir}/xml/config/astrogrid-community-config.xml"   toFile="${config.home}/astrogrid-community-config.xml"/>
    </target>

    <!--+
        | Edit the webapp JNDI property.
        | This needs to be run after Tomcat has unpacked the webapp war file.
        | It would be nice to use a 'global' JNDI property for all the webapps,
        | but it looks like this does not work in Tomcat 4.1.24.
        +-->
    <target name="config.jndi" depends="">
        <!-- Copy the existing web.xml to a backup file -->
        <copy file="${webapp.home}/WEB-INF/web.xml" tofile="${webapp.home}/WEB-INF/web.xml.old" overwrite="true" failonerror="false"/>
        <!-- Patch the web.xml to fix the DTD -->
        <replace file="${webapp.home}/WEB-INF/web.xml" token="web-app_2.2.dtd" value="web-app_2_2.dtd"/>
        <!-- Transform the target web.xml, adding our JNDI property -->
        <xslt style="${basedir}/xsl/webapp.xsl"
              in="${webapp.home}/WEB-INF/web.xml"
              out="${webapp.home}/WEB-INF/web.xml.new">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="property.name"  expression="org.astrogrid.community.config"/>
            <param name="property.value" expression="${config.home}/astrogrid-community-config.xml"/>
        </xslt>
        <!-- Replace the existing web.xml with the new one -->
        <move file="${webapp.home}/WEB-INF/web.xml.new" tofile="${webapp.home}/WEB-INF/web.xml" overwrite="true" failonerror="false"/>
    </target>

    <!--+
        | Configure our database params.
        +-->
    <target name="config.database" depends="">
        <echo message="  Database url  : ${hsqldb.url}"/>
        <echo message="  Database user : ${hsqldb.user}"/>
        <echo message="  Database pass : ${hsqldb.pass}"/>
        <!-- Create our database data directory -->
        <mkdir dir="${hsqldb.location}"/>
        <!-- Update our config file, filling in the correct values -->
        <antcall target="config.xslt">
            <param name="config.file"    value="${config.home}/astrogrid-community-config.xml"/>
            <param name="property.name"  value="community.name"/>
            <param name="property.value" value="${community.name}"/>
        </antcall>
        <antcall target="config.xslt">
            <param name="config.file"    value="${config.home}/astrogrid-community-config.xml"/>
            <param name="property.name"  value="database.name"/>
            <param name="property.value" value="${hsqldb.name}"/>
        </antcall>
        <!--+
        	| Transform the database config
        <xslt style="${project.home}/config/xsl/database.xsl"
              in="${config.home}/${project.name}-database.xml"
              out="${config.home}/${project.name}-database.xml.new">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="url"  expression="${hsqldb.url}"/>
            <param name="user" expression="${hsqldb.user}"/>
            <param name="pass" expression="${hsqldb.pass}"/>
        </xslt>
			+-->
    </target>

    <!--+
        | Create our database tables.
    <target name="init.database" depends="">
        <echo message=""/>
        <echo message="Creating Hqsldb tables ...."/>
        <sql driver="org.hsqldb.jdbcDriver"
             url="${hsqldb.url}"
             classpathref="config.classpath"
             userid="${hsqldb.user}"
             password="${hsqldb.pass}"
             print="true"
            >
            <transaction src="${project.home}/config/sql/create.sql"/>
        </sql>
    </target>
        +-->

    <!--+
        | Select all rows from our database tables.
    <target name="database.select" depends="">
        <sql driver="org.hsqldb.jdbcDriver"
             url="${hsqldb.url}"
             classpathref="config.classpath"
             userid="${hsqldb.user}"
             password="${hsqldb.pass}"
             print="true"
            >
            <![CDATA[
                SELECT * FROM communities ;
                SELECT * FROM accounts    ;
                SELECT * FROM groups      ;
                SELECT * FROM resources   ;
                SELECT * FROM members     ;
                SELECT * FROM permissions ;
            ]]>
        </sql>
    </target>
        +-->

    <!--+
        | Delete all rows from our database tables.
    <target name="database.delete" depends="">
        <sql driver="org.hsqldb.jdbcDriver"
             url="${hsqldb.url}"
             classpathref="config.classpath"
             userid="${hsqldb.user}"
             password="${hsqldb.pass}"
             print="true"
            >
            <![CDATA[
                DELETE FROM groups      ;
                DELETE FROM members     ;
                DELETE FROM accounts    ;
                DELETE FROM resources   ;
                DELETE FROM communities ;
                DELETE FROM permissions ;
            ]]>
        </sql>
    </target>
        +-->

    <!--+
        | Run our database loader.
        | This will initialise the database contents based on your community name.
        +-->
    <target name="load.database" depends="">
        <echo message=""/>
        <echo message="Loading policy data ...."/>
        <echo message="  Community name : ${community.name}"/>
        <!-- Define our policy-loader task -->
        <taskdef name="policy.loader" classname="org.astrogrid.community.policy.loader.PolicyLoader">
            <classpath refid="config.classpath"/>
        </taskdef>
        <!-- Process our data files -->
        <policy.loader>
            <fileset dir="${project.home}/config/xml">
                <include name="${community.name}.xml"/>
            </fileset>
        </policy.loader>
    </target>

    <!-- ================ Main deployment tasks ================ -->
    <!--+
        | Depoly our webapp.
        | This just copies our war file into the Tomcat webapps directory.
        +-->
    <target name="install" depends="">
        <!-- Deploy our webapp -->
        <antcall target="deploy.webapp"/>
    </target>

    <!--+
        | Deploy our config.
        | These need to be run after Tomcat has unpacked our war file.
        +-->
    <target name="config" depends="">
        <!-- Deploy our config files -->
        <antcall target="deploy.config"/>
        <!-- Set the webapp JNDI property -->
        <antcall target="config.jndi"/>
        <!-- Configure the database params -->
        <antcall target="config.database"/>
        <!-- Create the database tables -->
        <antcall target="init.database"/>
        <!-- Load the database tables -->
        <antcall target="load.database"/>
    </target>

</project>


