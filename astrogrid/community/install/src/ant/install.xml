<?xml version="1.0"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/install/src/ant/install.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2004/02/20 21:11:05 $</cvs:date>
    | <cvs:version>$Revision: 1.2 $</cvs:version>
    | <cvs:log>
    |   $Log: install.xml,v $
    |   Revision 1.2  2004/02/20 21:11:05  dave
    |   Merged development branch, dave-dev-200402120832, into HEAD
    |
    |   Revision 1.1.2.6  2004/02/20 19:34:11  dave
    |   Added JNDI Resource for community database.
    |   Removed multiple calls to loadDatabaseConfiguration .
    |
    |   Revision 1.1.2.5  2004/02/16 23:27:59  dave
    |   Tested with the following Tomcat versions :
    |       4.1.24
    |       4.1.24-LE-jdk14
    |       4.1.26
    |       4.1.26-LE-jdk14
    |       4.1.27
    |       4.1.27-LE-jdk14
    |       4.1.29
    |       4.1.29-LE-jdk14
    |       4.1.30
    |       4.1.30-LE-jdk14
    |       5.0.16 **
    |       5.0.18 **
    |
    |   ** Target directory for the local context file has moved in tomcat-5.0.xx
    |
    |   Revision 1.1.2.4  2004/02/16 15:20:54  dave
    |   Changed tabs to spaces
    |
    |   Revision 1.1.2.3  2004/02/16 14:13:20  dave
    |   Fixed JNDI install scripts to use different methods
    |
    |   Revision 1.1.2.2  2004/02/15 00:28:22  dave
    |   Added tools for adding separate webapp context file to Tomcat
    |
    |   Revision 1.1.2.1  2004/02/14 22:24:09  dave
    |   Test toolkit for the install and tomcat sub-projects
    |
    |   Revision 1.4  2004/02/12 08:12:13  dave
    |   Merged development branch, dave-dev-200401131047, into HEAD
    |
    |   Revision 1.2.4.2  2004/02/12 06:26:37  dave
    |   Reconfiguring install toolkit
    |
    |   Revision 1.2.4.1  2004/02/10 00:40:37  dave
    |   Added install tooklit to the Maven build.
    |   Changed Maven project to use 'org.astrogrid' as the group name.
    |   Fixed dependencies that used the original group name.
    |
    |   Revision 1.2  2004/01/07 10:45:39  dave
    |   Merged development branch, dave-dev-20031224, back into HEAD
    |
    |   Revision 1.1.2.1  2004/01/05 06:47:18  dave
    |   Moved policy data classes into policy.data package
    |
    | </cvs:log>
    |
    | Webapp deployment script.
    | Adds all of the components in the right places and sets up the configuration files.
    |
    |
    +-->
<project default="init" basedir="." name="community-install">

    <!--+
        | Prefix for system properties.
        +-->
    <property environment="env"/>

    <!--+
        | Load our installation properties.
        +-->
    <property file="${basedir}/install.properties"/>

    <!--+
        | Default Tomcat properties.
        +-->
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="tomcat.host" value="localhost"/>
    <property name="tomcat.port" value="8080"/>
    <property name="tomcat.url"  value="http://${tomcat.host}:${tomcat.port}"/>

    <!--+
        | Default webapp properties.
        +-->
    <property name="webapp.name" value="astrogrid-community"/>
    <property name="webapp.home" value="${tomcat.home}/webapps/${webapp.name}"/>
    <property name="webapp.url"  value="${tomcat.url}/${webapp.name}"/>

    <!--+
        | Default context properties.
        +-->
    <property name="context.name" value="astrogrid-community"/>
    <property name="context.file" value="astrogrid-community-context.xml"/>

    <!--+
        | Default config properties.
        +-->
    <property name="config.name" value="astrogrid-community-config.xml"/>
    <property name="config.home" value="/etc/astrogrid"/>

    <!--+
        | Default database properties.
        +-->
    <property name="database.name" value="org.astrogrid.community"/>
    <property name="database.home" value="/var/astrogrid"/>
    <property name="database.user" value="sa"/>
    <property name="database.pass" value=""/>
    <property name="database.url"  value="jdbc:hsqldb:${database.home}/${database.name}"/>
    <property name="database.jndi" value="jdbc/org.astrogrid.community.database"/>
    <property name="database.driver.name"  value="${database.url}"/>
    <property name="database.driver.class" value="org.hsqldb.jdbcDriver"/>

    <!--+
        | Display our build settings.
        +-->
    <target name="init">
        <echo message=""/>

        <!-- Build timestamp -->
        <tstamp>
            <format property="build.time" pattern="yyyy.MM.dd.HH.mm.ss"/>
            <format property="build.date" pattern="yyyy.MM.dd"/>
        </tstamp>

        <!-- Display the current settings -->
        <echo message="os.name      : ${os.name}"/>
        <echo message="os.arch      : ${os.arch}"/>
        <echo message="os.version   : ${os.version}"/>
        <echo message=""/>

        <echo message="user.home    : ${user.home}"/>
        <echo message=""/>

        <echo message="java.version : ${java.version}"/>
        <echo message="java.home    : ${java.home}"/>
        <echo message="JAVA.HOME    : ${env.JAVA_HOME}"/>
        <echo message=""/>

        <echo message="ant.version  : ${ant.version}"/>
        <echo message="ant.home     : ${ant.home}"/>
        <echo message=""/>

        <echo message="build.home     : ${basedir}"/>
        <echo message="build.file     : ${ant.file}"/>
        <echo message="build.date     : ${build.date}"/>
        <echo message="build.time     : ${build.time}"/>
        <echo message=""/>

        <echo message="tomcat.home    : ${tomcat.home}"/>
        <echo message="tomcat.url     : ${tomcat.url}"/>
        <echo message=""/>

        <echo message="webapp.name    : ${webapp.name}"/>
        <echo message="webapp.home    : ${webapp.home}"/>
        <echo message="webapp.url     : ${webapp.url}"/>
        <echo message=""/>

        <echo message="config.name    : ${config.name}"/>
        <echo message="config.home    : ${config.home}"/>
        <echo message=""/>

        <echo message="database.name  : ${database.name}"/>
        <echo message="database.home  : ${database.home}"/>
        <echo message="database.url   : ${database.url}"/>
        <echo message="database.jndi  : ${database.jndi}"/>

        <echo message=""/>

        <echo message=""/>
    </target>

    <!--+
        | The installation tools classpath.
        +-->
    <path id="install.classpath">
        <fileset dir="jar">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- ================ Config tasks ================ -->

    <!--+
        | Install our config files.
        | At the moment, this will overwrite any existing config files.
        | TODO, move existing config files to backups ??
        +-->
    <target name="config.install" depends="">
        <mkdir dir="${config.home}"/>
        <copy toDir="${config.home}">
            <fileset dir="${basedir}/xml/config">
                <include name="${config.name}"/>
            </fileset>
        </copy>
    </target>

    <!--+
        | Set a property in our config file.
        +-->
    <target name="config.xslt" depends="">
        <echo message=""/>
        <echo message="Updating community config ...."/>
        <echo message="  Config file    : ${config.file}"/>
        <echo message="  Property name  : ${property.name}"/>
        <echo message="  Property value : ${property.value}"/>
        <!--+
            | Transform our config file, filling in the specified value.
            +-->
        <xslt style="${basedir}/xsl/jconfig-property.xsl"
              in="${config.file}"
              out="${config.file}.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="property.category" expression="org.astrogrid.community"/>
            <param name="property.name"     expression="${property.name}"/>
            <param name="property.value"    expression="${property.value}"/>
        </xslt>
        <!--+
            | Replace the existing config.xml with the new one.
            +-->
        <move overwrite="true"
            failonerror="false"
            file="${config.file}.tmp"
            tofile="${config.file}"/>
    </target>

    <!-- ================ Webapp tasks ================ -->

    <!--+
        | Install our webapp war file into Tomcat.
        +-->
    <target name="webapp.install" depends="">
        <!--+
            | Delete any existing war file.+-->
        <delete verbose="true"
            failonerror="false"
            file="${tomcat.home}/webapps/${webapp.name}.war"/>
        <!--+
            | Delete any existing webapp
            +-->
        <delete verbose="true"
            failonerror="false"
            includeEmptyDirs="true"
            dir="${tomcat.home}/webapps/${webapp.name}"/>
        <!--+
            | Install our war file into Tomcat.
            +-->
        <copy verbose="true"
            toFile="${tomcat.home}/webapps/${webapp.name}.war">
            <fileset dir="${basedir}/war">
                <include name="*.war"/>
            </fileset>
        </copy>
    </target>

    <!--+
        | Wait for our webapp to respond.
        +-->
    <target name="webapp.wait" depends="">
        <echo message=""/>
        <echo message="Waiting for Community webapp ...."/>
        <echo message="URL : ${webapp.url}/"/>
        <waitfor maxwait="60" maxwaitunit="second" checkevery="500">
            <http url="${webapp.url}/"/>
        </waitfor>
    </target>

    <!-- ================ JNDI Environment property tasks ================ -->

    <!--+
        | There are a numer of ways of setting a JNDI property.
        | 
        | 1) Modify the WebApp web.xml file, after the war file has been unpacked.
        | 
        | 2) Add a specific context to the Tomcat server.xml file.
        | 3) Add a separate context file to the webapps directory.
        | 
        | 4) Add a local JNDI entry to the webapp context (local or server).
        | 5) Add a global JNDI entry and add a reference in the webapp context (local or server).
        | 
        +-->

    <!--+
        | Configure JNDI property in our WebApp web.xml file.
        | This can only be run after Tomcat has unpacked the webapp war file.
        +-->
    <target name="webxml.property" depends="">
        <echo message=""/>
        <echo message="Adding JNDI property to webapp."/>
        <echo message="  webapp.home : ${webapp.home}"/>
        <echo message="  property.name  : ${property.name}"/>
        <echo message="  property.type  : ${property.type}"/>
        <echo message="  property.value : ${property.value}"/>
        <!--+
            | Patch the web.xml to fix the DTD
            +-->
        <replace
            token="web-app_2.2.dtd"
            value="web-app_2_2.dtd"
            file="${webapp.home}/WEB-INF/web.xml"/>
        <!--+
            | Update our WebApp web.xml, adding our JNDI property.
            +-->
        <xslt style="${basedir}/xsl/webxml-property.xsl"
            in="${webapp.home}/WEB-INF/web.xml"
            out="${webapp.home}/WEB-INF/web.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="property.name"  expression="${property.name}"/>
            <param name="property.type"  expression="${property.type}"/>
            <param name="property.value" expression="${property.value}"/>
        </xslt>
        <!--+
            | Replace the existing web.xml with the new one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${webapp.home}/WEB-INF/web.tmp"
            tofile="${webapp.home}/WEB-INF/web.xml"/>
    </target>

    <!--+
        | Add a global JNDI property to the Tomcat server.xml.
        +-->
    <target name="server.global.property" depends="">
        <echo message=""/>
        <echo message="Adding global JNDI property to server config."/>
        <echo message="  tomcat.home : ${tomcat.home}"/>
        <echo message="  property.name  : ${property.name}"/>
        <echo message="  property.type  : ${property.type}"/>
        <echo message="  property.value : ${property.value}"/>
        <!--+
            | Add our JNDI property to the Tomcat server.xml.
            +-->
        <xslt style="${basedir}/xsl/global-property.xsl"
            in="${tomcat.home}/conf/server.xml"
            out="${tomcat.home}/conf/server.xml.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="property.name"  expression="${property.name}"/>
            <param name="property.type"  expression="${property.type}"/>
            <param name="property.value" expression="${property.value}"/>
        </xslt>
        <!--+
            | Replace the existing server.xml with the new one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${tomcat.home}/conf/server.xml.tmp"
            tofile="${tomcat.home}/conf/server.xml"/>
    </target>

    <!--+
        | Add a context for our WebApp to the Tomcat server.xml.
        +-->
    <target name="server.context.insert" depends="">
        <echo message=""/>
        <echo message="Adding context to server config."/>
        <echo message="  tomcat.home  : ${tomcat.home}"/>
        <echo message="  context.path : ${context.path}"/>
        <echo message="  context.base : ${context.base}"/>
        <!--+
            | Add our context to the Tomcat server.xml.
            +-->
        <xslt style="${basedir}/xsl/context-insert.xsl"
            in="${tomcat.home}/conf/server.xml"
            out="${tomcat.home}/conf/server.xml.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="context.path" expression="${context.path}"/>
            <param name="context.base" expression="${context.base}"/>
        </xslt>
        <!--+
            | Replace the existing server.xml with the new one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${tomcat.home}/conf/server.xml.tmp"
            tofile="${tomcat.home}/conf/server.xml"/>
    </target>

    <!--+
        | Add a JNDI property to our context in the Tomcat server.xml.
        +-->
    <target name="server.context.property" depends="">
        <echo message=""/>
        <echo message="Adding JNDI property to server context"/>
        <echo message="  tomcat.home : ${tomcat.home}"/>
        <echo message="  context.path   : ${context.path}"/>
        <echo message="  property.name  : ${property.name}"/>
        <echo message="  property.type  : ${property.type}"/>
        <echo message="  property.value : ${property.value}"/>
        <!--+
            | Add the JNDI property to our context.
            +-->
        <xslt style="${basedir}/xsl/context-property.xsl"
            in="${tomcat.home}/conf/server.xml"
            out="${tomcat.home}/conf/server.xml.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="context.path"   expression="${context.path}"/>
            <param name="property.name"  expression="${property.name}"/>
            <param name="property.type"  expression="${property.type}"/>
            <param name="property.value" expression="${property.value}"/>
        </xslt>
        <!--+
            | Replace the existing server.xml with the new one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${tomcat.home}/conf/server.xml.tmp"
            tofile="${tomcat.home}/conf/server.xml"/>
    </target>

    <!--+
        | Add a reference to a global JNDI property to our context in the Tomcat server.xml.
        +-->
    <target name="server.context.reference" depends="">
        <echo message=""/>
        <echo message="Adding JNDI reference to server context"/>
        <echo message="  tomcat.home : ${tomcat.home}"/>
        <echo message="  context.path  : ${context.path}"/>
        <echo message="  property.name : ${property.name}"/>
        <echo message="  property.type : ${property.type}"/>
        <echo message="  property.link : ${property.link}"/>
        <!--+
            | Add a reference to the JNDI property in our context.
            +-->
        <xslt style="${basedir}/xsl/global-property-reference.xsl"
            in="${tomcat.home}/conf/server.xml"
            out="${tomcat.home}/conf/server.xml.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="context.path"  expression="${context.path}"/>
            <param name="property.name" expression="${property.name}"/>
            <param name="property.type" expression="${property.type}"/>
            <param name="property.link" expression="${property.link}"/>
        </xslt>
        <!--+
            | Replace the existing server.xml with the new one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${tomcat.home}/conf/server.xml.tmp"
            tofile="${tomcat.home}/conf/server.xml"/>
    </target>

    <!--+
        | Add a local context file to the Tomcat webapps directory.
        +-->
    <target name="local.context.install" depends="">
        <echo message=""/>
        <echo message="Installing local context file"/>
        <echo message="  tomcat.home  : ${tomcat.home}"/>
        <echo message="  context.file : ${context.file}"/>
        <!--+
            | Copy the template context file into place.
            +-->
        <copy toDir="${tomcat.home}/webapps">
            <fileset dir="${basedir}/xml/config">
                <include name="${context.file}"/>
            </fileset>
        </copy>
        <!--+
            | TODO
            | Set the context path ...
            +-->
    </target>

    <!--+
        | Set a JNDI property in our context file.
        +-->
    <target name="local.context.property" depends="">
        <echo message=""/>
        <echo message="Adding JNDI property to local context"/>
        <echo message="  tomcat.home : ${tomcat.home}"/>
        <echo message="  context.file   : ${context.file}"/>
        <echo message="  context.path   : ${context.path}"/>
        <echo message="  property.name  : ${property.name}"/>
        <echo message="  property.type  : ${property.type}"/>
        <echo message="  property.value : ${property.value}"/>
        <!--+
            | Update our context file, adding the JNDI property
            +-->
        <xslt style="${basedir}/xsl/context-property.xsl"
            in="${tomcat.home}/webapps/${context.file}"
            out="${tomcat.home}/webapps/${context.file}.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="context.path"   expression="${context.path}"/>
            <param name="property.name"  expression="${property.name}"/>
            <param name="property.type"  expression="${property.type}"/>
            <param name="property.value" expression="${property.value}"/>
        </xslt>
        <!--+
            | Replace the existing context file with the new one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${tomcat.home}/webapps/${context.file}.tmp"
            tofile="${tomcat.home}/webapps/${context.file}"/>
    </target>

    <!--+
        | Add a reference to a global JNDI property in our context file.
        +-->
    <target name="local.context.reference" depends="">
        <echo message=""/>
        <echo message="Adding JNDI reference to local context"/>
        <echo message="  tomcat.home : ${tomcat.home}"/>
        <echo message="  context.file  : ${context.file}"/>
        <echo message="  property.name : ${property.name}"/>
        <echo message="  property.type : ${property.type}"/>
        <echo message="  property.link : ${property.link}"/>
        <!--+
            | Update our context file, adding a reference to the JNDI property.
            +-->
        <xslt style="${basedir}/xsl/global-property-reference.xsl"
            in="${tomcat.home}/webapps/${context.file}"
            out="${tomcat.home}/webapps/${context.file}.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="context.path"  expression="${context.path}"/>
            <param name="property.name" expression="${property.name}"/>
            <param name="property.type" expression="${property.type}"/>
            <param name="property.link" expression="${property.link}"/>
        </xslt>
        <!--+
            | Replace the existing context file with the new one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${tomcat.home}/webapps/${context.file}.tmp"
            tofile="${tomcat.home}/webapps/${context.file}"/>
    </target>

    <!--+
        | Configure our JNDI property.
        | Using a property in a server context.
        +-->
    <target name="jndi.server.context" depends="">
        <!--+
            | Add our context to the server.xml.
            +-->
        <antcall target="server.context.insert">
            <param name="context.path" value="/${webapp.name}"/>
            <param name="context.base" value="${webapp.name}.war"/>
        </antcall>
        <!--+
            | Add a property to our context.
            +-->
        <antcall target="server.context.property">
            <param name="context.path"   value="/${webapp.name}"/>
            <param name="property.name"  value="org.astrogrid.community.config"/>
            <param name="property.type"  value="java.lang.String"/>
            <param name="property.value" value="${config.home}/${config.name}"/>
        </antcall>
    </target>

    <!-- ================ JNDI Environment property tasks ================ -->

    <!--+
        | There are a numer of ways of setting up a JNDI database resource.
        | 
        | 1) Modify the WebApp web.xml file, after the war file has been unpacked.
        | 
        | 2) Add a specific context to the Tomcat server.xml file.
        | 3) Add a separate context file to the webapps directory.
        | 
        | 4) Add a local JNDI entry to the webapp context (local or server).
        | 5) Add a global JNDI entry and add a reference in the webapp context (local or server).
        | 
        +-->

    <!--+
        | Add a global JNDI database resource to the Tomcat server.xml.
        +-->
    <target name="server.global.resource" depends="">
        <echo message=""/>
        <echo message="Adding global JNDI resource to server config."/>
        <echo message="  tomcat.home : ${tomcat.home}"/>
        <echo message="  resource.name : ${resource.name}"/>
        <echo message="  resource.type : ${resource.type}"/>
        <echo message="  resource.auth : ${resource.auth}"/>
        <!--+
            | Add our global resource to the Tomcat server.xml.
            +-->
        <xslt style="${basedir}/xsl/global-resource.xsl"
            in="${tomcat.home}/conf/server.xml"
            out="${tomcat.home}/conf/server.xml.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="resource.name" expression="${resource.name}"/>
            <param name="resource.type" expression="${resource.type}"/>
            <param name="resource.auth" expression="${resource.auth}"/>
        </xslt>
        <!--+
            | Replace the existing server.xml with the new one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${tomcat.home}/conf/server.xml.tmp"
            tofile="${tomcat.home}/conf/server.xml"/>
    </target>

    <!--+
        | Add a global JNDI database params to the Tomcat server.xml.
        +-->
    <target name="server.global.resource.params" depends="">
        <echo message=""/>
        <echo message="Adding global JNDI resource params to server config."/>
        <echo message="  tomcat.home : ${tomcat.home}"/>
        <echo message="  resource.name : ${resource.name}"/>
        <echo message="  database.url  : ${database.url}"/>
        <echo message="  database.user : ${database.user}"/>
        <echo message="  database.pass : ${database.pass}"/>
        <echo message="  database.driver.name  : ${database.driver.name}"/>
        <echo message="  database.driver.class : ${database.driver.class}"/>
        <!--+
            | Add our global resource params to the Tomcat server.xml.
            +-->
        <xslt style="${basedir}/xsl/global-resource-params.xsl"
            in="${tomcat.home}/conf/server.xml"
            out="${tomcat.home}/conf/server.xml.tmp">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="resource.name" expression="${resource.name}"/>
            <param name="database.url"  expression="${database.url}"/>
            <param name="database.user" expression="${database.user}"/>
            <param name="database.pass" expression="${database.pass}"/>
            <param name="database.driver.name"  expression="${database.driver.name}"/>
            <param name="database.driver.class" expression="${database.driver.class}"/>
        </xslt>
        <!--+
            | Replace the existing server.xml with the new one.
            +-->
        <move overwrite="true" failonerror="false"
            file="${tomcat.home}/conf/server.xml.tmp"
            tofile="${tomcat.home}/conf/server.xml"/>
    </target>


    <!-- ================ JNDI configuration tasks ================ -->

    <!--+
        | Using global properties, with a context in the server config.
        +-->
    <target name="jndi.server.global" depends="">
        <!--+
            | Add our context to the server.xml.
            +-->
        <antcall target="server.context.insert">
            <param name="context.path" value="/${webapp.name}"/>
            <param name="context.base" value="${webapp.name}.war"/>
        </antcall>
        <!--+
            | Add the community config path as a global property.
            +-->
        <antcall target="server.global.property">
            <param name="property.name"  value="org.astrogrid.community.config"/>
            <param name="property.type"  value="java.lang.String"/>
            <param name="property.value" value="${config.home}/${config.name}"/>
        </antcall>
        <!--+
            | Add a reference to the config property to our context.
            +-->
        <antcall target="server.context.reference">
            <param name="context.path"  value="/${webapp.name}"/>
            <param name="property.name" value="org.astrogrid.community.config"/>
            <param name="property.type" value="java.lang.String"/>
            <param name="property.link" value="org.astrogrid.community.config"/>
        </antcall>
        <!--+
            | Add the database config as a global resource.
            +-->
        <antcall target="server.global.resource">
            <param name="resource.name" value="${database.jndi}"/>
            <param name="resource.type" value="javax.sql.DataSource"/>
            <param name="resource.auth" value="Container"/>
        </antcall>
        <antcall target="server.global.resource.params">
            <param name="resource.name" value="${database.jndi}"/>
            <param name="database.url"  value="${database.url}"/>
            <param name="database.user" value="sa"/>
            <param name="database.pass" value=""/>
            <param name="database.driver.name"  value="${database.url}"/>
            <param name="database.driver.class" value="${database.driver.class}"/>
        </antcall>
        <!--+
            | Add a reference to the database config to our context.
            +-->
        <antcall target="server.context.reference">
            <param name="context.path"  value="/${webapp.name}"/>
            <param name="property.name" value="${database.jndi}"/>
            <param name="property.type" value="javax.sql.DataSource"/>
            <param name="property.link" value="${database.jndi}"/>
        </antcall>

    </target>

    <!--+
        | Use properties defined in a separate context file.
        | ** At the moment, this fails with Tomcat 5.0.xx
        | because the location of the context files has been moved.
        +-->
    <target name="jndi.local.context" depends="">
        <!--+
            | Create our context file.
            +-->
        <antcall target="local.context.install">
            <param name="context.path" value="/${webapp.name}"/>
            <param name="context.base" value="${webapp.name}.war"/>
        </antcall>
        <!--+
            | Add the community config property to our context.
            +-->
        <antcall target="local.context.property">
            <param name="context.path"   value="/${webapp.name}"/>
            <param name="property.name"  value="org.astrogrid.community.config"/>
            <param name="property.type"  value="java.lang.String"/>
            <param name="property.value" value="${config.home}/${config.name}"/>
        </antcall>
    </target>

    <!--+
        | Global property, local context.
        +-->
    <target name="jndi.local.global" depends="">
        <!--+
            | Add the community config property to our context.
            +-->
        <antcall target="server.global.property">
            <param name="property.name"  value="org.astrogrid.community.config"/>
            <param name="property.type"  value="java.lang.String"/>
            <param name="property.value" value="${config.home}/${config.name}"/>
        </antcall>
        <!--+
            | Create our context file.
            +-->
        <antcall target="local.context.install">
            <param name="context.path" value="/${webapp.name}"/>
            <param name="context.base" value="${webapp.name}.war"/>
        </antcall>
        <!--+
            | Add a reference to the property in our context.
            +-->
        <antcall target="local.context.reference">
            <param name="context.path"  value="/${webapp.name}"/>
            <param name="property.name" value="org.astrogrid.community.config"/>
            <param name="property.type" value="java.lang.String"/>
            <param name="property.link" value="org.astrogrid.community.config"/>
        </antcall>
    </target>

    <!-- ================ Database tasks ================ -->
    <!--+
        | Configure our database params.
        +-->
    <target name="config.database" depends="">
        <echo message="  Database url  : ${database.url}"/>
        <echo message="  Database user : ${database.user}"/>
        <echo message="  Database pass : ${database.pass}"/>
        <!-- Create our database data directory -->
        <mkdir dir="${data.location}"/>
        <!-- Update our config file, filling in the correct values -->
        <antcall target="config.xslt">
            <param name="config.file"    value="${config.home}/astrogrid-community-config.xml"/>
            <param name="property.name"  value="community.name"/>
            <param name="property.value" value="${community.name}"/>
        </antcall>
        <antcall target="config.xslt">
            <param name="config.file"    value="${config.home}/astrogrid-community-config.xml"/>
            <param name="property.name"  value="database.name"/>
            <param name="property.value" value="${data.name}"/>
        </antcall>
        <!--+
            | Transform the database config
        <xslt style="${project.home}/config/xsl/database.xsl"
              in="${config.home}/${project.name}-database.xml"
              out="${config.home}/${project.name}-database.xml.new">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="url"  expression="${database.url}"/>
            <param name="user" expression="${database.user}"/>
            <param name="pass" expression="${database.pass}"/>
        </xslt>
            +-->
    </target>

    <!--+
        | Create our database tables.
    <target name="init.database" depends="">
        <echo message=""/>
        <echo message="Creating Hqsldb tables ...."/>
        <sql driver="${database.driver.class}"
             url="${database.url}"
             classpathref="install.classpath"
             userid="${database.user}"
             password="${database.pass}"
             print="true"
            >
            <transaction src="${project.home}/config/sql/create.sql"/>
        </sql>
    </target>
        +-->

    <!--+
        | Select all rows from our database tables.
    <target name="database.select" depends="">
        <sql driver="${database.driver.class}"
             url="${database.url}"
             classpathref="install.classpath"
             userid="${database.user}"
             password="${database.pass}"
             print="true"
            >
            <![CDATA[
                SELECT * FROM communities ;
                SELECT * FROM accounts    ;
                SELECT * FROM groups      ;
                SELECT * FROM resources   ;
                SELECT * FROM members     ;
                SELECT * FROM permissions ;
            ]]>
        </sql>
    </target>
        +-->

    <!--+
        | Delete all rows from our database tables.
    <target name="database.delete" depends="">
        <sql driver="${database.driver.class}"
             url="${database.url}"
             classpathref="install.classpath"
             userid="${database.user}"
             password="${database.pass}"
             print="true"
            >
            <![CDATA[
                DELETE FROM groups      ;
                DELETE FROM members     ;
                DELETE FROM accounts    ;
                DELETE FROM resources   ;
                DELETE FROM communities ;
                DELETE FROM permissions ;
            ]]>
        </sql>
    </target>
        +-->

    <!--+
        | Run our database loader.
        | This will initialise the database contents based on your community name.
        +-->
    <target name="load.database" depends="">
        <echo message=""/>
        <echo message="Loading policy data ...."/>
        <echo message="  Community name : ${community.name}"/>
        <!-- Define our policy-loader task -->
        <taskdef name="policy.loader" classname="org.astrogrid.community.policy.loader.PolicyLoader">
            <classpath refid="install.classpath"/>
        </taskdef>
        <!-- Process our data files -->
        <policy.loader>
            <fileset dir="${project.home}/config/xml">
                <include name="${community.name}.xml"/>
            </fileset>
        </policy.loader>
    </target>

    <!-- ================ Status tasks ================ -->

    <!--+
        | Run our service status test.
        +-->
    <target name="service.status" depends="">
        <echo message=""/>
        <echo message="Polling service status ...."/>
        <echo message="  Endpoint : ${webapp.url}/services/PolicyService"/>
        <!-- Define our Ant task -->
        <taskdef name="service.status.task" classname="org.astrogrid.community.client.ant.ServiceStatusTask">
            <classpath refid="install.classpath"/>
        </taskdef>
        <!-- Call our WebService -->
        <service.status.task
            address="${webapp.url}/services/PolicyService">
        </service.status.task>
    </target>



</project>


