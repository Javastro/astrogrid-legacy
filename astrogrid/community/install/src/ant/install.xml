<?xml version="1.0"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/install/src/ant/install.xml,v $</cvs:source>
    | <cvs:author>$Author: jdt $</cvs:author>
    | <cvs:date>$Date: 2004/07/02 14:13:15 $</cvs:date>
    | <cvs:version>$Revision: 1.12 $</cvs:version>
    | <cvs:log>
    |   $Log: install.xml,v $
    |   Revision 1.12  2004/07/02 14:13:15  jdt
    |   I *think* this is the change required to be consistent with Paul's
    |   renaming of astrogrid-community -> astrogrid-community-SNAPSHOT in AGINAB.
    |
    |   Revision 1.11  2004/06/18 13:45:20  dave
    |   Merged development branch, dave-dev-200406081614, into HEAD
    |
    |   Revision 1.10.14.2  2004/06/17 13:38:59  dave
    |   Tidied up old CVS log entries
    |
    | </cvs:log>
    |
    |
    +-->
<project default="init" basedir="." name="community-install">

    <!--+
        | Prefix for system properties.
        +-->
    <property environment="env"/>

    <!--+
        | Load our installation properties.
        +-->
    <property file="${basedir}/install.properties"/>

    <!--+
        | Load our tomcat properties (optional).
        +-->
    <property file="${basedir}/tomcat.properties"/>

    <!--+
        | Default config properties.
        +-->
    <property name="org.astrogrid.config.url" value="file:///etc/astrogrid.properties"/>

    <!--+
        | Default Community properties.
        +-->
    <property name="org.astrogrid.community.ident" value="org.astrogrid.localhost"/>

    <!--+
        | Default Registry endpoints.
        +-->
    <property name="org.astrogrid.registry.url"   value="http://localhost:8080/astrogrid-registry-SNAPSHOT/services/Registry"/>
    <property name="org.astrogrid.registry.admin" value="http://localhost:8080/astrogrid-registry-SNAPSHOT/services/RegistryAdmin"/>

    <!--+
        | Default Tomcat properties.
        +-->
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="tomcat.host" value="localhost"/>
    <property name="tomcat.port" value="8080"/>
    <property name="tomcat.url"  value="http://${tomcat.host}:${tomcat.port}"/>

    <!--+
        | Default context properties.
        +-->
    <property name="context.name" value="astrogrid-community-SNAPSHOT"/>
    <property name="context.path" value="/${context.name}"/>
    <property name="context.file" value="${basedir}/build/context.xml"/>
    <property name="context.war"  value="${context.name}.war"/>

    <!--+
        | Default service properties.
    <property name="service.host" value="localhost"/>
    <property name="service.port" value="8080"/>
        +-->
    <property name="service.url"  value="${tomcat.url}/${context.name}/services"/>

    <!--+
        | Default database properties.
        +-->
    <property name="database.name" value="org.astrogrid.community"/>
    <property name="database.home" value="/var/astrogrid"/>
    <property name="database.user" value="sa"/>
    <property name="database.pass" value=""/>
    <property name="database.url"  value="jdbc:hsqldb:${database.home}/${database.name}"/>
    <property name="database.jndi" value="jdbc/org.astrogrid.community.database"/>
    <property name="database.driver.name"  value="${database.url}"/>
    <property name="database.driver.class" value="org.hsqldb.jdbcDriver"/>

    <!--+
        | Display our build settings.
        +-->
    <target name="init">
        <echo message=""/>

        <!-- Build timestamp -->
        <tstamp>
            <format property="build.time" pattern="yyyy.MM.dd.HH.mm.ss"/>
            <format property="build.date" pattern="yyyy.MM.dd"/>
        </tstamp>

        <!-- Display the current settings -->
        <echo message="os.name      : ${os.name}"/>
        <echo message="os.arch      : ${os.arch}"/>
        <echo message="os.version   : ${os.version}"/>
        <echo message=""/>

        <echo message="user.home    : ${user.home}"/>
        <echo message=""/>

        <echo message="java.version : ${java.version}"/>
        <echo message="java.home    : ${java.home}"/>
        <echo message="JAVA.HOME    : ${env.JAVA_HOME}"/>
        <echo message=""/>

        <echo message="ant.version  : ${ant.version}"/>
        <echo message="ant.home     : ${ant.home}"/>
        <echo message=""/>

        <echo message="build.home     : ${basedir}"/>
        <echo message="build.file     : ${ant.file}"/>
        <echo message="build.date     : ${build.date}"/>
        <echo message="build.time     : ${build.time}"/>
        <echo message=""/>

        <echo message="tomcat.home    : ${tomcat.home}"/>
        <echo message="tomcat.url     : ${tomcat.url}"/>
        <echo message=""/>

        <echo message="database.name  : ${database.name}"/>
        <echo message="database.home  : ${database.home}"/>
        <echo message="database.url   : ${database.url}"/>
        <echo message="database.jndi  : ${database.jndi}"/>
        <echo message=""/>

        <echo message=""/>
    </target>

    <!-- ================ Toolkit tasks ================ -->

    <!--+
        | The installation tools classpath.
        +-->
    <path id="install.classpath">
        <fileset dir="jar">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!--+
        | Figure out our war file name.
        +-->
    <target name="locate.war" depends="">
        <echo message=""/>
        <echo message="Locating war file ..."/>
        <!--+
            | Create an Ant path for the war file.
            +-->
        <path id="war.antpath">
            <fileset dir="${basedir}/war">
                <include name="*.war"/>
            </fileset>
        </path>
        <!--+
            | Create an Ant property containing the war file path.
            +-->
        <property name="war.path" refid="war.antpath"/>
        <!--+
            | Create an Ant property containing just the war file name.
            +-->
        <basename property="war.name" file="${war.path}"/>
        <echo message="  Path : ${war.path}"/>
        <echo message="  Name : ${war.name}"/>
    </target>

    <!-- ================ JNDI Context tasks ================ -->

    <!--+
        | Create a local context file for our WebApp.
        +-->
    <target name="context.prepare" depends="locate.war">
        <!--+
            | Create our working directory.
            +-->
        <mkdir dir="${basedir}/build"/>
        <!--+
            | Create our initial context file.
            +-->
        <ant target="local.context.create"
             antfile="${basedir}/context.xml">
            <property name="context.path" value="${context.path}"/>
            <property name="context.base" value="${context.war}"/>
            <property name="context.file" value="${context.file}"/>
        </ant>
        <!--+
            | Add the AstroGrid config URL.
            +-->
        <ant target="local.context.property"
             antfile="${basedir}/context.xml">
            <property name="context.path"   value="${context.path}"/>
            <property name="context.file"   value="${context.file}"/>
            <property name="property.name"  value="org.astrogrid.config.url"/>
            <property name="property.type"  value="java.lang.String"/>
            <property name="property.value" value="${org.astrogrid.config.url}"/>
        </ant>
        <!--+
            | Add the community ident.
            | WARNING : This adds a duplicate entry that may ovveride the value in the local config file.
            +-->
        <ant target="local.context.property"
             antfile="${basedir}/context.xml">
            <property name="context.path"   value="${context.path}"/>
            <property name="context.file"   value="${context.file}"/>
            <property name="property.name"  value="org.astrogrid.community.ident"/>
            <property name="property.type"  value="java.lang.String"/>
            <property name="property.value" value="${org.astrogrid.community.ident}"/>
        </ant>
        <!--+
            | Add the database resource.
            +-->
        <ant target="local.context.resource"
             antfile="${basedir}/context.xml">
            <property name="context.path"  value="${context.path}"/>
            <property name="context.file"  value="${context.file}"/>
            <property name="resource.name" value="${database.jndi}"/>
            <property name="resource.type" value="javax.sql.DataSource"/>
            <property name="resource.auth" value="Container"/>
        </ant>
        <!--+
            | Add the database properties.
            +-->
        <ant target="local.context.resource.params"
             antfile="${basedir}/context.xml">
            <property name="context.path"  value="${context.path}"/>
            <property name="context.file"  value="${context.file}"/>
            <property name="resource.name" value="${database.jndi}"/>
            <property name="database.url"  value="${database.url}"/>
            <property name="database.user" value="sa"/>
            <property name="database.pass" value=""/>
            <property name="database.driver.name"  value="${database.url}"/>
            <property name="database.driver.class" value="${database.driver.class}"/>
        </ant>
    </target>

    <!-- ================ Local database tasks ================ -->

    <!--+
        | Install our database driver.
        +-->
    <target name="database.driver" depends="">
        <echo message=""/>
        <echo message="Installing database driver ...."/>
        <copy verbose="true" toDir="${tomcat.home}/common/lib">
            <fileset dir="${basedir}/lib">
                <include name="hsqldb*.jar"/>
            </fileset>
        </copy>
    </target>

    <!--+
        | Create our database data directory.
        +-->
    <target name="database.mkdir" depends="">
        <echo message=""/>
        <echo message="Creating database data directory."/>
        <echo message="  Path : ${database.home}"/>
        <mkdir dir="${database.home}"/>
    </target>

    <!-- ================ Status tasks ================ -->

    <!--+
        | Wait for our service to respond.
        +-->
    <target name="service.wait" depends="">
        <echo message=""/>
        <echo message="Waiting for Community webapp ...."/>
        <echo message="URL : ${service.url}/"/>
        <waitfor maxwait="60" maxwaitunit="second" checkevery="500">
            <http url="${service.url}/"/>
        </waitfor>
    </target>

    <!--+
        | Run our service status test.
        +-->
    <target name="service.status" depends="">
        <echo message=""/>
        <echo message="Polling service status ...."/>
        <echo message="  Endpoint : ${service.url}/PolicyService"/>
        <!--+
            | Initialise our Ant task.
            +-->
        <taskdef name="service.status.task" classname="org.astrogrid.community.client.ant.ServiceStatusTask">
            <classpath refid="install.classpath"/>
        </taskdef>
        <!--+
            | Call our WebService.
            +-->
        <service.status.task
            address="${service.url}/PolicyService">
        </service.status.task>
    </target>

    <!-- ================ Database tasks ================ -->

    <!--+
        | Reset our database.
        +-->
    <target name="database.reset" depends="">
        <echo message=""/>
        <echo message="Resetting database ...."/>
        <!--+
            | Initialise our Ant task.
            +-->
        <taskdef name="database.reset.task" classname="org.astrogrid.community.install.ant.DatabaseManagerTask">
            <classpath refid="install.classpath"/>
        </taskdef>
        <!--+
            | Call our WebService.
            +-->
        <database.reset.task
            action="reset"
            endpoint="${service.url}/DatabaseManager"
            />
    </target>

    <!--+
        | Load our database.
        +-->
    <target name="database.load" depends="">
        <echo message=""/>
        <echo message="Loading database ...."/>
        <!--+
            | Initialise our Ant task.
            +-->
        <taskdef name="database.load.task" classname="org.astrogrid.community.install.ant.CommunityLoaderTask">
            <classpath refid="install.classpath"/>
        </taskdef>
        <!--+
            | Call our WebService.
            +-->
        <database.load.task
            data="file:///${basedir}/config/community/${org.astrogrid.community.ident}.xml"
            policyManager="${service.url}/PolicyManager"
            securityManager="${service.url}/SecurityManager"
            />
    </target>

    <!--+
        | Install our database.
        +-->
    <target name="database.install">
        <echo message=""/>
        <echo message="Installing database ...."/>
        <!--+
            | Reset our database tables.
            +-->
        <antcall target="database.reset"/>
        <!--+
            | Load our database data.
            +-->
        <antcall target="database.load"/>
    </target>

    <!-- ================ Registry tasks ================ -->

    <!--+
        | Create a registry authority entry.
        +-->
    <target name="registy.authority" depends="">
        <echo message=""/>
        <echo message="Creating Registry authority entry"/>
        <echo message="  Authority : ${service.authority}"/>
        <echo message="  Resource  : ${service.resource}"/>
        <echo message="  File      : ${service.file}"/>
        <echo message="  Date      : ${service.date}"/>
        <xslt style="${basedir}/xsl/registry/authority.entry.xsl"
            in="${basedir}/config/registry/authority.entry.xml"
            out="${basedir}/config/service/${service.file}">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="service.authority" expression="${service.authority}"/>
            <param name="service.resource"  expression="${service.resource}"/>
            <param name="service.date"      expression="${service.date}"/>
        </xslt>
    </target>

    <!--+
        | Create a registry service entry.
        +-->
    <target name="registy.service" depends="">
        <echo message=""/>
        <echo message="Creating Registry service entry"/>
        <echo message="  Authority : ${service.authority}"/>
        <echo message="  Resource  : ${service.resource}"/>
        <echo message="  WSDL      : ${service.wsdl}"/>
        <echo message="  File      : ${service.file}"/>
        <echo message="  Date      : ${service.date}"/>
        <xslt style="${basedir}/xsl/registry/service.entry.xsl"
            in="${basedir}/config/registry/service.entry.xml"
            out="${basedir}/config/service/${service.file}">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <!-- Set the XSL params -->
            <param name="service.authority" expression="${service.authority}"/>
            <param name="service.resource"  expression="${service.resource}"/>
            <param name="service.wsdl"      expression="${service.wsdl}"/>
            <param name="service.date"      expression="${service.date}"/>
        </xslt>
    </target>

    <!--+
        | Generate our registry entries.
        +-->
    <target name="registy.generate" depends="">
        <echo message=""/>
        <echo message="Generating registry entry"/>
        <!--+
            | Create our target directory.
            +-->
        <delete failonerror="false" dir="${basedir}/config/service"/>
        <mkdir dir="${basedir}/config/service"/>
        <!--+
            | Generate our Registry timestamp.
            +-->
        <tstamp>
            <format property="service.date" pattern="yyyy-MM-dd"/>
        </tstamp>
        <!--+
            | Generate our authority entry.
            +-->
        <antcall target="registy.authority">
            <param name="service.authority" value="${org.astrogrid.community.ident}"/>
            <param name="service.resource"  value="org.astrogrid.community"/>
            <param name="service.file"      value="authority.entry.xml"/>
            <param name="service.date"      value="${service.date}"/>
        </antcall>
        <!--+
            | Generate our service entries.
            +-->
        <antcall target="registy.service">
            <param name="service.authority" value="${org.astrogrid.community.ident}"/>
            <param name="service.resource"  value="org.astrogrid.community.common.policy.manager.PolicyManager"/>
            <param name="service.wsdl"      value="${service.url}/PolicyManager?wsdl"/>
            <param name="service.file"      value="policy.manager.xml"/>
            <param name="service.date"      value="${service.date}"/>
        </antcall>
        <antcall target="registy.service">
            <param name="service.authority" value="${org.astrogrid.community.ident}"/>
            <param name="service.resource"  value="org.astrogrid.community.common.policy.service.PolicyService"/>
            <param name="service.wsdl"      value="${service.url}/PolicyService?wsdl"/>
            <param name="service.file"      value="policy.service.xml"/>
            <param name="service.date"      value="${service.date}"/>
        </antcall>
        <antcall target="registy.service">
            <param name="service.authority" value="${org.astrogrid.community.ident}"/>
            <param name="service.resource"  value="org.astrogrid.community.common.security.manager.SecurityManager"/>
            <param name="service.wsdl"      value="${service.url}/SecurityManager?wsdl"/>
            <param name="service.file"      value="security.manager.xml"/>
            <param name="service.date"      value="${service.date}"/>
        </antcall>
        <antcall target="registy.service">
            <param name="service.authority" value="${org.astrogrid.community.ident}"/>
            <param name="service.resource"  value="org.astrogrid.community.common.security.service.SecurityService"/>
            <param name="service.wsdl"      value="${service.url}/SecurityService?wsdl"/>
            <param name="service.file"      value="security.service.xml"/>
            <param name="service.date"      value="${service.date}"/>
        </antcall>
    </target>

    <!--+
        | Register our service.
        +-->
    <target name="registy.register" depends="">
        <echo message=""/>
        <echo message="Registering service ...."/>
        <!--+
            | Initialise our Ant task.
            +-->
        <taskdef name="register.task" classname="org.astrogrid.community.install.ant.CommunityRegistryTask">
            <classpath refid="install.classpath"/>
        </taskdef>
        <!--+
            | Register our service entries.
            +-->
        <register.task
            data="${basedir}/config/service/authority.entry.xml"
            registry="${org.astrogrid.registry.admin}"
            />
        <register.task
            data="${basedir}/config/service/policy.manager.xml"
            registry="${org.astrogrid.registry.admin}"
            />
        <register.task
            data="${basedir}/config/service/policy.service.xml"
            registry="${org.astrogrid.registry.admin}"
            />
        <register.task
            data="${basedir}/config/service/security.manager.xml"
            registry="${org.astrogrid.registry.admin}"
            />
        <register.task
            data="${basedir}/config/service/security.service.xml"
            registry="${org.astrogrid.registry.admin}"
            />
    </target>

    <!--+
        | Register our service.
        +-->
    <target name="service.register">
        <echo message=""/>
        <echo message="Registering service ...."/>
        <!--+
            | Generate our registry entries.
            +-->
        <antcall target="registy.generate"/>
        <!--+
            | Register our service.
            +-->
        <antcall target="registy.register"/>
    </target>

    <!-- ================ Install tasks ================ -->

    <!--+
        | Install our webapp file into Tomcat 4.x.y.z.
        +-->
    <target name="webapp.install.4x" depends="locate.war">
        <echo message=""/>
        <echo message="Installing WebApp (Tomcat 4.x.y.z)"/>
        <echo message="  tomcat.home  : ${tomcat.home}"/>
        <echo message="  WebApp war   : ${context.war}"/>
        <echo message="  Context name : ${context.name}"/>
        <!--+
            | Copy our context file into the webapps directory.
            +-->
        <copy file="${basedir}/build/context.xml" toFile="${tomcat.home}/webapps/${context.name}.xml"/>
        <!--+
            | Copy our war file into the webapps directory.
            +-->
        <copy file="${war.path}" toFile="${tomcat.home}/webapps/${context.war}"/>
    </target>

    <!--+
        | Install our webapp file into Tomcat 5.x.y.z.
        +-->
    <target name="webapp.install.5x" depends="locate.war">
        <echo message=""/>
        <echo message="Installing WebApp (Tomcat 5.x.y.z)"/>
        <echo message="  tomcat.home  : ${tomcat.home}"/>
        <echo message="  WebApp war   : ${context.war}"/>
        <echo message="  Context name : ${context.name}"/>
        <!--+
            | Copy our context file into the context directory.
            +-->
        <copy file="${basedir}/build/context.xml" toFile="${tomcat.home}/conf/Catalina/localhost/${context.name}.xml"/>
        <!--+
            | Copy our war file into the webapps directory.
            +-->
        <copy file="${war.path}" toFile="${tomcat.home}/webapps/${context.war}"/>
    </target>

    <!--+
        | Install our service.
        +-->
    <target name="install" depends="">
        <!--+
            | Install our database driver.
            +-->
        <antcall target="database.driver"/>
        <!--+
            | Create our database directory.
            +-->
        <antcall target="database.mkdir"/>
        <!--+
            | Prepare our context file.
            +-->
        <antcall target="context.prepare"/>
        <!--+
            | Install our war file.
            +-->
        <antcall target="webapp.install.5x"/>
    </target>

    <!-- ================ Deploy tasks ================ -->

    <!--+
        | Deploy our webapp file into Tomcat 4.x.y.z.
        +-->
    <target name="webapp.deploy.4x" depends="locate.war">
        <echo message=""/>
        <echo message="Deploying WebApp (Tomcat 4.x.y.z)"/>
        <echo message="  tomcat.url   : ${tomcat.url}"/>
        <echo message="  WebApp war   : ${context.war}"/>
        <echo message="  Context name : ${context.name}"/>
        <!--+
            | TODO ....
            +-->
    </target>

    <!--+
        | Deploy our webapp file into Tomcat 5.x.y.z.
        +-->
    <target name="webapp.deploy.5x" depends="locate.war">
        <echo message=""/>
        <echo message="Installing WebApp (Tomcat 5.x.y.z)"/>
        <echo message="  tomcat.url   : ${tomcat.url}"/>
        <echo message="  WebApp war   : ${context.war}"/>
        <echo message="  Context name : ${context.name}"/>
        <!--+
            | Make a copy of our war file.
            +-->
        <copy file="${war.path}" toFile="${basedir}/build/${context.war}"/>
        <!--+
            | Update our war file to contain our context file.
            +-->
        <war update="true" destfile="${basedir}/build/${context.war}">
            <metainf dir="${basedir}/build">
                <include name="context.xml"/>
            </metainf>
        </war>
        <!--+
            | TODO ....
            +-->
    </target>

</project>


