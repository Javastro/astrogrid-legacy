<?xml version="1.0" encoding="UTF-8"?>
<!--+
    | Maven build tasks for the AstroGrid community server.
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/server/Attic/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2004/02/20 21:11:05 $</cvs:date>
    | <cvs:version>$Revision: 1.5 $</cvs:version>
    | <cvs:log>
    |   $Log: maven.xml,v $
    |   Revision 1.5  2004/02/20 21:11:05  dave
    |   Merged development branch, dave-dev-200402120832, into HEAD
    |
    |   Revision 1.4.2.5  2004/02/20 01:02:38  dave
    |   Added database config files to webapp.
    |
    |   Revision 1.4.2.4  2004/02/19 21:09:26  dave
    |   Refactored ServiceStatusData into a common package.
    |   Refactored CommunityServiceImpl constructor to take a parent service.
    |   Refactored default database for CommunityServiceImpl
    |
    |   Revision 1.4.2.3  2004/02/19 14:51:00  dave
    |   Changed DatabaseManager to DatabaseConfigurationFactory.
    |
    |   Revision 1.4.2.2  2004/02/16 15:20:54  dave
    |   Changed tabs to spaces
    |
    |   Revision 1.4.2.1  2004/02/14 22:24:09  dave
    |   Test toolkit for the install and tomcat sub-projects
    |
    |   Revision 1.4  2004/02/12 08:12:13  dave
    |   Merged development branch, dave-dev-200401131047, into HEAD
    |
    |   Revision 1.2.4.5  2004/01/30 14:55:46  dave
    |   Added PasswordData object
    |
    |   Revision 1.2.4.4  2004/01/29 04:47:13  dave
    |   Added service deployment to the test:test pre-goal.
    |
    |   Revision 1.2.4.3  2004/01/26 16:59:22  dave
    |   Experimented with in-memory databases - they don't work
    |
    |   Revision 1.2.4.2  2004/01/26 13:18:08  dave
    |   Added new DatabaseManager to enable local JUnit testing
    |
    |   Revision 1.2.4.1  2004/01/17 13:54:18  dave
    |   Removed password from AccountData
    |
    |   Revision 1.2  2004/01/07 10:45:45  dave
    |   Merged development branch, dave-dev-20031224, back into HEAD
    |
    |   Revision 1.1.2.6  2004/01/07 04:29:15  dave
    |   Moved properties into shared files and tested deployment goals
    |
    |   Revision 1.1.2.5  2004/01/05 06:47:18  dave
    |   Moved policy data classes into policy.data package
    |
    |   Revision 1.1.2.4  2004/01/05 04:45:34  dave
    |   Removed the maven.xml import ... seems to work without it ?
    |
    |   Revision 1.1.2.3  2004/01/05 04:11:05  dave
    |   Fixed the maven.xml import
    |   Changed the primary goal to install-artifact
    |
    |   Revision 1.1.2.2  2004/01/01 01:44:29  dave
    |   Moved common code into parent maven.xml script
    |
    | </cvs:log>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:deploy="deploy"
    >

    <!--+
        | Import the goals from our parent project.
        | Looks like this gets included anyway, possibly because our project inherits from ../maven.project.xml ?
    <core:import inherit="true" file="${maven.build.dir}/../../maven/maven.xml"/>
        +-->

    <!--+
        | Primary goals are :
        |     clean
        |     install-artifact
        |     install-snapshot
        |     site
        +-->

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>

    <!--+
        | Reactor goals.
        | These are just placeholder targets for the reactor to call.
        +-->

    <!--+
        | Clean our build target.
        | (required as a target goal for the reactor)
        +-->
    <goal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Cleaning build target ...."/>
        <attainGoal name="clean:clean"/>
    </goal>

    <!--+
        | Build and install our component jar.
        | (required as a target goal for the reactor)
        +-->
    <goal name="install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Building component artifact ...."/>
        <attainGoal name="jar:install"/>
    </goal>

    <!--+
        | Build and install our snapshot jar.
        | (required as a target goal for the reactor)
        +-->
    <goal name="install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Building snapshot artifact ...."/>
        <attainGoal name="jar:install-snapshot"/>
    </goal>

    <!--+
        | Deploy our snapshot jar.
        | (required as a target goal for the reactor)
        +-->
    <goal name="deploy-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Deploying snapshot artifact ...."/>
        <attainGoal name="jar:deploy-snapshot"/>
    </goal>

    <!--+
        | Build our project website.
        | (required as a target goal for the reactor)
        +-->
    <goal name="site">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Building project site ...."/>
        <attainGoal name="site:generate"/>
    </goal>

    <!--+
        | Generate a clover report for our project.
        | (required as a target goal for the reactor)
        +-->
    <goal name="clover-report">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Generating clover report ...."/>
        <attainGoal name="maven-clover-plugin:report"/>
    </goal>

    <!--+
        | Project goals.
        | These are the main project goals.
        +-->

    <!--+
        | Prepare for the java:compile task.
        | Generates the WSDL, WSDD and Java stubs for our service interface(s).
        +-->
    <preGoal name="java:compile">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for java:compile ...."/>
        <!--+
            | Initialise our Axis tools
            +-->
        <attainGoal name="init.tools"/>
        <!--+
            | Create our output directories.
            +-->
        <ant:mkdir dir="${wsdlDir}"/>
        <ant:mkdir dir="${tempDir}"/>
        <ant:mkdir dir="${javaDir}"/>
        <!--+
            | Generate our PolicyManager WSDL.
            +-->
        <ant:axis.java2wsdl
            output="${wsdlDir}/PolicyManager.wsdl"
            classname="org.astrogrid.community.common.policy.manager.PolicyManager"
            location="${axisUrl}/services/PolicyManager"
            namespace="urn:manager.policy.common.community.astrogrid.org"
            style="RPC"
            >
            <classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${maven.build.dest}"/>
            </classpath>
        </ant:axis.java2wsdl>
        <!--+
            | Generate our PolicyManager stubs.
            +-->
        <ant:axis.wsdl2java
            verbose="false"
            serverside="true"
            skeletondeploy="false"
            output="${tempDir}"
            url="file://${wsdlDir}/PolicyManager.wsdl"
            >
        </ant:axis.wsdl2java>
        <!--+
            | Generate our PolicyService WSDL.
            +-->
        <ant:axis.java2wsdl
            output="${wsdlDir}/PolicyService.wsdl"
            classname="org.astrogrid.community.common.policy.service.PolicyService"
            location="${axisUrl}/services/PolicyService"
            namespace="urn:service.policy.common.community.astrogrid.org"
            style="RPC"
            >
            <classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${maven.build.dest}"/>
            </classpath>
        </ant:axis.java2wsdl>
        <!--+
            | Generate our PolicyService stubs.
            +-->
        <ant:axis.wsdl2java
            verbose="false"
            serverside="true"
            skeletondeploy="false"
            output="${tempDir}"
            url="file://${wsdlDir}/PolicyService.wsdl"
            >
        </ant:axis.wsdl2java>
        <!--+
            | Modify our PolicyManager WSDD to use our implementation classes.
            +-->
        <ant:xslt style="src/xsl/wsdd-impl.xsl"
            in="${tempDir}/org/astrogrid/community/common/policy/manager/deploy.wsdd"
            out="${wsddDir}/PolicyManager.wsdd">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="service"   expression="PolicyManager"/>
            <param name="classname" expression="org.astrogrid.community.server.policy.manager.PolicyManagerImpl"/>
        </ant:xslt>
        <!--+
            | Modify our PolicyService WSDD to use our implementation classes.
            +-->
        <ant:xslt style="src/xsl/wsdd-impl.xsl"
            in="${tempDir}/org/astrogrid/community/common/policy/service/deploy.wsdd"
            out="${wsddDir}/PolicyService.wsdd">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="service"   expression="PolicyService"/>
            <param name="classname" expression="org.astrogrid.community.server.policy.service.PolicyServiceImpl"/>
        </ant:xslt>

<!--+
    | TODO Deploy the rest of our services ...
    +-->

        <!--+
            | Copy the generated Java files we want to use.
            +-->
        <ant:copy verbose="false" toDir="${javaDir}">
            <fileset dir="${tempDir}">
                <include name="**/PolicyManagerService.java"/>
                <include name="**/PolicyManagerServiceLocator.java"/>
                <include name="**/PolicyManagerSoapBindingStub.java"/>
                <include name="**/PolicyServiceService.java"/>
                <include name="**/PolicyServiceServiceLocator.java"/>
                <include name="**/PolicyServiceSoapBindingStub.java"/>
            </fileset>
        </ant:copy>
        <!--+
            | Add the Java files to our project source path.
            +-->
        <ant:path id="astro.includes" location="${javaDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="astro.includes"/>
    </preGoal>

    <!--+
        | Prepare the files for the jar goal.
        | Adds the generated WSDL and WSDD files into the jar META-INF.
        | Adds the database configuration files to the classpath.
        +-->
    <preGoal name="jar:jar">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for jar:jar ...."/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Create the META-INF directory.
            +-->
        <ant:mkdir dir="${maven.build.dest}/META-INF"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdl"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdd"/>
        <!--+
            | Copy our WSDL service descriptions.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}/META-INF/wsdl">
            <ant:fileset dir="${wsdlDir}">
                <include name="**/*.wsdl"/>
            </ant:fileset>
        </ant:copy>
        <!--+
            | Copy our WSDD service deployment files.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}/META-INF/wsdd">
            <ant:fileset dir="${wsddDir}">
                <include name="**/*.wsdd"/>
            </ant:fileset>
        </ant:copy>
        <!--+
            | Copy our database configuration files.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}">
            <ant:fileset dir="src/config/database">
                <include name="astrogrid-community-mapping.xml"/>
                <include name="astrogrid-community-database.xml"/>
                <include name="astrogrid-community-database.sql"/>
            </ant:fileset>
        </ant:copy>
    </preGoal>

    <!--+
        | Prepare the database config files for our JUnit tests.
        +-->
    <preGoal name="test:test-resources">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing test-resources ...."/>
        <!--+
            | Setup our database properties.
            +-->
        <ant:property name="database.name"   value="test"/>
        <ant:property name="database.data"   value="${maven.build.dir}/database/data"/>
        <ant:property name="database.config" value="${maven.build.dir}/database/config"/>
        <!--+
            | Create our config directory.
            +-->
        <ant:mkdir dir="${database.config}"/>
        <!--+
            | Copy our database mapping file.
            | Not required at the moment, the standard mapping.xml is included as a test resource.
            | However, we may need custom mapping files for some of the error condition testing.
        <ant:copy overwrite="true" file="src/config/database/mapping.xml" toDir="${database.config}"/>
            +-->
        <!--+
            | Create our database directory.
            +-->
        <ant:mkdir dir="${database.data}"/>
        <!--+
            | Copy our default database configuration.
            +-->
        <ant:copy overwrite="true" file="src/config/database/astrogrid-community-database.xml" toFile="${database.config}/database.xml"/>
        <ant:copy overwrite="true" file="src/config/database/astrogrid-community-mapping.xml"  toFile="${database.config}/astrogrid-community-mapping.xml"/>
        <!--+
            | Create a Castor JDO config for test database 001.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Creating Castor config for test-database-001"/>
        <ant:xslt style="src/xsl/database-config.xsl"
            in="src/config/database/astrogrid-community-database.xml"
            out="${database.config}/test-database-001.xml">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="name"    expression="test-database-001"/>
            <param name="engine"  expression="hsql"/>
            <param name="url"     expression="jdbc:hsqldb:${database.data}/test-database-001"/>
            <param name="mapping" expression="test-mapping-001.xml"/>
            <param name="driver"  expression="org.hsqldb.jdbcDriver"/>
            <param name="user"    expression="sa"/>
            <param name="pass"    expression=""/>
        </ant:xslt>
        <!--+
            | Copy the Castor JDO mapping file for test database 001.
            +-->
        <ant:copy file="src/config/database/astrogrid-community-mapping.xml"  toFile="${database.config}/test-mapping-001.xml"/>
        <!--+
            | Copy the SQL script for test database 001.
            +-->
        <ant:copy file="src/config/database/astrogrid-community-database.sql"  toFile="${database.config}/test-database-001.sql"/>
        <!--+
            | Create our the database tables for test-database-001.
        <ant:echo message=""/>
        <ant:echo message="Creating database tables for test-database-001"/>
        <ant:sql driver="org.hsqldb.jdbcDriver"
             url="jdbc:hsqldb:${database.data}/test-database-001"
             classpathref="maven.dependency.classpath"
             userid="sa"
             password=""
             print="true"
            >
            <transaction src="src/config/database/astrogrid-community-database.sql"/>
        </ant:sql>
            +-->

        <!--+
            | Create our config for test-database-002.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Creating Castor config for test-database-002"/>
        <ant:xslt style="src/xsl/database-config.xsl"
            in="src/config/database/astrogrid-community-database.xml"
            out="${database.config}/test-database-002.xml">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="name"    expression="test-database-002"/>
            <param name="engine"  expression="hsql"/>
            <param name="url"     expression="jdbc:hsqldb:${database.data}/test-database-002"/>
            <param name="mapping" expression="test-mapping-002.xml"/>
            <param name="driver"  expression="org.hsqldb.jdbcDriver"/>
            <param name="user"    expression="sa"/>
            <param name="pass"    expression=""/>
        </ant:xslt>
        <!--+
            | Copy the Castor JDO mapping file for test database 002.
            +-->
        <ant:copy file="src/config/database/astrogrid-community-mapping.xml"  toFile="${database.config}/test-mapping-002.xml"/>
        <!--+
            | Copy the SQL script for test database 002.
            +-->
        <ant:copy file="src/config/database/astrogrid-community-database.sql"  toFile="${database.config}/test-database-002.sql"/>

        <!--+
            | Create our config for test-database-003.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Creating Castor config for test-database-003"/>
        <ant:xslt style="src/xsl/database-config.xsl"
            in="src/config/database/astrogrid-community-database.xml"
            out="${database.config}/test-database-003.xml">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="name"    expression="test-database-003"/>
            <param name="engine"  expression="hsql"/>
            <param name="url"     expression="jdbc:hsqldb:${database.data}/test-database-003"/>
            <param name="mapping" expression="test-mapping-003.xml"/>
            <param name="driver"  expression="org.hsqldb.jdbcDriver"/>
            <param name="user"    expression="sa"/>
            <param name="pass"    expression=""/>
        </ant:xslt>
        <!--+
            | Copy the Castor JDO mapping file for test database 003.
            +-->
        <ant:copy file="src/config/database/astrogrid-community-mapping.xml"  toFile="${database.config}/test-mapping-003.xml"/>
        <!--+
            | Copy the SQL script for test database 003.
            +-->
        <ant:copy file="src/config/database/astrogrid-community-database.sql"  toFile="${database.config}/test-database-003.sql"/>

        <!--+
            | Create our config for test-database-004.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Creating Castor config for test-database-004"/>
        <ant:xslt style="src/xsl/database-config.xsl"
            in="src/config/database/astrogrid-community-database.xml"
            out="${database.config}/test-database-004.xml">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="name"    expression="test-database-004"/>
            <param name="engine"  expression="hsql"/>
            <param name="url"     expression="jdbc:hsqldb:${database.data}/test-database-004"/>
            <param name="mapping" expression="test-mapping-004.xml"/>
            <param name="driver"  expression="org.hsqldb.jdbcDriver"/>
            <param name="user"    expression="sa"/>
            <param name="pass"    expression=""/>
        </ant:xslt>
        <!--+
            | Copy the Castor JDO mapping file for test database 004.
            +-->
        <ant:copy file="src/config/database/astrogrid-community-mapping.xml"  toFile="${database.config}/test-mapping-004.xml"/>
        <!--+
            | Copy the SQL script for test database 004.
            +-->
        <ant:copy file="src/config/database/astrogrid-community-database.sql"  toFile="${database.config}/test-database-004.sql"/>

        <!--+
            | Create a config for an in-memory-database.
            | At the moment, this fails many of the tests.
            | I suspect that this may be because it drops the data as soon as the JDBC connection is closed.
            | Need to look at this one in more detail though.
        <ant:echo message=""/>
        <ant:echo message="Creating Castor config for memory-database-test"/>
        <ant:xslt style="src/xsl/database-config.xsl"
            in="src/config/database/astrogrid-community-database.xml"
            out="${database.config}/memory-database-test.xml">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="name"    expression="memory-database-test"/>
            <param name="engine"  expression="hsql"/>
            <param name="url"     expression="jdbc:hsqldb:."/>
            <param name="mapping" expression="mapping.xml"/>
            <param name="driver"  expression="org.hsqldb.jdbcDriver"/>
            <param name="user"    expression="sa"/>
            <param name="pass"    expression=""/>
        </ant:xslt>
            +-->
    </preGoal>

    <!--+
        | Deploy our WebServices into our local Axis WebApp.
        | At the moment, this isn't used in the tests.
        | The JUnit tests explicitly deploy each service by calling the AdminClient.
        | Eventually, I want to find a way of telling the in-process Axis service
        | to load the server-config.wsdd file from the Axis WebApplication.
        +-->
    <preGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing services for tests"/>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Deploy our PolicyManger service.
            +-->
        <ant:echo message="Deploying PolicyManager WebService"/>
        <ant:java classname="org.apache.axis.utils.Admin"
            dir="${axisDir}/WEB-INF"
            classpathref="maven.dependency.classpath"
            fork="true"
            >
            <arg value="server"/>
            <arg value="${wsddDir}/PolicyManager.wsdd"/>
        </ant:java>
        <!--+
            | Deploy our PolicyService service.
            +-->
        <ant:echo message="Deploying PolicyService WebService"/>
        <ant:java classname="org.apache.axis.utils.Admin"
            dir="${axisDir}/WEB-INF"
            classpathref="maven.dependency.classpath"
            fork="true"
            >
            <arg value="server"/>
            <arg value="${wsddDir}/PolicyService.wsdd"/>
        </ant:java>
    </preGoal>

</project>
