<?xml version="1.0" encoding="UTF-8"?>
<!--+
    | Maven build tasks for the AstroGrid community server.
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/server/Attic/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2004/03/05 17:19:59 $</cvs:date>
    | <cvs:version>$Revision: 1.6 $</cvs:version>
    | <cvs:log>
    |   $Log: maven.xml,v $
    |   Revision 1.6  2004/03/05 17:19:59  dave
    |   Merged development branch, dave-dev-200402211936, into HEAD
    |
    |   Revision 1.5.2.8  2004/03/05 16:28:28  dave
    |   Added SecurityManager delegate test casees.
    |   Refactored Maven JUnit properties.
    |
    |   Revision 1.5.2.7  2004/03/05 14:03:23  dave
    |   Added first client side SOAP test - SecurityServiceSoapDelegateTestCase
    |
    |   Revision 1.5.2.6  2004/03/04 08:57:10  dave
    |   Started work on the install xdocs.
    |   Started work on the Security delegates.
    |
    |   Revision 1.5.2.5  2004/03/03 17:50:47  dave
    |   Refactored maven.xml using local custom tags.
    |   Added 'local://service' SecurityManager and SecurityService tests.
    |
    |   Revision 1.5.2.4  2004/02/24 20:08:10  dave
    |   Got local tests working - using maven generated WSDD config.
    |
    |   Revision 1.5.2.3  2004/02/23 22:07:23  dave
    |   Added local service test for DatabaseManager
    |
    |   Revision 1.5.2.2  2004/02/22 20:03:16  dave
    |   Removed redundant DatabaseConfiguration interfaces
    |
    |   Revision 1.5.2.1  2004/02/22 01:50:47  dave
    |   Refactored install and deploy goals
    |
    |   Revision 1.5  2004/02/20 21:11:05  dave
    |   Merged development branch, dave-dev-200402120832, into HEAD
    |
    |   Revision 1.4.2.5  2004/02/20 01:02:38  dave
    |   Added database config files to webapp.
    |
    |   Revision 1.4.2.4  2004/02/19 21:09:26  dave
    |   Refactored ServiceStatusData into a common package.
    |   Refactored CommunityServiceImpl constructor to take a parent service.
    |   Refactored default database for CommunityServiceImpl
    |
    |   Revision 1.4.2.3  2004/02/19 14:51:00  dave
    |   Changed DatabaseManager to DatabaseConfigurationFactory.
    |
    |   Revision 1.4.2.2  2004/02/16 15:20:54  dave
    |   Changed tabs to spaces
    |
    |   Revision 1.4.2.1  2004/02/14 22:24:09  dave
    |   Test toolkit for the install and tomcat sub-projects
    |
    |   Revision 1.4  2004/02/12 08:12:13  dave
    |   Merged development branch, dave-dev-200401131047, into HEAD
    |
    |   Revision 1.2.4.5  2004/01/30 14:55:46  dave
    |   Added PasswordData object
    |
    |   Revision 1.2.4.4  2004/01/29 04:47:13  dave
    |   Added service deployment to the test:test pre-goal.
    |
    |   Revision 1.2.4.3  2004/01/26 16:59:22  dave
    |   Experimented with in-memory databases - they don't work
    |
    |   Revision 1.2.4.2  2004/01/26 13:18:08  dave
    |   Added new DatabaseManager to enable local JUnit testing
    |
    |   Revision 1.2.4.1  2004/01/17 13:54:18  dave
    |   Removed password from AccountData
    |
    |   Revision 1.2  2004/01/07 10:45:45  dave
    |   Merged development branch, dave-dev-20031224, back into HEAD
    |
    |   Revision 1.1.2.6  2004/01/07 04:29:15  dave
    |   Moved properties into shared files and tested deployment goals
    |
    |   Revision 1.1.2.5  2004/01/05 06:47:18  dave
    |   Moved policy data classes into policy.data package
    |
    |   Revision 1.1.2.4  2004/01/05 04:45:34  dave
    |   Removed the maven.xml import ... seems to work without it ?
    |
    |   Revision 1.1.2.3  2004/01/05 04:11:05  dave
    |   Fixed the maven.xml import
    |   Changed the primary goal to install-artifact
    |
    |   Revision 1.1.2.2  2004/01/01 01:44:29  dave
    |   Moved common code into parent maven.xml script
    |
    | </cvs:log>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:astro="org.astrogrid.community"
    >

    <!--+
        | Import the goals from our parent project.
        | Looks like this gets included anyway, possibly because our project inherits from ../maven.project.xml ?
    <core:import inherit="true" file="${maven.build.dir}/../../maven/maven.xml"/>
        +-->

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>

    <!-- ================ Reactor goals ================ -->

    <!--+
        | Clean our build target.
        +-->
    <goal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean:clean"/>
    </goal>

	<!--+
		| Build and install our component jar.
		+-->
	<goal name="install-artifact">
		<ant:echo message="Build artifact  : ${pom.artifactId}"/>
		<ant:echo message="Build version   : ${pom.currentVersion}"/>
		<ant:echo message="Build directory : ${maven.build.dir}"/>
		<!--+
			| Build our jar.
			+-->
		<attainGoal name="jar:jar"/>
		<!--+
			| Install our jar.
			+-->
		<core:set var="astrogrid.artifact.type" value="jar"/>
		<core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
		<attainGoal name="install-local"/>
	</goal>

	<!--+
		| Build and install our snapshot jar.
		+-->
	<goal name="install-snapshot">
		<ant:echo message="Build artifact  : ${pom.artifactId}"/>
		<ant:echo message="Build version   : ${pom.currentVersion}"/>
		<ant:echo message="Build directory : ${maven.build.dir}"/>
		<!--+
			| Create our snapshot name.
			+-->
		<maven:snapshot project="${pom}"/>
		<core:set var="maven.final.name" value="${snapshotSignature}"/>
		<!--+
			| Build our jar.
			+-->
		<attainGoal name="jar:jar"/>
		<!--+
			| Install our SNAPSHOT jar.
			+-->
		<core:set var="astrogrid.artifact.type" value="jar"/>
		<core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
		<attainGoal name="install-local-snapshot"/>
	</goal>

	<!--+
		| Build and deploy our component jar.
		+-->
	<goal name="deploy-artifact">
		<ant:echo message="Build artifact  : ${pom.artifactId}"/>
		<ant:echo message="Build version   : ${pom.currentVersion}"/>
		<ant:echo message="Build directory : ${maven.build.dir}"/>
		<!--+
			| Build our jar.
			+-->
		<attainGoal name="jar:jar"/>
		<!--+
			| Deploy our jar.
			+-->
		<core:set var="astrogrid.artifact.type" value="jar"/>
		<core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
		<attainGoal name="deploy-local"/>
	</goal>

	<!--+
		| Build and deploy our snapshot jar.
		+-->
	<goal name="deploy-snapshot">
		<ant:echo message="Build artifact  : ${pom.artifactId}"/>
		<ant:echo message="Build version   : ${pom.currentVersion}"/>
		<ant:echo message="Build directory : ${maven.build.dir}"/>
		<!--+
			| Create our snapshot name.
			+-->
		<maven:snapshot project="${pom}"/>
		<core:set var="maven.final.name" value="${snapshotSignature}"/>
		<!--+
			| Build our jar.
			+-->
		<attainGoal name="jar:jar"/>
		<!--+
			| Deploy our SNAPSHOT jar.
			+-->
		<core:set var="astrogrid.artifact.type" value="jar"/>
		<core:set var="astrogrid.artifact.name" value="${maven.final.name}"/>
		<attainGoal name="deploy-local-snapshot"/>
	</goal>

    <!--+
        | Build our component site.
        +-->
    <goal name="site">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Building project site ...."/>
        <attainGoal name="site:generate"/>
    </goal>

    <!-- ================ Component goals ================ -->

    <!--+
        | Prepare for the java:compile task.
        | Generates the WSDL, WSDD and Java stubs for our service interface(s).
        +-->
    <preGoal name="java:compile">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for java:compile ...."/>
        <!--+
            | Initialise our Axis tools
            +-->
        <attainGoal name="init.tools"/>
        <!--+
            | Create our output directories.
            +-->
        <ant:mkdir dir="${wsdlDir}"/>
        <ant:mkdir dir="${tempDir}"/>
        <ant:mkdir dir="${javaDir}"/>
        <!--+
            | Generate our DatabaseManager WSDL and stubs.
            +-->
		<astro:service.generate
			service.name="DatabaseManager"
			service.wsdd="org/astrogrid/community/common/database/manager/deploy.wsdd"
			service.class="org.astrogrid.community.server.database.manager.DatabaseManagerImpl"
			service.interface="org.astrogrid.community.common.database.manager.DatabaseManager"
			service.namespace="urn:manager.database.common.community.astrogrid.org"
			/>
        <!--+
            | Generate our PolicyManager WSDL and stubs.
            +-->
		<astro:service.generate
			service.name="PolicyManager"
			service.wsdd="org/astrogrid/community/common/policy/manager/deploy.wsdd"
			service.class="org.astrogrid.community.server.policy.manager.PolicyManagerImpl"
			service.interface="org.astrogrid.community.common.policy.manager.PolicyManager"
			service.namespace="urn:manager.policy.common.community.astrogrid.org"
			/>
        <!--+
            | Generate our PolicyService WSDL and stubs.
            +-->
		<astro:service.generate
			service.name="PolicyService"
			service.wsdd="org/astrogrid/community/common/policy/service/deploy.wsdd"
			service.class="org.astrogrid.community.server.policy.service.PolicyServiceImpl"
			service.interface="org.astrogrid.community.common.policy.service.PolicyService"
			service.namespace="urn:service.policy.common.community.astrogrid.org"
			/>
        <!--+
            | Generate our SecurityManager WSDL and stubs.
            +-->
		<astro:service.generate
			service.name="SecurityManager"
			service.wsdd="org/astrogrid/community/common/security/manager/deploy.wsdd"
			service.class="org.astrogrid.community.server.security.manager.SecurityManagerImpl"
			service.interface="org.astrogrid.community.common.security.manager.SecurityManager"
			service.namespace="urn:manager.security.common.community.astrogrid.org"
			/>
        <!--+
            | Generate our SecurityService WSDL and stubs.
            +-->
		<astro:service.generate
			service.name="SecurityService"
			service.wsdd="org/astrogrid/community/common/security/service/deploy.wsdd"
			service.class="org.astrogrid.community.server.security.service.SecurityServiceImpl"
			service.interface="org.astrogrid.community.common.security.service.SecurityService"
			service.namespace="urn:service.security.common.community.astrogrid.org"
			/>
        <!--+
            | Add the Java files to our project source path.
            +-->
        <ant:path id="astro.includes" location="${javaDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="astro.includes"/>
    </preGoal>

    <!--+
        | Prepare the files for the jar goal.
        | Adds the generated WSDL and WSDD files into the jar META-INF.
        | Adds the database configuration files to the classpath.
        +-->
    <preGoal name="jar:jar">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for jar:jar ...."/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Create the META-INF directory.
            +-->
        <ant:mkdir dir="${maven.build.dest}/META-INF"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdl"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdd"/>
        <!--+
            | Copy our WSDL service descriptions.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}/META-INF/wsdl">
            <ant:fileset dir="${wsdlDir}">
                <include name="**/*.wsdl"/>
            </ant:fileset>
        </ant:copy>
        <!--+
            | Copy our WSDD service deployment files.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}/META-INF/wsdd">
            <ant:fileset dir="${wsddDir}">
                <include name="**/*.wsdd"/>
            </ant:fileset>
        </ant:copy>
        <!--+
            | Copy our database configuration files.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}">
            <ant:fileset dir="src/config/database">
                <include name="astrogrid-community-mapping.xml"/>
                <include name="astrogrid-community-database.xml"/>
                <include name="astrogrid-community-database.sql"/>
            </ant:fileset>
        </ant:copy>
    </preGoal>

    <!--+
        | Prepare the database config files for our JUnit tests.
        +-->
    <preGoal name="test:test-resources">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing test-resources ...."/>
        <!--+
            | Setup our database properties.
            +-->
        <ant:property name="database.data"   value="${maven.build.dir}/database/data"/>
        <ant:property name="database.config" value="${maven.build.dir}/database/config"/>
        <!--+
            | Create our target directories.
            +-->
        <ant:mkdir dir="${database.config}"/>
        <ant:mkdir dir="${database.data}"/>

        <!--+
            | Create a Castor JDO config for our default database.
            | This is used by the DatabaseConfiguration tests.
            +-->
		<astro:database.generate
			database.files="default"
			database.name="database"
			database.xml="database.xml"
			database.sql="database.sql"
			mapping.xml="mapping.xml"
			/>
        <!--+
            | Create a Castor JDO config for our default community database.
            | This is used by the local:://service tests.
            +-->
		<astro:database.generate
			database.files="default"
			database.name="org.astrogrid.community.database"
			database.xml="astrogrid-community-database.xml"
			database.sql="astrogrid-community-database.sql"
			mapping.xml="astrogrid-community-mapping.xml"
			/>
        <!--+
            | Create a Castor JDO config for our test database(s).
            | This are used by the in-process service tests.
            +-->
		<astro:database.generate
			database.files="test-database-001"
			database.name="test-database-001"
			database.xml="test-database-001.xml"
			database.sql="test-database-001.sql"
			mapping.xml="test-mapping-001.xml"
			/>
		<astro:database.generate
			database.files="test-database-002"
			database.name="test-database-002"
			database.xml="test-database-002.xml"
			database.sql="test-database-002.sql"
			mapping.xml="test-mapping-002.xml"
			/>
		<astro:database.generate
			database.files="test-database-003"
			database.name="test-database-003"
			database.xml="test-database-003.xml"
			database.sql="test-database-003.sql"
			mapping.xml="test-mapping-003.xml"
			/>
		<astro:database.generate
			database.files="test-database-004"
			database.name="test-database-004"
			database.xml="test-database-004.xml"
			database.sql="test-database-004.sql"
			mapping.xml="test-mapping-004.xml"
			/>
    </preGoal>

    <!--+
        | Deploy our WebServices into our local Axis WebApp.
        +-->
    <preGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing services for tests"/>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Check the JUnit test settings.
            +-->
        <ant:echo message=""/>
        <ant:echo message="JUnit fork VM - ${maven.junit.fork}"/>
        <ant:echo message="JUnit test directory : ${maven.junit.dir}"/>
        <!--+
            | Deploy our services.
            +-->
		<astro:service.deploy service.name="DatabaseManager"/>
		<astro:service.deploy service.name="PolicyManager"/>
		<astro:service.deploy service.name="PolicyService"/>
		<astro:service.deploy service.name="SecurityManager"/>
		<astro:service.deploy service.name="SecurityService"/>
        <ant:echo message=""/>
    </preGoal>

    <!--+
        | Clean up after our tests.
        +-->
    <postGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Cleaning up after JUnit tests"/>
	    <!--+
	        | Remove the server_config.wsdd from the project directory..
        <ant:echo message=""/>
        <ant:echo message="PATCH - Deleting server-config.wsdd from project root."/>
		<ant:delete file="./server-config.wsdd"/>
	        +-->
    </postGoal>

    <!--+
        | Generate our DatabaseManager WSDL and stubs.
        | TODO - Replaced by custom tag
        +-->
    <goal name="database.manager.wsdl">
        <!--+
            | Generate our DatabaseManager WSDL.
            +-->
        <ant:axis.java2wsdl
            output="${wsdlDir}/DatabaseManager.wsdl"
            classname="org.astrogrid.community.common.database.manager.DatabaseManager"
            location="${axisUrl}/services/DatabaseManager"
            namespace="urn:manager.database.common.community.astrogrid.org"
            style="RPC"
            >
            <classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${maven.build.dest}"/>
            </classpath>
        </ant:axis.java2wsdl>
        <!--+
            | Generate our DatabaseManager stubs.
            +-->
        <ant:axis.wsdl2java
            verbose="false"
            serverside="true"
            skeletondeploy="false"
            output="${tempDir}"
            url="file://${wsdlDir}/DatabaseManager.wsdl"
            >
        </ant:axis.wsdl2java>
        <!--+
            | Modify the WSDD to use our implementation classes.
            +-->
        <ant:xslt style="src/xsl/wsdd-impl.xsl"
            in="${tempDir}/org/astrogrid/community/common/database/manager/deploy.wsdd"
            out="${wsddDir}/DatabaseManager.wsdd">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="service"   expression="DatabaseManager"/>
            <param name="classname" expression="org.astrogrid.community.server.database.manager.DatabaseManagerImpl"/>
        </ant:xslt>
        <!--+
            | Copy the generated Java files we want to use.
            +-->
        <ant:copy verbose="false" toDir="${javaDir}">
            <fileset dir="${tempDir}">
                <include name="**/DatabaseManagerService.java"/>
                <include name="**/DatabaseManagerServiceLocator.java"/>
                <include name="**/DatabaseManagerSoapBindingStub.java"/>
            </fileset>
        </ant:copy>
	</goal>

    <!--+
        | Generate our PolicyManager WSDL and stubs.
        | TODO - Replaced by custom tag
        +-->
    <goal name="policy.manager.wsdl">
        <!--+
            | Generate our PolicyManager WSDL.
            +-->
        <ant:axis.java2wsdl
            output="${wsdlDir}/PolicyManager.wsdl"
            classname="org.astrogrid.community.common.policy.manager.PolicyManager"
            location="${axisUrl}/services/PolicyManager"
            namespace="urn:manager.policy.common.community.astrogrid.org"
            style="RPC"
            >
            <classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${maven.build.dest}"/>
            </classpath>
        </ant:axis.java2wsdl>
        <!--+
            | Generate our PolicyManager stubs.
            +-->
        <ant:axis.wsdl2java
            verbose="false"
            serverside="true"
            skeletondeploy="false"
            output="${tempDir}"
            url="file://${wsdlDir}/PolicyManager.wsdl"
            >
        </ant:axis.wsdl2java>
        <!--+
            | Modify the WSDD to use our implementation classes.
            +-->
        <ant:xslt style="src/xsl/wsdd-impl.xsl"
            in="${tempDir}/org/astrogrid/community/common/policy/manager/deploy.wsdd"
            out="${wsddDir}/PolicyManager.wsdd">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="service"   expression="PolicyManager"/>
            <param name="classname" expression="org.astrogrid.community.server.policy.manager.PolicyManagerImpl"/>
        </ant:xslt>
        <!--+
            | Copy the generated Java files we want to use.
            +-->
        <ant:copy verbose="false" toDir="${javaDir}">
            <fileset dir="${tempDir}">
                <include name="**/PolicyManagerService.java"/>
                <include name="**/PolicyManagerServiceLocator.java"/>
                <include name="**/PolicyManagerSoapBindingStub.java"/>
            </fileset>
        </ant:copy>
	</goal>

    <!--+
        | Generate our PolicyService WSDL and stubs.
        | TODO - Replaced by custom tag
        +-->
    <goal name="policy.service.wsdl">
        <!--+
            | Generate our PolicyService WSDL.
            +-->
        <ant:axis.java2wsdl
            output="${wsdlDir}/PolicyService.wsdl"
            classname="org.astrogrid.community.common.policy.service.PolicyService"
            location="${axisUrl}/services/PolicyService"
            namespace="urn:service.policy.common.community.astrogrid.org"
            style="RPC"
            >
            <classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${maven.build.dest}"/>
            </classpath>
        </ant:axis.java2wsdl>
        <!--+
            | Generate our PolicyService stubs.
            +-->
        <ant:axis.wsdl2java
            verbose="false"
            serverside="true"
            skeletondeploy="false"
            output="${tempDir}"
            url="file://${wsdlDir}/PolicyService.wsdl"
            >
        </ant:axis.wsdl2java>
        <!--+
            | Modify the WSDD to use our implementation classes.
            +-->
        <ant:xslt style="src/xsl/wsdd-impl.xsl"
            in="${tempDir}/org/astrogrid/community/common/policy/service/deploy.wsdd"
            out="${wsddDir}/PolicyService.wsdd">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="service"   expression="PolicyService"/>
            <param name="classname" expression="org.astrogrid.community.server.policy.service.PolicyServiceImpl"/>
        </ant:xslt>
        <!--+
            | Copy the generated Java files we want to use.
            +-->
        <ant:copy verbose="false" toDir="${javaDir}">
            <fileset dir="${tempDir}">
                <include name="**/PolicyServiceService.java"/>
                <include name="**/PolicyServiceServiceLocator.java"/>
                <include name="**/PolicyServiceSoapBindingStub.java"/>
            </fileset>
        </ant:copy>
	</goal>

    <!--+
        | Generate our SecurityManager WSDL and stubs.
        | TODO - Replaced by custom tag
        +-->
    <goal name="security.manager.wsdl">
        <!--+
            | Generate our SecurityManager WSDL.
            +-->
        <ant:axis.java2wsdl
            output="${wsdlDir}/SecurityManager.wsdl"
            classname="org.astrogrid.community.common.security.manager.SecurityManager"
            location="${axisUrl}/services/SecurityManager"
            namespace="urn:manager.security.common.community.astrogrid.org"
            style="RPC"
            >
            <classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${maven.build.dest}"/>
            </classpath>
        </ant:axis.java2wsdl>
        <!--+
            | Generate our SecurityManager stubs.
            +-->
        <ant:axis.wsdl2java
            verbose="false"
            serverside="true"
            skeletondeploy="false"
            output="${tempDir}"
            url="file://${wsdlDir}/SecurityManager.wsdl"
            >
        </ant:axis.wsdl2java>
        <!--+
            | Modify the WSDD to use our implementation classes.
            +-->
        <ant:xslt style="src/xsl/wsdd-impl.xsl"
            in="${tempDir}/org/astrogrid/community/common/security/manager/deploy.wsdd"
            out="${wsddDir}/SecurityManager.wsdd">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="service"   expression="SecurityManager"/>
            <param name="classname" expression="org.astrogrid.community.server.security.manager.SecurityManagerImpl"/>
        </ant:xslt>
        <!--+
            | Copy the generated Java files we want to use.
            +-->
        <ant:copy verbose="false" toDir="${javaDir}">
            <fileset dir="${tempDir}">
                <include name="**/SecurityManagerService.java"/>
                <include name="**/SecurityManagerServiceLocator.java"/>
                <include name="**/SecurityManagerSoapBindingStub.java"/>
            </fileset>
        </ant:copy>
	</goal>

    <!--+
        | Generate our SecurityService WSDL and stubs.
        | TODO - Replaced by custom tag
        +-->
    <goal name="security.service.wsdl">
        <!--+
            | Generate our SecurityService WSDL.
            +-->
        <ant:axis.java2wsdl
            output="${wsdlDir}/SecurityService.wsdl"
            classname="org.astrogrid.community.common.security.service.SecurityService"
            location="${axisUrl}/services/SecurityService"
            namespace="urn:service.security.common.community.astrogrid.org"
            style="RPC"
            >
            <classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${maven.build.dest}"/>
            </classpath>
        </ant:axis.java2wsdl>
        <!--+
            | Generate our SecurityService stubs.
            +-->
        <ant:axis.wsdl2java
            verbose="false"
            serverside="true"
            skeletondeploy="false"
            output="${tempDir}"
            url="file://${wsdlDir}/SecurityService.wsdl"
            >
        </ant:axis.wsdl2java>
        <!--+
            | Modify the WSDD to use our implementation classes.
            +-->
        <ant:xslt style="src/xsl/wsdd-impl.xsl"
            in="${tempDir}/org/astrogrid/community/common/security/service/deploy.wsdd"
            out="${wsddDir}/SecurityService.wsdd">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="indent" value="yes"/>
            <param name="service"   expression="SecurityService"/>
            <param name="classname" expression="org.astrogrid.community.server.security.service.SecurityServiceImpl"/>
        </ant:xslt>
        <!--+
            | Copy the generated Java files we want to use.
            +-->
        <ant:copy verbose="false" toDir="${javaDir}">
            <fileset dir="${tempDir}">
                <include name="**/SecurityServiceService.java"/>
                <include name="**/SecurityServiceServiceLocator.java"/>
                <include name="**/SecurityServiceSoapBindingStub.java"/>
            </fileset>
        </ant:copy>
	</goal>


	<goal name="test-goal">
		<astro:debug.tag
			message="FROG"
			/>
	</goal>


</project>
