<?xml version="1.0" encoding="UTF-8"?>
<!--+
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/server/Attic/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: clq2 $</cvs:author>
    | <cvs:date>$Date: 2005/08/04 09:40:11 $</cvs:date>
    | <cvs:version>$Revision: 1.16 $</cvs:version>
    | <cvs:log>
    |   $Log: maven.xml,v $
    |   Revision 1.16  2005/08/04 09:40:11  clq2
    |   kevin's second batch
    |
    |   Revision 1.15.130.1  2005/07/28 13:35:53  KevinBenson
    |   No longer uses resetDatabaseTables as a web service method it is not allowed anymore.
    |
    |   Revision 1.15  2004/08/18 19:00:01  dave
    |   Myspace manager modified to use remote filestore.
    |   Tested before checkin - integration tests at 91%.
    |
    |   Revision 1.14.22.1  2004/07/27 15:51:12  dave
    |   Changed tabs to spaces
    |
    |   Revision 1.14  2004/07/15 13:24:28  dave
    |   Merged development branch, dave-dev-200407141515, into HEAD
    |
    |   Revision 1.13.2.1  2004/07/14 23:25:05  dave
    |   Refactored Community build to use artifact:deploy
    |
    |   Revision 1.13  2004/07/14 13:50:07  dave
    |   Merged development branch, dave-dev-200406301228, into HEAD
    | </cvs:log>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:artifact="artifact"
    xmlns:community="org.astrogrid.community"
    default="astrogrid-rebuild-snapshot"
    >

    <!--+
        | Import the goals from our parent project.
        | Looks like this gets included anyway, possibly because our project inherits from ../maven.project.xml ?
    <core:import inherit="true" file="${maven.build.dir}/../../maven/maven.xml"/>
        +-->

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>

    <!-- ================ Reactor goals ================ -->

    <!--+
        | Clean, build and install our snapshot jar.
        +-->
    <goal name="astrogrid-rebuild-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean"/>
        <attainGoal name="astrogrid-install-snapshot"/>
    </goal>

    <!--+
        | Clean our build target.
        +-->
    <goal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean:clean"/>
    </goal>

    <!--+
        | Build and install our artifact jar.
        +-->
    <goal name="astrogrid-install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Build our artifact jar.
            +-->
        <attainGoal name="jar:jar"/>
        <!--+
            | Install our artifact jar.
            +-->
        <artifact:install
            artifact="${maven.build.dir}/${maven.final.name}.jar"
            project="${pom}"
            type="jar"
            />
    </goal>

    <!--+
        | Build and install our snapshot jar(s).
        +-->
    <goal name="astrogrid-install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot name.
            +-->
        <maven:snapshot project="${pom}"/>
        <core:set var="maven.final.name" value="${snapshotSignature}"/>
        <!--+
            | Build our snapshot jar.
            +-->
        <attainGoal name="jar:jar"/>
        <!--+
            | Install our snapshot jar(s).
            +-->
        <artifact:install-snapshot
            artifact="${maven.build.dir}/${maven.final.name}.jar"
            project="${pom}"
            type="jar"
            />
    </goal>

    <!--+
        | Build and deploy our artifact jar.
        +-->
    <goal name="astrogrid-deploy-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our artifact jar.
            +-->
        <attainGoal name="astrogrid-install-artifact"/>
        <!--+
            | Deploy our artifact jar.
            +-->
        <artifact:deploy
            artifact="${maven.build.dir}/${maven.final.name}.jar"
            project="${pom}"
            type="jar"
            />
    </goal>

    <!--+
        | Build and deploy our snapshot jar(s).
        +-->
    <goal name="astrogrid-deploy-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot jar.
            +-->
        <attainGoal name="astrogrid-install-snapshot"/>
        <!--+
            | Deploy our snapshot jar(s).
            +-->
        <artifact:deploy-snapshot
            artifact="${maven.build.dir}/${maven.final.name}.jar"
            project="${pom}"
            type="jar"
            />
    </goal>

    <!-- ================ Component goals ================ -->

    <!--+
        | Prepare for the java:compile task.
        | Generates the WSDL, WSDD and Java stubs for our service interface(s).
        +-->
    <preGoal name="java:compile">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for java:compile ...."/>
        <!--+
            | Initialise our Axis tools
            +-->
        <attainGoal name="init.tools"/>
        <!--+
            | Create our output directories.
            +-->
        <ant:mkdir dir="${wsdlDir}"/>
        <ant:mkdir dir="${tempDir}"/>
        <ant:mkdir dir="${javaDir}"/>
        <!--+
            | Generate our DatabaseManager WSDL and stubs.
            +-->
        <community:service.generate
            service.name="DatabaseManager"
            service.wsdd="org/astrogrid/community/common/database/manager/deploy.wsdd"
            service.class="org.astrogrid.community.server.database.manager.DatabaseManagerImpl"
            service.interface="org.astrogrid.community.common.database.manager.DatabaseManager"
            service.namespace="urn:manager.database.common.community.astrogrid.org"
            />
        <!--+
            | Generate our PolicyManager WSDL and stubs.
            +-->
        <community:service.generate
            service.name="PolicyManager"
            service.wsdd="org/astrogrid/community/common/policy/manager/deploy.wsdd"
            service.class="org.astrogrid.community.server.policy.manager.PolicyManagerImpl"
            service.interface="org.astrogrid.community.common.policy.manager.PolicyManager"
            service.namespace="urn:manager.policy.common.community.astrogrid.org"
            />
        <!--+
            | Generate our PolicyService WSDL and stubs.
            +-->
        <community:service.generate
            service.name="PolicyService"
            service.wsdd="org/astrogrid/community/common/policy/service/deploy.wsdd"
            service.class="org.astrogrid.community.server.policy.service.PolicyServiceImpl"
            service.interface="org.astrogrid.community.common.policy.service.PolicyService"
            service.namespace="urn:service.policy.common.community.astrogrid.org"
            />
        <!--+
            | Generate our SecurityManager WSDL and stubs.
            +-->
        <community:service.generate
            service.name="SecurityManager"
            service.wsdd="org/astrogrid/community/common/security/manager/deploy.wsdd"
            service.class="org.astrogrid.community.server.security.manager.SecurityManagerImpl"
            service.interface="org.astrogrid.community.common.security.manager.SecurityManager"
            service.namespace="urn:manager.security.common.community.astrogrid.org"
            />
        <!--+
            | Generate our SecurityService WSDL and stubs.
            +-->
        <community:service.generate
            service.name="SecurityService"
            service.wsdd="org/astrogrid/community/common/security/service/deploy.wsdd"
            service.class="org.astrogrid.community.server.security.service.SecurityServiceImpl"
            service.interface="org.astrogrid.community.common.security.service.SecurityService"
            service.namespace="urn:service.security.common.community.astrogrid.org"
            />
        <!--+
            | Add the Java files to our project source path.
            +-->
        <ant:path id="astro.includes" location="${javaDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="astro.includes"/>
    </preGoal>

    <!--+
        | Prepare the files for the jar goal.
        | Adds the generated WSDL and WSDD files into the jar META-INF.
        | Adds the database configuration files to the classpath.
        +-->
    <preGoal name="jar:jar">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing for jar:jar ...."/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Create the META-INF directory.
            +-->
        <ant:mkdir dir="${maven.build.dest}/META-INF"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdl"/>
        <ant:mkdir dir="${maven.build.dest}/META-INF/wsdd"/>
        <!--+
            | Copy our WSDL service descriptions.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}/META-INF/wsdl">
            <ant:fileset dir="${wsdlDir}">
                <include name="**/*.wsdl"/>
            </ant:fileset>
        </ant:copy>
        <!--+
            | Copy our WSDD service deployment files.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}/META-INF/wsdd">
            <ant:fileset dir="${wsddDir}">
                <include name="**/*.wsdd"/>
            </ant:fileset>
        </ant:copy>
        <!--+
            | Copy our database configuration files.
            +-->
        <ant:copy verbose="false" todir="${maven.build.dest}">
            <ant:fileset dir="src/config/database">
                <include name="astrogrid-community-mapping.xml"/>
                <include name="astrogrid-community-database.xml"/>
                <include name="astrogrid-community-database.sql"/>
            </ant:fileset>
        </ant:copy>
    </preGoal>

    <!--+
        | Prepare the database config files for our JUnit tests.
        +-->
    <preGoal name="test:test-resources">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing test-resources ...."/>
        <!--+
            | Setup our database properties.
            +-->
        <ant:property name="database.data"   value="${maven.build.dir}/database/data"/>
        <ant:property name="database.config" value="${maven.build.dir}/database/config"/>
        <!--+
            | Create our target directories.
            +-->
        <ant:mkdir dir="${database.config}"/>
        <ant:mkdir dir="${database.data}"/>

        <!--+
            | Create a Castor JDO config for our default database.
            | This is used by the DatabaseConfiguration tests.
            +-->
        <community:database.generate
            database.files="default"
            database.name="database"
            database.xml="database.xml"
            database.sql="database.sql"
            mapping.xml="mapping.xml"
            />
        <!--+
            | Create a Castor JDO config for our default community database.
            | This is used by the local:://service tests.
            +-->
        <community:database.generate
            database.files="default"
            database.name="org.astrogrid.community.database"
            database.xml="astrogrid-community-database.xml"
            database.sql="astrogrid-community-database.sql"
            mapping.xml="astrogrid-community-mapping.xml"
            />
        <!--+
            | Create a Castor JDO config for our test database(s).
            | This are used by the in-process service tests.
            +-->
        <community:database.generate
            database.files="test-database-001"
            database.name="test-database-001"
            database.xml="test-database-001.xml"
            database.sql="test-database-001.sql"
            mapping.xml="test-mapping-001.xml"
            />
        <community:database.generate
            database.files="test-database-002"
            database.name="test-database-002"
            database.xml="test-database-002.xml"
            database.sql="test-database-002.sql"
            mapping.xml="test-mapping-002.xml"
            />
        <community:database.generate
            database.files="test-database-003"
            database.name="test-database-003"
            database.xml="test-database-003.xml"
            database.sql="test-database-003.sql"
            mapping.xml="test-mapping-003.xml"
            />
        <community:database.generate
            database.files="test-database-004"
            database.name="test-database-004"
            database.xml="test-database-004.xml"
            database.sql="test-database-004.sql"
            mapping.xml="test-mapping-004.xml"
            />
    </preGoal>

    <!--+
        | Deploy our WebServices into our local Axis WebApp.
        +-->
    <preGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing services for tests"/>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Check the JUnit test settings.
            +-->
        <ant:echo message=""/>
        <ant:echo message="JUnit fork VM - ${maven.junit.fork}"/>
        <ant:echo message="JUnit test directory : ${maven.junit.dir}"/>
        <!--+
            | Deploy our services.
            +-->
        <community:service.deploy service.name="DatabaseManager"/>
        <community:service.deploy service.name="PolicyManager"/>
        <community:service.deploy service.name="PolicyService"/>
        <community:service.deploy service.name="SecurityManager"/>
        <community:service.deploy service.name="SecurityService"/>
        <ant:echo message=""/>
    </preGoal>

    <!--+
        | Clean up after our tests.
        +-->
    <postGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Cleaning up after JUnit tests"/>
        <!--+
            | Remove the server_config.wsdd from the project directory..
        <ant:echo message=""/>
        <ant:echo message="PATCH - Deleting server-config.wsdd from project root."/>
        <ant:delete file="./server-config.wsdd"/>
            +-->
    </postGoal>

</project>
