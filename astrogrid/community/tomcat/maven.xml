<?xml version="1.0" encoding="UTF-8"?>
<!--+
    | Maven build tasks for the AstroGrid community tomcat toolkit.
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/tomcat/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: dave $</cvs:author>
    | <cvs:date>$Date: 2004/04/01 07:09:39 $</cvs:date>
    | <cvs:version>$Revision: 1.8 $</cvs:version>
    | <cvs:log>
    |   $Log: maven.xml,v $
    |   Revision 1.8  2004/04/01 07:09:39  dave
    |   Merged development branch, dave-dev-200403300547, into HEAD
    |
    |   Revision 1.7.2.2  2004/03/31 10:30:57  dave
    |   Updated test data
    |
    |   Revision 1.7.2.1  2004/03/30 06:09:00  dave
    |   Fixes to tomcat goals
    |
    |   Revision 1.7  2004/03/30 04:44:01  dave
    |   Merged development branch, dave-dev-200403300258, into HEAD
    |
    |   Revision 1.6.2.3  2004/03/30 04:42:31  dave
    |   Added CommunityAccountSpaceResolverTask.
    |
    |   Revision 1.6.2.2  2004/03/30 03:58:31  dave
    |   Added CommunityTokenResolverTask.
    |
    |   Revision 1.6.2.1  2004/03/30 03:24:57  dave
    |   Fixes to resolver tasks.
    |
    |   Revision 1.6  2004/03/30 01:40:04  dave
    |   Merged development branch, dave-dev-200403242058, into HEAD
    |
    |   Revision 1.5.6.4  2004/03/30 01:38:14  dave
    |   Refactored resolver and install toolkits.
    |
    |   Revision 1.5.6.3  2004/03/28 08:54:19  dave
    |   Bug fixes
    |
    |   Revision 1.5.6.2  2004/03/28 08:37:10  dave
    |   Fixes to test data
    |
    |   Revision 1.5.6.1  2004/03/28 02:00:55  dave
    |   Added database management tasks.
    |
    |   Revision 1.5  2004/03/19 14:43:15  dave
    |   Merged development branch, dave-dev-200403151155, into HEAD
    |
    |   Revision 1.4.2.2  2004/03/19 00:15:51  dave
    |   Changed clean target
    |
    |   Revision 1.4.2.1  2004/03/18 13:37:22  dave
    |   Added default clean-build goal
    |
    | </cvs:log>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:deploy="deploy"
    default="astrogrid-rebuild-snapshot"
    >

    <!--+
        | Import the goals from our parent project.
        | Looks like this gets included anyway, possibly because our project inherits from ../maven.project.xml ?
    <core:import inherit="true" file="${maven.build.dir}/../../maven/maven.xml"/>
        +-->

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>

    <!-- ================ Reactor goals ================ -->

    <!--+
        | Clean, build and install our snapshot jar.
        +-->
    <goal name="astrogrid-rebuild-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean"/>
        <attainGoal name="astrogrid-install-snapshot"/>
    </goal>

    <!--+
        | Clean our build target.
        +-->
    <goal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Cleaning build target ...."/>
        <attainGoal name="clean:clean"/>
    </goal>

    <!--+
        | Build our toolkit.
        +-->
    <goal name="astrogrid-install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Install our toolkit ....
            +-->
        <attainGoal name="toolkit.install"/>
    </goal>

    <!--+
        | Build our SNAPSHOT toolkit.
        +-->
    <goal name="astrogrid-install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Building install toolkit ...."/>
        <!--+
            | Install our toolkits.
            +-->
        <attainGoal name="toolkit.install"/>
        <!--+
            | Configure our toolkits.
            +-->
        <attainGoal name="toolkit.config"/>
        <!--+
            | Install our service.
            +-->
        <attainGoal name="service.install"/>
    </goal>

    <!--+
        | Build our component website.
        +-->
    <goal name="site">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Building project site ...."/>
        <attainGoal name="site:generate"/>
        <!--+
            | Add stuff here to put together the install instructions ....
            +-->
    </goal>

    <!-- ================ Tomcat goals ================ -->

    <!--+
        | Inatall our Tomcat dist.
        +-->
    <goal name="tomcat.install">
        <ant:echo message=""/>
        <ant:echo message="Installing Tomcat dist ...."/>
        <!--+
            | Create our target directory.
            +-->
        <ant:mkdir dir="${maven.build.dir}/tomcat"/>
        <!--+
            | Project.getDependencyPath() only works for jar and ejb files.
            | See : http://maven.apache.org/xref/org/apache/maven/DependencyClasspathBuilder.html#100
            | Means we have to do this the long way round .... by iterating through our list of artifacts.
            +-->
        <core:forEach var="artifact" items="${pom.getArtifacts()}">
            <!--+
                | If the artifact matches our criteria.
                +-->
            <core:if test="${artifact.getDependency().getId().equals('tomcat:jakarta-tomcat')}">
                <ant:echo message="Found Tomcat dist"/>
                <ant:echo message="  Ident   : ${artifact.getDependency().getId()}"/>
                <ant:echo message="  Version : ${artifact.getDependency().getVersion()}"/>
                <ant:echo message="  Type    : ${artifact.getDependency().getType()}"/>
                <ant:echo message="  Name    : ${artifact.getName()}"/>
                <ant:echo message="  Path    : ${artifact.getPath()}"/>
                <!--+
                    | Unpack the zip file ....
                    +-->
                <ant:unzip
                    src="${artifact.getPath()}"
                    dest="${maven.build.dir}/tomcat"/>
            </core:if>
        </core:forEach>
    </goal>

    <!--+
        | Locate the tomcat home automagically.
        | We need this because we don't know what the top level directory inside the zip file will be called.
        | Depending on the version of Tomcat, it can be
        |     tomcat-${tomcat.version}
        | or
        |     jakarta-tomcat-${tomcat.version}
        +-->
    <goal name="tomcat.path">
        <!--+
            | Check if we have already dones this
            +-->
        <core:if test="${!tomcatPathDone}">
            <ant:echo message=""/>
            <ant:echo message="Setting Tomcat home ...."/>
            <core:set var="tomcatPathDone" value="true"/>
            <!--+
                | Create an Ant path looking for 'tomcat/*/conf'
                +-->
            <ant:path id="tomcat.conf.path">
                <dirset dir="${maven.build.dir}/tomcat">
                    <include name="*/conf"/>
                </dirset>
            </ant:path>
            <!--+
                | Convert it into an Ant property.
                +-->
            <ant:property name="tomcat.conf.dir" refid="tomcat.conf.path"/>
            <ant:dirname property="tomcat.home"  file="${tomcat.conf.dir}"/>
            <ant:echo message="  Tomcat home : ${tomcat.home}"/>
        </core:if>
    </goal>

    <!--+
        | Configure our Tomcat installation.
        +-->
    <goal name="tomcat.config">
        <ant:echo message=""/>
        <ant:echo message="Configuring Tomcat ...."/>
        <!--+
            | Initialise our Tomcat path.
            +-->
        <attainGoal name="tomcat.path"/>
        <!--+
            | Configure the Tomcat home.
            | *Only required if we want to run the Ant script from the command line.
            +-->
        <ant:propertyfile
            file="${maven.build.dir}/tomcat/tomcat.properties">
            <entry key="tomcat.home"
                value="${tomcat.home}"/>
        </ant:propertyfile>
        <!--+
            | Configure Tomcat our manager account.
            +-->
        <ant:ant
            target="tomcat.manager.config"
            dir="${maven.build.dir}/tomcat"
            antfile="${maven.build.dir}/tomcat/tomcat.xml">
            <property name="tomcat.version" value="${tomcat.version}"/>
            <property name="tomcat.home"    value="${tomcat.home}"/>
        </ant:ant>
    </goal>

    <!--+
        | Start Tomcat.
        +-->
    <goal name="tomcat.start">
        <!--+
            | Initialise our Tomcat path.
            +-->
        <attainGoal name="tomcat.path"/>
        <!--+
            | Call the tomcat.start task in our Ant script.
            +-->
        <ant:ant
            target="tomcat.start"
            dir="${maven.build.dir}/tomcat"
            antfile="${maven.build.dir}/tomcat/tomcat.xml">
            <property name="tomcat.version" value="${tomcat.version}"/>
            <property name="tomcat.home"    value="${tomcat.home}"/>
        </ant:ant>
    </goal>

    <!--+
        | Stop Tomcat.
        +-->
    <goal name="tomcat.stop">
        <!--+
            | Initialise our Tomcat path.
            +-->
        <attainGoal name="tomcat.path"/>
        <!--+
            | Call the tomcat.stop task in our Ant script.
            +-->
        <ant:ant
            target="tomcat.stop"
            dir="${maven.build.dir}/tomcat"
            antfile="${maven.build.dir}/tomcat/tomcat.xml">
            <property name="tomcat.version" value="${tomcat.version}"/>
            <property name="tomcat.home"    value="${tomcat.home}"/>
        </ant:ant>
    </goal>

    <!--+
        | Wait for Tomcat to respond.
        +-->
    <goal name="tomcat.wait">
        <!--+
            | Call the tomcat.wait wait in our Ant script.
            +-->
        <ant:ant
            target="tomcat.wait"
            dir="${maven.build.dir}/tomcat"
            antfile="${maven.build.dir}/tomcat/tomcat.xml"
            />
    </goal>

    <!-- ================ Resolver kit goals ================ -->

    <!--+
        | Install our toolkit.
        +-->
    <goal name="resolver.install">
        <ant:echo message=""/>
        <ant:echo message="Installing resolver toolkit ...."/>
        <!--+
            | Create our target directory.
            +-->
        <ant:mkdir dir="${maven.build.dir}/install"/>
        <!--+
            | Project.getDependencyPath() only works for jar and ejb files.
            | See : http://maven.apache.org/xref/org/apache/maven/DependencyClasspathBuilder.html#100
            | Means we have to do this the long way round .... by iterating through our list of artifacts.
            +-->
        <core:forEach var="artifact" items="${pom.getArtifacts()}">
            <!--+
                | If the artifact matches our criteria.
                +-->
            <core:if test="${artifact.dependency.getProperty('resolverkit')=='true'}">
                <ant:echo message="Found Community toolkit"/>
                <ant:echo message="  Ident   : ${artifact.getDependency().getId()}"/>
                <ant:echo message="  Version : ${artifact.getDependency().getVersion()}"/>
                <ant:echo message="  Type    : ${artifact.getDependency().getType()}"/>
                <ant:echo message="  Name    : ${artifact.getName()}"/>
                <ant:echo message="  Path    : ${artifact.getPath()}"/>
                <!--+
                    | Unpack the zip file ....
                    +-->
                <ant:unzip src="${artifact.getPath()}" dest="${maven.build.dir}/resolver"/>
            </core:if>
        </core:forEach>
    </goal>

    <!--+
        | Configure our toolkit.
        +-->
    <goal name="resolver.config">
        <ant:echo message=""/>
        <ant:echo message="Configuring resolver toolkit ...."/>
        <!--+
            | Set the community ident.
            +-->
        <ant:propertyfile
            file="${maven.build.dir}/resolver/resolver.properties">
            <entry key="org.astrogrid.community.ident"
                value="${org.astrogrid.community.ident}"/>
        </ant:propertyfile>
    </goal>

    <!-- ================ Install kit goals ================ -->

    <!--+
        | Install our toolkit.
        +-->
    <goal name="install.install">
        <ant:echo message=""/>
        <ant:echo message="Installing install toolkit ...."/>
        <!--+
            | Create our target directory.
            +-->
        <ant:mkdir dir="${maven.build.dir}/install"/>
        <!--+
            | Project.getDependencyPath() only works for jar and ejb files.
            | See : http://maven.apache.org/xref/org/apache/maven/DependencyClasspathBuilder.html#100
            | Means we have to do this the long way round .... by iterating through our list of artifacts.
            +-->
        <core:forEach var="artifact" items="${pom.getArtifacts()}">
            <!--+
                | If the artifact matches our criteria.
                +-->
            <core:if test="${artifact.dependency.getProperty('installkit')=='true'}">
                <ant:echo message="Found Community toolkit"/>
                <ant:echo message="  Ident   : ${artifact.getDependency().getId()}"/>
                <ant:echo message="  Version : ${artifact.getDependency().getVersion()}"/>
                <ant:echo message="  Type    : ${artifact.getDependency().getType()}"/>
                <ant:echo message="  Name    : ${artifact.getName()}"/>
                <ant:echo message="  Path    : ${artifact.getPath()}"/>
                <!--+
                    | Unpack the zip file ....
                    +-->
                <ant:unzip src="${artifact.getPath()}" dest="${maven.build.dir}/install"/>
            </core:if>
        </core:forEach>
    </goal>

    <!--+
        | Configure our toolkit.
        +-->
    <goal name="install.config">
        <ant:echo message=""/>
        <ant:echo message="Configuring install toolkit ...."/>
        <!--+
            | Initialise our Tomcat path.
            +-->
        <attainGoal name="tomcat.path"/>
        <!--+
            | Set the Tomcat home.
            | *Only required if we want to run the Ant script from the command line.
            +-->
        <ant:propertyfile
            file="${maven.build.dir}/install/install.properties">
            <entry key="tomcat.home"
                value="${tomcat.home}"/>
        </ant:propertyfile>
        <!--+
            | Set the community ident.
            +-->
        <ant:propertyfile
            file="${maven.build.dir}/install/install.properties">
            <entry key="org.astrogrid.community.ident"
                value="${org.astrogrid.community.ident}"/>
        </ant:propertyfile>
        <!--+
            | Set the config location.
            +-->
        <ant:propertyfile
            file="${maven.build.dir}/install/install.properties">
            <entry key="config.home"
                value="${maven.build.dir}/config"/>
        </ant:propertyfile>
        <!--+
            | Set the database location.
            +-->
        <ant:propertyfile
            file="${maven.build.dir}/install/install.properties">
            <entry key="database.home"
                value="${maven.build.dir}/database"/>
        </ant:propertyfile>
    </goal>

    <!-- ================ Toolkit goals ================ -->

    <!--+
        | Install our toolkits.
        +-->
    <goal name="toolkit.install">
        <ant:echo message=""/>
        <ant:echo message="Installing toolkits ...."/>
        <!--+
            | Create our target directories.
            +-->
        <ant:mkdir dir="${maven.build.dir}/install"/>
        <ant:mkdir dir="${maven.build.dir}/tomcat"/>
        <ant:mkdir dir="${maven.build.dir}/tomcat/xsl"/>
        <!--+
            | Unpack our Tomcat dist.
            +-->
        <attainGoal name="tomcat.install"/>
        <!--+
            | Copy our Ant tools.
            +-->
        <ant:copy toDir="${maven.build.dir}/tomcat">
            <fileset dir="src/ant">
                <include name="*.xml"/>
                <include name="*.properties"/>
            </fileset>
        </ant:copy>
        <ant:copy toDir="${maven.build.dir}/tomcat/xsl">
            <fileset dir="src/xsl">
                <include name="*.xsl"/>
            </fileset>
        </ant:copy>
        <!--+
            | Install our install toolkit.
            +-->
        <attainGoal name="install.install"/>
        <!--+
            | Install our resolver toolkit.
            +-->
        <attainGoal name="resolver.install"/>
    </goal>

    <!--+
        | Configure our toolkits.
        +-->
    <goal name="toolkit.config">
        <ant:echo message=""/>
        <ant:echo message="Configuring toolkit ...."/>
        <!--+
            | Configure our Tomcat installation.
            +-->
        <attainGoal name="tomcat.config"/>
        <!--+
            | Configure our install toolkit.
            +-->
        <attainGoal name="install.config"/>
        <!--+
            | Configure our resolver toolkit.
            +-->
        <attainGoal name="resolver.config"/>
    </goal>

    <!-- ================ Service install ================ -->

    <!--+
        | Install our WebService.
        +-->
    <goal name="service.install">
        <ant:echo message=""/>
        <ant:echo message="Installing service ...."/>
        <!--+
            | Locate the tomcat home.
            +-->
        <attainGoal name="tomcat.path"/>
        <!--+
            | Install our web service.
            +-->
        <ant:ant
            target="install"
            dir="${maven.build.dir}/install"
            antfile="${maven.build.dir}/install/install.xml"
            >
            <property name="config.home"    value="${maven.build.dir}/config"/>
            <property name="tomcat.home"    value="${tomcat.home}"/>
            <property name="tomcat.version" value="${tomcat.version}"/>
        </ant:ant>
    </goal>

    <!-- ================ Service test goals ================ -->

    <!--+
        | Test our WebService.
        +-->
    <goal name="service.status">
        <!--+
            | Wait for Tomcat to start.
            +-->
        <attainGoal name="tomcat.wait"/>
        <!--+
            | Call the service.status task in our install script.
            +-->
        <ant:ant
            target="service.status"
            dir="${maven.build.dir}/install"
            antfile="${maven.build.dir}/install/install.xml"
            />
    </goal>

    <!-- ================ Database config goals ================ -->

    <!--+
        | Reset our database tables.
        +-->
    <goal name="database.reset">
        <!--+
            | Wait for Tomcat to start.
            +-->
        <attainGoal name="tomcat.wait"/>
        <!--+
            | Call the task in our install script.
            +-->
        <ant:ant
            target="database.reset"
            dir="${maven.build.dir}/install"
            antfile="${maven.build.dir}/install/install.xml"
            />
    </goal>

    <!--+
        | Load our database data.
        +-->
    <goal name="database.load">
        <!--+
            | Wait for Tomcat to start.
            +-->
        <attainGoal name="tomcat.wait"/>
        <!--+
            | Call the task in our install script.
            +-->
        <ant:ant
            target="database.load"
            dir="${maven.build.dir}/install"
            antfile="${maven.build.dir}/install/install.xml"
            />
    </goal>

    <!--+
        | Install our database.
        +-->
    <goal name="database.install">
	    <!--+
	        | Reset our database tables.
	        +-->
        <attainGoal name="database.reset"/>
	    <!--+
	        | Load our database data.
	        +-->
        <attainGoal name="database.load"/>
    </goal>

    <!-- ================ Local resolver goals ================ -->

    <!--+
        | Login to our service, using the local registry config.
        +-->
    <goal name="resolver.login.local">
        <!--+
            | Call the task in our resolver script.
            +-->
        <ant:ant
            target="login.local"
            dir="${maven.build.dir}/resolver"
            antfile="${maven.build.dir}/resolver/resolver.xml"
            />
    </goal>

    <!--+
        | Validate a token, using the local registry config.
        +-->
    <goal name="resolver.token.local">
        <!--+
            | Call the task in our resolver script.
            +-->
        <ant:ant
            target="token.local"
            dir="${maven.build.dir}/resolver"
            antfile="${maven.build.dir}/resolver/resolver.xml"
            />
    </goal>

    <!--+
        | Validate an Account, using the local registry config.
        +-->
    <goal name="resolver.account.local">
        <!--+
            | Call the task in our resolver script.
            +-->
        <ant:ant
            target="account.local"
            dir="${maven.build.dir}/resolver"
            antfile="${maven.build.dir}/resolver/resolver.xml"
            />
    </goal>

    <!--+
        | Validate an Account home space, using the local registry config.
        +-->
    <goal name="resolver.account.home.local">
        <!--+
            | Call the task in our resolver script.
            +-->
        <ant:ant
            target="account.home.local"
            dir="${maven.build.dir}/resolver"
            antfile="${maven.build.dir}/resolver/resolver.xml"
            />
    </goal>

    <!-- ================ Live resolver goals ================ -->

    <!--+
        | Login to our service, using a live registry service.
        +-->
    <goal name="resolver.login.live">
        <!--+
            | Call the task in our resolver script.
            +-->
        <ant:ant
            target="login.live"
            dir="${maven.build.dir}/resolver"
            antfile="${maven.build.dir}/resolver/resolver.xml"
            />
    </goal>

    <!--+
        | Validate a token, using a live registry service.
        +-->
    <goal name="resolver.token.live">
        <!--+
            | Call the task in our resolver script.
            +-->
        <ant:ant
            target="token.live"
            dir="${maven.build.dir}/resolver"
            antfile="${maven.build.dir}/resolver/resolver.xml"
            />
    </goal>

    <!--+
        | Validate an Account, using a live registry service.
        +-->
    <goal name="resolver.account.live">
        <!--+
            | Call the task in our resolver script.
            +-->
        <ant:ant
            target="account.live"
            dir="${maven.build.dir}/resolver"
            antfile="${maven.build.dir}/resolver/resolver.xml"
            />
    </goal>

    <!--+
        | Validate an Account home space, using a live registry service.
        +-->
    <goal name="resolver.account.home.live">
        <!--+
            | Call the task in our resolver script.
            +-->
        <ant:ant
            target="account.home.live"
            dir="${maven.build.dir}/resolver"
            antfile="${maven.build.dir}/resolver/resolver.xml"
            />
    </goal>

</project>
