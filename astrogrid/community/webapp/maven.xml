<?xml version="1.0" encoding="UTF-8"?>
<!--+
    |
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/community/webapp/maven.xml,v $</cvs:source>
    | <cvs:author>$Author: jdt $</cvs:author>
    | <cvs:date>$Date: 2005/02/18 17:14:55 $</cvs:date>
    | <cvs:version>$Revision: 1.23 $</cvs:version>
    | <cvs:log>
    |   $Log: maven.xml,v $
    |   Revision 1.23  2005/02/18 17:14:55  jdt
    |   merge with community_pah_910
    |
    |   Revision 1.21.22.1  2005/02/08 15:52:57  pah
    |   fix to get the correct war contents
    |
    |   Revision 1.21  2004/11/04 18:00:02  jdt
    |   Restored following fixes to auto-integration
    |   Merged in Reg_KMB_546 and Reg_KMB_603 and Comm_KMB_583
    |
    |   Revision 1.19  2004/11/02 21:47:39  jdt
    |   Merge of Comm_KMB_583
    |
    |   Revision 1.18  2004/10/29 15:50:05  jdt
    |   merges from Community_AdminInterface (bug 579)
    |
    |   Revision 1.17.16.1  2004/10/15 10:13:51  KevinBenson
    |   adding the admin interface into a jsp fashion.  Correcting a few mistakes on the other
    |   java files.
    |
    |   Revision 1.17  2004/09/17 06:57:10  dave
    |   Added commons logging to FileStore.
    |   Updated logging properties in Community.
    |   Fixed bug in AGINAB deployment.
    |   Removed MySpace tests with hard coded grendel address.
    |
    |   Revision 1.16.2.1  2004/09/17 02:53:08  dave
    |   Added DTD fix and validation to webapp web.xml ....
    |
    |   Revision 1.16  2004/09/16 23:18:08  dave
    |   Replaced debug logging in Community.
    |   Added stream close() to FileStore.
    |
    |   Revision 1.15.30.1  2004/09/16 09:58:48  dave
    |   Replaced debug with commons logging ....
    |
    |   Revision 1.15  2004/08/18 19:00:01  dave
    |   Myspace manager modified to use remote filestore.
    |   Tested before checkin - integration tests at 91%.
    |
    |   Revision 1.14.22.1  2004/07/27 15:51:12  dave
    |   Changed tabs to spaces
    |
    |   Revision 1.14  2004/07/15 13:24:28  dave
    |   Merged development branch, dave-dev-200407141515, into HEAD
    |
    |   Revision 1.13.2.2  2004/07/15 11:16:18  dave
    |   Refactored Community build scripts to use the artifact:deploy plugin
    |
    |   Revision 1.13.2.1  2004/07/14 23:25:05  dave
    |   Refactored Community build to use artifact:deploy
    |
    |   Revision 1.13  2004/07/14 13:50:07  dave
    |   Merged development branch, dave-dev-200406301228, into HEAD
    |
    |   Revision 1.12.4.1  2004/07/13 11:50:43  dave
    |   Tidied up the file headers
    |
    | </cvs:log>
    |
    +-->
<project
    xmlns:core="jelly:core"
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant"
    xmlns:util="jelly:util"
    xmlns:log="jelly:log"
    xmlns:define="jelly:define"
    xmlns:artifact="artifact"
    xmlns:community="org.astrogrid.community"
    default="astrogrid-rebuild-snapshot"
    >

    <!--+
        | Import the goals from our parent project.
        | Looks like this gets included anyway, possibly because our project inherits from ../maven.project.xml ?
    <core:import inherit="true" file="${maven.build.dir}/../../maven/maven.xml"/>
        +-->

    <!--+
        | Debug info ....
        +-->
    <goal name="info">
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
    </goal>

    <!-- ================ Reactor goals ================ -->

    <!--+
        | Clean, build and install our snapshot jar.
        +-->
    <goal name="astrogrid-rebuild-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean"/>
        <attainGoal name="astrogrid-install-snapshot"/>
    </goal>

    <!--+
        | Clean our build target.
        +-->
    <goal name="clean">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <attainGoal name="clean:clean"/>
    </goal>

    <!--+
        | Build and install our artifact war.
        +-->
    <goal name="astrogrid-install-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Build our artifact war.
            +-->
        <attainGoal name="war:war"/>
        <!--+
            | Rename our war to include the version.
            +-->
        <ant:move
            file="${maven.build.dir}/${maven.war.final.name}"
            toFile="${maven.build.dir}/${maven.final.name}.war"
            />
        <!--+
            | Install our artifact war.
            +-->
        <artifact:install
            artifact="${maven.build.dir}/${maven.final.name}.war"
            project="${pom}"
            type="war"
            />
    </goal>

    <!--+
        | Build and install our snapshot war(s).
        +-->
    <goal name="astrogrid-install-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot name.
            +-->
        <maven:snapshot project="${pom}"/>
        <core:set var="maven.final.name" value="${snapshotSignature}"/>
        <!--+
            | Build our snapshot war.
            +-->
        <attainGoal name="war:war"/>
        <!--+
            | Rename our war to include the version.
            +-->
        <ant:move
            file="${maven.build.dir}/${maven.war.final.name}"
            toFile="${maven.build.dir}/${maven.final.name}.war"
            />
        <!--+
            | Install our snapshot war(s).
            +-->
        <artifact:install-snapshot
            artifact="${maven.build.dir}/${maven.final.name}.war"
            project="${pom}"
            type="war"
            />
    </goal>

    <!--+
        | Build and deploy our artifact war.
        +-->
    <goal name="astrogrid-deploy-artifact">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our artifact war.
            +-->
        <attainGoal name="astrogrid-install-artifact"/>
        <!--+
            | Deploy our artifact war.
            +-->
        <artifact:deploy
            artifact="${maven.build.dir}/${maven.final.name}.war"
            project="${pom}"
            type="war"
            />
    </goal>

    <!--+
        | Build and deploy our snapshot war(s).
        +-->
    <goal name="astrogrid-deploy-snapshot">
        <ant:echo message="Build artifact  : ${pom.artifactId}"/>
        <ant:echo message="Build version   : ${pom.currentVersion}"/>
        <ant:echo message="Build directory : ${maven.build.dir}"/>
        <!--+
            | Create our snapshot war.
            +-->
        <attainGoal name="astrogrid-install-snapshot"/>
        <!--+
            | Deploy our snapshot war(s).
            +-->
        <artifact:deploy-snapshot
            artifact="${maven.build.dir}/${maven.final.name}.war"
            project="${pom}"
            type="war"
            />
    </goal>

    <!-- ================ Component goals ================ -->

    <!--+
        | Initialise the webapp files.
        +-->
    <preGoal name="war:init">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Pre-processing for webapp task"/>
        <!--+
            | Initialise the Axis webapp.
            +-->
        <attainGoal name="init.axis"/>
        <!--+
            | Modify the war:webapp property to use our Axis webapp instead.
            +-->
        <ant:echo message="Modifying war:webapp location"/>
        <ant:echo message="  Before : ${pom.getPluginContext('maven-war-plugin').getVariable('maven.war.webapp.dir')}"/>
        <core:expr value="${pom.getPluginContext('maven-war-plugin').setVariable('maven.war.webapp.dir', axisDir)}"/>
        <ant:echo message="  After  : ${pom.getPluginContext('maven-war-plugin').getVariable('maven.war.webapp.dir')}"/>
    </preGoal>

    <!--+
        | Post-process our webapp.
        +-->
    <postGoal name="war:webapp">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Post-processing for webapp task"/>
        <!--+
            | Initialise our paths.
            +-->
        <attainGoal name="init.paths"/>
        <!--+
            | Locate our community server jar.
            +-->
        <core:set var="serverJarIdent" value="${pom.groupId}:astrogrid-community-server"/>
        <ant:echo message="Looking for server jar : ${serverJarIdent}"/>
        <core:forEach var="artifact" items="${pom.getArtifacts()}">
            <core:if test="${artifact.getDependency().getId().equals(serverJarIdent)}">
                <ant:echo message="Found community server jar"/>
                <ant:echo message="Name     : ${artifact.getName()}"/>
                <ant:echo message="Path     : ${artifact.getPath()}"/>
                <core:set var="serverJarPath" value="${artifact.getPath()}"/>
            </core:if>
        </core:forEach>
        <!--+
            | Unpack our service WSDD files.
            +-->
        <ant:unzip
            src="${serverJarPath}"
            dest="${tempDir}">
            <patternset>
                <include name="META-INF/wsdd/*.wsdd"/>
            </patternset>
        </ant:unzip>
        <ant:copy toDir="${wsddDir}" flatten="true">
            <fileset dir="${tempDir}">
                <include name="**/*.wsdd"/>
            </fileset>
        </ant:copy>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Deploy our services.
            +-->
        <ant:echo message=""/>
        <ant:echo message="Deploying WebServices ..."/>
        <community:service.deploy service.name="DatabaseManager"/>
        <community:service.deploy service.name="PolicyManager"/>
        <community:service.deploy service.name="PolicyService"/>
        <community:service.deploy service.name="SecurityManager"/>
        <community:service.deploy service.name="SecurityService"/>
        <!--+
            | Copy our database configuration file into WEB-INF/classes.
            | This should override the database configuration in the server jar.
            +-->
        <ant:copy verbose="true" todir="${axisDir}/WEB-INF/classes">
            <ant:fileset dir="src/config/database">
                <include name="astrogrid-community-database.xml"/>
                <!--+
                    | These should probably come from the server jar.
                    +-->
                <include name="astrogrid-community-mapping.xml"/>
                <include name="astrogrid-community-database.sql"/>
            </ant:fileset>
        </ant:copy>
        <!--+
            | Copy our log4j configuration file into WEB-INF/classes.
            
        <ant:copy verbose="true" todir="${axisDir}/WEB-INF/classes">
            <ant:fileset dir="src/config">
                <include name="log4j.properties"/>
            </ant:fileset>
        </ant:copy>
        +-->
        <!--+
            | Patch the web.xml to fix the DTD
			Now gets replaced anyways
        <ant:replace
            token="web-app_2.2.dtd"
            value="web-app_2_2.dtd"
            file="${axisDir}/WEB-INF/web.xml"/>
            +-->            
        <!--+
            | Validate our existing web.xml
           
		<ant:xmlvalidate file="${axisDir}/WEB-INF/web.xml"/>
		 +-->
    </postGoal>

    <!--+
        | Setup our JUnit tests.
        +-->
    <preGoal name="test:test">
        <ant:echo message=""/>
        <ant:echo message="Artifact : ${pom.artifactId}"/>
        <ant:echo message="Preparing services for tests"/>
        <!--+
            | Initialise our classpaths.
            +-->
        <attainGoal name="init.classpath"/>
        <!--+
            | Check the JUnit test settings.
            +-->
        <ant:echo message=""/>
        <ant:echo message="JUnit fork VM - ${maven.junit.fork}"/>
        <ant:echo message="JUnit test directory : ${maven.junit.dir}"/>
        <ant:echo message=""/>
    </preGoal>

</project>
