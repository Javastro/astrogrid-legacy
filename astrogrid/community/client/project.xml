<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="maven-project.xsd">

    <!--+
        | Extend the common project descriptor.
        +-->
    <extend>../maven/project.xml</extend>

    <!--+
        | The short name of the project.
        +-->
    <id>astrogrid-community-client</id>
    
    <currentVersion>2008.0a4</currentVersion>

    <!--+
        | The full name of the project.
        +-->
    <name>Community client</name>

    <!--+
        | The Java package name of the project.
        +-->
    <package>org.astrogrid.community.client</package>

    <!--+
        | A short description of the project.
        | The short description should be limited to a single line.
        +-->
    <shortDescription>
        Community Client for interaction with the Community Web Services
    </shortDescription>

    <!--+
        | A detailed description of the project.
        | This is used to generate the front page of the projects web site. 
        +-->
    <description>
        <![CDATA[
    		<p>
            The Community Client area is for setting creating a variety of Delegates for other components to call web service
    	methods on a community server interface.  These delegates are helper classes for other components to more easily communicate
    	with the web service on the server, with stubbs already generated and setup. Look into the Resolver area for classes that need to deal
    	with interaction with the Registry or using Community Acocunt identifiers to perform tasks with the delegates, this Resolver area is what will normally be used for obtaining
    	delegates.<br />
    	</p>    	
    	<section name="Obtaining Delegates">
    	  <p>
    	   A component or client may instantiate a Soap type delegate manually if they know the url to the endpoint of a community service, but normally 
    	   it is best to look at the Resolver area.  The Resolver classes allows a client to get a delegate via the Registry by using a identifier for a 
    	   community, or even a community identifier for an account or group.
    	  </p>
    	</section>
    	<section name="Setting up a Client">
    		<p>
    		In the Administratin manager you need to setup a Environment variable or JNDI property for "org.astrogrid.registry.query.endpoint" setting it to a
    	    known registry that will have communities (normally a full registry). Or you may place it in a file called
    	    astrogrid.properties on your classpath.
    		Jars needed for community as a client:
    		<ul>
    		  <li>astrogrid-community-client.jar</li>
			  <li>astrogrid-community-common.jar</li>
			  <li>astrogrid-community-resolver.jar</li>
			  <li>astrogrid-community-resolver.jar</li>
    		  <li>astrogrid-common.jar</li>    	
			  <li>astrogrid-registry-cleint-lite.jar</li>    	
			  <li>astrogrid-registry-common.jar</li>    	
			  <li>astrogrid-registry-cleint-lite.jar</li>    	
			  <li>commons-logging.jar</li>    	
			  <li>log4j.jar</li> 
    	      <li>axis.jar (jars related for axis calls and client)</li>
    		</ul>
    		</p>
    	</section>
    	<section name="Types of Delegates/Interfaces">    	  
    	  <p>
    	  <p>
    	  Here is a brief discussion of the main SOAP delegates on the client (normally for other testing and quicker setup Mock delegates are also supplied):<br />
    		<i>
    		 First a statement that normally delegates are interface classes and normally one SOAP type delegate is used for these interfaces.
    	    </i>
    	  </p>
    	  <p>
    		
    	  <strong>policy.manager -- The most commonly used package</strong><br />
    	  <i>
    		PolicyManagerSoapDelegate implements the PolicyManagerDelegate interface in the policy.manager package; hence all a component/user
    	  	needs is the interface to the PolicyManagerDelegate to use the others such as Accounts, Groups, etc...
    	  </i>
    	  <br />
    	  Interfaces:<br />

    	  <ul>
    		<li><strong>PolicyManagerDelegate -- MAIN INTERFACE THAT CAN REACH ALL OTHER DELEGATES.</strong></li>
    		<li>AccountManagerDelegate -- manages accounts</li>
    		<li>CommunityManagerDelegate -- not really in use anymore</li>
    		<li>GroupManagerDelegate -- manages groups</li>
    		<li>GroupMemberManagerDelegate -- manages members of groups.</li>
    		<li>ResourceManagerDelegate -- manages resources.</li>
    		<li>PermissionManagerDelegate -- manages permissions for groups/accounts for a resources</li>    		
    	  </ul>
 		  </p>
    	  <p>
    	  <strong>policy.service</strong><br />
    	  <i>
    	     PolicyServiceSoapDelegate implements the PolicyServiceDelegate.
    	  </i>
    	  <br />
    	  Interfaces: <br />
    		<ul>
    		  <li><strong>PolicyServiceDelegate -- checks Permissions are valid and Memberships to groups are valid.</strong></li>
    		</ul>
    	  <strong>security.manager</strong><br />
	  	  <i>
  		     SecurityManagerSoapDelegate implements the SecurityManagerDelegate.
	  	  </i>
  		  <br />
	  	  Interfaces: <br />
  			<ul>
  			  <li><strong>SecurityManagerDelegate -- a seperate interface for setting passwords.</strong></li>
	  		</ul>
		</p><p>
	  	  <strong>security.service</strong><br />
	  	  <i>
		     SecurityServiceSoapDelegate implements the SecurityServiceDelegate.
	  	  </i>
		  <br />
	  	  Interfaces: <br />
			<ul>
			  <li><strong>SecurityServiceDelegate -- main security interface, checks tokens, splits tokens, and checks passwords.</strong></li>
	  		</ul>    	
    		</p>
    	  </p>
    	</section>    	
        ]]>
    </description>

    <!--+
        | Our cvs repository location.
        +-->
    <repository>
        <connection>
            scm:cvs:pserver:anoncvs@cvs.astrogrid.org:/devel:astrogrid/community/client
        </connection>
        <developerConnection>
            scm:cvs:ext:${maven.username}@cvs.astrogrid.org:/devel:astrogrid/community/client
        </developerConnection>
    </repository>

    <!--+
        | The external libraries required to build our component.
        +-->
    <dependencies>
        <!--+
            | The AstroGrid common components.
            +-->
        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>astrogrid-common</artifactId>
            <version>2007.2.01</version>
            <type>jar</type>
            <url>http://www.astrogrid.org/</url>
        </dependency>
        <!--+
            | The Community common components.
            +-->
        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>astrogrid-community-common</artifactId>
            <version>2008.0a4</version>
            <type>jar</type>
            <url>http://www.astrogrid.org/</url>
        </dependency>
        
    </dependencies>

    <!--+
        | The build properties for our project.
        +-->
    <build>
        <!--+
            | The location of our Java source code.
            +-->
        <sourceDirectory>src/java</sourceDirectory>
        <!--+
            | The location of our JUnit source code.
            +-->
        <unitTestSourceDirectory>src/junit</unitTestSourceDirectory>
        <!--+
            | Our JUnit test classes.
            +-->
        <unitTest>
            <!--+
                | Which tests to include.
                +-->
            <includes>
                <include>**/*TestCase.java</include>
            </includes>
            <!--+
                | The resources for our tests.
            <resources>
                <resource>
                </resource>
            </resources>
                +-->
        </unitTest>
    </build>

</project>
