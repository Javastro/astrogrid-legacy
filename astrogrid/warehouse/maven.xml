<?xml version="1.0" ?>

<!-- extension maven script -->
<project xmlns:j="jelly:core"  
         xmlns:maven="jelly:maven" 
         xmlns:ant="jelly:ant" 
         default="war:war">

<!-- ======================================== -->
<!-- custom astrogrid goals for nightly build -->

  <!-- clean goals -->
  <goal name="astrogrid-clean" prereqs="clean"/>

  <!-- site goals -->
  <goal name="astrogrid-build-site">
	<echo message="Master Project: astrogrid-build-site"/>
	<attainGoal name="multiproject:site" />
  </goal>    
      
  <goal name="astrogrid-deploy-site"
      prereqs="astrogrid-build-site,site:deploy" />
  <goal name="astrogrid-install-site"
      prereqs="astrogrid-build-site,site:deploy" />

  <!-- snapshot goals -->
  <goal name="astrogrid-build-snapshot" 
      prereqs="jar:snapshot"/>
  <goal name="astrogrid-install-snapshot"
      prereqs="jar:install-snapshot"/>
  <goal name="astrogrid-deploy-snapshot"
      prereqs="jar:deploy-snapshot"/>

  <!-- artifact goals -->
  <goal name="astrogrid-build-artifact" 
      prereqs="jar:jar"/>
  <goal name="astrogrid-install-artifact"
      prereqs="jar:install"/>
  <goal name="astrogrid-deploy-artifact" 
      prereqs="jar:deploy"/>

<!-- end custom astrogrid goals for nightly build -->
<!-- ============================================ -->




  
  <!-- Clean the sub-project when the parent project is cleaned. -->
  <preGoal name="clean:clean">
    <attainGoal name="multiproject:clean"/>
  </preGoal>

  <!-- This causes the executable jar to be built in the
       ogsadai sub-project.  The "multiproject:artifact" goal
       activates the goal in each subproject that builds that
       sub-project's principal artifact (as defined by the
       maven.multiproject,type property in the sub-project). -->
  <preGoal name="war:init">
    <attainGoal name="multiproject:artifact"/>
    <attainGoal name="webapp:unpack"/>
 </preGoal>

  <!-- When asked to install/deploy the "jar" artifact (which this 
       component doesn't have), install/deploy instead the artifact 
       from the ogsadai sub-project. -->
       <!--
  <goal name="jar:install-snapshot">
    <attainGoal name="multiproject:install-snapshot"/>
  </goal>
  -->
  <goal name="jar:deploy-snapshot">
    <attainGoal name="multiproject:deploy-snapshot"/>
  </goal>
  

  
  <!-- Unpack the PAL WAR such that it can be added to.
       The WAR is assumed to be one of the artifacts declared as dependencies.
       The code to find it is adapted from a recipe by Paul Harrison. -->
  <goal name="webapp:unpack">
    <j:forEach var="deps" items="${pom.artifacts}">
      <j:if test="${deps.dependency.artifactId=='pal' &amp;&amp; deps.dependency.type=='war'}">
        <unwar src="${deps.path}" dest="target/webapp"/>
      </j:if>
    </j:forEach>
  </goal>
  
  <!-- Copy web-app components into the web-app structure
       generated by the pal:unpack goal. -->
  <goal name="webapp:customize">
    <copy todir="target/webapp" overwrite="true" verbose="true">
      <fileset dir="src/webapp">
        <include name="**/*.html"/>
        <include name="**/*.adql"/>
      </fileset>
    </copy>
    <attainGoal name="webapp:copy-app"/>
  </goal>

  <!-- Copy the executable jar into the classes directory of the web-app.
       Note that this jar must not go into the lib directory of the 
       web-app because the jar contains special classes to run in a
       subsidiary JVM; it must not be on the classpath either at 
       build time or at run time. Therefore, Maven's normal mechanism 
       for loading dependent jars cannot be used. -->
  <goal name="webapp:copy-app">
    <copy file="ogsadai/target/astrogrid-ogsadai-app-${pom.currentVersion}.jar"
          tofile="target/webapp/WEB-INF/classes/astrogrid-ogsadai-app.jar"/>
  </goal>
    
  
  <goal name="echopath">
    <echo message="***${maven.dependency.classpath}***"/>
  </goal>

  <!-- This file is for local adjustments.  -->
  <property file="config/build.properties"/>
   
  <!-- This file specializes this template to a particular product. -->
  <property file="config/template.properties"/>
   
  <!-- Deploy the webservice into tomcat. -->
  <target name="deployToTomcat">
    <path id="classpath">
      <path refid="maven.dependency.classpath"/>
    </path>
    <echo message="Deploying webservice to tomcat at ${tomcat.home}..." />
    <copy toDir="${tomcat.home}/webapps/axis/WEB-INF/classes">
      <fileset dir="target/classes">
        <include name="**/*.class"/> 
        <include name="**/*.properties"/> 
      </fileset>
    </copy>
    <java classname="org.apache.axis.utils.Admin" 
          classpathref="classpath"
          dir="${tomcat.home}/webapps/axis/WEB-INF"
          fork="yes" failonerror="true">
      <arg value="server"/>
      <arg value="${basedir}/wsdd/deploy.wsdd"/>
    </java>
  </target>
             
  <!-- Undeploy the webservice from tomcat. -->
  <target name="undeployFromTomcat">
    <echo message="Undeploying webservice from tomcat at ${tomcat.home}..." />
    <path id="classpath">
      <path refid="maven.dependency.classpath"/>
    </path>
    <java classname="org.apache.axis.utils.Admin"
          dir="${tomcat.home}/webapps/axis/WEB-INF"
          classpathref="classpath" fork="yes" failonerror="true">
      <arg value="server"/>
      <arg value="${basedir}/wsdd/undeploy.wsdd"/>
    </java>
    <delete dir=
      "${tomcat.home}/webapps/axis/WEB-INF/classes/org/astrogrid/warehouse"/>
   </target>

  <!-- THIS PUTS ITS VOTABLE OUTPUT IN /tmp/QUERIER_OUTPUT_VOT -->
   <target name="querierTest">
     <path id="classpath">
       <pathelement location="target/classes"/>
       <path refid="maven.dependency.classpath"/>
     </path>
      <java classname="org.astrogrid.warehouse.queriers.ogsadai.WarehouseQuerier"
            dir="target/classes" fork="yes" failonerror="true"
            classpathref="classpath">
        <arg value= "SELECT * FROM first WHERE POS_EQ_DEC > 59.9"/>
        <arg value= "/tmp/QUERIER_OUTPUT_VOT"/>
      </java>
   </target>

   <target name="datacenterTest">
     <path id="classpath">
       <pathelement location="target/classes"/>
       <path refid="maven.dependency.classpath"/>
     </path>
      <java classname="org.astrogrid.datacenter.tools.SimpleQuerier"
            dir="target/classes" fork="yes" failonerror="true"
            classpathref="classpath">
        <arg value="http://cass123.ast.cam.ac.uk:4040/pal-SNAPSHOT/services/AxisDataServer"/>
        <arg value= "/data/cass123a/kea/DEVEL/astrogrid/warehouse/myquery"/>
      </java>
   </target>

   <!-- TEMPORARY TEST HARNESS -TOFIX REMOVE -->
   <target name="tempTest">
     <path id="classpath">
       <path refid="maven.dependency.classpath"/>
     </path>
      <java classname="org.astrogrid.warehouse.delegate.WebDelegate"
            dir="target/classes" fork="yes" failonerror="true">
        <arg value=
            "${tomcat.host}/axis/services/WarehouseServiceIfc"/>
      </java>
   </target>
   
   
   
       <!--+
        | To use the following goals you need to have the correct jars installed.
        | The smack.jar and imtask.jar may be found at http://
        | Place them in your $MAVEN_HOME/lib directory and edit
        | $MAVEN_HOME/bin/forehead.conf appropriately.
        | In your build.properties you should then set
        | jabber.host=jabber.astrogrid.org
        | jabber.sender=maven
        | jabber.receiver=JohnTaylor@jabber.astrogrid.org/Gaim
        | jabber.password=maven
        +-->
 
    <goal name="wave-goodbye-site">
        <j:set var="message" value="${pom.artifactId} documentation has finished building"/>
        <attainGoal name="jabber-me"/> 
    </goal>    
    <goal name="wave-goodbye-artifact">
        <j:set var="message" value="${pom.artifactId} artifacts have finished building"/>
        <attainGoal name="jabber-me"/> 
    </goal>  
    <goal name="jabber-me">
        <j:if test="${context.getVariable('jabber.host') != null}">
            <attainGoal name="jabber-declare-tasks"/>
            <j:catch>
                <jabber host="${jabber.host}" from="${jabber.sender}" 
                    to="${jabber.receiver}" password="${jabber.password}" 
                    message="${message}"/>
            </j:catch>
        </j:if>
    </goal>
    <!-- Configure the custom Ant tasks for Jabber -->
    <goal name="jabber-declare-tasks">
        <taskdef name="jabber" classname="com.tfftech.ant.taskdefs.im.jabber.JabberTask" /> 
    </goal>
    <!-- End Jabber Goals -->

</project>
