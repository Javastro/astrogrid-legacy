<?xml version="1.0" encoding="ISO-8859-1"?>
<project>
<extend>${basedir}/build/project-base.xml</extend>
  <!-- the version of maven's project object model -->
  <!-- a unique name for this project -->
  <id>astrogrid-datawarehouse</id>
  <name>Astrogrid Data Warehouse</name>
	<description><![CDATA[
  <!--
	<p>
	Links will follow shortly on the left for GDW subproject information:
	<ul>
	  <li>client delegates</li>
	  <li>queriers</li>
	  <li>datasets</li>
	</ul>
	</p>
  -->

<section name="Introduction"><p> 

This documentation refers to the Iteration 5 release of the
AstroGrid Grid Data Warehouse.

</p><p>
The AstroGrid Grid Data Warehouse (GDW) is intended to be a facility for storing
and (cross-)querying both standard astronomy datasets and user-supplied
datasets.

</p><p>
At the present time, it provides read-only access to pre-stored datasets;
user-supplied dataset functionality will be forthcoming.

</p><p>
The GDW uses the OGSA-DAI grid middleware for database access and querying.
This means it also currently relies on the OGSA implementation supplied
with the Globus Toolkit 3.0.  Both of these technologies must be deployed 
using Apache Tomcat.
</p>

<p><strong>Important note for early adopters</strong></p>
<p>The Iteration 5 release of the AstroGrid Grid Data Warehouse is
hardwired to expect an underlying Postgres 7.3 DBMS, where all the datasets 
accessed via the GDW contain columns named <strong><tt>ra</tt></strong> 
(right ascension) and <strong><tt>decl</tt></strong> (declination).
</p><p>
There is also a hardwired limit of 100,000 on the number of rows returned
by any query.
</p><p>
The next release of the GDW should support user-customisable ADQL-SQL 
translation (not just the current Postgres-flavoured translation),
with user-configurable column names for right ascension and declination,
and user-configurable limits.
</p><p>
</p>
</section>

<section name="Installation"><p>
At present, the Astrogrid Grid Data Warehouse (GDW) is a specialised deployment
of the standard <a href="../datacenter/index.html">Astrogrid
DataCenter</a>.  All required GDW front-end components are distributed as
part of the AstroGrid DataCenter package, distributed as PAL-{version}.war.
After installation, this package will need certain minor reconfigurations 
to run as a GDW (see below).

</p><p>

To supply its actual database access, the GDW requires an installation of 
the <a href="http://www.ogsadai.org.uk">OGSA-DAI</a> grid middleware.
The Iteration 4.1 release of GDW assumed OGSA-DAI 3.0;  the Iteration 5
release assumes OGSA-DAI 3.1 (the latest release at the time of writing).

</p><p>
OGSA-DAI itself currently relies on the OGSA implementation (v. 3.0.2) in the
<a href="http://www-unix.globus.org/toolkit/download.html#core">Globus Toolkit 3
core</a> distribution from the <a href="http://www.globus.org">Globus
Alliance</a>.

</p><p>
Both of the above packages come with comprehensive installation
instructions;  a vanilla installation of both should work with the GDW.

</p><p>
<strong>Important note:</strong> At present, it is required that the
OGSA-DAI (and thus OGSA) installation <strong>be co-located on the same host 
as the GDW installation</strong>.  (They do not have to be running in the same
tomcat instance, however).  This is because local file storage is currently 
used for delivery of results from OGSA-DAI.  Future releases of the GDW will 
not have this limitation. 
</p><p>

To install a GDW, first download and install a standard AstroGrid DataCenter 
component;  the 
DataCenter component provides comprehensive installation and post-install
test instructions in its 
<a href="../datacenter/multiproject/pal/INSTALL.html">PAL install 
documentation</a>.
</p>
</section>

<section name="Configuration">
<p>
To configure the installed datacenter as a GDW, the following entries 
need to be added or adjusted in the tomcat configuration file 
<tt>\$\{CATALINA_HOME\}/conf/datacenter.properties</tt>, where
<tt>\$\{CATALINA_HOME\}</tt> is the tomcat toplevel directory for the 
tomcat in which the DataCenter webapp is installed:

<pre>
# Configure DataCenter to use GDW plugin
# (DELETE ANY OTHER ENTRIES FOR datacenter.querier.plugin)
datacenter.querier.plugin=org.astrogrid.datacenter.queriers.ogsadai.WarehouseQuerier 

# Location of OGSA-DAI grid service registry
# CONFIGURE THIS TO MATCH YOUR OGSA-DAI INSTALLATION
WAREHOUSE_OgsaDaiHostString=http://hydra.star.le.ac.uk:8082
WAREHOUSE_OgsaDaiRegistryString=/gdw/services/ogsadai/DAIServiceGroupRegistry

# Location of XSLT stylesheet for XML RowSet -> VOTable transformation
# This is a one-size-fits-all hack that will need replacing.
# NO NEED TO CHANGE THIS
WAREHOUSE_XslTransform=http://astrogrid.ast.cam.ac.uk/xslt/ag-warehouse-first.xsl

# Location of JVM for shelling out to GdsQueryDelegate
# CONFIGURE THIS TO MATCH YOUR JAVA INSTALLATION
WAREHOUSE_WarehouseJvm=/usr/local/java/j2sdk1.4.1_02/bin/java

# Location of executable jar for shelled-out ogsadai call
# CONFIGURE THIS TO MATCH THE WEB-INF/classes DIRECTORY IN YOUR OWN
# DATACENTER INSTALLATION
WAREHOUSE_ExecutableJarPath=/home/data/gdw/tomcat1/webapps/pal-SNAPSHOT/WEB-INF/classes/

# CHANGE {VERSION} TO MATCH THE NAME OF THE EXECUTABLE JAR FOUND 
# IN THE WAREHOUSE_ExecutableJarPath DIRECTORY OF YOUR DATACENTER INST.
WAREHOUSE_ExecutableJarName=astrogrid-ogsadai-app-{VERSION}.jar
</pre>
</p>
</section>
	]]>
	</description>
 
  <shortDescription>AstroGrid Warehouse Components</shortDescription>

    <dependencies>
        <!-- hope to be able to remove some of these soon. -->
        <!-- astrogrid -specific deps -->
        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>astrogrid-common</artifactId>
            <version>${pom.currentVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>astrogrid-datacenter-server</artifactId>
            <version>${pom.currentVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>astrogrid-datacenter-client</artifactId>
            <version>${pom.currentVersion}</version>
        </dependency>
        <!-- This is needed for runtime tests because 
         the datacentre stuff needs it. -->
        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>astrogrid-store-client</artifactId>
            <version>${pom.currentVersion}</version>
        </dependency>
		<!-- surely it does not have a dependency on applications - pah
        <dependency>
            <groupId>org.astrogrid</groupId>
            <id>astrogrid-applications</id>
            <version>${pom.currentVersion}</version>
        </dependency>
		-->
        <!--
        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>pal</artifactId>
            <version>${pom.currentVersion}</version>
            <type>war</type>
        </dependency>-->
        <!-- more standard deps -->
        <dependency>
            <id>axis</id>
            <version>1.1</version>
        </dependency>
        <dependency>
            <groupId>axis</groupId>
            <type>jar</type>
            <artifactId>activation</artifactId>
            <version>axis-1.1</version>
        </dependency>
        <dependency>
            <groupId>axis</groupId>
            <type>jar</type>
            <artifactId>mailapi</artifactId>
            <version>axis-1.1</version>
        </dependency>
        <dependency>
            <id>wsdl4j</id>
            <version>1.0</version>
        </dependency>
        <dependency>
            <id>saaj</id>
            <version>1.0</version>
            <jar>saaj.jar</jar>
            <properties>
                <war.bundle>true</war.bundle>
            </properties>
        </dependency>
        <dependency>
            <id>commons-logging</id>
            <version>1.0.3</version>
        </dependency>
        <dependency>
            <id>commons-discovery</id>
            <version>20030211.213356</version>
        </dependency>
        <dependency>
            <id>jaxrpc-api</id>
            <version>1.0.3</version>
        </dependency>
        <dependency>
            <id>xml-apis</id>
            <version>1.0.b2</version>
        </dependency>
        <dependency>
            <id>log4j</id>
            <version>1.2.4</version>
            <properties>
                <war.bundle>true</war.bundle>
            </properties>
        </dependency>
        <dependency>
            <id>xercesImpl</id>
            <version>2.1.0</version>
        </dependency>
        <!-- dependencies from datacenter -->
        <dependency>
            <id>castor</id>
            <version>0.9.5-xml</version>
        </dependency>
    </dependencies>
</project>
