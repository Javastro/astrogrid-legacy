<?xml version="1.0"?>

<xsp:page language="java"
   xmlns:xsp="http://apache.org/xsp"
   xmlns:xsp-request="http://apache.org/xsp/request/2.0">
     
<xsp:comment>

   Development project to interface Cocoon to the RPC style
   Web-services in use by Astrogrid.

   Author: Brian McIlwrath, Astrogrid, RAL.

 NB. Issues!
   1) Need the Axis client libraries
   2) How to parse the returned SAX events derived from Cocoon source!
      Solved: Read the Cocoon source!
</xsp:comment>

<xsp:structure>

<xsp:comment>Axis SOAP stuff</xsp:comment>
   <xsp:include>org.apache.axis.client.Call</xsp:include>
   <xsp:include>org.apache.axis.client.Service</xsp:include>
   <xsp:include>org.apache.axis.encoding.XMLType</xsp:include>
   <xsp:include>javax.xml.rpc.ParameterMode</xsp:include>
   <xsp:include>org.apache.cocoon.components.language.markup.xsp.XSPUtil</xsp:include>

</xsp:structure>

<xsp:logic>

// Web service stuff

// (ToDo) Make these constants inherit from Ccooon sitemap (trivial!)
   private static final String SERVICE = "AstrogridRegistryService";       
   private static String SERVER = "stargrid1.bnsc.rl.ac.uk";
   private static String PORT = "8080";
</xsp:logic>

<page1>
<xsp:logic>
// Get parameters from HTML form - standard Cocoon XSP

   String QueryType = <xsp-request:get-parameter name="QueryType"/>;
   String Element   = <xsp-request:get-parameter name="Element"/>;
   String Value     = <xsp-request:get-parameter name="Value"/>;

// Call AXIS RPC webservice - derived from Iteration 1 Jetspeed code
   String results = null;
   try {
      Service service = new Service();
      Call call = (Call) service.createCall();
      call.setTargetEndpointAddress("http://" + SERVER + ":" + PORT +
         "/axis/services/" + SERVICE);
      call.setOperationName(QueryType);
      call.addParameter( "queryElement", XMLType.XSD_STRING, ParameterMode.IN );
      call.addParameter( "queryElementValue", XMLType.XSD_STRING,
                         ParameterMode.IN );
      call.setReturnType( XMLType.XSD_STRING );
      results = (String) call.invoke(new Object[] {Element, Value});
      getLogger().debug("Webservice returns:" + results);
   }
   catch(Exception e)
   {
         e.printStackTrace();
   }

// Now need to emit the SAX parsed XML fragment returned to tranfoormer stage

// This bit of magic from trawl through Coccon sources!!!!!!!

   XSPUtil util = new XSPUtil();
<![CDATA[   util.includeString("<page2>"+results+"</page2>",manager,contentHandler);
]]>
</xsp:logic>
</page1>

</xsp:page>
