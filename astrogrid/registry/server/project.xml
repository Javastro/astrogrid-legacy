<?xml version="1.0" encoding="UTF-8"?>
<!--+
    | Maven project description for the AstroGrid registry server.
    |
    +-->
<project
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="maven-project.xsd">

    <!--+
        | Extend the common project descriptor.

    <extend>../maven/project.xml</extend>
        +-->
    <extend>${basedir}/../maven/project.xml</extend>
    <!--+
        | The current version of the Maven project descriptor.
        +-->
    <pomVersion>3</pomVersion>

    <!--+
        | The short name of the project.
        | This is used when naming jars and distribution files.
        +-->
    <id>astrogrid-registry-server</id>

    <!--+
        | The full name of the project.
        | This is used when generating JavaDoc titles.
        +-->
    <name>AstroGrid registry server</name>

    <!--+
        | The Java package name of the project.
        | This value is used when generating JavaDoc.
        +-->
    <package>org.astrogrid.registry.server</package>

    <!--+
        | A short description of the project.
        | The short description should be limited to a single line.
        +-->
    <shortDescription>
        Astrogrid Registry classes used on the server side
    </shortDescription>

    <!--+
        | A detailed description of the project.
        | This is used to generate the front page of the projects web site. 
        +-->
    <description>
        <![CDATA[
	<p>
		The Server area takes in request from a web service and does various tasks on the Registry.  
		All registry xml metadata is stgored in a XMLDB eXist: See <a href="exist.sourceforge.net">eXist</a> for more information.
		<br />
	</p>
	<section name="Interface">
		<p>
			Web Service Interface methods:
			<ul>
				<li>update(Resource schema) - updates the Registry with one to many Resources.</li>
				<li>harvestFrom(date) - return all resource information modified from a particular date.</li>
				<li>havest() - return all resource information.</li>
				<li>submitQuery - Query for entries based on a particular criteria.</li>
				<li>harvestResource - Registers a resource entry into the db and performs a harvest on that entry if possible.</li>
				<li>loadRegistry() - just returns the Registry Resource metadata entry for this resource.</li>
			</ul>
		</p>
	</section>
	<section name="More on Queries">
		<p>
			Currently the queries conform to an old style xml schema and syntax and will be changed shortly in itn06 to 
			conform to the IVOA schema.  The schema can be found: <a href="..">Registry ~Query Schema</a>, but look at the
			examples below to see basic syntax of the queries, it is very SQL like and easy to understand.  The queries on the
			server side are taken and parsed into XQuery to be performed on the database. 
			In the current iteration the parsing looks for all namespaces "*", and the current sectionOp values are "AND|OR".
			The section items can be set to any text node or attribute, and finally for itemOp is much like the Xquery syntax see the itemOp list.
			<br />
			<i>ItemOp List:</i>
			<ul>
				<li>CONTAINS - constains or substring</li>
				<li>EQ - equals</li>
				<li>NE - not equals</li>
				<li>GE - greater-than-or-equals</li>
				<li>LE - less-than-or-equals</li>
				<li>GT - greater-than</li>
				<li>LT - less-than</li>
			</ul>			
			<br />
			<i>Examples:</i><br />
			<i>			
				<query>
					<selectionSequence>
					    <selection item='searchElements' itemOp='EQ' value='Resource'/>
        		        <selectionOp op='$and$'/> <!-- this is a dummy ob for the searchElements item hoped to be removed soon, but neeed now -->
						<selection item='AuthorityID' itemOp='EQ' value='" + authorityID + "'/>
        		        <selectionOp op='AND'/>
		                <selection item='@type' itemOp='EQ' value='RegistryType'/>
        	        </selectionSequence>
        	    </query>
			</i>
		</p>
	</section>
	<section name="Builds">
		<p>
			The registry allows you to build at the top level or at it's sub-project level.  
			Here are the maven goals for building the registry.
			<ul>
				<li>clean - cleans out and removes all previous builds.</li>
				<li>install-snapshot - Builds all the necessry jar and war files.</li>
				<li>astrogrid-deploy-snapshot - Builds and deploys the snapshot onto the repository.</li>
				<li>astrogrid-deploy-site - Generates reports and documents to be deployed on the site repository.</li>
			</ul>
		</p>
	</section>
	<section name="Installation">
		<p>
			This only builds the server jar and is expected to be bundled up with a war file.  
			See the WebApp portion of the registry which bundles up the full server installation into a war file.
			After a build a jar file is produced in the "target"
			directory.  When ever it is bundled with another component, it is expected to have in the System properties or
			JNDI a key value of "org.astrogrid.config.url" pointing to a config file.  An example config file is given in
			cvs under the config directory as config.prop.  
			Currently the config file only requires three properties:
			<ul>
			  <li>org.astrogrid.registry.version - a version number of the current main IVOA registry schema.</li>
			  <li>exist.db.url - eXist url property pointing to the root location of the eXist XML database.</li>
			  <li>exist.query.returncount - the return count number.</li>
			</ul>
		</p>
	</section>	
		]]>        
    </description>

    <!--+
        | Our cvs repository location.
        +-->
    <repository>
        <connection>
            scm:cvs:pserver:anoncvs@cvs.astrogrid.org:/devel:astrogrid/registry/server
        </connection>
        <developerConnection>
            scm:cvs:ext:${maven.username}@cvs.astrogrid.org:/devel:astrogrid/registry/server
        </developerConnection>
    </repository>

    <!--+
        | The external libraries required to build our component.
        +-->
    <dependencies>
        <!--+
            | The Registry common components.
            +-->
        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>astrogrid-registry-common</artifactId>
	        <version>${pom.currentVersion}</version>
            <type>jar</type>
            <url>http://www.astrogrid.org/</url>
        </dependency>
        
        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>astrogrid-common</artifactId>
	        <version>${pom.currentVersion}</version>
            <type>jar</type>
            <url>http://www.astrogrid.org/</url>
        </dependency>

        <dependency>
            <groupId>org.astrogrid</groupId>
            <artifactId>astrogrid-exist-server</artifactId>
	        <version>${pom.currentVersion}</version>
            <type>jar</type>
            <url>http://www.astrogrid.org/</url>
        </dependency>

        
        <dependency>
        	<artifactId>commons-jxpath</artifactId>
            <groupId>commons-jxpath</groupId>
            <version>1.1</version>
        </dependency>
        
        <dependency>
        	<artifactId>jakarta-regexp</artifactId>
            <groupId>jakarta-regexp</groupId>
            <version>1.3</version>
        </dependency>

       <dependency>
            <artifactId>commons-pool</artifactId>
            <groupId>exist</groupId>
            <version>1.1</version>
        </dependency>

       <dependency>
            <artifactId>commons-logging</artifactId>
            <groupId>commons-logging</groupId>
            <version>1.0.3</version>
        </dependency>
                        
        <dependency>
        	<id>xerces</id>
            <version>2.4.0</version>
        </dependency>
        
        <dependency>
       		<id>xml-apis</id>
          	<version>1.0.b2</version>
        </dependency>
        
        <dependency>
            <artifactId>commons-discovery</artifactId>
            <groupId>commons-discovery</groupId>
            <version>20030211.213356</version>
        </dependency>        
        
        <dependency>
            <id>axis</id>
            <version>1.1</version>
        </dependency>
        
        <dependency>
           <id>jaxrpc</id>
           <version>unknown</version>
           <jar>jaxrpc.jar</jar>
        </dependency>

        <dependency>
           <id>saaj</id>
           <version>unknown</version>
           <jar>saaj.jar</jar>
        </dependency>
        
    </dependencies>

    <!--+
        | The build properties for our project.
        +-->
    <build>
        <!--+
            | The location of our Java source code.
            +-->
        <sourceDirectory>src/java</sourceDirectory>
        <!--+
            | The location of our JUnit source code.
            +-->
        <unitTestSourceDirectory>src/junit</unitTestSourceDirectory>
        <!--+
            | Our JUnit test classes.
            +-->
        <unitTest>
            <!--+
                | Which tests to include.
                +-->
            <includes>
                <include>**/*Junit.java</include>
            </includes>

            <!--+
                | The resources for our tests.

            <resources>
                <resource>
                </resource>
                <resource>
                </resource>
            </resources>
            +-->
        </unitTest>
    </build>

</project>
