<?xml version="1.0" encoding="ISO-8859-1" ?>
<document>
    <properties>
        <title>AstroGrid registry reference</title>
    </properties>
    <body>
    <section name="Reference">
      <p>
         This area is dedicated for more information on various areas in the registry and some tips and tricks in certain areas.  Please read the eXist guide as well.
      </p>
      <subsection name="Properties">
		<p>
         Here is a more detailed list of each property in the registry.  There are a lot of properties and the majority you will not ever change.  But they are there for you to tweak.  See following
sections on other certain ideas on manipulating the properties to help you in certain objectives you wish to do with the registry.
      Below are a list of all the properties of the registry, most are custom and require no changing, but you 
      might want to have a read through in case of another version of the registry schema or small tweaks 
      you wish to perform.  These are either a JNDI property (environment entry) or in the WEB-INF/classes/astrogrid.properties in your webapp/context:<br />
      <ul>
         <li>reg.amend.authorityid -- The Main Authority ID for this Registry (Authority ID used for the Registry type)</li>
         <li>xmldb.uri --     
         The XMLDB server location url. By default it is set to use the internal eXist db.  
         You may set it to xmldb:exist://host:port/exist/xmlrpc for external eXist db. e.g. xmldb:exist://localhost:8080/exist/xmlrpc.  
         In general you can switch to another db that supports xmldb but this is untested read more below on that.</li>
         <li>xmldb.driver -- 
      The XMLDB driver to be the registered xml database.</li>
         <li>xmldb.query.service -- 
      What type of query service, XQueryService or XPathQueryService.</li>
         <li>xmldb.admin.user -- 
      The user used to create Resources or collections, and shutdown the internal eXist database if it is internally being ran.</li>
         <li>xmldb.admin.password -- 
      The admin password used to create Resources or collections, and shutdown the internal eXist database if it is internally being ran.</li>
         <li>xmldb.query.user -- 
      The user used to create Resources or collections, and shutdown the internal eXist database if it is internally being ran.</li>
         <li>xmldb.query.password -- 
      The query password used to create Resources or collections, and shutdown the internal eXist database if it is internally being ran.</li>
         <li>reg.amend.defaultversion -- 
      The default registry version used, May be overriden on updates and queries based on vr namespace.</li>
         <li>reg.amend.validate -- 
      Have validation on or off.</li>
         <li>reg.amend.quiton.invalid -- 
      Quit on validation; if a document being updated is invalid then don't update it.</li>
         <li>reg.amend.returncount -- 
      The maximum number of results to return from queries.</li>
		  <li>reg.custom.restrict.ipaddresses
	  The ip addresses restricted for WebDav and XMLRPC servlet.  You may use expressions as well ex: 127.*  by defaut it is set to localhost.</li>
		  <li>reg.custom.loggingdirectory
	  The logging directory where logs are placed.</li>
		 
         <li>reg.amend.harvest -- 
      Does this registry need to do harvesting.</li>
         <li>reg.amend.oaipublish.0.10 -- 
      The url to the oai publishing url for 0.10, default is set to astrogrid servlet, but is not required to use.</li>
         <li>reg.custom.exist.configuration -- 
      Point to another exist configuration file on your disk hence a different data directory as well.  (only for internal db use).  This is recommended if you want to use the internal database, but not have the configuration file and data directory of eXist db with the war file so undeploying/updating wars will not lose data. Also use if servlet container does not unpack war file.</li>
         <li>reg.custom.harvest.interval_hours -- 
      Number of hours between harvest (if harvest is enabled)</li>
         <li>reg.amend.identify.repositoryName -- 
      Used for the Identify verb in OAI.  The repository Name.</li>
         <li>reg.amend.identify.adminEmail -- 
      Used for the Identify verb in OAI.  The administration Email of this OAI repository.</li>
         <li>reg.custom.identify.earliestDatestamp -- 
      Used for the Identify verb in OAI.  The earliest date stamp for records/metadata being published.</li>
         <li>reg.custom.harveststylesheet.0.10 -- 
      (Advanced) Specify stylesheets to be used on harvest updates for particular versions.</li>
         <li>reg.custom.keywordxpaths.0.10 -- 
      (Advanced) Specify xpath for keyword search based on various versions in the registry.</li>
         <li>reg.custom.rootNode.default -- 
      (Advanced) The default root node for elements in the Registry. Can override on various versions in the registry.</li>
         <li>reg.custom.rootNode.0.10 -- 
      (Advanced) The default root node for elements in the Registry. Can override on various versions in the registry.</li>
         <li>reg.custom.declareNS.0.10 --
      (Advanced) Declare the namespaces used on the registry, based on registry versions.</li>
   </ul>
   </p>
   </subsection>
   <subsection name="How to Manage other authority id's">
	<p>
      Normally you just need your main authority id which is your default authority id being managed, but sometimes you may need to
manage more, such as other departments, instead of setting up another registry just simply manage an authority id for another department. There
are two ways of doing this:<br />
1.) The preferred way is to add a "Authroity Type" xml resource, once added it will then automatically change your Registry Type xml entry to put this as a managed
 authority you can use.<br />
2.) The easy quick way is go and edit your main Registry Type xml entry to add more {managedAuthority} elements which is an element at the bottom of your xml on your main Registry type.  Your main registry type
is found on the home page of your registry.
   </p>
   </subsection>
   <subsection name="Extend Registry">
	<p>
      Lets say you needed to extend some of the xml resources, meaning add your own namespaces with your own element extensions.  Well you can add this already now, you won't be able to validate
 the xml though, but you can add it into the registry.  Now for querying on it though you will need to change the property "reg.custom.declareNS.0.10".  In
  here add your declare namespace for your extensions.  Now you are able to query on your data. Advisable that soon registry will have by default quiton.invalid set to true
this means that invalid xml resources coming in for an update will be rejected.  Advise on extensions to use schemalocations or be sure your namespace points to your schema file so 
validation can continue otherwise you will need to turn off validation which is not endorsed.<br />
   </p>
   </subsection>
   <subsection name="Another XMLDB">
	<p>
      This has not been tested and assumes you are an expert on this other xml database such as xhive, xindice, and others.  First it must support
 the xmldb api.  And you will need to change the "xmldb.uri" and the "xmldb.driver" to the proper settings.  A final note when something is
performed on the database such as opening a collection it always has "/db" as part of the path hence opening a collection for updating for version 0.10 would open
"xmldb:exist:///db/astrogridv0_10" hence you must make sure "/db" can be concatenated with your uri.  Also read the "changing queries" in the next section, most likely you will
need to change the queries up to conform to your xml database.
</p>
   </subsection>
   <subsection name="Changing Queries"> 
	<p>
      You might find a more powerfull way of doing xqueries or decide to experiment on the xqueries on your own.  Currently not located in the JNDI/web.xml piece, but located in the file
      "astrogrid.properties" in the WEB-INF/classes directory under your {context name} directory. You will find a set of internal queries that you may change.  Also in the WEB-INF/classes/xsl directory
      you will find the xsl stylesheets that take a ADQL (xml) and convert it to XQuery.
	  </p>
   </subsection>
   </section>
   </body>
</document>