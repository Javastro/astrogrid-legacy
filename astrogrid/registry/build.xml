<?xml version="1.0"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/registry/build.xml,v $</cvs:source>
    | <cvs:author>$Author: KevinBenson $</cvs:author>
    | <cvs:date>$Date: 2003/12/01 10:38:20 $</cvs:date>
    | <cvs:version>$Revision: 1.6 $</cvs:version>
    | <cvs:log>
    |   $Log: build.xml,v $
    |   Revision 1.6  2003/12/01 10:38:20  KevinBenson
    |   This should be the results from the merger of Itn04-2003-28-11_HB (Head branch)
    |   merged with or should say replaced by Itn04-2003-01-12_RB
    |
    |   Revision 1.3.2.10  2003/12/01 10:25:51  KevinBenson
    |   Added more templates for the client.  So it can do the TabularSky service and 
    |   other varoius services.  Also javadoc commented several of the java files,
    |   so it is a little more understandable.
    |
    |   Revision 1.3.2.9  2003/11/28 11:50:48  KevinBenson
    |   *** empty log message ***
    |
    |   Revision 1.3.2.8  2003/11/26 11:32:46  KevinBenson
    |   Some new code changes.  Still has some bugs that need to be worked out, but 
    |   getting their.  On my next commit I will explain in more detail what was changed.
    |   Mainly just want to commit
    |
    |   Revision 1.3.2.7  2003/11/20 14:33:24  KevinBenson
    |   Added more junit information to get things from an xml file for sending for administration
    |   Also revamped the query more where it doesn't do anything with strings much.
    |   Just deals with Document object for the most part now.
    |
    |   Revision 1.3.2.6  2003/11/18 09:31:29  KevinBenson
    |   Couple of new libraries added so the junit test reports can be ran.  
    |   Added a Filehelper that will read and write document files along with
    |   compare against Identifiers and can do an update and remove.
    |
    |   Revision 1.3.2.5  2003/11/17 10:28:00  KevinBenson
    |   New build.xml file to run some junit tests and the recursion/conversion routines to
    |   go between a Treemap and a w3c.dom.Document has been completed.
    |   Now working on the server side Admin side of it.
    |
    |   Revision 1.3.2.4  2003/11/11 16:11:43  KevinBenson
    |   Added to the Build.xml some junit test in their.
    |   Added to test/java a basic junit test put the other ones int he scratch directory for now.
    |   Made it where it searches the VODescription conforming to IVOA schema 0.9 still quite rough at the moment.
    |   Final change made it where it uses the full node query webservic method not the submitQuery
    |
    |   Revision 1.3.2.3  2003/11/10 11:26:46  KevinBenson
    |   some new junit tests.  Removed some unnecessary libraries. a couple of new wsdd files.  And made the AdminInterace I think into a axis-message style
    |
    |   Revision 1.3.2.2  2003/11/06 14:27:24  KevinBenson
    |   new build.xml for compiling
    |
    |   Revision 1.3.2.1  2003/11/05 13:45:54  KevinBenson
    |   again added a build.xml script and removed a couple of fines not needed
    |
    |   Revision 1.4  2003/10/30 08:43:02  KevinBenson
    |   Some new mock stubbs and delegates
    |
    |   Revision 1.3  2003/10/29 08:43:11  KevinBenson
    |   Okay cleaned up a little of the ant tasks and situated out the delegates and service a little more.
    |
    |   Revision 1.2  2003/10/28 12:02:09  KevinBenson
    |   Straiten up the build.xml where it will compile and started on a MockDelegate
    |
    |   Revision 1.1  2003/10/28 10:11:52  KevinBenson
    |   New Registry structure started with RegistryB so we can sort of leave the other one alone for now.
    |
    | </cvs:log>
    |
    +-->
<project default="init" basedir="." name="experiment">

    <!-- Project build properties -->
    <property name="project.home"     value="${basedir}"/>
    <property name="project.base"     value="${basedir}"/>
    <property name="project.name"     value="registry"/>
    <property name="project.version"  value="4_0"/>
    <property name="project.build"    value="${project.home}/build/project"/>
    <property name="registry.java"    value="${project.home}/src/java"/>
    <property name="registry.classes" value="${project.build}/registry/classes"/>
    <property name="registry.junit.classes"   value="${project.build}/registry/junit/classes"/>
    <property name="registry.junit.reports"   value="${project.build}/registry/junit/reports"/>
    <property name="registry.junit.xml"   value="${project.build}/registry/junit/xml"/>
    <property name="junit.java"           value="${project.home}/test/java"/>
    <property name="junit.xml.dir"        value="${project.home}/test/xml"/>


    <!--+
        | User preferences.
        | This is where to put local properties eg.tomcat installation path.
    <property file="${user.home}/ant.properties"/>
        +-->

    <!--+
        | Prefix for system properties.
        +-->
    <property environment="env"/>

    <!-- ================ Init tasks ================ -->
    <target name="init">

        <!-- Create our build timestamp -->
        <tstamp>
            <format property="build.time" pattern="yyyy.MM.dd.HH.mm.ss"/>
            <format property="build.date" pattern="yyyy.MM.dd"/>
        </tstamp>

        <!-- Generate our build name -->
        <property name="build.name" value="${project.name}-${project.version}"/>

        <!-- Display the current settings -->
        <echo message="os.name      : ${os.name}"/>
        <echo message="os.arch      : ${os.arch}"/>
        <echo message="os.version   : ${os.version}"/>
        <echo message=""/>

        <echo message="user.home    : ${user.home}"/>
        <echo message=""/>

        <echo message="build.file     : ${ant.file}"/>
        <echo message="build.date     : ${build.date}"/>
        <echo message="build.time     : ${build.time}"/>
        <echo message=""/>

        <echo message="java.version : ${java.version}"/>
        <echo message="java.home    : ${java.home}"/>
        <echo message="JAVA.HOME    : ${env.JAVA_HOME}"/>
        <echo message=""/>

        <!-- Initialise our components 
	        <ant dir="src/xml/ant" target="init" antfile="ant.xml"/>
    	    <ant dir="src/xml/ant" target="init" antfile="tomcat.xml"/>
        	<ant dir="src/xml/ant" target="init" antfile="axis.xml"/>
        -->

    </target>

    <!-- ================ Experimental tasks ================ -->
    
    <target name="registry.classes.clean" depends="">
		<delete dir="${registry.classes}" failonerror="false"/>
    </target>
    
    <target name="registry.jar.clean" depends="">
		<delete dir="${project.build}/jar" failonerror="false"/>
    </target>
    
    <target name="registry.junit.clean" depends="">
		<delete dir="${project.build}/registry/junit" failonerror="false"/>
    </target>
    
    
	<path id="registry.classpath">
		<pathelement location="${project.home}/lib/xerces.jar"/>
		<pathelement location="${project.home}/lib/xml-apis.jar"/>
		<pathelement location="${project.home}/lib/xercesImpl.jar"/>
		<pathelement location="${project.home}/lib/saaj.jar"/>
		<pathelement location="${project.home}/lib/xqlpdom_1_0_2.jar"/>
		<pathelement location="${project.home}/lib/axis.jar"/>
		<pathelement location="${project.home}/lib/jaxrpc.jar"/>
		<pathelement location="${project.home}/lib/commons-logging.jar"/>
		<pathelement location="${project.home}/lib/commons-discovery.jar"/>
		<pathelement location="${project.home}/lib/jconfig.jar"/>
	</path>
    
  	<path id="junit.classpath">
	  	<pathelement location="${registry.classes}"/>
		<pathelement location="${project.home}/lib/junit.jar"/>
		<pathelement location="${project.home}/lib/jconfig.jar"/>		
		<pathelement location="${project.home}/lib/axis.jar"/>	
		<pathelement location="${project.home}/lib/jaxrpc.jar"/>	
  	</path>
  	
  	<path id="junit.run.classpath">
	  	<pathelement location="${registry.classes}"/>
		<pathelement location="${project.home}/lib/axis.jar"/>
		<pathelement location="${project.home}/lib/junit.jar"/>
		<pathelement location="${project.home}/lib/jconfig.jar"/>		
		<pathelement location="${registry.junit.classes}"/>
		<pathelement location="${project.home}/lib/jaxrpc.jar"/>		
  	</path>  	
    
    
    <!--+
        | Compile our registry
        +-->
    <target name="registry.javac" depends="">
		<!-- Create our build directory -->
        <mkdir dir="${registry.classes}"/>
        <echo message=""/>
        <echo message="Compiling JavaBeans"/>
        <!-- Compile the classes -->
        <javac srcdir="${registry.java}"
               destdir="${registry.classes}"
               debug="on"
               deprecation="on"
               optimize="on"
               >
            <classpath>
                <!-- No extra libraries required -->
				<path refid="registry.classpath"/>                
            </classpath>
        </javac>
    </target>
    
    
    <!--+
        | Compile our registry junit classes
        +-->
    <target name="registry.junit.javac" depends="">
        <mkdir dir="${registry.junit.classes}"/>
		<!-- Create our build directory -->
        <echo message=""/>
        <echo message="Compiling JavaBeans"/>
        <!-- Compile the classes -->
        <javac srcdir="${junit.java}"
               destdir="${registry.junit.classes}"
               debug="on"
               deprecation="on"
               optimize="on"
               >
            <classpath>
                <!-- No extra libraries required -->
				<path refid="registry.classpath"/>
				<path refid="junit.classpath"/>
            </classpath>
        </javac>
    </target>
    
	<property name="config.base" value="${basedir}/src/config"></property>
	<property name="config.file" value="${config.base}/config.xml"></property>
    
    
	<!--+
		| Run our server side JUnit tests.
		+-->
	<target name="registry.junit.run" depends="">
		<antcall target="registry.junit.query.run"/>
		<antcall target="registry.junit.admin.run"/>
	</target>
	
	<!--+
		| Run our server side JUnit tests.
		+-->
	<target name="registry.junit.query.run" depends="">
		<!-- Create our reports directory -->
        <mkdir dir="${registry.junit.reports}"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<path refid="registry.classpath"/>
				<path refid="junit.run.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<sysproperty key="org.astrogrid.registry.config" path="${config.file}"/>
			<sysproperty key="junit.xml.dir" path="${junit.xml.dir}"/>
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${registry.junit.reports}">
				<fileset dir="${registry.junit.classes}">
					<include name="*Query*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<!--+
		| Run our server side JUnit tests.
		+-->
	<target name="registry.junit.admin.run" depends="">
		<!-- Create our reports directory -->
        <mkdir dir="${registry.junit.reports}"/>
		<!-- Run our JUnitTestCase tests -->
		<junit printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
			<classpath>
				<path refid="registry.classpath"/>
				<path refid="junit.run.classpath"/>
			</classpath>
			<!-- Generate an XML log file -->
			<formatter type="xml"/>
			<sysproperty key="org.astrogrid.registry.config" path="${config.file}"/>
			<sysproperty key="junit.xml.dir" path="${junit.xml.dir}"/>
			<!-- Run the target JUnitTestCase tests -->
			<batchtest todir="${registry.junit.reports}">
				<fileset dir="${registry.junit.classes}">
					<include name="*Admin*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
    
	<property name="registry.server.jar"  value="registry-server-${project.version}.jar"/>
	<property name="registry.client.jar"  value="registry-client-${project.version}.jar"/>
    

    <!--+
        | Jar up the client information
        +-->
    <target name="registry.client.jar" depends="registry.javac">
		<!-- Create our build directory -->
        <mkdir dir="${project.build}/jar/client"/>
        <echo message=""/>
        <echo message="Jar the Beans"/>
		<jar destfile="${project.build}/jar/client/${registry.client.jar}">
			<!-- Copy our own Java source -->
			<fileset dir="${registry.classes}">
			    <exclude name="**/server/**" />
			</fileset>
		</jar>    
	</target>
    
    <!--+
        | Jar up the client information
        +-->
    <target name="registry.server.jar" depends="registry.javac">
		<!-- Create our build directory -->
        <mkdir dir="${project.build}/jar/server"/>
        <echo message=""/>
        <echo message="Jar the Beans"/>
		<jar destfile="${project.build}/jar/server/${registry.server.jar}">
			<!-- Copy our own Java source -->
			<fileset dir="${registry.classes}">
			    <exclude name="**/client/**" />
			</fileset>
		</jar>    
	</target>
    
</project>