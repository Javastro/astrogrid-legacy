package org.astrogrid.datacenter.io;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.WindowConstants;

/**
 * This is the window used to display data coming through a TraceInput/OutputStream.
 * It has two parts - the hex values of the characters, and an ASCII display (similar
 * to the old DOS Debug program)
 * <p> Generated by VisualAge
 * @author: M Hill
 */
public class TraceWindow extends JFrame
{
   private JTextArea ivjByteArea = null;
   private JPanel ivjJFrameContentPane = null;
   private JScrollPane ivjJScrollPane1 = null;
   private JSplitPane ivjJSplitPane1 = null;
   private JTextArea ivjTextArea = null;
   private int xpos = 0;
   private JScrollPane ivjJScrollPane2 = null;
   private JLabel ivjJLabel1 = null;
   private JLabel ivjJLabel2 = null;
   private JPanel ivjJPanel1 = null;
   private JPanel ivjJPanel2 = null;

   /**
 * TraceWindow constructor.
 */
public TraceWindow() {
   super();
   initialize();
}
/**
 * TraceWindow constructor comment.
 * @param title java.lang.String
 */
public TraceWindow(String title) {
   super(title);
}
/**
 * Return the ByteArea property value.
 * @return JTextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JTextArea getByteArea() {
   if (ivjByteArea == null) {
      try {
         ivjByteArea = new JTextArea();
         ivjByteArea.setName("ByteArea");
         ivjByteArea.setLineWrap(false);
         ivjByteArea.setText("");
         ivjByteArea.setMaximumSize(new java.awt.Dimension(15, 19));
         ivjByteArea.setColumns(0);
         ivjByteArea.setPreferredSize(new java.awt.Dimension(15, 19));
         ivjByteArea.setFont(new java.awt.Font("monospaced", 0, 12));
         ivjByteArea.setBounds(0, 0, 15, 19);
         ivjByteArea.setEditable(false);
         ivjByteArea.setMinimumSize(new java.awt.Dimension(15, 19));
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjByteArea;
}
/**
 * Return the JFrameContentPane property value.
 * @return .JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JPanel getJFrameContentPane() {
   if (ivjJFrameContentPane == null) {
      try {
         ivjJFrameContentPane = new JPanel();
         ivjJFrameContentPane.setName("JFrameContentPane");
         ivjJFrameContentPane.setLayout(new java.awt.CardLayout());
         getJFrameContentPane().add(getJSplitPane1(), getJSplitPane1().getName());
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjJFrameContentPane;
}
/**
 * Return the JLabel1 property value.
 * @return .JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JLabel getJLabel1() {
   if (ivjJLabel1 == null) {
      try {
         ivjJLabel1 = new JLabel();
         ivjJLabel1.setName("JLabel1");
         //ivjJLabel1.setBorder(new BasicFieldBorder());
         ivjJLabel1.setText("00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F");
         ivjJLabel1.setMaximumSize(new java.awt.Dimension(400, 20));
         ivjJLabel1.setPreferredSize(new java.awt.Dimension(400, 20));
         ivjJLabel1.setFont(new java.awt.Font("monospaced", 1, 12));
         ivjJLabel1.setMinimumSize(new java.awt.Dimension(10, 20));
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjJLabel1;
}
/**
 * Return the JLabel2 property value.
 * @return .JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JLabel getJLabel2() {
   if (ivjJLabel2 == null) {
      try {
         ivjJLabel2 = new JLabel();
         ivjJLabel2.setName("JLabel2");
         //ivjJLabel2.setBorder(new .plaf.basic.BasicFieldBorder());
         ivjJLabel2.setText("0123456789ABCDEF");
         ivjJLabel2.setMaximumSize(new java.awt.Dimension(10, 20));
         ivjJLabel2.setPreferredSize(new java.awt.Dimension(10, 20));
         ivjJLabel2.setFont(new java.awt.Font("monospaced", 1, 12));
         ivjJLabel2.setMinimumSize(new java.awt.Dimension(10, 20));
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjJLabel2;
}
/**
 * Return the JPanel1 property value.
 * @return Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JPanel getJPanel1() {
   if (ivjJPanel1 == null) {
      try {
         ivjJPanel1 = new JPanel();
         ivjJPanel1.setName("JPanel1");
         ivjJPanel1.setLayout(new java.awt.BorderLayout());
         getJPanel1().add(getJScrollPane1(), "Center");
         getJPanel1().add(getJLabel1(), "North");
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjJPanel1;
}
/**
 * Return the JPanel2 property value.
 * @return Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JPanel getJPanel2() {
   if (ivjJPanel2 == null) {
      try {
         ivjJPanel2 = new JPanel();
         ivjJPanel2.setName("JPanel2");
         ivjJPanel2.setLayout(new java.awt.BorderLayout());
         getJPanel2().add(getJScrollPane2(), "Center");
         getJPanel2().add(getJLabel2(), "North");
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjJPanel2;
}
/**
 * Return the JScrollPane1 property value.
 * @return ScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JScrollPane getJScrollPane1() {
   if (ivjJScrollPane1 == null) {
      try {
         ivjJScrollPane1 = new JScrollPane();
         ivjJScrollPane1.setName("JScrollPane1");
         ivjJScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
         ivjJScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
         getJScrollPane1().setViewportView(getByteArea());
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjJScrollPane1;
}
/**
 * Return the JScrollPane2 property value.
 * @return JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JScrollPane getJScrollPane2() {
   if (ivjJScrollPane2 == null) {
      try {
         ivjJScrollPane2 = new JScrollPane();
         ivjJScrollPane2.setName("JScrollPane2");
         ivjJScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
         ivjJScrollPane2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
         getJScrollPane2().setViewportView(getTextArea());
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjJScrollPane2;
}
/**
 * Return the JSplitPane1 property value.
 * @return JSplitPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JSplitPane getJSplitPane1() {
   if (ivjJSplitPane1 == null) {
      try {
         ivjJSplitPane1 = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
         ivjJSplitPane1.setName("JSplitPane1");
         ivjJSplitPane1.setContinuousLayout(false);
         ivjJSplitPane1.setDividerLocation(300);
         getJSplitPane1().add(getJPanel1(), "left");
         getJSplitPane1().add(getJPanel2(), "right");
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjJSplitPane1;
}
/**
 * Return the TextArea property value.
 * @return JTextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JTextArea getTextArea() {
   if (ivjTextArea == null) {
      try {
         ivjTextArea = new JTextArea();
         ivjTextArea.setName("TextArea");
         ivjTextArea.setLineWrap(false);
         ivjTextArea.setText("");
         ivjTextArea.setMaximumSize(new java.awt.Dimension(15, 19));
         ivjTextArea.setColumns(0);
         ivjTextArea.setPreferredSize(new java.awt.Dimension(100, 20));
         ivjTextArea.setFont(new java.awt.Font("monospaced", 0, 12));
         ivjTextArea.setBounds(0, 0, 15, 19);
         ivjTextArea.setEditable(false);
         ivjTextArea.setMinimumSize(new java.awt.Dimension(15, 19));
         // user code begin {1}
         // user code end
      } catch (java.lang.Throwable ivjExc) {
         // user code begin {2}
         // user code end
         handleException(ivjExc);
      }
   }
   return ivjTextArea;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

   /* Uncomment the following lines to print uncaught exceptions to stdout */
   // System.out.println("--------- UNCAUGHT EXCEPTION ---------");
   // exception.printStackTrace(System.out);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
   try {
      // user code begin {1}
      // user code end
      setName("TraceWindow");
      setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
      setSize(585, 315);
      setTitle("Stream Trace");
      setContentPane(getJFrameContentPane());
   } catch (java.lang.Throwable ivjExc) {
      handleException(ivjExc);
   }
   // user code begin {2}
   // user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
   try {
      TraceWindow aTraceWindow;
      aTraceWindow = new TraceWindow();
      aTraceWindow.addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
         };
      });
      aTraceWindow.setVisible(true);
   } catch (Throwable exception) {
      System.err.println("Exception occurred in main() of JFrame");
      exception.printStackTrace(System.out);
   }
}
/**
 * Insert the method's description here.
 * Creation date: (18/01/00 19:47:05)
 */
public void newLine() {

   xpos = 0;
   int maxRows = (ivjByteArea.getSize().height/16)-1;

   //try
   //{
   //   Thread.currentThread().sleep(2000);
   //}
   //catch (InterruptedException e) {}


   try {
      while (ivjByteArea.getLineCount()>maxRows) {
         ivjByteArea.replaceRange("",0,ivjByteArea.getLineEndOffset(1));   //chop out first two lines
      }
      while (ivjTextArea.getLineCount()>maxRows) {
         ivjTextArea.replaceRange("",0,ivjTextArea.getLineEndOffset(1));   //chop out first two lines
      }

   } catch (Exception e) {
//    System.out.println("Trouble deleting first line(s) of trace window");
   } /**/

   ivjByteArea.append("" + AsciiCodes.CR + AsciiCodes.LF);
   ivjTextArea.append("" + AsciiCodes.CR + AsciiCodes.LF);

}
/**
 * Insert the method's description here.
 * Creation date: (18/01/00 14:03:15)
 * @param i int
 */
public void write(int i) {

   String intString = "00" + Integer.toHexString(i);
   ivjByteArea.append("" + intString.toUpperCase().substring(intString.length()-2) + " ");
   if (i>31)
      ivjTextArea.append( "" + (char) i);
   else
      ivjTextArea.append(".");

   xpos ++;

   if (xpos == 8) {
      ivjByteArea.append(" ");
   }

   if (xpos >= 16) {
      newLine();
   }

}
}
