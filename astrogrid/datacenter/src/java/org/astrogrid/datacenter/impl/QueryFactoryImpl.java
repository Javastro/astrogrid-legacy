/* Generated by Together */

package org.astrogrid.datacenter.impl;

import org.astrogrid.datacenter.QueryFactory;
import org.astrogrid.datacenter.Query;
import org.astrogrid.datacenter.QueryException;


import org.apache.log4j.Logger;

import org.astrogrid.i18n.*;

import javax.xml.parsers.*;
import org.w3c.dom.*;

import javax.sql.DataSource ;
import javax.naming.*; 
import java.sql.Connection ;
import java.sql.Statement ;
import java.sql.ResultSet ;
import java.sql.SQLException ;


public class QueryFactoryImpl implements QueryFactory {
	
	private static final boolean 
		TRACE_ENABLED = true ;
	
	private static Logger 
		logger = Logger.getLogger( QueryFactoryImpl.class ) ;
	
	private static InitialContext 
	    initialContext = null ;
	    
	private static final String
	    JNDI_DATASOURCE_LOCATION = "java:comp/env/my-datasource" ; 
	private static DataSource
	    datasource = null ;
	    
	private static final String
	    ASTROGRIDERROR_COULD_NOT_CREATE_DATASOURCE = "Could not create datasource",
	    ASTROGRIDERROR_COULD_NOT_CREATE_CONNECTION = "Could not create connection",
	    ASTROGRIDERROR_QUERY_EXECUTION_FAILED      = "Query execution failed" ;
	    	    
	private Connection
	    connection = null ;
	private Statement 
	    statement = null ;  
	private ResultSet 
	    resultSet = null ;
	
	private static DataSource getDataSource() throws QueryException {
		if( TRACE_ENABLED ) logger.debug( "getDataSource(): entry") ; 
		
		try{
			// Note the double lock strategy				
			if( datasource == null ){
				synchronized ( QueryFactoryImpl.class ) {
					if( datasource == null ){
						InitialContext
						    initialContext = new InitialContext() ;
						datasource = (DataSource)initialContext.lookup( JNDI_DATASOURCE_LOCATION ) ;
					}
				} // end synchronized
			}
		}
		catch( NamingException ne ) {
			datasource = null ;
			Message
				message = new Message( ASTROGRIDERROR_COULD_NOT_CREATE_DATASOURCE, JNDI_DATASOURCE_LOCATION ) ;
			logger.error( message.toString(), ne ) ;
			throw new QueryException( message.toString(), ne );
		}
		finally{
			if( TRACE_ENABLED ) logger.debug( "getDataSource(): exit") ; 	
		}
		
		return datasource ;	
			
	} // end of getDataSource()
	
	public QueryFactoryImpl () {
		if( TRACE_ENABLED ) logger.debug( "QueryFactoryImpl(): entry") ; 
	}
	
	private Connection getConnection() throws QueryException {
		if( TRACE_ENABLED ) logger.debug( "getConnection(): entry") ; 
		
		try{
			if( connection == null ) {
		    	connection = getDataSource().getConnection() ;
			}
		}
		catch( SQLException e) {
			Message
				message = new Message( ASTROGRIDERROR_COULD_NOT_CREATE_CONNECTION ) ;
			logger.error( message.toString(), e ) ;
			throw new QueryException( message.toString(),e );
		}
		finally{
			if( TRACE_ENABLED ) logger.debug( "getConnection(): exit") ; 		
		}
		    
		return connection ;  

	} // end of getConnection()
	
	
    public Query createQuery( Document queryDoc ) throws QueryException { 
       return new Query( queryDoc, this ) ;
    }

    public void execute( Query query ) throws QueryException { 
		if( TRACE_ENABLED ) logger.debug( "execute(): entry") ;  
		   	
		try {
		    String
		       selectString = formatQueryString( query ) ;
		    statement = getConnection().createStatement() ;
		    resultSet = statement.executeQuery( selectString );
		} catch (SQLException e) {
			Message
				message = new Message( ASTROGRIDERROR_QUERY_EXECUTION_FAILED ) ;
			logger.error( message.toString(), e ) ;
			throw new QueryException( message.toString(),e );
		} finally {
		    if( TRACE_ENABLED ) logger.debug( "execute(): exit") ; 				  
		}

    } // end of execute()
    
   
    public void end() {
		if( TRACE_ENABLED ) logger.debug( "end(): entry") ; 		
		
		if( resultSet != null ) {
		   try { resultSet.close(); } catch (SQLException e) { ; }
		   resultSet = null;
		}
		if( statement != null ) {
		   try { statement.close(); } catch (SQLException e) { ; }
		   statement = null;
		}
		if( connection != null ) {
		  try { connection.close(); } catch (SQLException e) { ; }
		  connection = null;
		}	
		
		if( TRACE_ENABLED ) logger.debug( "end(): exit") ; 				   		   
    } // end of end() !
    
    
	public Object getImplementation() {
		return this ;
	}
    
    
    public ResultSet getResultSet() {
    	return resultSet ;
    }
  
  
    private String formatQueryString( Query query ) {
    	// This  is where the magic happens
    	return new String() ;
    }
       
} // end of class QueryFactoryImpl


