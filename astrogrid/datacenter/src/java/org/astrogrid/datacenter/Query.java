/* Generated by Together */

package org.astrogrid.datacenter;

import org.apache.log4j.Logger;

import org.astrogrid.i18n.*;

import org.w3c.dom.Document ;

public class Query {
	
	private static final boolean 
		TRACE_ENABLED = true ;
	
	private static Logger 
		logger = Logger.getLogger( Query.class ) ;
		
    private static String
        ASTROGRIDERROR_COULD_NOT_CREATE_QUERYFACTORY_IMPL = "Could not create query factory" ;
        
    private QueryFactory
        factory ;
    private Document
        queryDoc ;
	
	
    public Query( Document queryDoc, QueryFactory factory ) {
    	this.factory = factory ;
    	this.queryDoc = queryDoc ;
    }


    public QueryFactory getFactory() {
    	return factory ;
    }


    public static QueryFactory getFactory( String catalogName ) throws QueryException { 
		if( TRACE_ENABLED ) logger.debug( "getFactory(): entry") ;   	
    	
    	QueryFactory 
    		factory ;
    	String
    		implementationFactoryName = DatasetAgent.getProperty( catalogName ) ;
    		
		try {
			Object
			   obj = Class.forName( implementationFactoryName ).newInstance() ;			    			
			factory = (QueryFactory)obj ;
		}
		catch ( Exception ex ) {
			Message
				message = new Message( ASTROGRIDERROR_COULD_NOT_CREATE_QUERYFACTORY_IMPL, implementationFactoryName ) ;
			logger.error( message.toString(), ex ) ;
			throw new QueryException( message.toString(), ex );
		}
		finally {
			if( TRACE_ENABLED ) logger.debug( "getFactory(): exit") ;			
		}    	
    	return factory; 
    	
    } // end of getFactory()
    

    public Document getQueryDocument() {
    	return queryDoc ;
    }
    
    
    public void execute() throws QueryException  {
		if( TRACE_ENABLED ) logger.debug( "execute(): entry") ;   	
    	factory.execute( this ) ;
		if( TRACE_ENABLED ) logger.debug( "execute(): exit") ;   	
    }
    
    
    public VOTable toVOTable( Allocation allocation ) throws VOTableException {  
    	
    	VOTable
    	   votable = VOTable.getFactory().createVOTable( this ) ; 
    	   
    	votable.stream( allocation ) ;
    		
    	return votable ;
    	
    } // end of toVOTable()
    
    
    public void close() {
    	factory.end() ;
    }
    
    
} // end of class Query
