/*$Id: VizierDelegate.java,v 1.1 2003/11/18 11:23:49 nw Exp $
 * Created on 16-Oct-2003
 *
 * Copyright (C) AstroGrid. All rights reserved.
 *
 * This software is published under the terms of the AstroGrid 
 * Software License version 1.2, a copy of which has been included 
 * with this distribution in the LICENSE.txt file.  
 *
**/
package org.astrogrid.datacenter.cdsdelegate.vizier;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.rmi.RemoteException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.rpc.ServiceException;

import org.apache.axis.utils.XMLUtils;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** Delegate around the soap client generated by wsdl2java
 * @todo - refine the parameters to web methods - can lift from strings to enumerated constants (once we 
 * find out what these constants are).
 * @author Noel Winstanley nw@jb.man.ac.uk 16-Oct-2003
 *
 */
public class VizierDelegate {
    static Log log = LogFactory.getLog(VizierDelegate.class);
    
    /** construct delegate connected to default service endpoint */
    public VizierDelegate() throws ServiceException {
        VizieRService service = new VizieRServiceLocator();
        vizier = service.getVizieR();       
    }
    /** construct a delegate connected to the specified endpoint */
    public VizierDelegate(String endpoint) throws MalformedURLException, ServiceException {
        this(new URL(endpoint));
    }
    /** construct a delegate connected to the specified endpoint */
    public VizierDelegate(URL endpoint) throws ServiceException {
        VizieRService service = new VizieRServiceLocator();
        vizier  = service.getVizieR(endpoint);
    }
    
    protected VizieR vizier;
    
    /**Access all metadata
     * 
     * @return XML Document in VOTable format
     */ 
    public Document metaAll() throws ParserConfigurationException, SAXException, IOException {
        return makeDocument(vizier.metaAll());
    }

    public Document cataloguesData(Target target,double radius,Unit unit) throws RemoteException, ParserConfigurationException, SAXException, IOException {
        return cataloguesData(target,radius,unit,"");
    }
    public Document cataloguesData(Target target, double radius, Unit unit, String text) throws RemoteException, ParserConfigurationException, SAXException, IOException {
        if (log.isDebugEnabled()) {
            log.debug("cataloguesData " + target.toString() + " " + radius + " " + unit.toString() + " " + text);
        }
        return makeDocument(vizier.cataloguesData(target.toString(),radius,unit.toString(),text));
    }
    
    
    public Document cataloguesData(Target target,double radius,Unit unit,Wavelength wavelength) throws RemoteException, ParserConfigurationException, SAXException, IOException {
        return cataloguesData(target,radius,unit,wavelength,"");
    }
    public Document cataloguesData(Target target, double radius, Unit unit, Wavelength wavelength, String text) throws RemoteException, ParserConfigurationException, SAXException, IOException {
        if (log.isDebugEnabled()) {
            log.debug("cataloguesData " + target.toString() + " " + radius + " " + unit.toString() + " " + wavelength.toString() + " " + text);
        }
        return makeDocument(vizier.cataloguesData(target.toString(),radius,unit.toString(),text,wavelength.toString()));
    }

    public Document cataloguesMetaData(Target target, double radius, Unit unit) throws RemoteException, ParserConfigurationException, SAXException, IOException {
        return cataloguesMetaData(target,radius,unit,"");
    }
    public Document cataloguesMetaData(Target target, double radius, Unit unit, String text) throws RemoteException, ParserConfigurationException, SAXException, IOException {
        if (log.isDebugEnabled()) {
            log.debug("cataloguesMetaData " + target.toString() + " " + radius + " " + unit.toString() + " " + text);
        }
        return makeDocument(vizier.cataloguesMetaData(target.toString(),radius,unit.toString(),text));
    }
    
    public Document cataloguesMetaData(Target target,double radius, Unit unit, Wavelength wavelength) throws RemoteException, ParserConfigurationException, SAXException, IOException {
        return cataloguesMetaData(target,radius,unit,wavelength,"");
    }
    public Document cataloguesMetaData(Target target, double radius, Unit unit, Wavelength wavelength, String text) throws RemoteException, ParserConfigurationException, SAXException, IOException {
        if (log.isDebugEnabled()) {
            log.debug("cataloguesMetaData " + target.toString() + " " + radius + " " + unit.toString() + " " + wavelength.toString() + " " + text);
        }
        return makeDocument(vizier.cataloguesMetaData(target.toString(),radius,unit.toString(),text,wavelength.toString()));
    }
    
    
    protected Document makeDocument(String s) throws ParserConfigurationException, SAXException, IOException {
        InputStream is = new ByteArrayInputStream(s.getBytes());
        return XMLUtils.newDocument(is);
    }

}


/* 
$Log: VizierDelegate.java,v $
Revision 1.1  2003/11/18 11:23:49  nw
mavenized cds delegate

Revision 1.2  2003/11/18 11:10:05  nw
mavenized cds delegate

Revision 1.1  2003/10/16 10:11:45  nw
first check in
 
*/