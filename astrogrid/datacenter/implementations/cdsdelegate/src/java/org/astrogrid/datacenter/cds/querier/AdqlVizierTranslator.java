/*$Id: AdqlVizierTranslator.java,v 1.5 2004/09/07 00:54:20 mch Exp $
 * Created on 28-Nov-2003
 *
 * Copyright (C) AstroGrid. All rights reserved.
 *
 * This software is published under the terms of the AstroGrid
 * Software License version 1.2, a copy of which has been included
 * with this distribution in the LICENSE.txt file.
 *
**/
package org.astrogrid.datacenter.cds.querier;

import org.astrogrid.datacenter.adql.generated.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.astrogrid.datacenter.adql.ADQLUtils;
import org.astrogrid.datacenter.adql.DynamicVisitor;
import org.astrogrid.datacenter.adql.QOM;
import org.astrogrid.datacenter.cdsdelegate.vizier.DecimalDegreesTarget;
import org.astrogrid.datacenter.cdsdelegate.vizier.NamedTarget;
import org.astrogrid.datacenter.cdsdelegate.vizier.Unit;
import org.astrogrid.datacenter.cdsdelegate.vizier.Wavelength;
import org.w3c.dom.Element;

/** Translate an adql query document into a {@link VizierCone} object
 *
 *  a matter of stripping out the right bits.
 * @author Noel Winstanley nw@jb.man.ac.uk 28-Nov-2003
 *
 */
public class AdqlVizierTranslator   {

    /**
     * translate an adql document
     * @return a {@link VizierCone} object
     */
    public Object translate(Element arg0) throws Exception {

        Select adql = ADQLUtils.unmarshalSelect(arg0);
        VizierVisitor visitor = new VizierVisitor();
        adql.acceptTopDown(visitor);
        return visitor.getCone();
    }

   /** visitor class that extracts required information from the adql object model
    *
    * @author Noel Winstanley nw@jb.man.ac.uk 09-Dec-2003
    *
    */
    public static class VizierVisitor implements DynamicVisitor {
        static Log log = LogFactory.getLog(VizierVisitor.class);
        public VizierVisitor() {
            cone = new VizierQuery();
        }
        VizierQuery cone;
        /** access the cone object generated by the translation process
         * @pre - the visitor must have been applied to an input document
         * @return a cone
         */
        public VizierQuery getCone() {
            return cone;
        }
        
        public void visit(Table t) {
            if (t.getName().equalsIgnoreCase("metadata")
                || t.getAliasName().equalsIgnoreCase("metadata")) {
                    cone.setMetaData(true);
                }
        }
        
        public void visit(Circle c) {
            log.debug("Found circle");
            DecimalDegreesTarget target = new DecimalDegreesTarget(c.getRa().getValue(),c.getDec().getValue());
            cone.setTarget(target);
            cone.setRadius(c.getRadius().getValue());
             
        }
        /** assume any 'like' operation is specifying an extra parameter */
        public void visit(LikePred like) {
            log.debug("Found like predi");
            ArrayOfString as = like.getValue().getStringLiteral().getValue();
            String result = cone.getAdditionalTerms() == null ? "" : cone.getAdditionalTerms();
            for (int i = 0; i < as.getStringCount(); i++) {
                result += " " + as.getString(i);
            }
        }
        
        
        public void visit(ComparisonPred comp) {
            // too strict
            String operator = comp.getCompare().toString().trim();
            if (! operator.equals("=")) {
                log.warn("Ignoring predicate with operator " + operator);
            }
            // now need to find table and string expressions.
            ScalarExpression exp1 = comp.getFirstExpr();
            ScalarExpression exp2 = comp.getSecondExpr();
            if (exp1 instanceof ColumnExpr) {
                if (! (exp2 instanceof AtomExpr)) {
                    log.warn("was expecting atom here - skipping");
                }
                String value = getValue((AtomExpr)exp2);
                 setColumn((ColumnExpr)exp1,value);
            } else {
 
                if (exp2 instanceof ColumnExpr) {
                    if (! (exp1 instanceof AtomExpr)) {
                        log.warn("was expecting atom here - skipping");
                    }
                    String value = getValue((AtomExpr)exp1);
                    setColumn((ColumnExpr)exp2,value);
                } else {
                    log.warn("ignoring predicate with no reference to column");
                    return;
                }
            }
        
        }
        /** Extract value of a scalar expression
         * @param exp2
         * @return
         */
        private String getValue(AtomExpr exp2) {
            Atom a = exp2.getValue();
            if (a.getStringLiteral() != null) {
                String result = "";
                ArrayOfString as = a.getStringLiteral().getValue();
                for (int i = 0; i < as.getStringCount(); i++) {
                    result += " " + as.getString(i);
                }
                return result;
            } else {
                NumberLiteral nl = a.getNumberLiteral();
                if (nl.getApproxNum() != null) {
                    return Double.toString(nl.getApproxNum().getValue());
                } else {
                    return Double.toString(new Integer(nl.getIntNum().getValue()).doubleValue());
                }
            }
        }

        /** Based on name of column, set corresponding field in cone to value
         * @param expr column value to set
         * @param value value for column
         */
        private void setColumn(ColumnExpr expr, String value) {
            // get value of column
            String colName = expr.getSingleColumnReference().getName();
            if (colName.equalsIgnoreCase("units")) {
                Unit u = Unit.parse(value);
                cone.setUnit(u);
            }
            else if (colName.equalsIgnoreCase("wavelength")) {
                Wavelength w = Wavelength.parse(value);
                cone.setWavelength(w);
            }
            else if (colName.equalsIgnoreCase("radius")) {
                cone.setRadius(Double.parseDouble(value));
            }
            else if(colName.equalsIgnoreCase("target")) {
                NamedTarget t = new NamedTarget(value);
                cone.setTarget(t);
            }
            else {
                log.warn("didn't recognize column name: " + colName + " - ignoring");
            }
            
        }

        public void visit(QOM arg0) throws Exception {
            //do nothing
            
        }
    }

    /* (non-Javadoc)
     * @see org.astrogrid.datacenter.queriers.spi.Translator#getResultType()
     */
    public Class getResultType() {
        return VizierQuery.class;
    };

}


/*
$Log: AdqlVizierTranslator.java,v $
Revision 1.5  2004/09/07 00:54:20  mch
Tidied up Querier/Plugin/Results, and removed deprecated SPI-visitor-SQL-translator

Revision 1.4  2004/03/13 16:27:05  mch
Changed makeFullSearcher to makeQuerySearcher

Revision 1.3  2003/12/09 16:25:08  nw
wrote plugin documentation

Revision 1.2  2003/12/01 16:50:11  nw
first working tested version

Revision 1.1  2003/11/28 19:12:16  nw
getting there..
 
*/
