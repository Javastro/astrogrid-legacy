<?xml version="1.0" ?>
<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:maven="jelly:maven" xmlns:deploy="deploy" default="jar:jar">
<!-- hooks into existing goals -->
  <preGoal name="java:compile"><!-- generate classes from schema and wsdl first -->
     <mkdir dir="${basedir}/generated/java" />
     <path id="generated.src" location="${basedir}/generated/java"/>
     <path id="integration.src" locaton="${basedir}/test/int/java" />
    <maven:addPath id="maven.compile.src.set" refid="generated.src"/>  <!-- declares new src tree to maven -->
    <maven:addPath id="maven.compile.src.set" refid="integration.src" />
	<attainGoal name="compile-AxisDataServer" />
	<attainGoal name="generate-wsdl" />
	<attainGoal name="generate-delegate" />
  	<attainGoal name="generate-adql" />
  </preGoal>

  <postGoal name="site">
    <attainGoal name="ant" />
	<!-- check updated stuff back into cvs
	  generated code, and ant script. - maybe the maven system gives more support here than the
	  standard ant tag ? -->
  </postGoal>

<!-- new goals -->
 <goal name="compile-AxisDataServer" description="compiles classes required to generate wsdl" prereqs="java:prepare-filesystem">
 	<javac
	debug="${maven.compile.debug}" deprecation="${maven.compile.deprecation}"
	 executable="${maven.compile.executable}"
	fork="${maven.compile.fork}" optimize="${maven.compile.optimize}"
	verbose="${maven.compile.verbose}" listfiles="true"
	destdir="${maven.build.dest}" >
		<compilerarg line="${maven.compile.compilerargs}" />
		<src refid="maven.compile.src.set" />
		<classpath refid="maven.dependency.classpath" />
		<include name="**/service/AxisDataServer.java" />
	</javac>
 </goal>

  <goal name="generate-wsdl" description="generate wsdl from java class" prereqs="axis-declare-tasks">
  	<axis-java2wsdl	useinheritedmethods="true"
		methods="
		doQuery
		, getMetadata
		, getVoRegistryMetadata
		, makeQuery
		, startQuery
		, getResultsAndClose
		, abortQuery
		, getStatus
		, registerWebListener
		"
		style="RPC"
		porttypename="AxisDataServer"
		output="wsdl/AxisDataServer.wsdl"
		namespace="http://localhost:8080/axis/services/AxisDataServer"
		location="http://localhost:8080/axis/services/AxisDataServer"
		classname="org.astrogrid.datacenter.service.AxisDataServer">
		<classpath>
			<pathelement location="${maven.build.dest}" />
			<path refid="maven.dependency.classpath" />
		</classpath>
		<mapping namespace="http://xml.apache.org/xml-soap" package="org.w3c.dom" />
	</axis-java2wsdl>
  </goal>

  <goal name="generate-delegate" description="generate client classes from wsdl" prereqs="axis-declare-tasks">
  	<axis-wsdl2java output="${basedir}/generated/java"
	noimports="true" url="wsdl/AxisDataServer.wsdl">
		<mapping
			namespace="http://localhost:8080/axis/services/AxisDataServer"
			package="org.astrogrid.datacenter.delegate.axisdataserver" />
	</axis-wsdl2java>
	<!-- this generates a little too much - now have overlapping classes. lets delete the rest -->
	<delete>
		<fileset dir="${basedir}/generated/java">
		    <include name="**/WebNotifyServiceListener.java" />
			<include name="**/*Exception.java" />
			<exclude name="**/DatabaseAccessException.java" />
		</fileset>
	</delete>
  </goal>
<!-- don't understand this enough at present - and probably not worh the bother.
  <goal name="generate-wsdd" description="generate wsdd from wsdl">
  	<attainGoal name="axis-declare-tasks" />
	<mkdir dir="tmp" />
	<axis-wsdl2java output="tmp" verbose="true" url="wsdl/AxisDataServer.wsdl"
		deployscope="Application" serverside="true" skeletondeploy="true"
	>
		<mapping namespace="http://localhost:8080/axis/services/AxisDataServer"
			package="org.astrogrid.datacenter.delegate.axisdataserver" />
	</axis-wsdl2java>
  </goal>
-->
  <goal name="generate-adql" description="regenerate the ADQL object model">
	<!-- set up the classpath for the source generator tool -->
  <path id="castor.class.path">
    <!-- needed to override the default configuration file - knew there was a reason I disliked Castor.. -->
	<pathelement location="lib/config" />
  	<path refid="maven.dependency.classpath" />
  </path>
    <delete quiet="true"><!-- remove previous files -->
   <fileset dir="generated/java/org/astrogrid/datacenter/adql/generated">
  	 	<include name="**/*.java" />
   		<include name="**/*.class" />
   </fileset>
   </delete>
  	<java fork="yes" classname="org.exolab.castor.builder.SourceGenerator" classpathref="castor.class.path">
  	  <arg value="-i"/>
  	  <arg file="schema/ADQLschema.xsd" />
  	  <arg value="-package" />
  	  <arg value="org.astrogrid.datacenter.adql.generated" />
  	  <arg value="-dest" />
  	  <arg file="generated/java" />
  	  <!--<arg value="-verbose" />-->
 	  </java>
 	  <!-- now do some patching of the output - hope to do away with this in time. -->
 	  <patch patchfile="patches/groupByChoiceItem.patch" originalfile="generated/java/org/astrogrid/datacenter/adql/generated/GroupByChoiceItem.java"/>
 	  <patch patchfile="patches/selectionListChoiceItem.patch" originalfile="generated/java/org/astrogrid/datacenter/adql/generated/SelectionListChoiceItem.java"/>
  </goal>

<!-- stand - alone goals - not addons to main build -->

  <goal name="test-installation" description="test the datacenter webservice installation" prereqs="datacenter-test-client-jar">
	<!-- created jar file, now run it -->
	<java fork="true" jar="packaging/pal/bin/test-server.jar"/>
  </goal>

  <!-- remove hardcoded server location -->
<goal name="dataserver-publish" description="jar up, deploy to webserver, restart webapp, redeploy webservice."
	prereqs="jar:jar,tomcat-declare-tasks">
	<!-- assumes vanilla tomcat & axis installation, and configured tomcat manager app. -->
	<deploy:copy-deps todir="${axis.webapp.location}/WEB-INF/lib" />
	<copy file="target/astrogrid-datacenter-HEAD.jar" toDir="${axis.webapp.location}/WEB-INF/lib" />
	<!-- zap logs -->
	<!-- wont work because of permissions
	<delete>
		<fileset dir="/var/log/tomcat4" includes="*.*" />
	</delete> -->
	<!-- restart webapp -->
	<tomcat-reload url="http://localhost:8080/manager"
		username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="/axis" />
	<!-- remove and reinstall dataservice with axis -->
	<attainGoal name="dataserver-undeploy" />
	<attainGoal name="dataserver-deploy"/>
</goal>

<!-- tasks for deployment / distribution -->
<goal name="axis-zip" description="create zipped axis web-archive">
<!-- copy dependent jars into template webapp, zip up into target directory-->
	<delete>
		<fileset dir="packaging/axis/WEB-INF/lib"
			include="*.jar" />
	</delete>
	<!-- find a better way of doing this: e.g. attribute in project.xml -->
	<deploy:copy-deps todir="packaging/axis/WEB-INF/lib"
	   excludes="astrogrid-common,breezetk,objectwiz-votable,VOTableUtil,xml-apis,castor,xerces,junit,mm-mysql,jconn,hsqldb"
	/>
	<jar destfile="packaging/pal/lib/axis.war" basedir="packaging/axis" />
</goal>

<goal name="datacenter-server-zip" description="create zipped datacenter server archive">
<!-- copy dependent jars into template, zip up into main packaging directory
 :todo - add versioning number to filename? certainly add to manifest.-->
	<delete>
		<fileset dir="packaging/datacenter-server/WEB-INF/lib"
			include="*.jar" />
	</delete>
	<deploy:copy-deps todir="packaging/datacenter-server/WEB-INF/lib"
		excludes="axis,wsdl4j,saaj,commons-logging,commons-discovery,jaxrpc-api,junit,log4j" />
	<zip destfile="packaging/pal/lib/datacenter-server.zip" basedir="packaging/datacenter-server"/>
</goal>

<goal name="datacenter-test-client-jar" description="create executable jar for datacenter test client">
  <delete dir="tmp" />
  <mkdir dir="tmp" />
  <deploy:copy-deps todir="tmp"
  	excludes="breezetk,objectwiz-votable,VOTableUtil,castor,xerces,mm-mysql,jconn,hsqldb"
	/>
  <!-- want to bundle everything required into a single jar file - easy to run, with no classpath greif. -->
  <jar destfile="packaging/pal/bin/test-server.jar">
  	<manifest>
	  <attribute name="Main-Class" value="org.astrogrid.datacenter.integration.axisdataserver.TestInstallation" />
	</manifest>
	<fileset dir="${maven.build.dest}" /> <!-- all our sources - just to be safe -->
	<zipgroupfileset dir="tmp" includes="*.jar" />
  </jar>
</goal>

<goal name="datacenter-register-client-jar" description="create executable jar for that registers datacenter service with axis">
  <delete dir="tmp" />
  <mkdir dir="tmp" />
  <deploy:copy-deps todir="tmp"
  	excludes="astrogrid-common,breezetk,objectwiz-votable,VOTableUtil,castor,xerces,mm-mysql,jconn,hsqldb"
	/>
  <jar destfile="packaging/pal/bin/register-service.jar">
  	<manifest>
	  <attribute name="Main-Class" value="org.astrogrid.datacenter.integration.axisdataserver.DeployServer" />
	</manifest>
	<zipgroupfileset dir="tmp" includes="*.jar" />
	<fileset dir="${maven.build.dest}">
		<include name="org/astrogrid/datacenter/integration/axisdataserver/DeployServer*.class" />
	</fileset>
	<fileset dir="${basedir}">
		<include  name="wsdd/*.wsdd" />
	</fileset>
  </jar>
</goal>

<goal name="pal-zip" description="bundle together everything required for a datacenter"
   prereqs="axis-zip,datacenter-server-zip,datacenter-test-client-jar,datacenter-register-client-jar">
	<!-- clean out for starters -->
	<delete>
		<fileset dir="packaging/pal">
			<include name="doc/api/**" />
			<include name="doc/src-doc/**" />
		</fileset>
	</delete>
	<!-- grab generated documentation - assume already generated. do we want sources too?-->
	<copy todir="packaging/pal/doc/api">
		<fileset dir="${maven.build.dir}/docs/apidocs" />
	</copy>
	<copy todir="packaging/pal/doc/src-doc">
		<fileset dir="${maven.build.dir}/docs/xref" />s
	</copy>
	<!-- bundle everything together, place in target -->
	<zip destfile="${maven.build.dir}/pal-${version}.zip"
		basedir="packaging">
		<include name="pal/**" />
	</zip>
</goal>

  <goal name="dataserver-deploy" description="fire wsdd at axis to deploy dataserver"
  	prereqs="axis-declare-tasks">
  	<axis-admin xmlfile="wsdd/AxisDataServer-deploy.wsdd" />
  </goal>

  <goal name="dataserver-undeploy" description="fire wsdd at axis to undeploy dataserver"
   	prereqs="axis-declare-tasks">
  	<axis-admin xmlfile="wsdd/AxisDataServer-undeploy.wsdd" />
  </goal>

<!-- boilerplate below here -->
  <goal name="axis-declare-tasks">
      <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>

<!-- tomcat tools -->
<goal name="tomcat-declare-tasks">
  <!-- work-around until these get added to ibiblio..
  although seems to store in the wrong place at present. -->
  <property name="local.catalina-ant.dir" location="${maven.repo.local}/catalina-ant/jars" />
  <mkdir dir="${local.catalina-ant.dir}" />
  <get src="http://www.codeczar.com/products/tomcat/distributions/catalina-ant-4.1.24.jar"
     dest="${local.catalina-ant.dir}/catalina-ant-4.1.24.jar"
      usetimestamp="true" ignoreerrors="true"
     />
     <path id="catalina-ant.path">
     	<fileset dir="${local.catalina-ant.dir}" includes="*.jar" />
     </path>
   <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="tomcat-deploy"    classname="org.apache.catalina.ant.DeployTask" classpathref="catalina-ant.path"/>
  <taskdef name="tomcat-install"   classname="org.apache.catalina.ant.InstallTask" classpathref="catalina-ant.path"/>
  <taskdef name="tomcat-list"      classname="org.apache.catalina.ant.ListTask" classpathref="catalina-ant.path"/>
  <taskdef name="tomcat-reload"    classname="org.apache.catalina.ant.ReloadTask" classpathref="catalina-ant.path"/>
  <taskdef name="tomcat-remove"    classname="org.apache.catalina.ant.RemoveTask" classpathref="catalina-ant.path"/>
  <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="catalina-ant.path"/>
  <taskdef name="tomcat-roles"     classname="org.apache.catalina.ant.RolesTask" classpathref="catalina-ant.path"/>
  <taskdef name="tomcat-start"     classname="org.apache.catalina.ant.StartTask" classpathref="catalina-ant.path"/>
  <taskdef name="tomcat-stop"      classname="org.apache.catalina.ant.StopTask" classpathref="catalina-ant.path"/>
  <taskdef name="tomcat-undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpathref="catalina-ant.path"/>
</goal>


</project>
