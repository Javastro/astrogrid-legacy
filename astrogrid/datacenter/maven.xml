<?xml version="1.0" ?>
<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:maven="jelly:maven" xmlns:deploy="deploy" default="jar:jar">
<!-- hooks to farm out everything to subprojects -->
<preGoal name="jar">
	<attainGoal name="multiproject:artifact" />
</preGoal>

<preGoal name="jar:deploy">
	<attainGoal name="multiproject:deploy" />
</preGoal>

<preGoal name="jar:deploy-snapshot">
	<attainGoal name="multiproject:deploy-snapshot" />
</preGoal>

<preGoal name="jar:install">
	<attainGoal name="multiproject:install" />
</preGoal>

<preGoal name="jar:install-snapshot">
	<attainGoal name="multiproject:install-snapshot" />
</preGoal>

<preGoal name="site:fsdeploy">
	<attainGoal name="multiproject:site" />
</preGoal>



<!--
new goals
-->

<!--
distribution - tasks to assemble build products.
move all this into the pal distro.
-->
<goal name="axis-zip" description="create zipped axis web-archive">
<!-- copy dependent jars into template webapp, zip up into target directory-->
	<delete>
		<fileset dir="packaging/axis/WEB-INF/lib"
			include="*.jar" />
	</delete>
	<!-- find a better way of doing this: e.g. attribute in project.xml -->
	<deploy:copy-deps todir="packaging/axis/WEB-INF/lib"
	   excludes="astrogrid-common,breezetk,objectwiz-votable,VOTableUtil,xml-apis,castor,xerces,junit,mm-mysql,jconn,hsqldb"
	/>
	<jar destfile="packaging/pal/lib/axis.war" basedir="packaging/axis" />
</goal>

<goal name="datacenter-server-zip" prereqs="jar:jar" description="create zipped datacenter server archive">
	<delete>
		<fileset dir="packaging/datacenter-server/WEB-INF/lib"
			include="*.jar" />
	</delete>
	<deploy:copy-deps todir="packaging/datacenter-server/WEB-INF/lib"
		excludes="axis,axis-ant,wsdl4j,saaj,commons-logging,commons-discovery,jaxrpc-api,junit,log4j" />
	<copy file="${maven.build.dir}/astrogrid-datacenter-HEAD.jar" todir="packaging/datacenter-server/WEB-INF/lib" />
	<echo file="packaging/datacenter-server/VERSION">${DSTAMP}</echo>
	<zip destfile="packaging/pal/lib/datacenter-server.zip" basedir="packaging/datacenter-server"/>
</goal>

<goal name="datacenter-test-client-jar" prereqs="java:compile" description="create executable jar for datacenter test client">
  <delete dir="tmp" />
  <mkdir dir="tmp" />
  <deploy:copy-deps todir="tmp"
  	excludes="breezetk,objectwiz-votable,VOTableUtil,castor,mm-mysql,jconn,hsqldb"
	/>
  <!-- want to bundle everything required into a single jar file - easy to run, with no classpath greif. -->
  <jar destfile="packaging/pal/bin/test-server.jar">
  	<manifest>
	  <attribute name="Main-Class" value="org.astrogrid.datacenter.integration.axisdataserver.TestInstallation" />
	  <attribute name="Version" value="${DSTAMP}" />
	</manifest>
	<fileset dir="${maven.build.dest}" /> <!-- all our sources - just to be safe -->
	<zipgroupfileset dir="tmp" includes="*.jar" />
  </jar>
</goal>

<goal name="datacenter-register-client-jar" prereqs="java:compile"
	description="create executable jar for that registers datacenter service with axis">
  <delete dir="tmp" />
  <mkdir dir="tmp" />
  <deploy:copy-deps todir="tmp"
  	excludes="astrogrid-common,breezetk,objectwiz-votable,VOTableUtil,castor,xerces,mm-mysql,jconn,hsqldb"
	/>
  <jar destfile="packaging/pal/bin/register-service.jar">
  	<manifest>
	  <attribute name="Main-Class" value="org.astrogrid.datacenter.integration.axisdataserver.DeployServer" />
	  <attribute name="Version" value="${DSTAMP}" />
	</manifest>
	<zipgroupfileset dir="tmp" includes="*.jar" />
	<fileset dir="${maven.build.dest}">
		<include name="org/astrogrid/datacenter/integration/axisdataserver/DeployServer*.class" />
	</fileset>
	<fileset dir="${basedir}">
		<include  name="wsdd/*.wsdd" />
	</fileset>
  </jar>
</goal>

<preGoal name="pal-zip">
	<tstamp />
</preGoal>

<goal name="pal-zip" description="bundle together everything required for a datacenter"
   prereqs="axis-zip,datacenter-server-zip,datacenter-test-client-jar,datacenter-register-client-jar">
	<!-- clean out for starters -->
	<delete>
		<fileset dir="packaging/pal">
			<include name="doc/api/**" />
			<include name="doc/src-doc/**" />
		</fileset>
	</delete>
	<!-- grab generated documentation - assume already generated. do we want sources too?-->
	<copy todir="packaging/pal/doc/api">
		<fileset dir="${maven.build.dir}/docs/apidocs" />
	</copy>
	<copy todir="packaging/pal/doc/src-doc">
		<fileset dir="${maven.build.dir}/docs/xref" />s
	</copy>
	<!-- add a timestamp -->
	<echo file="packaging/pal/VERSION">${DSTAMP}</echo>
	<!-- bundle everything together, place in target -->
	<zip destfile="${maven.build.dir}/pal.zip"
		basedir="packaging">
		<include name="pal/**" />
	</zip>
</goal>

<!--
stand - alone goals - development helpers, not additions to main build
-->
  <goal name="test-installation" description="test the datacenter webservice installation" prereqs="datacenter-test-client-jar">
	<!-- created jar file, now run it -->
	<java fork="true" jar="packaging/pal/bin/test-server.jar">
	<!-- for testing remote installation
		<sysproperty key="datacenter.test.installation.base.url" value="http://aife.jb.man.ac.uk:8080/axis/services/AxisDataServer" />
		-->
		<sysproperty key="datacenter.test.installation.base.url" value="http://uml04.astrogrid.org:8080/axis/services/AxisDataServer" />
	</java>
  </goal>

<goal name="datacenter-server-publish" description="compile and deploy to webserver, restart webapp, redeploy webservice."
	prereqs="jar:jar,tomcat-declare-tasks,datacenter-server-zip">
	<!-- assumes vanilla tomcat & axis installation, and configured tomcat manager app. -->
	<copy todir="${axis.webapp.location}/WEB-INF/lib">
		<fileset dir="packaging/datacenter-server/WEB-INF/lib">
			<include name="*.jar" />
		</fileset>
	</copy>
	<!-- restart webapp -->
	<tomcat-reload url="http://localhost:8080/manager"
		username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="/axis" />
	<!-- remove and reinstall dataservice with axis -->
	<attainGoal name="dataserver-undeploy" />
	<attainGoal name="dataserver-deploy"/>
</goal>

  <goal name="dataserver-deploy" description="fire wsdd at axis to deploy dataserver"
  	prereqs="axis-declare-tasks,maybe-get-descriptors">
  	<axis-admin xmlfile="wsdd/deploy.wsdd" />
  </goal>

  <goal name="dataserver-undeploy" description="fire wsdd at axis to undeploy dataserver"
   	prereqs="axis-declare-tasks,maybe-get-descriptors">
  	<axis-admin xmlfile="wsdd/undeploy.wsdd" />
  </goal>
  <goal name="maybe-get-descriptors" description="check need to get descriptors">
  	<condition property="descriptors.missing" value="true">
		<not>
			<available file="${basedir}/wsdd/deploy.wsdd" />
		</not>
	</condition>
	<j:if test="${descriptors.missing}">
		<echo>Grabbing deployment descriptors</echo>
		<attainGoal name="get-descriptors" />
	</j:if>
  </goal>
  <goal name="get-descriptors" description="extract descriptors from datacenter-common jar">
  	<tempfile property="working.dir" />
	<mkdir dir="${working.dir}"/>
	<deploy:copy-deps todir="${working.dir}" />
  	<unjar src="${working.dir}/astrogrid-datacenter-common-SNAPSHOT.jar" dest="${basedir}" overwrite="false">
		<patternset>
			<include name="wsdd/*.wsdd" />
		</patternset>
	</unjar>
	<delete>
		<fileset dir="${working.dir}" />
	</delete>
  </goal>

<!--
boilerplate below here
-->
  <goal name="axis-declare-tasks">
      <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>

<goal name="tomcat-declare-tasks">
   <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="tomcat-deploy"    classname="org.apache.catalina.ant.DeployTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-install"   classname="org.apache.catalina.ant.InstallTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-list"      classname="org.apache.catalina.ant.ListTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-reload"    classname="org.apache.catalina.ant.ReloadTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-remove"    classname="org.apache.catalina.ant.RemoveTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-roles"     classname="org.apache.catalina.ant.RolesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-start"     classname="org.apache.catalina.ant.StartTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-stop"      classname="org.apache.catalina.ant.StopTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpathref="maven.dependency.classpath"/>
</goal>


</project>
