<?xml version="1.0" ?>
<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:maven="jelly:maven" xmlns:deploy="deploy" default="jar:jar">
<!-- hooks into existing goals -->
  <preGoal name="java:compile"><!-- generate classes from schema and wsdl first -->
     <mkdir dir="${basedir}/generated/java" />
     <path id="generated.src" location="${basedir}/generated/java"/>
     <path id="integration.src" location="${basedir}/test/int/java" />
     <path id="test.src" location="${basedir}/test/java" /> <!-- ikky. should refactor to avoid this -->
    <maven:addPath id="maven.compile.src.set" refid="generated.src"/>  <!-- declares new src tree to maven -->
    <maven:addPath id="maven.compile.src.set" refid="integration.src" />
    <maven:addPath id="maven.compile.src.set" refid="test.src" />
  </preGoal>

<!-- hook to get my own stuff run before xdocs binds the site together-->
  <preGoal name="xdoc">
  	<attainGoal name="ant" />
  	<attainGoal  name="pal-zip" />
	<copy file="${maven.build.dir}/pal.zip" tofile="${maven.build.dir}/docs/pal.zip" />
  </preGoal>

<!--
new goals
-->
  <goal name="wsdl2java" description="generate classes from wsdl" prereqs="axis-declare-tasks">
  	<delete><!-- clean out to start with -->
		<fileset dir="${basedir}/generated/java" >
			<include name="**/*.java" />
			<include name="**/*.class" />
			<include name="**/*.wsdd" />
		</fileset>
	</delete>
  	<axis-wsdl2java output="${basedir}/generated/java" verbose="true"
		url="wsdl/AxisDataServer.wsdl">
		<mapping
			namespace="http://www.astrogrid.org/datacenter/It04/dataserver/v1"
			package="org.astrogrid.datacenter.delegate.axisdataserver" />
		<mapping
			namespace="http://www.astrogrid.org/datacenter/It04/dataserver/v1/types"
			package="org.astrogrid.datacenter.delegate.axisdataserver.types" />
		<mapping
	       		namespace="http://tempuri.org/adql"
	       		package="org.astrogrid.datacenter.adql.generated" />
	</axis-wsdl2java>
	<!-- now generate stuff for server side - into a different package.-->
	<axis-wsdl2java output="${basedir}/generated/java" verbose="true" url="wsdl/AxisDataServer.wsdl"
		deployscope="Application" serverside="true" skeletondeploy="false">
		<mapping
			namespace="http://www.astrogrid.org/datacenter/It04/dataserver/v1"
			package="org.astrogrid.datacenter.server.axisdataserver" />
		<mapping
			namespace="http://www.astrogrid.org/datacenter/It04/dataserver/v1/types"
			package="org.astrogrid.datacenter.server.axisdataserver.types" />
		<mapping
	       		namespace="http://tempuri.org/adql"
	       		package="org.astrogrid.datacenter.adql.generated" />
	</axis-wsdl2java>
	<delete>	<!-- this generates too much - now have overlapping classes. lets delete the rest -->
		<fileset dir="${basedir}/generated/java">
		   <!-- don't want any of the server-side java classes -->
		   <include name="org/astrogrid/datacenter/server/**/*.java" />
		   <!-- stuff that is already defined -->
		    <include name="org/xml/sax/**" />
		    <include name="java/**" />
		    <include name="**/AstroGridException.java" />
		    <include name="**/QueryException.java" />
		    <!-- want to use castor for these classes -->
		    <include name="org/astrogrid/datacenter/adql/generated/*.java" />
		</fileset>
	</delete>
	<!-- now call castor to generate ADQL object model -->
	<attainGoal name="generate-adql" />
	<!-- transform wsdd file - change to use Castor serializers for ADQL object model-->
	${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
	<xslt basedir="${basedir}/generated/java/org/astrogrid/datacenter/server/axisdataserver"
	      includes="*.wsdd" style="${basedir}/wsdd/generate-wsdd.xsl"
	      destdir="${basedir}/wsdd" extension=".wsdd" />
	<!-- now need to do some work on the stub file. -->
	<!-- first castor places some classes in the 'types' package. do a search and replace on the stub file, update referecnes -->
 	<property name="stub.file"
		location="${basedir}/generated/java/org/astrogrid/datacenter/delegate/axisdataserver/AxisDataServerSoapBindingStub.java" />
	<replace summary="true" file="${stub.file}">
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.Comparison.class"
			value="org.astrogrid.datacenter.adql.generated.types.Comparison.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.OrderDirection.class"
			value="org.astrogrid.datacenter.adql.generated.types.OrderDirection.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.AggregateFunction.class"
			value="org.astrogrid.datacenter.adql.generated.types.AggregateFunction.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.BinaryOperator.class"
			value="org.astrogrid.datacenter.adql.generated.types.BinaryOperator.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.UnaryOperator.class"
			value="org.astrogrid.datacenter.adql.generated.types.UnaryOperator.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.AllOrDistinct.class"
			value="org.astrogrid.datacenter.adql.generated.types.AllOrDistinct.class" />
		<replacefilter
			token="javax.xml.namespace.QName qName;"
			value="javax.xml.namespace.QName qName;
			        java.lang.Class castorsf = org.apache.axis.encoding.ser.castor.CastorSerializerFactory.class;
       				java.lang.Class castordf = org.apache.axis.encoding.ser.castor.CastorDeserializerFactory.class;" />
	</replace>
	<!-- for declaration of castor classes, replace 2 lines with our own definitions.
	relies on axis-generated code following certain pattern. -->
	<replaceregexp 	file="${stub.file}" flags="sg"
		match="(cls = org\.astrogrid\.datacenter\.adql\.generated\.[^\n]+\n)([^\n]+\n)([^\n]+\n)([^\n]+\n)"
		replace="\1\2
			cachedSerFactories.add(castorsf);
			cachedDeserFactories.add(castordf);

			"/>
	<!-- fix axis-wsdl bug - sometimes introduces spurious &gt; at start of strings -->
	<replaceregexp file="${stub.file}" flags="sg"
		match='"&gt;([^"]+)"'
		replace='"\1"' />

  </goal>

  <goal name="generate-adql"  description="regenerate the ADQL object model">
	<!-- set up the classpath for the source generator tool -->
 	 <path id="castor.class.path"><!-- needed to override the default configuration file - knew there was a reason I disliked Castor.. -->
		<pathelement location="lib/config" />
  		<path refid="maven.dependency.classpath" />
  	</path>
    	<delete quiet="true">
   		<fileset dir="generated/java/org/astrogrid/datacenter/adql/generated">
  	 		<include name="**/*.java" />
   			<include name="**/*.class" />
   		</fileset>
   	</delete>
  	<java fork="yes" classname="org.exolab.castor.builder.SourceGenerator" classpathref="castor.class.path">
  	  	<arg value="-i"/>
  	  	<arg file="schema/ADQLschema.xsd" />
  	  	<arg value="-package" />
  	  	<arg value="org.astrogrid.datacenter.adql.generated" />
  	  	<arg value="-dest" />
  	  	<arg file="generated/java" />
  	  	<!--<arg value="-verbose" />-->
 	  </java>
 	  <!-- now do some patching of the output - hope to do away with this in time. -->
 	  <patch patchfile="patches/groupByChoiceItem.patch" originalfile="generated/java/org/astrogrid/datacenter/adql/generated/GroupByChoiceItem.java"/>
 	  <patch patchfile="patches/selectionListChoiceItem.patch" originalfile="generated/java/org/astrogrid/datacenter/adql/generated/SelectionListChoiceItem.java"/>
  </goal>

<!--
distribution - tasks to assemble build products.
-->
<goal name="axis-zip" description="create zipped axis web-archive">
<!-- copy dependent jars into template webapp, zip up into target directory-->
	<delete>
		<fileset dir="packaging/axis/WEB-INF/lib"
			include="*.jar" />
	</delete>
	<!-- find a better way of doing this: e.g. attribute in project.xml -->
	<deploy:copy-deps todir="packaging/axis/WEB-INF/lib"
	   excludes="astrogrid-common,breezetk,objectwiz-votable,VOTableUtil,xml-apis,castor,xerces,junit,mm-mysql,jconn,hsqldb"
	/>
	<jar destfile="packaging/pal/lib/axis.war" basedir="packaging/axis" />
</goal>

<goal name="datacenter-server-zip" prereqs="jar:jar" description="create zipped datacenter server archive">
	<delete>
		<fileset dir="packaging/datacenter-server/WEB-INF/lib"
			include="*.jar" />
	</delete>
	<deploy:copy-deps todir="packaging/datacenter-server/WEB-INF/lib"
		excludes="axis,axis-ant,wsdl4j,saaj,commons-logging,commons-discovery,jaxrpc-api,junit,log4j" />
	<copy file="${maven.build.dir}/astrogrid-datacenter-HEAD.jar" todir="packaging/datacenter-server/WEB-INF/lib" />
	<echo file="packaging/datacenter-server/VERSION">${DSTAMP}</echo>
	<zip destfile="packaging/pal/lib/datacenter-server.zip" basedir="packaging/datacenter-server"/>
</goal>

<goal name="datacenter-test-client-jar" prereqs="java:compile" description="create executable jar for datacenter test client">
  <delete dir="tmp" />
  <mkdir dir="tmp" />
  <deploy:copy-deps todir="tmp"
  	excludes="breezetk,objectwiz-votable,VOTableUtil,castor,mm-mysql,jconn,hsqldb"
	/>
  <!-- want to bundle everything required into a single jar file - easy to run, with no classpath greif. -->
  <jar destfile="packaging/pal/bin/test-server.jar">
  	<manifest>
	  <attribute name="Main-Class" value="org.astrogrid.datacenter.integration.axisdataserver.TestInstallation" />
	  <attribute name="Version" value="${DSTAMP}" />
	</manifest>
	<fileset dir="${maven.build.dest}" /> <!-- all our sources - just to be safe -->
	<zipgroupfileset dir="tmp" includes="*.jar" />
  </jar>
</goal>

<goal name="datacenter-register-client-jar" prereqs="java:compile"
	description="create executable jar for that registers datacenter service with axis">
  <delete dir="tmp" />
  <mkdir dir="tmp" />
  <deploy:copy-deps todir="tmp"
  	excludes="astrogrid-common,breezetk,objectwiz-votable,VOTableUtil,castor,xerces,mm-mysql,jconn,hsqldb"
	/>
  <jar destfile="packaging/pal/bin/register-service.jar">
  	<manifest>
	  <attribute name="Main-Class" value="org.astrogrid.datacenter.integration.axisdataserver.DeployServer" />
	  <attribute name="Version" value="${DSTAMP}" />
	</manifest>
	<zipgroupfileset dir="tmp" includes="*.jar" />
	<fileset dir="${maven.build.dest}">
		<include name="org/astrogrid/datacenter/integration/axisdataserver/DeployServer*.class" />
	</fileset>
	<fileset dir="${basedir}">
		<include  name="wsdd/*.wsdd" />
	</fileset>
  </jar>
</goal>

<preGoal name="pal-zip">
	<tstamp />
</preGoal>

<goal name="pal-zip" description="bundle together everything required for a datacenter"
   prereqs="axis-zip,datacenter-server-zip,datacenter-test-client-jar,datacenter-register-client-jar">
	<!-- clean out for starters -->
	<delete>
		<fileset dir="packaging/pal">
			<include name="doc/api/**" />
			<include name="doc/src-doc/**" />
		</fileset>
	</delete>
	<!-- grab generated documentation - assume already generated. do we want sources too?-->
	<copy todir="packaging/pal/doc/api">
		<fileset dir="${maven.build.dir}/docs/apidocs" />
	</copy>
	<copy todir="packaging/pal/doc/src-doc">
		<fileset dir="${maven.build.dir}/docs/xref" />s
	</copy>
	<!-- add a timestamp -->
	<echo file="packaging/pal/VERSION">${DSTAMP}</echo>
	<!-- bundle everything together, place in target -->
	<zip destfile="${maven.build.dir}/pal.zip"
		basedir="packaging">
		<include name="pal/**" />
	</zip>
</goal>

<!--
stand - alone goals - development helpers, not additions to main build
-->
  <goal name="test-installation" description="test the datacenter webservice installation" prereqs="datacenter-test-client-jar">
	<!-- created jar file, now run it -->
	<java fork="true" jar="packaging/pal/bin/test-server.jar">
	<!-- for testing remote installation
		<sysproperty key="datacenter.test.installation.base.url" value="http://aife.jb.man.ac.uk:8080/axis/services/AxisDataServer" />
		-->
		<sysproperty key="datacenter.test.installation.base.url" value="http://uml04.astrogrid.org:8080/axis/services/AxisDataServer" />
	</java>
  </goal>

<goal name="datacenter-server-publish" description="compile and deploy to webserver, restart webapp, redeploy webservice."
	prereqs="jar:jar,tomcat-declare-tasks,datacenter-server-zip">
	<!-- assumes vanilla tomcat & axis installation, and configured tomcat manager app. -->
	<copy todir="${axis.webapp.location}/WEB-INF/lib">
		<fileset dir="packaging/datacenter-server/WEB-INF/lib">
			<include name="*.jar" />
		</fileset>
	</copy>
	<!-- restart webapp -->
	<tomcat-reload url="http://localhost:8080/manager"
		username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="/axis" />
	<!-- remove and reinstall dataservice with axis -->
	<attainGoal name="dataserver-undeploy" />
	<attainGoal name="dataserver-deploy"/>
</goal>

  <goal name="dataserver-deploy" description="fire wsdd at axis to deploy dataserver"
  	prereqs="axis-declare-tasks">
  	<axis-admin xmlfile="wsdd/deploy.wsdd" />
  </goal>

  <goal name="dataserver-undeploy" description="fire wsdd at axis to undeploy dataserver"
   	prereqs="axis-declare-tasks">
  	<axis-admin xmlfile="wsdd/undeploy.wsdd" />
  </goal>

<!--
boilerplate below here
-->
  <goal name="axis-declare-tasks">
      <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>

<goal name="tomcat-declare-tasks">
   <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="tomcat-deploy"    classname="org.apache.catalina.ant.DeployTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-install"   classname="org.apache.catalina.ant.InstallTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-list"      classname="org.apache.catalina.ant.ListTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-reload"    classname="org.apache.catalina.ant.ReloadTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-remove"    classname="org.apache.catalina.ant.RemoveTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-roles"     classname="org.apache.catalina.ant.RolesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-start"     classname="org.apache.catalina.ant.StartTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-stop"      classname="org.apache.catalina.ant.StopTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpathref="maven.dependency.classpath"/>
</goal>


</project>
