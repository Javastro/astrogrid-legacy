/*
 * Created on 01-Apr-2004
 *
 * To change this generated comment go to 
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
package org.astrogrid.datacenter.queriers.ogsadai;

/**
 * @author Elizabeth Auden
 *
 * Tests the PostgresSqlMaker.fromAdql method, showing that 13 ADQL v06
 * sample queries can be submitted to PostgresSqlMaker and successful return
 * SQL generated by ogsadai.AdqlQueryTranslator.
 */
import java.util.Properties;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.BufferedReader;
import junit.framework.TestCase;
import org.astrogrid.datacenter.query.AdqlQuery;

public class PostgresSqlMakerTest extends TestCase{
	
	public PostgresSqlMakerTest(String arg0) {
		super(arg0);
	}

	public static void main(String[] args) {
		junit.textui.TestRunner.run(AdqlQueryTranslatorTest.class);
	}
	
	public void test1() throws Exception {
		processFile("sample1.xml");
	}
	
    
	public void test2() throws Exception {
		processFile("sample2.xml");
	}

	public void test2_fast() throws Exception {
		processFile("sample2_fast.xml");
	}
	public void test3() throws Exception {
		processFile("sample3.xml");
	}
	public void test3_fast() throws Exception {
		processFile("sample3_fast.xml");
	}
	public void test4() throws Exception {
		processFile("sample4.xml");
	}

    
	public void test5() throws Exception {
		processFile("sample5.xml");
	}
    
    
	public void test6() throws Exception {
		processFile("sample6.xml");
	}
	public void test6_fast() throws Exception {
		processFile("sample6_fast.xml");
	}    

	/* 
	 * Test overlapping circles.
	 */
    
	public void test7() throws Exception {	
		processFile("overlappingcircles.xml");
	}
	
	 
	/*
	 * Test overlapping geometrical regions (boxes).
	 */
	
	public void test8() throws Exception {	
		processFile("geometricalregion.xml");
	}
	
	/* 
	 * Test cone search.
	 */
	
	public void test9() throws Exception {	
		processFile("conesearch.xml");
	}
	
	/* 
	 * Test cross match.
	 */
	
	public void test10() throws Exception {		
		processFile("crossmatch.xml");
	}

	public void test11() throws Exception {		
		processFile("bad_adql.xml");
	}	
	protected void processFile(String path) throws Exception {
		
		InputStream is = this.getClass().getResourceAsStream(path);
		assertNotNull(is);
		Reader reader = new InputStreamReader(is);
		BufferedReader br = new BufferedReader(reader);
		String adqlString = "";
		
		while (br.ready()){
		 adqlString += br.readLine();
		}
		AdqlQuery query = new AdqlQuery(adqlString);		
		Properties results = new Properties();
		InputStream propsStream  = this.getClass().getResourceAsStream("postgres-translations.properties");
		results.load(propsStream);
		assertFalse(results.isEmpty());
		try {
		   PostgresSqlMaker sqlMaker = new PostgresSqlMaker(); 
		   String sql = sqlMaker.fromAdql(query); 
		   assertNotNull(sql);
		   System.out.println(sql);
		   String expectedSQL = results.getProperty(path);
		   assertNotNull(expectedSQL);
		   assertEquals(expectedSQL.trim(),sql.trim());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Caught Exception " + e.getMessage());
		}
	}
}
