AstroGrid DATACENTER README.

Two important software prerequisites are the datacenter's two properties files:

(1) The configuration file ASTROGRID_datasetconfig.properties. A great deal
of setup-configurable data is held here. The file is well commented and bears
reading.

(2) The datacenter's messages file ASTROGRID_datacentermessages.properties.
All messages issued by the datacenter are detailed here. The file name is 
configurable within the ASTROGRID_datasetconfig file.

The datacenter package will not work without these files being available within
Tomcat. BEWARE: we have had some difficulty with Tomcat picking up properties
files.

DATABASES.

The datacenter requires two types of database:

(1) A Job database to keep track of jobs entered in the AstroGrid system.
This is a small database of 1 table. The ddl is available in the dbscripts
directory. The database is accessed with write capability. Some details are
configurable within the ASTROGRID_datasetconfig file.

(2) A variable number of astronomical databases. These databases can be on
different RDBMS's, have any variability in numbers of tables and naming
conventions, and hold billions of rows. Configurable details are held
within the ASTROGRID_datasetconfig file.

At the present state of play, we have only had the opportunity of testing
using Sybase on the hydra machine.

JNDI.

The datacenter uses JNDI to lookup it's associated databases, two files require 
altering to enable this to happen:

(1) The axis WEB.XML file - $CATALINA_HOME/webapps/axis/WEB-INF/web.xml:
Add the JNDI names (as per ASTROGRID_datasetconfig.properties) under which the 
web services will look up preconfigured datasources (1 for each datasource eg: 
job-datasource, jes-datasource, usnob-datasource):

  <resource-ref>
    <res-ref-name>jdbc/job-datasource</res-ref-name>
    <res-type>java.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

(2) The Tomcat SERVER.XML file - $CATALINA_HOME/conf/server.xml
Add database implementation specific details for each datasource as required
by JNDI (eg. driverClassName, URL, User, Password):

  <DefaultContext>
    <Resource name="jdbc/job-datasource"
              auth="Container"
              type="javax.sql.DataSource"/>
    <ResourceParams name="jdbc/job-datasource">
      <parameter>
        <name>driverClassName</name>
        <value>com.sybase.jdbc2.jdbc.SybDriver</value>
      </parameter>
      <parameter>
        <name>url</name>
        <value>jdbc:sybase:Tds:hydra:4100</value>
      </parameter>
      <parameter>
        <name>username</name>
        <value>xxxx</value>
      </parameter>
      <parameter>
        <name>password</name>
        <value>xxxx</value>
      </parameter>
      <parameter>
        <name>removeAbandoned</name>
        <value>true</value>
      </parameter>
    </ResourceParams>

    <Resource name="jdbc/usnob-datasource"
              auth="Container"
              type="javax.sql.DataSource"/>
     <ResourceParams name="jdbc/usnob-datasource">
       <parameter>
         <name>driverClassName</name>
         <value>com.sybase.jdbc2.jdbc.SybDriver</value>
       </parameter>
       <parameter>
         <name>url</name>
         <value>jdbc:sybase:Tds:hydra:4100</value>
       </parameter>
       <parameter>
         <name>username</name>
         <value>xxxx</value>
       </parameter>
       <parameter>
         <name>password</name>
         <value>xxxx</value>
       </parameter>
     </ResourceParams>
     
     .......
     </DefaultContext>

