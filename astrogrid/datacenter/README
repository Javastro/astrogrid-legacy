#=============================================================================#
#                    AstroGrid DATACENTER README.                             
#=============================================================================#


1.0 SOFTWARE PREREQUISITES:
*****************************

1.1 Externals.
----------------

These are the environments under which the datacenter was developed:
. RedHat Linux 7.3 
. Java sdk j2sdk1.4.1_02
. Tomcat 4.1.24
. Axis-1_1RC2

You should also ensure the following are available:
. junit 3.8.1 or later
. log4j 1.2.4 or later

We have only tested so far using Sybase as the database. The appropriate jdbc jar
is included with the distribution. Further details are given later.

***NOTE*** Sybase is not a prerequisite. Please try other jdbc compliant databases,
or contact AstroGrid if you wish to try the roll-your-own variety given you have a 
home-grown database!


1.2 Internals.
----------------

Two important software prerequisites are the datacenter's two properties files:

(1) The configuration file ASTROGRID_datasetconfig.properties. A great deal
of setup-configurable data is held here. The file is well commented and bears
reading... <<<MUST>>> be read!

(2) The datacenter's messages file ASTROGRID_datacentermessages.properties.
All messages issued by the datacenter are detailed here. The file name is 
configurable within the ASTROGRID_datasetconfig file.

The datacenter package will not work without these files being available. 

***Note*** The datacenter is dependent upon another AstroGrid component,
the MySpace facility, which is separately installable. 
Please install MySpace prior to installing the datacenter.

Other prerequisites are included with the distribution. 
See section 4.0 Install below.


2.0 DATABASES:
****************

2.1 Overview of Databases.
----------------------------

The datacenter requires two types of database:

(1) A Job database to keep track of jobs entered in the AstroGrid system.
This is a small database of 1 table. The ddl is available in the dbscripts
directory. The database is accessed with write capability. Some details are
configurable within the ASTROGRID_datasetconfig file.

(2) A variable number of astronomical databases. These databases can be on
different RDBMS's, have any variability in numbers of tables and naming
conventions, and hold billions of rows. Configurable details are held
within the ASTROGRID_datasetconfig file.

At the present state of play, we have only had the opportunity of testing
using Sybase.


2.2 JNDI.        **** IMPORTANT ****
-----------

For reference see:    
http://jakarta.apache.org/tomcat/tomcat-4.1-doc/jndi-datasource-examples-howto.html

The datacenter uses JNDI to lookup it's associated databases, two files require 
altering within Axis and Tomcat to enable this to happen:

(1) The axis WEB.XML file - $CATALINA_HOME/webapps/axis/WEB-INF/web.xml:
Add the JNDI names (as per ASTROGRID_datasetconfig.properties) under which the 
web services will look up preconfigured datasources (1 for each datasource eg: 
job-datasource, jes-datasource, usnob-datasource):

  <resource-ref>
    <res-ref-name>jdbc/job-datasource</res-ref-name>
    <res-type>java.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

(2) The Tomcat SERVER.XML file - $CATALINA_HOME/conf/server.xml
Add database implementation specific details for each datasource as required
by JNDI (eg. driverClassName, URL, User, Password):

  <DefaultContext>
    <Resource name="jdbc/job-datasource"
              auth="Container"
              type="javax.sql.DataSource"/>
    <ResourceParams name="jdbc/job-datasource">
      <parameter>
        <name>driverClassName</name>
        <value>com.sybase.jdbc2.jdbc.SybDriver</value>
      </parameter>
      <parameter>
        <name>url</name>
        <value>jdbc:sybase:Tds:hydra:4100</value>
      </parameter>
      <parameter>
        <name>username</name>
        <value>xxxx</value>
      </parameter>
      <parameter>
        <name>password</name>
        <value>xxxx</value>
      </parameter>
      <parameter>
        <name>removeAbandoned</name>
        <value>true</value>
      </parameter>
    </ResourceParams>

    <Resource name="jdbc/usnob-datasource"
              auth="Container"
              type="javax.sql.DataSource"/>
     <ResourceParams name="jdbc/usnob-datasource">
       <parameter>
         <name>driverClassName</name>
         <value>com.sybase.jdbc2.jdbc.SybDriver</value>
       </parameter>
       <parameter>
         <name>url</name>
         <value>jdbc:sybase:Tds:hydra:4100</value>
       </parameter>
       <parameter>
         <name>username</name>
         <value>xxxx</value>
       </parameter>
       <parameter>
         <name>password</name>
         <value>xxxx</value>
       </parameter>
     </ResourceParams>
     
     .......
     </DefaultContext>
     
     
3.0 LIMITATIONS:
******************
There are limitations on the query parameters that equate to
the SQL submitted against an astronomical database. 
The following are not yet supported:

ORDER BY
GROUP BY
sub-selects
column arithmetic
ANY
ALL

Most if not all of these will be available shortly.  
     
4.0 INSTALL:
**************

4.1 Unjar the datacenter.jar archive.
---------------------------------------

Unjar to some convenient temporary directory. The archive contains the following:

. This README, so presumably you have already got this far!
. datacenterBIN.jar     -    the datacenter executables
. jconn2.jar            -    the Sybase jdbc executables
. objectwiz-votable.jar -    executables for producing votables from a query
. VOTableUtil.jar       -    conversion utility routines
. breezetk.jar          -    conversion utility routines
. config directory      -    contains datacenter configuration files
. dbscripts             -    contains script for creating database tables.
. wsdd                  -    contains deployment descriptors for deploying datacenter as a SOAP service within Axis

4.2 Make sure the external prerequisites are fullfilled.
----------------------------------------------------------
See section 1.1


4.3 Copy archive files into appropriate classpath location for Axis.
----------------------------------------------------------------------
Suggest the best location is the webapps/axis/WEB-INF/lib directory
that is created when Axis is installed, but any convenient place
where they can be picked up as part of a classpath.


4.4 READ THE DATACENTERS CONFIGURATION PROPERTIES FILE.
---------------------------------------------------------
Look in the config directory.


4.5 Fullfill Database conditions.
-----------------------------------
. Create appropriate astronomical databases (if not already in existence).
. Create job database by running script held in dbscripts directory.
  This may <<will>> require alteration for your flavour of RDBMS.
. Alter Tomcat and Axis files to allow for JNDI (see section 2.2 above)


4.6 Alter the datacenter's configuration file.
------------------------------------------------
. You must make appropriate database configuration details and other
  items available by altering this file. ***Please read it***.
. Place the configuration file and the messages file in a convenient
  classpath-aware location for resources and/or classes; we suggest
  the webapps/axis/WEB-INF/classes directory .


4.7 Ensure Database, Tomcat and Axis are running.
---------------------------------------------------
You may have to restart Tomcat after step 4.6


4.8 Deploy datacenter as a SOAP service within Axis.
------------------------------------------------------
See the wsdd descriptors within the wsdd directory.
These are commented to show which command is required to execute deployment.
The datacenterBIN.jar must be available when the command is executed. 


4.9 You are ready to go! Happy Astronomical Hunting!
------------------------------------------------------