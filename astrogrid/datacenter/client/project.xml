<?xml version="1.0" encoding="ISO-8859-1"?>
<project>
<extend>${basedir}/../project-base.xml</extend>
  <!-- the version of maven's project object model -->
  <pomVersion>3</pomVersion>
  
  <!-- a unique name for this project -->
  <id>astrogrid-datacenter-client</id>
  <name>AstroGrid DataCenter Client Delegate</name>

  <currentVersion>HEAD</currentVersion>

	<description><![CDATA[
	 This project contains the delegate interface to the datacenter.
	 <p />
	 The name of the jar produced by this project is <tt>astrogrid-datacenter-client</tt>
	 To add a dependency on this project to your own project, add the following to your <tt>project.xml</tt>
	 <source>
	   &lt;dependencies&gt;
	   ...
	  	&lt;dependency&gt;
		&lt;groupId&gt;astrogrid-datacenter&lt;/groupId&gt;
		&lt;artifactId&gt;astrogrid-datacenter-client&lt;/artifactId&gt;
		&lt;version&gt;SNAPSHOT&lt;/version&gt;
		&lt;/dependency&gt;
	   ...
	   &lt;dependencies&gt;
	 </source>
	 <p><subsection name="Other Uses" /></p>
	 Apart from the delegate, some of the supporting libraries may be of use by themselves:
	 <ul>
	 <li>ADQL Object Model</li>
	 <li>Bug-fixed Castor Axis Serializers</li>
	 </ul>
	 <p/>
	 <p><subsection name="Still to do" /></p>
	 <ul>
	 	<li>get serialization / deserialization tests to pass</li>

	 </ul>
	 <p><subsection name="Build" /></p>
	 This project generates a large amount of source code automatically from XML schema and WSDL files in
	 <tt>src/xsd</tt> and <tt>src/wsdl</tt>. This source is placed in a separate tree called <tt>generated/java</tt>.
	<p />
	 This maven project has an additional goal - <tt>generate-delegate</tt>
	 that performs this code generation. The recipe used is based on
	 <a href="http://www-106.ibm.com/developerworks/webservices/library/ws-castor">this article</a>.
	 Castor and the wsdl2java tool from Axis are used as part of this.
	 The goal is defined in the <tt>maven.xml</tt> file, where is is documented in more detail..
	<p />
	The code generation is <b>not</b> performed automatically by the nightly build: after editing the wsdl or schema files the
	<tt>generate-delegate</tt> goal must be run by hand; then the generated sources verified and checked back into CVS.
	
	<p><subsection name="Todo" /></p>
	Need to sort out exception types in WSDL - current wsdl declares exceptions, but they aren't transported to the client correctly.
	Could do with a test to exercise this too.
	 	]]>
	</description>

  <shortDescription>Client-side delegate and supporting libraries</shortDescription>

  <siteDirectory>/var/www/www/maven/build/datacenter/client</siteDirectory>

  <repository>
    <connection>
      scm:cvs:pserver:anoncvs@cvs.astrogrid.org:/devel:astrogrid/datacenter/client
    </connection>
    <developerConnection>
      scm:cvs:ext:${maven.username}@cvs.astrogrid.org:/devel:astrogrid/datacenter/client
    </developerConnection>
  </repository>


  <!-- jar files the project is dependent on -->
  <dependencies>
	<!-- required for the NVO cone search delegate -->
	    <dependency>
        <id>astrogrid-mySpace</id>
        <version>SNAPSHOT</version>
	    <properties>
      <war.bundle>true</war.bundle>
    </properties>
    </dependency>

    <dependency>
      <id>breezetk</id>
      <version>UNKNOWN</version>
      <jar>breezetk.jar</jar>
          <properties>
      <war.bundle>true</war.bundle>
    </properties>
    </dependency>

    <dependency>
      <id>objectwiz-votable</id>
      <version>UNKNOWN</version>
      <jar>objectwiz-votable.jar</jar>
          <properties>
      <war.bundle>true</war.bundle>
    </properties>
    </dependency>

    <dependency>
      <id>VOTableUtil</id>
      <version>UNKNOWN</version>
      <jar>VOTableUtil.jar</jar>
          <properties>
      <war.bundle>true</war.bundle>
    </properties>
    </dependency>


	<!-- used as part of build - no need to deploy with final app.-->

	<dependency>
		<groupId>axis</groupId>
		<artifactId>axis-ant</artifactId>
		<version>1.1</version>
	</dependency>


  </dependencies>

	<build>
		<resources>
			<resource>
				<directory>${basedir}/generated</directory>
				<includes>
					<include>wsdd/**</include>
				</includes>
			</resource>
			<resource>
				<directory>${basedir}/src</directory>
				<includes>
					<include>wsdl/**</include>
					<include>xsd/**</include>
				</includes>
			</resource>
			<resource>
				<directory>${basedir}/src/java</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
		</resources>
	</build>

</project>

