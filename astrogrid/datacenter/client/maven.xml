<?xml version="1.0" ?>
<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:maven="jelly:maven" xmlns:deploy="deploy" default="jar:jar">

<!-- location of generated source tree -->
<property name="generated.src" location="${basedir}/generated/java" />
<property name="generated.wsdd" location="${basedir}/generated/wsdd" />

<!-- hook to add in generated sources -->
<preGoal name="java:compile">
	<mkdir dir="${generated.src}" />
	<path id="generated.src.path" location="${generated.src}" />
	<maven:addPath id="maven.compile.src.set" refid="generated.src.path" />
</preGoal>

<!--
new goals
-->

  <goal name="generate-delegate" description="generate classes from wsdl" prereqs="axis-declare-tasks">
  	<description><![CDATA[
generate java classes for delegate and server from a hand-written wsdl file.
Uses method described in http://www-106.ibm.com/developerworks/webservices/library/ws-castor/?Open&ca=daw-ws-news
to use castor xml serializers within Axis.
Outline:
* remove all sources in the generated/java src hierarchy
* generate classes from wsdl using axis-wsdl2java - subgoal wsdl2java
* generate classes from schema using castor - subgoal generate-adql
* transform deployment descriptor to refer to castor serialization mechanism (via xslt) - subgoal transform-wsdd
* munge axis-generated client stub to refer to castor classes (via search'n'replace, regexps) - subgoal munge-stub
* do similar for axis-generated skeleton and test too.
Result: rebuild generated/java src hierachy, wsdd/deploy.wsdd and wsdd/undeploy.wsdd
Requires:
* src/wsdl/AxisDataCenter.wsdl - web service descriptor
* src/xsd/AxisDataCenter.xsd - schema that defines types used in web service descriptor
* src/xsd/ADQLschema.xsd - schema for ADQL
* build/xslt/generate-wsdd.xsl - transformation for wsdd.
* build/patch/* - patches to apply
* build/castor-binding.xml - configuration for castor tasks
* build/subst.properties - set of search n replace terms.
	]]></description>
	<!-- ensure the directories exist, remove previously generated products -->
	<attainGoal name="clean-out" />
	<!-- generate java sources from wsdl -->
	<attainGoal name="wsdl2java" />
	<!-- delete the ones we don't want -->
	<attainGoal name="delete-surplus" />
	<!-- now call castor to generate ADQL object model -->
	<attainGoal name="generate-adql" />
	<!-- mangle the sources -->
	<attainGoal name="munge-files" />
   </goal>

   <goal name="clean-out">
   	<mkdir dir="${generated.src}" />
	<mkdir dir="${generate.wsdd}" />
  	<delete><!-- clean out all generated products-->
		<fileset dir="${generated.src}" >
			<include name="**/*.java" />
			<include name="**/*.class" />
			<include name="**/*.wsdd" />
		</fileset>
		<fileset dir="${generated.wsdd}">
			<include name="*.wsdd" />
		</fileset>
	</delete>
   </goal>

   <goal name="wsdl2java" prereqs="axis-declare-tasks">
  	<axis-wsdl2java output="${generated.src}" verbose="true" testcase="true"
		url="${basedir}/src/wsdl/AxisDataServer.wsdl"
		deployscope="Application" serverside="true" skeletondeploy="true">
		<mapping
			namespace="http://www.astrogrid.org/datacenter/It04/dataserver/v1"
			package="org.astrogrid.datacenter.axisdataserver" />
		<mapping
			namespace="http://www.astrogrid.org/datacenter/It04/dataserver/v1/types"
			package="org.astrogrid.datacenter.axisdataserver.types" />
		<mapping
	       		namespace="http://tempuri.org/adql"
	       		package="org.astrogrid.datacenter.adql.generated" />
	</axis-wsdl2java>

  </goal>

 <!-- wsdl2java dengerates too much - now have overlapping classes. delete the offenders -->
 <goal name="delete-surplus">
	<delete>
		<fileset dir="${generated.src}">
			<include name="**/*.java" />
			<exclude name="org/astrogrid/datacenter/axisdataserver/*.java" />
		</fileset>
	</delete>
   </goal>

  <goal name="generate-adql"  description="regenerate the ADQL object model">
	<!-- set up the classpath for the source generator tool -->
 	 <path id="castor.class.path"><!-- needed to override the default configuration file - ikky Castor.. -->
		<pathelement location="${basedir}/build/config" />
  		<path refid="maven.dependency.classpath" />
  	</path>
    	<delete quiet="true">
   		<fileset dir="${basedir}/generated/java/org/astrogrid/datacenter">
  	 		<include name="adql/generated/**/*.java" />
			<include name="axisdataserver/types/*.java" />
   		</fileset>
   	</delete>
	<!-- generate adql object model -->
  	<java fork="yes" classname="org.exolab.castor.builder.SourceGenerator" classpathref="castor.class.path">
  	  	<arg value="-i"/>
  	  	<arg file="${basedir}/src/xsd/ADQLschema.xsd" />
		<arg value="-binding-file" />
		<arg file="${basedir}/build/castor-binding.xml" />
  	  	<arg value="-dest" />
  	  	<arg file="${generated.src}" />
		<arg arg="-verbose" />
	</java>
	<!-- generate axis dataserver types -->
  	<java fork="yes" classname="org.exolab.castor.builder.SourceGenerator" classpathref="castor.class.path">
  	  	<arg value="-i"/>
		<arg file="${basedir}/src/xsd/AxisDataServer.xsd" />
		<arg value="-binding-file" />
		<arg file="${basedir}/build/castor-binding.xml" />
  	  	<arg value="-dest" />
  	  	<arg file="${generated.src}" />
		<arg arg="-verbose" />
 	  </java>
 	  <!-- now do some patching of the output - hope to do away with this in time. -->
 	  <patch patchfile="${basedir}/build/patch/groupByChoiceItem.patch" originalfile="${generated.src}/org/astrogrid/datacenter/adql/generated/GroupByChoiceItem.java"/>
 	  <patch patchfile="${basedir}/build/patch/selectionListChoiceItem.patch" originalfile="${generated.src}/org/astrogrid/datacenter/adql/generated/SelectionListChoiceItem.java"/>
	  <!-- now add 'extends AbstractQOM' to the generated classes  - only to those classes that don't already extend something else-->
	  <replaceregexp 	flags="s"
	  	match="(public class [^ ]+) (implements java.io.Serializable)"
		replace="\1 extends org.astrogrid.datacenter.adql.AbstractQOM \2">
		<fileset dir="${generated.src}/org/astrogrid/datacenter/adql/generated">
			<include name="*.java" />
		</fileset>
	  </replaceregexp>
  </goal>

 <goal name="munge-files" description="do all the search and replace work">
	<replace summary="true" replacefilterfile="${basedir}/build/subst.properties"
		 dir="${generated.src}/org/astrogrid/datacenter/axisdataserver/">
			<include name="*.java" />
			<include name="*.wsdd" />
	</replace>
		<!-- fix axis-wsdl bug - sometimes introduces spurious &gt; at start of strings -->
	<replaceregexp flags="sg" match='"&gt;([^"]+)"'	replace='"\1"' >
		  <fileset dir="${generated.src}/org/astrogrid/datacenter/axisdataserver/">
		  		<include name="*.java" />
		  	</fileset>
		</replaceregexp>
	<attainGoal name="transform-wsdd" />
	<attainGoal name="munge-stub" />
	<attainGoal name="munge-test" />
  </goal>

   <goal name="transform-wsdd">
   	<!-- hack from mailing list to fix Maven XLST bug -->
	${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
	<xslt basedir="${generated.src}/org/astrogrid/datacenter/axisdataserver"
	      includes="*.wsdd" style="${basedir}/build/xslt/generate-wsdd.xsl"
	      destdir="${generated.wsdd}" extension=".wsdd" />
	<!-- now a search and replace on class names -->
	<replace summary="true" file="${generated.wsdd}/deploy.wsdd" >
			<replacefilter
			token='org.astrogrid.datacenter.adql.generated.Comparison"'
			value='org.astrogrid.datacenter.adql.generated.types.Comparison"' />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.OrderDirection"
			value="org.astrogrid.datacenter.adql.generated.types.OrderDirection" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.AggregateFunction"
			value="org.astrogrid.datacenter.adql.generated.types.AggregateFunction" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.BinaryOperator"
			value="org.astrogrid.datacenter.adql.generated.types.BinaryOperator" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.UnaryOperator"
			value="org.astrogrid.datacenter.adql.generated.types.UnaryOperator" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.AllOrDistinct"
			value="org.astrogrid.datacenter.adql.generated.types.AllOrDistinct" />
	</replace>
	<!-- transform once more to create test version here.. -->
	<xslt style="${basedir}/build/xslt/generate-test-wsdd.xsl" in="${generated.wsdd}/deploy.wsdd" out="${generated.wsdd}/test-deploy.wsdd" />
   </goal>

   <goal name="munge-stub">
	<!-- now need to do some work on the stub file. -->
 	<property name="stub.file"
		location="${generated.src}/org/astrogrid/datacenter/axisdataserver/AxisDataServerSoapBindingStub.java" />
	<replace summary="true" file="${stub.file}" >
			<!-- first castor places some classes in the 'types' package. do a search and replace on the stub file, update referecnes -->
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.Comparison.class"
			value="org.astrogrid.datacenter.adql.generated.types.Comparison.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.OrderDirection.class"
			value="org.astrogrid.datacenter.adql.generated.types.OrderDirection.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.AggregateFunction.class"
			value="org.astrogrid.datacenter.adql.generated.types.AggregateFunction.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.BinaryOperator.class"
			value="org.astrogrid.datacenter.adql.generated.types.BinaryOperator.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.UnaryOperator.class"
			value="org.astrogrid.datacenter.adql.generated.types.UnaryOperator.class" />
		<replacefilter
			token="org.astrogrid.datacenter.adql.generated.AllOrDistinct.class"
			value="org.astrogrid.datacenter.adql.generated.types.AllOrDistinct.class" />
			<!-- add declarations of castor serializers -->
		<replacefilter
			token="javax.xml.namespace.QName qName;"
			value="javax.xml.namespace.QName qName;
			        java.lang.Class castorsf = org.apache.axis.encoding.ser.castor.CastorSerializerFactory.class;
       				java.lang.Class castordf = org.apache.axis.encoding.ser.castor.CastorDeserializerFactory.class;" />
	</replace>
	<!-- for declaration of castor classes, replace 2 lines with our own definitions.
	relies on axis-generated code following certain pattern. -->
	<replaceregexp 	file="${stub.file}" flags="sg"
		match="(cls = org\.astrogrid\.datacenter\.adql\.generated\.[^\n]+\n)([^\n]+\n)([^\n]+\n)([^\n]+\n)"
		replace="\1\2
			cachedSerFactories.add(castorsf);
			cachedDeserFactories.add(castordf);

			"/>
	<!-- do the same for the web service types too -->
	<replaceregexp 	file="${stub.file}" flags="sg"
		match="(cls = org\.astrogrid\.datacenter\.axisdataserver\.types\.[^\n]+\n)([^\n]+\n)([^\n]+\n)([^\n]+\n)"
		replace="\1\2
			cachedSerFactories.add(castorsf);
			cachedDeserFactories.add(castordf);

			"/>
  </goal>


	<goal name="munge-test">
		<property name="test.file"
			location="${generated.src}/org/astrogrid/datacenter/axisdataserver/AxisDataServerServiceTestCase.java" />
		<replace summary="true" file="${test.file}">
				<!-- alter where the test class looks for a running server -->
			<replacefilter
				token="getAxisDataServer()"
				value='getAxisDataServer(serviceURL)' />
				<!-- now need to insert 'serviceURL' as a member field -->
			<replacefilter
				token="extends junit.framework.TestCase {"
				value="extends junit.framework.TestCase {
				    protected java.net.URL serviceURL;" />
		    <!-- alter how Select objects are created -->
		    <replacefilter
		    	token="new org.astrogrid.datacenter.adql.generated.Select()"
		    	value="org.astrogrid.datacenter.adql.ADQLUtils.buildMinimalQuery()" />
			<!-- do same for query object -->
		    <replacefilter
		    	token="new org.astrogrid.datacenter.axisdataserver.types.Query()"
			value="org.astrogrid.datacenter.common.QueryHelper.buildMinimalQuery()" />
		</replace>
	</goal>

<!--
boilerplate below here
-->
  <goal name="axis-declare-tasks">
      <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>


</project>
