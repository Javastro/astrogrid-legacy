<?xml version="1.0" ?>
<!-- extension maven script -->
<project xmlns:j="jelly:core" xmlns:ant="jelly:ant"   xmlns:doc="doc" xmlns:util="jelly:util" xmlns:maven="jelly:maven" xmlns:deploy="deploy" default="jar:jar">

<!-- location of generated source tree -->
<property name="generated.src" location="${basedir}/generated/java" />
<property name="generated.wsdd" location="${basedir}/generated/wsdd" />

<!-- hook to add in generated sources -->
<preGoal name="java:compile">
	<mkdir dir="${generated.src}" />
	<path id="generated.src.path" location="${generated.src}" />
	<maven:addPath id="maven.compile.src.set" refid="generated.src.path" />
</preGoal>

<!--
new goals
-->

  <goal name="generate-delegate" description="generate classes from wsdl" prereqs="axis-declare-tasks">
  	<description><![CDATA[
generate java classes for delegate and server from a hand-written wsdl file.
Outline:
* remove all sources in the generated/java src hierarchy
* generate classes from wsdl using axis-wsdl2java - subgoal wsdl2java
* generate classes from schema using castor - subgoal generate-adql
* transform deployment descriptor to refer to our implementation class - subgoal transform-wsdd
* do similar for axis-generated skeleton and test too.
Result: rebuild generated/java src hierachy, wsdd/deploy.wsdd and wsdd/undeploy.wsdd
Requires:
* src/wsdl/AxisDataCenter.wsdl - web service descriptor
* src/xsd/AxisDataCenter.xsd - schema that defines types used in web service descriptor
* src/xsd/ADQLschema.xsd - schema for ADQL
* build/xslt/generate-wsdd.xsl - transformation for wsdd.
* build/patch/* - patches to apply
* build/castor-binding.xml - configuration for castor tasks
	]]></description>
	<!-- ensure the directories exist, remove previously generated products -->
	<attainGoal name="clean-out" />
	<!-- generate java sources from wsdl -->
	<attainGoal name="wsdl2java" />
	<!-- delete the ones we don't want -->
	<attainGoal name="delete-surplus" />
	<!-- now call castor to generate ADQL object model -->
	<attainGoal name="generate-adql" />
	<!-- mangle the sources -->
	<attainGoal name="munge-files" />
   </goal>

   <goal name="clean-out">
   	<mkdir dir="${generated.src}" />
	<mkdir dir="${generate.wsdd}" />
  	<delete><!-- clean out all generated products-->
		<fileset dir="${generated.src}" >
			<include name="**/*.java" />
			<include name="**/*.class" />
			<include name="**/*.wsdd" />
		</fileset>
		<fileset dir="${generated.wsdd}">
			<include name="*.wsdd" />
		</fileset>
	</delete>
   </goal>

   <goal name="wsdl2java" prereqs="axis-declare-tasks">
  	<axis-wsdl2java output="${generated.src}" verbose="true" testcase="true"
		url="${basedir}/src/wsdl/AxisDataServer.wsdl"
		deployscope="Application" serverside="true" skeletondeploy="true">
		<mapping
			namespace="http://www.astrogrid.org/datacenter/It04/dataserver/v1"
			package="org.astrogrid.datacenter.axisdataserver" />
		<mapping
			namespace="http://www.astrogrid.org/datacenter/It04/dataserver/v1/types"
			package="org.astrogrid.datacenter.axisdataserver.types" />
		<mapping
	       		namespace="http://tempuri.org/adql"
	       		package="org.astrogrid.datacenter.adql.generated" />
	</axis-wsdl2java>

  </goal>

 <!-- wsdl2java generates too much - now have overlapping classes. delete the offenders -->
 <goal name="delete-surplus">
	<delete>
		<fileset dir="${generated.src}">
			<include name="**/*.java" />
			<exclude name="org/astrogrid/datacenter/axisdataserver/**/*.java" />
		</fileset>
	</delete>
   </goal>

  <goal name="generate-adql"  description="regenerate the ADQL object model">

    <delete quiet="true">
   		<fileset dir="${basedir}/generated/java/org/astrogrid/datacenter">
  	 		<include name="adql/generated/**/*.java" />
   		</fileset>
   	</delete>
	<!-- generate adql object model -->
  	<java fork="yes" classname="org.exolab.castor.builder.SourceGenerator" classpathref="maven.dependency.classpath">
  	  	<arg value="-i"/>
  	  	<arg file="${basedir}/src/xsd/ADQLschema.xsd" />
		<arg value="-binding-file" />
		<arg file="${basedir}/build/castor-binding.xml" />
  	  	<arg value="-dest" />
  	  	<arg file="${generated.src}" />
		<arg arg="-verbose" />
	</java>
 	  <!-- now do some patching of the output - hope to do away with this in time. -->
 	  <patch patchfile="${basedir}/build/patch/groupByChoiceItem.patch" originalfile="${generated.src}/org/astrogrid/datacenter/adql/generated/GroupByChoiceItem.java"/>
 	  <patch patchfile="${basedir}/build/patch/selectionListChoiceItem.patch" originalfile="${generated.src}/org/astrogrid/datacenter/adql/generated/SelectionListChoiceItem.java"/>
	  <!-- now add 'extends AbstractQOM' to the generated classes  - only to those classes that don't already extend something else-->
	  <replaceregexp 	flags="s"
	  	match="(public class [^ ]+) (implements java.io.Serializable)"
		replace="\1 extends org.astrogrid.datacenter.adql.AbstractQOM \2">
		<fileset dir="${generated.src}/org/astrogrid/datacenter/adql/generated">
			<include name="*.java" />
		</fileset>
	  </replaceregexp>
  </goal>

 <goal name="munge-files" description="do all the search and replace work">

		<!-- fix axis-wsdl bug - sometimes introduces spurious &gt; at start of strings -->
	<replaceregexp flags="sg" match='"&gt;([^"]+)"'	replace='"\1"' >
		  <fileset dir="${generated.src}/org/astrogrid/datacenter/axisdataserver/">
		  		<include name="*.java" />
		  	</fileset>
		</replaceregexp>
	<attainGoal name="transform-wsdd" />
	<attainGoal name="munge-test" />
  </goal>

   <goal name="transform-wsdd">
   	<!-- hack from mailing list to fix Maven XLST bug -->
	${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}

	<xslt basedir="${generated.src}/org/astrogrid/datacenter/axisdataserver"
	      includes="*.wsdd" style="${basedir}/build/xslt/generate-wsdd.xsl"
	      destdir="${generated.wsdd}" extension=".wsdd" />
	<!-- transform once more to create test version here.. -->
	<xslt style="${basedir}/build/xslt/generate-test-wsdd.xsl" in="${generated.wsdd}/deploy.wsdd" out="${generated.wsdd}/test-deploy.wsdd" />
   </goal>

	<goal name="munge-test">
		<property name="test.file"
			location="${generated.src}/org/astrogrid/datacenter/axisdataserver/AxisDataServerServiceTestCase.java" />
		<replace summary="true" file="${test.file}">
				<!-- alter where the test class looks for a running server -->
			<replacefilter
				token="getAxisDataServer()"
				value='getAxisDataServer(serviceURL)' />
				<!-- now need to insert 'serviceURL' as a member field -->
			<replacefilter
				token="extends junit.framework.TestCase {"
				value="extends junit.framework.TestCase {
				    protected java.net.URL serviceURL;" />
		    <!-- alter how Select objects are created -->
		    <replacefilter
		    	token="new org.astrogrid.datacenter.adql.generated.Select()"
		    	value="org.astrogrid.datacenter.adql.ADQLUtils.buildMinimalQuery()" />
			<!-- do same for query object -->
		    <replacefilter
		    	token="new org.astrogrid.datacenter.axisdataserver.types._query()"
			value="org.astrogrid.datacenter.axisdataserver.types.QueryHelper.buildMinimalQuery()" />
		</replace>
	</goal>

<!-- documentation related tasks -->

<!-- copy schemas into site documentation directory -->
<postGoal name="xdoc:copy-resources">
	<echo>Copying Schemas into documentation set</echo>
	<copy todir="${maven.docs.dest}" flatten="true">
		<fileset dir="${basedir}/src">
			<include name="**/*.xsd" />
			<incude name="**/*.wsdl" />
		</fileset>
	</copy>
</postGoal>

<!-- run javadoc over both source trees -->

<!-- removes previously generated javadocs, and does javadoc again including generated sources too -->
<postGoal name="maven-javadoc-plugin:report">
	<attainGoal name="xdoc:init" />
<!-- lifted from the javadoc plugin code -->
      <!-- Get the year to display in the Javadocs -->
      <ant:tstamp>
         <ant:format property="currentYear" pattern="yyyy"/>
      </ant:tstamp>
      <ant:tstamp>
        <j:choose>
          <j:when test="${pom.inceptionYear.equals(currentYear)}">
            <ant:format property="year" pattern="yyyy"/>
          </j:when>
          <j:otherwise>
            <ant:format property="year" pattern="${pom.inceptionYear}-yyyy"/>
          </j:otherwise>
        </j:choose>
      </ant:tstamp>

      <ant:property name="copyright"
        value="Copyright &amp;copy; ${year} ${pom.organization.name}. All Rights Reserved." />

      <!-- calculate online/offline mode -->
      <j:set var="online" value="${maven.javadoc.mode.online}"/>
      <j:if test="${empty(online)}">
        <j:set var="online" value="${maven.mode.online}"/>
      </j:if>

      <j:choose>
        <j:when test="${online}">
          <util:tokenize var="links" delim="," trim="true">${maven.javadoc.links}</util:tokenize>
          <j:forEach var="link" items="${links}">
            <ant:echo>Linking with API information from ${link.trim()} ...</ant:echo>
          </j:forEach>
        </j:when>
        <j:otherwise>
          <util:tokenize var="links" delim="," trim="true">${maven.javadoc.offlineLinks}</util:tokenize>
          <j:forEach var="link" items="${links}">
            <ant:echo>Linking offline API information from ${link.trim()} ...</ant:echo>
          </j:forEach>
        </j:otherwise>
      </j:choose>

      <j:set var="maxMemory" value="${maven.javadoc.maxmemory}" />

      <ant:mkdir dir="${maven.build.dir}/javadoc/" />
      <ant:record name="${maven.build.dir}/javadoc/report.txt" action="start" />

      <ant:javadoc
        packagenames="${pom.package}.*"
        destdir="${maven.docs.dest}/apidocs"
        author="${maven.javadoc.author}"
        public="false"
        package="true"
        private="false"
        version="${maven.javadoc.version}"
        use="${maven.javadoc.use}"
        windowtitle="${pom.name} ${pom.currentVersion} API"
        doctitle="${pom.name} ${pom.currentVersion} API"
		sourcepath="${basedir}/src/java:${generated.src}"
        bottom="${copyright}">
		<!--
        stylesheetfile="${maven.javadoc.stylesheet}"
        additionalparam="${maven.javadoc.additionalparam}"
        useexternalfile="${maven.javadoc.useexternalfile}"
		-->
        <j:if test="${context.getVariable('maven.javadoc.source') != null}">
          <ant:setProperty name="source" value="${maven.javadoc.source}" />
        </j:if>

        <!-- Process/Parse links -->
        <!-- This code allows to specify a packagelistLoc even when in online mode -->
        <j:forEach var="link" items="${links}">
          <j:set var="pos" value="${link.indexOf('#')}" />

          <!-- set href and packagelistLoc -->
          <j:choose>
            <!-- I am bad with jelly, the test is: "pos == -1" -->
            <j:when test="${1+pos == 0}">
              <j:set var="href" value="${link.trim()}" />
              <j:set var="packagelistLoc" value="${href}"/>
            </j:when>
            <j:otherwise>
              <j:set var="href" value="${link.substring(0,pos).trim()}"/>
              <j:set var="packagelistLoc" value="${link.substring(pos).substring(1).trim()}"/>
            </j:otherwise>
          </j:choose>

          <!-- generate the link -->
          <j:choose>
            <j:when test="${online}" />
              <ant:link href="${href}" offline="false" packagelistLoc="${packagelistLoc}" />
            <j:otherwise />
              <ant:link href="${href}" offline="true"  packagelistLoc="${packagelistLoc}" />
          </j:choose>
        </j:forEach>

        <ant:classpath>
          <ant:path refid="maven.dependency.classpath"/>
          <ant:path location="${maven.build.dest}"/>
        </ant:classpath>

        <j:if test="${context.getVariable('maven.javadoc.overview') != null}">
          <ant:setProperty name="overview" value="${maven.javadoc.overview}" />
        </j:if>

        <j:if test="${maxMemory != null}">
          <ant:setProperty name="maxmemory" value="${maven.javadoc.maxmemory}" />
        </j:if>

        <j:forEach var="packageGroup" items="${pom.packageGroups}">
          <ant:group title="${packageGroup.title}" packages="${packageGroup.packages}"/>
        </j:forEach>

        <!-- allow custom doclets -->
        <j:if test="${context.getVariable('maven.javadoc.doclet') != null}">
          <ant:setProperty name="doclet" value="${maven.javadoc.doclet}" />
        </j:if>
        <j:if test="${context.getVariable('maven.javadoc.docletpath') != null}">
          <ant:setProperty name="doclet" value="${maven.javadoc.docletpath}" />
        </j:if>

        <!-- allow custom tags -->
        <util:tokenize var="listOfTags" delim=" ">${maven.javadoc.customtags}</util:tokenize>
        <j:forEach var="someTag" items="${listOfTags}">
          <j:set var="nameVar" value="${someTag}.name"/>
          <j:set var="name" value="${context.findVariable(nameVar)}"/>
          <j:set var="descriptionVar" value="${someTag}.description"/>
          <j:set var="description" value="${context.findVariable(descriptionVar)}"/>
          <j:set var="enabledVar" value="${someTag}.enabled"/>
          <j:set var="enabled" value="${context.findVariable(enabledVar)}"/>
          <j:set var="scopeVar" value="${someTag}.scope"/>
          <j:set var="scope" value="${context.findVariable(scopeVar)}"/>
          <ant:tag name="${name}" description="${description}"
               enabled="${enabled}" scope="${scope}"/>
        </j:forEach>

      </ant:javadoc>
      <ant:record name="${maven.build.dir}/javadoc/report.txt" action="stop" />

      <j:set var="genDocs" value="${maven.gen.docs}" />
      <doc:text-xdoc
        title="Javadoc Report"
        section="Javadoc Report"
        inputFile="${maven.build.dir}/javadoc/report.txt"
        output="${genDocs}/javadoc.xml"/>

</postGoal>


<!--
boilerplate below here
-->
  <goal name="axis-declare-tasks">
      <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>


</project>
