<?xml version="1.0" ?>
<!-- extension maven script -->
<project xmlns:j="jelly:core"  xmlns:u="jelly:util" xmlns:maven="jelly:maven" xmlns:deploy="deploy" default="pal">


<property name="server.dir" location="${basedir}/../server" />
<property name="delegate.dir" location="${basedir}/../client" />
<property name="implementations.dir" location="${basedir}/../implementations" />
<property name="webapp.root" location="${basedir}/target/pal" />
<property name="webapp.docs" location="${basedir}/target/webapp-docs" />
<property name="working.dir" location="${basedir}/target/tmp" />
<property name="tomcat.path" value="/pal" />
<goal name="pal" prereqs="clean,site,webapp-site,war:war" />


<!-- hook to add our own things to the mix -->
<preGoal name="war:war">
	<copy todir="${webapp.root}" overwrite="yes">
		<fileset dir="${webapp.docs}" />
	</copy>
	<attainGoal name="grab-delegate" />
	<attainGoal name="grab-server" />
	<attainGoal name="grab-implementations" />
        <attainGoal name="grab-ogsadai-app"/>
</preGoal>

<goal name="webapp-site" prereqs="configure-webapp"
	description="generate webapp docs to a temp direcotry, for inclusion later in webapp - work around for a bug that stops build">

	<echo> generating webapp site into ${webapp.docs}" </echo>
	<!-- first merge two doc sets - site xdocs take precendence  -->
	<property name="tmp.docs" location="${basedir}/target/webapp-docs-src" />
	<mkdir dir="${tmp.docs}" />
	<copy todir="${tmp.docs}">
		<fileset dir="${basedir}/site-xdocs" />
	</copy>
	<copy overwrite="false" todir="${tmp.docs}">
		<fileset dir="${basedir}/xdocs" />
	</copy>
	<!-- now copy in schema n stuff -->
	<copy overwrite="false" todir="${tmp.docs}">
		<fileset dir="${working.dir}">
			<include name="wsdl/**" />
			<include name="xsd/**" />
			<include name="wsdd/**" />
		</fileset>
	</copy>
	<j:set var="maven.docs.dest" value="${webapp.docs}" />
	<j:set var="maven.docs.src" value="${tmp.docs}" />
	<j:set var="maven.xdoc.poweredby.title" value="Provided by Astrogrid" />
	<j:set var="maven.xdoc.poweredby.url" value="http://www.astrogrid.org" />
	<j:set var="maven.xdoc.poweredby.image" value="http://www.astrogrid.org/images/AGlogo" />
	<j:set var="maven.ui.banner.background" value="#FF0000" />
	<j:set var="maven.ui.banner.foreground" value="#000000" />
	<mkdir dir="${webapp.docs}" />
	<attainGoal name="site:generate" />
</goal>

<goal name="grab-delegate"  description="generate source and binary dists of the delegate, place in webapp, along with javadoc">
	<mkdir dir="${webapp.root}/delegate-dist" />
	<copy todir="${webapp.root}/delegate-dist">
		<fileset dir="${delegate.dir}/target/distributions">
			<include name="*.zip" />
		</fileset>
	</copy>
	<!-- maybe add bundle of the libs it depends on too??? -->
</goal>


<goal name="grab-server" description="generate site and source dists of the server. place source dist and javadoc of server in webapp">

	<mkdir dir="${webapp.root}/server" />
	<copy todir="${webapp.root}/server">
		<fileset dir="${server.dir}/target/astrogrid-datacenter-server-HEAD/bin/astrogrid-datacenter-server-HEAD/docs" />
	</copy>
	<mkdir dir="${webapp.root}/server-dist"/>
	<copy todir="${webapp.root}/server-dist">
		<fileset dir="${server.dir}/target/distributions" >
			<include name="*.zip" />
		</fileset>
	</copy>
</goal>



<goal name="grab-implementations" description="generate source and binary dists of the implementations, unzip into webapp.">

	<mkdir dir="${webapp.root}/implementations" />
	<unzip dest="${webapp.root}/implementations" >
		<fileset dir="${implementations.dir}">
			<include name="*/*/distributions/*.zip" />
		</fileset>
	</unzip>
</goal>


<goal name="grab-ogsadai-app"
      description="copy the executable jar used for talking to OGSA-DAI">
	<j:forEach var="deps" items="${pom.artifacts}">
		<j:if test="${deps.dependency.artifactId=='astrogrid-ogsadai-app'}">
			<copy file="${deps.path}" 
                              todir="${basedir}/target/pal/WEB-INF/classes"/>
		</j:if>
	</j:forEach>
</goal>


<goal name="configure-webapp" description="set properties in web.xml, server-config.wsdd, etc">
	<echo> grabbing schema from client.jar</echo>
	<!-- patch server-config with wsdd file contained in client.jar -->
	<mkdir dir="${working.dir}" />
	<deploy:copy-deps todir="${working.dir}" />
	<unjar dest="${working.dir}" overwrite="true">
		<fileset dir="${working.dir}">
			<include name="*client*.jar" />
		</fileset>
		<patternset>
			<include name="wsdd/**" />
			<include name="xsd/**" />
			<include name="wsdl/**" />
		</patternset>
	</unjar>
	<delete>
		<fileset dir="${working.dir}">
			<include name="*.jar" />
		</fileset>
	</delete>
  	<!-- hack from mailing list to fix Maven XLST bug -->
	${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
	<xslt in="${working.dir}/wsdd/deploy.wsdd"
	      out="${webapp.root}/WEB-INF/server-config.wsdd"
	      extension=".wsdd"
	      style="${basedir}/build/server-config.xsl"
	/>
</goal>

<!-- tasks to help development -->

<!-- deploy freshly-built pal to local server -->

<goal name="pal-undeploy" prereqs="tomcat-declare-tasks">
  <tomcat-remove url="${tomcat.endpoint}" username="${tomcat.username}" password="${tomcat.password}"
  	path="${tomcat.path}" />
</goal>


<goal name="pal-deploy" prereqs="tomcat-declare-tasks">
  <tomcat-deploy url="${tomcat.endpoint}" username="${tomcat.username}" password="${tomcat.password}"
  	path="${tomcat.path}" war="file://${basedir}/target/pal.war"/>
</goal>

<!--
boilerplate below here
-->
  <goal name="axis-declare-tasks">
      <taskdef resource="axis-tasks.properties"  classpathref="maven.dependency.classpath" />
  </goal>

<goal name="tomcat-declare-tasks">
   <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="tomcat-deploy"    classname="org.apache.catalina.ant.DeployTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-install"   classname="org.apache.catalina.ant.InstallTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-list"      classname="org.apache.catalina.ant.ListTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-reload"    classname="org.apache.catalina.ant.ReloadTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-remove"    classname="org.apache.catalina.ant.RemoveTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-roles"     classname="org.apache.catalina.ant.RolesTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-start"     classname="org.apache.catalina.ant.StartTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-stop"      classname="org.apache.catalina.ant.StopTask" classpathref="maven.dependency.classpath"/>
  <taskdef name="tomcat-undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpathref="maven.dependency.classpath"/>
</goal>



</project>
