<?xml version="1.0" encoding="iso-8859-1"?>
<project>
  <extend>${basedir}/../build/project-base.xml</extend>
  <!-- the version of maven's project object model -->
  <pomVersion>3</pomVersion>
  <!-- a unique name for this project -->
  <artifactId>pal</artifactId>
  <name>Publishers Astrogrid Library</name>
  <description>
    <![CDATA[ <p> An Astrogrid datacenter published a collection of astronomical data on the Astrogrid. </p><p> PAL contains everything you need to install a data center, wrapped up in one big bundle. </p> <section name="Build"> <p> <i>See parent project for fuller instructions</i> </p><p> To build PAL by hand, you need to build all its prerequisites - the jars it depends on, plus the javadocs and dist bundles it grabs. Do the following: </p><p> <code> $ cd datacenter<br /> $ maven multiproject:clean ; maven multiproject:site ; maven jar:install-snapshot<br /> </code> then go and have a cup of coffee </p><p> The result is a pal-SNAPSHOT, which is left in your local repository. Usually <tt>~/.maven/repository/astrogrid-datacenter/wars/pal-SNAPSHOT.war</tt> </p> <subsection name="Hacking with PAL"><p> The full build above takes a long time to finish - not good if you're tinkering with the packaging of PAL itself. However, once you've run the recipe once, the required resources are present. You can then rebuild PAL using the existing resources by: </p><p> <code> $ cd datacenter/pal<br /> $ maven pal <br /> </code> </p><p> Note however, that the result of this build is put in a different place - <tt>datacenter/pal/target/pal.war</tt> </p> </subsection> <subsection name="Other goals"><p> <b>pal-deploy / pal-undeploy</b><br /> The pal project provides goals to deploy / undeploy <tt>datacenter/pal/target/pal.war</tt> to a tomcat webserver using tomcat's manager tool. This can be handy for testing. </p><p> You need to set some variables for this to work. Its probably best to put them in <tt>~/build.properties</tt>. </p><p> <code> tomcat.endpoint=http://localhost:8080/manager<br /> tomcat.username=noel<br /> tomcat.password=secret<br /> </code> </p></subsection> </section> ]]>
  </description>

  <!-- must be on a single line -->
  <shortDescription>Publishers Astrogrid Library</shortDescription>

  <!-- jar files the project is dependent on other, really common dependencies are inherited from ../build/project-base.xml -->
  <dependencies>
    <!-- distros from subprojects -->
    <dependency>
        <groupId>org.astrogrid</groupId>
        <artifactId>astrogrid-datacenter-client</artifactId>
        <version>${pom.currentVersion}</version>
        <type>zip</type>
        <properties>
                <war.target.path>client-dist</war.target.path>
        </properties>
    </dependency>
    <!-- not right for main project to be dependent on these
    <dependency>
        <groupId>org.astrogrid</groupId>
        <artifactId>cdsdelegate</artifactId>
        <version>${pom.currentVersion}</version>
        <type>zip</type>
        <properties>
                <war.target.path>implementations</war.target.path>
        </properties>
    </dependency>
    <dependency>
        <groupId>org.astrogrid</groupId>
        <artifactId>secdelegate</artifactId>
        <version>${pom.currentVersion}</version>
        <type>zip</type>
        <properties>
                <war.target.path>implementations</war.target.path>
        </properties>
    </dependency>
    -->

 <!-- astrogrid library components -->
    <dependency><!-- NWW - hack - necessary to give this one a 'fake' name to force maven to grab this, and the associated dist.zip file -->
      <groupId>org.astrogrid</groupId>
      <artifactId>astrogrid-datacenter-client-jar</artifactId>
      <version>${pom.currentVersion}</version>
      <type>jar</type>
      <jar>astrogrid-datacenter-client-${pom.currentVersion}.jar</jar>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <!-- used to send results -->
    <dependency>
      <groupId>org.astrogrid</groupId>
      <artifactId>astrogrid-store-client</artifactId>
      <version>${astrogrid.mySpace.version}</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <!-- community for resolving IVORNs for sending results -->
    <dependency>
      <groupId>org.astrogrid</groupId>
      <artifactId>astrogrid-community-common</artifactId>
      <version>${astrogrid.community.version}</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <dependency>
      <groupId>org.astrogrid</groupId>
      <artifactId>astrogrid-community-client</artifactId>
      <version>${astrogrid.community.version}</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <dependency>
      <groupId>org.astrogrid</groupId>
      <artifactId>astrogrid-community-resolver</artifactId>
      <version>${astrogrid.community.version}</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <dependency>
      <groupId>org.astrogrid</groupId>
      <artifactId>astrogrid-jes-delegate</artifactId>
      <version>${astrogrid.jes.version}</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <!-- cea -->
    <dependency>
      <artifactId>astrogrid-cea-server</artifactId>
      <groupId>org.astrogrid</groupId>
      <version>${astrogrid.applications.version}</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <dependency>
      <artifactId>astrogrid-workflow-objects</artifactId>
      <groupId>org.astrogrid</groupId>
      <version>${astrogrid.workflowobjects.version}</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <!-- registry for resolving IVORNs etc and pushing metadata -->
    <dependency>
      <artifactId>astrogrid-registry-client-lite</artifactId>
      <groupId>org.astrogrid</groupId>
      <version>${astrogrid.registry.version}</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
  	
    <dependency>
      <artifactId>astrogrid-registry-common</artifactId>
      <groupId>org.astrogrid</groupId>
      <version>${astrogrid.registry.version}</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <!-- exist db for fits plugin? -->
    <dependency>
      <groupId>org.astrogrid</groupId>
      <artifactId>astrogrid-exist-server</artifactId>
         <version>${astrogrid.eXist.version}</version>
      <type>jar</type>
      <url>http://www.astrogrid.org/</url>
      <properties>
         <war.bundle>true</war.bundle>
      </properties>
    </dependency>
  	
    <dependency>
        <artifactId>commons-httpclient</artifactId>
        <groupId>commons-httpclient</groupId>
        <version>2.0-beta1</version>
        <properties>
            <war.bundle>true</war.bundle>
        </properties>        	
    </dependency>  	

    <!-- dsa back ends -->
    <!-- again, has a fake artifactId, so we can depend on the jar and zip -->
    <!-- not right for main project to be dependent on implementation
    <dependency>
      <groupId>org.astrogrid</groupId>
      <artifactId>cdsdelegate-jar</artifactId>
      <version>${pom.currentVersion}</version>
      <type>jar</type>
      <jar>cdsdelegate-${pom.currentVersion}.jar</jar>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>

    <dependency>
      <groupId>org.astrogrid</groupId>
      <artifactId>secdelegate-jar</artifactId>
      <version>${pom.currentVersion}</version>
      <type>jar</type>
      <jar>secdelegate-${pom.currentVersion}.jar</jar>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    -->

    <!-- needs to be in WEB-INF/classes, apparently.-->
    <!-- unused - but only commented out as it may be used again later
    <dependency>
      <groupId>org.astrogrid</groupId>
      <type>jar</type>
      <artifactId>astrogrid-ogsadai-app</artifactId>
      <version>${pom.currentVersion}</version>
        <properties>
          <war.target.path>WEB-INF/classes</war.target.path>
        </properties>
    </dependency>
    -->

    <!-- supporting libraries -->
    <!-- JavaMail -->
    <dependency>
      <id>JavaMail</id>
      <version>UNKNOWN</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
      <jar>JavaMail.jar</jar>
    </dependency>
    <dependency>
      <id>picocontainer</id>
      <version>1.0</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <!-- concurrency lib - for thread pools, factories, queues, etc. -->
    <dependency>
      <id>concurrent</id>
      <version>1.3.1</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <dependency>
      <id>breezetk</id>
      <version>UNKNOWN</version>
      <jar>breezetk.jar</jar>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <dependency>
      <id>VOTableUtil</id>
      <version>UNKNOWN</version>
      <jar>VOTableUtil.jar</jar>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <dependency>
      <id>junitee</id>
      <version>1.8</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <!-- sun's activation jar. we need to include it, as tomcat 5 lacks it -->
    <dependency>
      <id>activation</id>
      <version>1.0.2</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>

    <!-- servlet support (for compiling against - no need for deployment war as servlet container should have it) -->
    <dependency>
      <id>servletapi</id>
      <version>2.3</version>
      <properties>
        <war.bundle>false</war.bundle>
      </properties>
    </dependency>


    <!-- hsqldb - for testing -->
    <dependency>
      <id>hsqldb</id>
      <version>1.7.1</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>

    <dependency>
      <id>log4j</id>
      <version>1.2.8</version>
      <properties>
        <war.bundle>true</war.bundle>
      </properties>
    </dependency>
    <!-- catalina-ant - used for test deployments to local tomcat -->
    <dependency>
      <id>catalina-ant</id>
      <version>4.1.24</version>
    </dependency>
  </dependencies>

</project>
