<?xml version="1.0" ?>
<document>
<properties>
   <author email="nw@jb.man.ac.uk">Noel Winstanley</author>
   <title>Datacenter Configuration</title>
</properties>

<body>
<section name="Configuring your Datacenter">

<p>Datacenters are configured using the same system as most other Astrogrid
components.</p>
<p>When initially installed, a datacenter reads its configurations from the
'default.properties' file in its context's WEB-INF/classes directory.  This file
is overwritten whenever you upgrade PAL, so it is useful as a template but we
do not recommend you edit it directly.</p>
<p>Instead, you can create a new file (or edit the existing one if you have other
Astrogrid components already installed) 'astrogrid.properties'
and make sure this is in your classpath; a suitable place on Tomcat might be
the common/classes directory so it is not overwritten on updates.</p>
<p>If you want to place your configuration file somewhere specific, do so and
then set the environment variable 'astrogrid.config.filename' to the appropriate path and
filename, or the environment variable 'astrogrid.config.url' to the appropriate URL.
  You can use environment variables in this variable, eg ${catalina.home}/conf/datacenter.properties
will cause the datacenter to look in tomcat's configuration directory if you are running tomcat.</p>
<p>If you have several datacenters it will be necessary to do this, and set the
environment variable under each context to a different properties file.</p>
<p>If you are using Tomcat, you can change environment variables by editing the 'Environment Entries'
as a Tomcat Administrator, or editing the server.xml file to define them.</p>
<p>You will need to restart the application after any change to a configuration file.</p>

</section>

<section name="The Configuration File">

<p>This file consists of <i>key</i>=<i>value</i> lines. Any line starting with <tt>#</tt>
are comments and are ignored by the application.</p>

<p>The default file is <tt>WEB-INF/classes/default.properties</tt>.  This
configures the datacenter to use a 'test' or 'dummy' dataset, so you can run
test queries on it before connecting up to a real dataset.</p>

</section>

<section name="Connecting to an RDBMS">

<p>Many datasets are stored in Relational Database Management Systems (RDBMSs) such as SQL
Server, Postgres, etc.  PAL includes mechanisms to connect to any RDBMS that provides a
    <a href="http://java.sun.com/products/jdbc/">JDBC</a> driver; it has been tested with the following
   <ul>
      <li><a href="http://www.mysql.com/">MySQL</a> - the MM-MySQL JDBC
         Driver </li>
      <li><a href="http://hsqldb.sourceforge.net/">HSQL</a> - pure-Java
         RDBMS. For testing purposes or serving small databases based on
         textfiles. </li>
   </ul>
   </p>

<subsection name="Preparing your database">
  <p>
   Many RDBMS have a user account system, where different accounts may be provided with different acces privileges to the database.
    If this is the case with your target RDBMS, we recommend that a new user account be created for the datacenter service.
   <p />
   The datacenter account should only have read / query privileges granted. <b>Do not</b> grant permissions to write to
   tables / create tables / delete tables, or to access other databases or tables than those that are to be published -
   these abilities are not needed and present a security risk.
   <p />
   You may also wish to consider making a duplicate of the original data collection database, or even running a separate
   RDBMS server on a different machine specifically for access from web-services.
   </p>
</subsection>

<subsection name="Jdbc Plugins">

   <p>You now need to configure PAL to use the JDBC 'plugin', and to handle
   the right 'flavour' of SQL.</p>
   <p>The 'standard' SQL plugin is JdbcPlugin, and using this will work with most
   ODBC compatible databases. Some however take a particular flavour of SQL, and so
   you may want to use a different translator.  See the example default file
   for the keys to set for this.</p>
   <p>If none of these pre-defined translators are suitable, it is possible to write a new translator and plug it in.
   However, this is beyond the scope of this document; refer to SqlMaker.java in the source java doc.</p>
</subsection>

<subsection name="Install JDBC Driver">
   <p>
   Acquire the jar file containing the JDBC driver for your chosen database and copy it (along with any other jars it depends upon) into the
   <tt>${CATALINA_HOME}/common/lib</tt> directory.
   </p>
</subsection>

<subsection name="JDBC Connection">
   <p>Your database must have an ODBC-compatible connection; this will allow PAL to connect
   to it using a special URL and probably a user id and password.  You will need to
   set up the user id and password on the database ODBC connection so that PAL can
   connect to it using the same ones each time.</p>
   <p>The connection between the datacenter server and database can either be specified as a direct connection (simpler)
   or as a server connection (more efficient and robust). We recommend the second method where possible.</p>
   
   <p><b>Direct Connection</b></p>
   <p>In this configuration the datacenter manages its own connections to the database.
   You add the above url and user and password values to the configuration
   file (see the <a href="WEB-INF/classes/default.properties">example default</a> for
   which keys to use).</p>
   <p>You will also need some JDBC java drivers for the database; these are provided
   by the database vendors as 'jar' files, and will need to be included in the classpath
   (for example, in the common/lib directory of tomcat). You need to add these to the
   configuration file (again, see the example default).</p>
   
   <p><b>Server Connection</b></p>
   
   <p>Alternatively, you can set up a JNDI datasource using your web service, such
   as the Administrator Tool if you are using Tomcat.</p>
   
</subsection>

</section>

<section name="Creating a Warehouse">
<p>TBD</p>
</section>

<section name="Publishing FITS files">
<p>TBD</p>
</section>

<section name="Multiple PALs">
<p>
You can add many contexts to Tomcat, for example, by defining contexts that
point to a single webapp context.  This means you can have many contexts with
their own configuration files, with one update point.
</p>
<p>
For example:
<source>
    &lt;Context path="/pal-rave"
             docBase="/usr/bin/tomcat/webapps/pal-SNAPSHOT"
               debug="9" reloadable="true"&gt;

       &lt;Environment name="org.astrogrid.config.filename"
                      value="/usr/bin/tomcat/conf/pal-rave.properties"
                        type="java.lang.String" /&gt;
        &lt;/Context&gt;
</source>
</p>
(More to come)
<p>

</p>
</section>

<section name="Other plugins">
<p>You can use other plugins by setting the plugin key in the configuration file to
the class that implements the plugin mechanism, and including that plugin library
in the classpath.</p>
<p>Details should be provided with the plugin.</p>

</section>

<section name="Writing your own plugins">
<p>You can <a href="other-back-end.html">write your own</a> plugins for
specialised datasets, or ones where you want to offer customised access beyond the
ability of PAL.</p>

</section>


<section name="References"><ul>
<li><a href="http://www.astrogrid.org">Astrogrid Homepage</a>
</li><li><a href="http://java.sun.com/products/jdbc/">JDBC</a>
</li><li><a href="http://servlet.java.sun.com/products/jdbc/drivers">List of known JDBC drivers</a>
</li></ul></section>



</body>
</document>

