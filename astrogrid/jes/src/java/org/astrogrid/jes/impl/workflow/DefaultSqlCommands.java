/*$Id: DefaultSqlCommands.java,v 1.5 2004/07/01 21:15:00 nw Exp $
 * Created on 12-Feb-2004
 *
 * Copyright (C) AstroGrid. All rights reserved.
 *
 * This software is published under the terms of the AstroGrid 
 * Software License version 1.2, a copy of which has been included 
 * with this distribution in the LICENSE.txt file.  
 *
**/
package org.astrogrid.jes.impl.workflow;

import org.astrogrid.component.descriptor.ComponentDescriptor;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import junit.framework.Test;

/** Implementation of SqlCommands that provides default vanilla-sql command strings;
 * <p />
 * assumes a single table called 'jobs'. This table can be created via the {@link #createDatabaseTables(DataSource)} method.
 * @author Noel Winstanley nw@jb.man.ac.uk 12-Feb-2004
 *
 */
public class DefaultSqlCommands implements SqlCommands , ComponentDescriptor{
    /** Construct a new DefaultSqlCommands
     * 
     */
    public DefaultSqlCommands() {
        super();
    }

    public static final String UPDATE_SQL_DEFAULT = "update jobs set userid = ?, community = ?, xml = ? where urn = ?";

    public static final String LIST_SQL_DEFAULT = "select xml from jobs where userid = ? and community = ?";

    public static final String INSERT_SQL_DEFAULT = "insert into jobs (urn,userid,community,xml) values (?,?,?,?)";

    public static final String RETRIEVE_SQL_DEFAULT = "select xml from jobs where urn = ?";

    public static final String DELETE_SQL_DEFAULT = "delete from jobs where urn = ?";

    protected String insertSQL = INSERT_SQL_DEFAULT;

    protected String retrieveSQL = RETRIEVE_SQL_DEFAULT;

    protected String updateSQL = UPDATE_SQL_DEFAULT;

    protected String deleteSQL = DELETE_SQL_DEFAULT;

    protected String listSQL = LIST_SQL_DEFAULT;

    public static final String CREATE_SQL_DEFAULT = "create table jobs (urn varchar not null primary key, userid varchar, community varchar, xml longvarchar not null )";
    
    /** utility method - executes the sql to create the tables referenced by the other sql commands in this object 
     * <b>will delete any existing data</b>.
     * */
    public void createDatabaseTables(DataSource ds) throws SQLException {
        Connection conn = null;
        try {
            conn = ds.getConnection();
            Statement stmnt = conn.createStatement();
            try {
                // delete it if its already there.
                stmnt.execute("drop table jobs");
            } catch (SQLException e) {
                // don't care
            }
            stmnt.execute(CREATE_SQL_DEFAULT);
        } finally {
            if (conn != null) {
                try {// shouldn't throw exceptons from a finally block.
                    conn.close();
                } catch (SQLException e) {
                    // don't care
                }                                   
            }
        }
    }

    /**
     * @return
     */
    public String getDeleteSQL() {
        return deleteSQL;
    }

    /**
     * @return
     */
    public String getInsertSQL() {
        return insertSQL;
    }

    /**
     * @return
     */
    public String getListSQL() {
        return listSQL;
    }

    /**
     * @return
     */
    public String getRetrieveSQL() {
        return retrieveSQL;
    }

    /**
     * @return
     */
    public String getUpdateSQL() {
        return updateSQL;
    }

    /**
     * @see org.astrogrid.jes.component.ComponentDescriptor#getName()
     */
    public String getName() {
        return "DefaultSQLCommands";
    }

    /**
     * @see org.astrogrid.jes.component.ComponentDescriptor#getDescription()
     */
    public String getDescription() {
        return "Container for set of sql commands to use for db-backed job factory\n"
        + "listSQL: " + getListSQL() + "\n"
        + "deleteSQL: " + getDeleteSQL() + "\n"
        + "insertSQL: " + getInsertSQL() + "\n"
        + "retreiveSQL: " + getRetrieveSQL() + "\n"
        + "updateSQL: " + getUpdateSQL() ;
    }

    /**
     * @see org.astrogrid.jes.component.ComponentDescriptor#getInstallationTest()
     */
    public Test getInstallationTest() {
        return null;
    }
}


/* 
$Log: DefaultSqlCommands.java,v $
Revision 1.5  2004/07/01 21:15:00  nw
added results-listener interface to jes

Revision 1.4  2004/03/15 01:31:12  nw
jazzed up javadoc

Revision 1.3  2004/03/07 21:04:38  nw
merged in nww-itn05-pico - adds picocontainer

Revision 1.2.4.1  2004/03/07 20:41:59  nw
altered to look in component manager factory for implementations

Revision 1.2  2004/02/27 00:46:03  nw
merged branch nww-itn05-bz#91

Revision 1.1.2.3  2004/02/17 12:25:38  nw
improved javadocs for classes

Revision 1.1.2.2  2004/02/17 10:58:38  nw
altered to implement cut down facade interface, matched with types
generated by wsdl2java

Revision 1.1.2.1  2004/02/12 12:54:47  nw
worked in inversion of control pattern - basically means that
components have to be assembled, rather than self-configuring
from properties in config files. so easier to test each component in isolation
 
*/