/*$Id: AbstractJobFactoryImpl.java,v 1.2 2004/02/27 00:46:03 nw Exp $
 * Created on 11-Feb-2004
 *
 * Copyright (C) AstroGrid. All rights reserved.
 *
 * This software is published under the terms of the AstroGrid 
 * Software License version 1.2, a copy of which has been included 
 * with this distribution in the LICENSE.txt file.  
 *
**/
package org.astrogrid.jes.impl.workflow;

import org.astrogrid.jes.job.Job;
import org.astrogrid.jes.job.JobException;
import org.astrogrid.jes.job.JobFactory;
import org.astrogrid.jes.job.SubmitJobRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.net.InetAddress;
import java.util.Random;

/** Abstract base class for implementations of job factory.
 * @author Noel Winstanley nw@jb.man.ac.uk 11-Feb-2004
 *
 */
public abstract class AbstractJobFactoryImpl implements JobFactory {
    /** Construct a new JobFactoryImpl
     * 
     */
    public AbstractJobFactoryImpl() {
        super();
    }
    /**
     * @see org.astrogrid.jes.job.JobFactory#begin()
     * @deprecated - not transactional any more.
     */
    public void begin() {
    }
    /**
     * @see org.astrogrid.jes.job.JobFactory#end(boolean)
     * @tdeprecated - not transactional any more.
     */
    public boolean end(boolean bCommit) throws JobException {
        return true;
    }
    /**
     * Build a new initialized job object.
     */
    protected JobImpl buildJob(SubmitJobRequest req) throws JobException {
        JobImpl job = new  JobImpl((SubmitJobRequestImpl)req);
        String jobURN = generateUniqueJobURN(job);
        job.getWorkflow().setJobURN(jobURN);
        return job;
        
    }
    
    /** stuff for generating a unique job urn */
    private static String hostname;
    static {
        hostname = null;
        try {
            hostname = InetAddress.getLocalHost().toString();
        } catch (Exception e) {
            hostname="unavailable";
        }
    }
    private static Random rand = new Random();
    /** generates a new job urn
     * 
     * @param job
     * @return string in format <code>jes:<i>userid</i>:<i>community</i>:<i>jes-server-hostname</i>:<i>currentTime</i>:<i>randomNumber</i></code>
     * @throws JobException
     */
    protected String generateUniqueJobURN( Job job ) throws JobException {

        StringBuffer
            buffer = new StringBuffer(128);
            
        buffer
            .append("jes:")
           .append( job.getUserId() )
           .append( ':' )
           .append( job.getCommunity() )
           .append( ':' )
           .append(hostname)
           .append( ':' )
           .append( System.currentTimeMillis()) 
           .append( ':' )
           .append(rand.nextInt());
        return buffer.toString().trim() ;
        
    }
    protected static final Log log = LogFactory.getLog("job factory"); 

}


/* 
$Log: AbstractJobFactoryImpl.java,v $
Revision 1.2  2004/02/27 00:46:03  nw
merged branch nww-itn05-bz#91

Revision 1.1.2.4  2004/02/17 12:25:38  nw
improved javadocs for classes

Revision 1.1.2.3  2004/02/17 10:58:38  nw
altered to implement cut down facade interface, matched with types
generated by wsdl2java

Revision 1.1.2.2  2004/02/12 12:54:47  nw
worked in inversion of control pattern - basically means that
components have to be assembled, rather than self-configuring
from properties in config files. so easier to test each component in isolation

Revision 1.1.2.1  2004/02/12 01:14:01  nw
castor implementation of jes object model
 
*/