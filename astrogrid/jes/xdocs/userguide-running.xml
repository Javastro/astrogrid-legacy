<?xml version="1.0" ?>
<!DOCTYPE document SYSTEM "xdoc.dtd" >
<document>
  <properties>
    <title>Running Workflows</title>


    <author email="Noel.Winstanley@manchester.ac.uk">Noel
    Winstanley</author>
  </properties>

  <body>
<section name="Running a workflow">
<p> This section walks through the process of executing a workflow. It assumes 
	you've already got a workflow document written. </p>
</section>

<section name="Submitting a Workflow"> 
<p>
Workflows have to be submitted to a JES server to be executed. This can be done:
<ul>
<li> via the portal</li>
<li> via the JES servers html interface (e.g. see <a 	href="http://twmbarlwm.astrogrid.org:8888/astrogrid-jes-SNAPSHOT/query-form.html" 
	target="_top">http://twmbarlwm.astrogrid.org:8888/astrogrid-jes-SNAPSHOT/query-form.html</a>)</li>
<li> programmatically using the Jes Delegate (javadoc: <a href="http://www.astrogrid.org/maven/docs/HEAD/jes/apidocs/org/astrogrid/jes/delegate/package-frame.html" target="_top">http://www.astrogrid.org/maven/docs/HEAD/jes/apidocs/org/astrogrid/jes/delegate/package-frame.html</a> )</li>
</ul>
</p>
</section>
<section name="Tracking Progress">
	<p> Once a workflow has been submitted to Jes, a unique identifier for the 
		job is assigned. This identifier (<em>JobURN</em>) can then be used to key 
		the Jes Server and retreive information about the workflow document. 
		</p>
	<p> Alternatively, a Jes Server can be queried for the list of jobs that 
		were submitted to it by a particular user. </p>
	<p> Both functions are avaiable via the portal, the JES html interface, and 
		programmatically through delegates. The portal returns an interactive 
		display of a workflow, the html interface returns a html-formatted 
		representation of workflow, while the delegates return the raw xml 
		document. </p>
<subsection name="Examples">
	<ul>
		<!-- todo: find some nice examples here -->
		<li><a href="workflow-transcript.html">HTML Formatted report</a></li>
		<li><a href="workflow-transcript-xml.txt">XML Formatted report</a></li>
		</ul>
	</subsection>		
</section>

<section name="Inspecting Results">
<p>
During execution of a job, the Jes Server records progress and result information as annotations to the submitted workflow document. 
The following annotation elements are used to record execution infomation.
</p>
<subsection name="Step Execution Record">
	<p> The <code>&lt;step-execution-record&gt;</code> element records a single 
		execution of a <code>step</code> or <code>script</code> element. A 
		<code>step</code> or <code>script</code> may be annotated with an 
		unbounded number of <code>step-execution-records</code> - one for each 
		time the activity is executed. (its possible for an activity to be 
		executed more than once, due to loops). </p>
	<p> A <code>step-execution-record</code> records the time the execution 
		started and finished and the current execution phase (one of 
		<code>PENDING</code>, <code>RUNNING</code>, <code>COMPLETED</code>, 
		<code>ERROR</code>). </p>
	<p> A <code>step-execution-record</code> element may also contain a number 
		of <code>message</code> elements, which provide more information on the 
		execution of the activity. </p>
	<p> It may also contain a number of <code>extension</code> elements - this provides an extension point of the workflow document 
	schema where implementation data / further functionality can be stored. 
	This possibilities of this extension point, and its use in the current 
	implementation of JES need to be documented, but it's not importantl from a user point-of-view</p>		
</subsection>
	
<subsection name="Job Execution Record">
	<p> A <code>&lt;job-execution-record&gt;</code> element records the 
		execution of the entire workflow. The root <code>workflow</code> 
		element may have a single <code>job-execution-record</code>. </p>
	<p> This element has the same structure as 
		<code>step-execution-record</code> but also has an additional child 
		element - <code>&lt;jobId&gt;</code> which records the unique 
		identifier (obURN) for this 
		job execution. </p>
</subsection>

<subsection name="Message">
	<p> A <code>&lt;message&gt;</code> element records a message generated 
		during execution. It may have been generated by the JesServer, a CEA 
		server that was called to execute a tool, or via a script call to one 
		of the jes logging functions. Each message provides: <ul> <li> 
		<code>content</code> the text of the message </li> <li> 
		<code>timestamp</code> </li> <li> <code>level</code> severity / 
		importance of the message </li> <li> <code>source</code> originator of 
		the message </li> <li> <code>phase</code> current execution phase when 
		message was generated. </li> </ul> </p>
</subsection>
</section>
  </body>
</document>

