<?xml version="1.0"?>
<!--+
    | <cvs:source>$Source: /Users/pharriso/Work/ag/repo/git/astrogrid-mirror/astrogrid/registryB/src/xsl/v0.9/Attic/bean.xsl,v $</cvs:source>
    | <cvs:author>$Author: KevinBenson $</cvs:author>
    | <cvs:date>$Date: 2003/10/28 10:11:52 $</cvs:date>
    | <cvs:version>$Revision: 1.1 $</cvs:version>
    | <cvs:log>
    |   $Log: bean.xsl,v $
    |   Revision 1.1  2003/10/28 10:11:52  KevinBenson
    |   New Registry structure started with RegistryB so we can sort of leave the other one alone for now.
    |
    | </cvs:log>
    |
    +-->
<xsl:stylesheet
    version="1.0" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    >

    <!--+
        | Import our tools.
        +-->
    <xsl:import href="tools.xsl"/>

    <!--+
        | Global XSL settings.
        +-->
    <xsl:output method="text"/>
    <xsl:strip-space elements="*"/>

    <!--+
        | XSL params from the Ant script.
        +-->
    <xsl:param name="bean.type"/>
    <xsl:param name="bean.package"/>

    <!--+
        | Match the top level schema.
        +-->
    <xsl:template match="/schema">
        <!--+
            | Add our file header.
            +-->
        <xsl:call-template name="class.header"/>

        <!--+
            | Process our object definition.
            +-->
        <xsl:apply-templates select="object[@type = $bean.type]"/>

    </xsl:template>

    <!--+
        | Process our object definition.
        +-->
    <xsl:template match="object">

        <!--+
            | Open our class definition.
            +-->
        <xsl:call-template name="class.open"/>

        <!--+
            | Process our object properties.
            +-->
        <xsl:apply-templates select="property"/>

        <!--+
            | Close our class definition.
            +-->
        <xsl:call-template name="class.close"/>

    </xsl:template>

    <!--+
        | Add our Java file header.
        +-->
    <xsl:template name="class.header">
        <xsl:text><![CDATA[
        /*
         * Autogenerated Java code from object schema.
         * Schema version : ]]></xsl:text><xsl:value-of select="/schema/@version"/><xsl:text><![CDATA[
         *
         */
        package ]]></xsl:text><xsl:value-of select="$bean.package"/><xsl:text><![CDATA[ ;
        ]]></xsl:text>
    </xsl:template>

    <!--+
        | Generate the start of our bean class.
        +-->
    <xsl:template name="class.open">

        <xsl:variable name="class.name">
            <xsl:call-template name="bean.name">
                <xsl:with-param name="bean" select="."/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:text><![CDATA[
        /**
         * JavaBean generated from XML schema.
         * Schema type : ]]></xsl:text><xsl:value-of select="@type"/><xsl:text><![CDATA[
         *
         */
        class ]]></xsl:text><xsl:value-of select="$class.name"/>
        <xsl:if test="@extends">
            <xsl:variable name="super.type" select="@extends"/>
            <xsl:variable name="super.name">
                <xsl:call-template name="bean.name">
                    <xsl:with-param name="bean" select="/schema/object[@type = $super.type]"/>
                </xsl:call-template>
            </xsl:variable>
            <xsl:text><![CDATA[
            extends ]]></xsl:text><xsl:value-of select="$super.name"/>
        </xsl:if>
        <xsl:text><![CDATA[
            {
            ]]></xsl:text>
    </xsl:template>

    <!--+
        | Generate the end of our bean class.
        +-->
    <xsl:template name="class.close">
        <xsl:text><![CDATA[
            }]]></xsl:text>
    </xsl:template>

    <!--+
        | An unknown property type.
        +-->
    <xsl:template match="property">
        <xsl:text><![CDATA[
            /**
             * WARNING Unknown property type.
             * Name : ]]></xsl:text><xsl:value-of select="@name"/><xsl:text><![CDATA[
             * Type : ]]></xsl:text><xsl:value-of select="@type"/><xsl:text><![CDATA[
             * Desc : ]]></xsl:text><xsl:call-template name="first.upper"><xsl:with-param name="text" select="description/text()"/></xsl:call-template><xsl:text><![CDATA[.
             */
            ]]></xsl:text>
    </xsl:template>

    <!--+
        | Generate a string property.
        +-->
    <xsl:template match="property[@type = 'string']">
        <xsl:call-template name="object.property">
            <xsl:with-param name="name" select="@name"/>
            <xsl:with-param name="desc" select="description/text()"/>
            <xsl:with-param name="type">String</xsl:with-param>
        </xsl:call-template>
    </xsl:template>

    <!--+
        | Generate an integer property.
        +-->
    <xsl:template match="property[@type = 'integer']">
        <xsl:call-template name="object.property">
            <xsl:with-param name="name" select="@name"/>
            <xsl:with-param name="desc" select="description/text()"/>
            <xsl:with-param name="type">int</xsl:with-param>
        </xsl:call-template>
    </xsl:template>

    <!--+
        | Generate the get/set methods for an object property.
        +-->
    <xsl:template name="object.property">
        <xsl:param name="name"/>
        <xsl:param name="type"/>
        <xsl:param name="desc"/>

        <xsl:text><![CDATA[
            /**
             * ]]></xsl:text>
            <xsl:call-template name="first.upper">
                 <xsl:with-param name="text" select="$desc"/>
            </xsl:call-template>
            <xsl:text><![CDATA[.
             *
             */
            private ]]></xsl:text>
            <xsl:value-of select="$type"/>
            <xsl:text><![CDATA[ ]]></xsl:text>
            <xsl:call-template name="first.lower">
                 <xsl:with-param name="text" select="$name"/>
            </xsl:call-template>
            <xsl:text><![CDATA[ ;

            /**
             * Read access to ]]></xsl:text>
            <xsl:call-template name="first.lower">
                <xsl:with-param name="text" select="$desc"/>
            </xsl:call-template>
            <xsl:text><![CDATA[.
             *
             */
            public ]]></xsl:text>
            <xsl:value-of select="$type"/>
            <xsl:text><![CDATA[ get]]></xsl:text>
            <xsl:call-template name="first.upper">
                <xsl:with-param name="text" select="$name"/>
            </xsl:call-template>
            <xsl:text><![CDATA[()
                {
                return this.]]></xsl:text>
                <xsl:call-template name="first.lower">
                     <xsl:with-param name="text" select="$name"/>
                </xsl:call-template>
                <xsl:text><![CDATA[ ;
                }

            /**
             * Write access to ]]></xsl:text>
             <xsl:call-template name="first.lower">
                 <xsl:with-param name="text" select="$desc"/>
             </xsl:call-template>
             <xsl:text><![CDATA[.
             *
             */
            public void set]]></xsl:text>
                <xsl:call-template name="first.upper">
                    <xsl:with-param name="text" select="$name"/>
                </xsl:call-template>
                <xsl:text><![CDATA[(]]></xsl:text>
                <xsl:value-of select="$type"/>
                <xsl:text><![CDATA[ value)
                {
                this.]]></xsl:text>
                <xsl:call-template name="first.lower">
                     <xsl:with-param name="text" select="$name"/>
                </xsl:call-template>
                <xsl:text><![CDATA[ = value ;
                }
            ]]></xsl:text>
    </xsl:template>

    <!--+
        | Default, copy all and apply templates.
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>
        +-->

</xsl:stylesheet>
