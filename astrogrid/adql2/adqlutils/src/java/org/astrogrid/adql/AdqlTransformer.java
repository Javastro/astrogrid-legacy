/* AdqlTransformer.java
 * Created on 27-Oct-2005
 *
 * Copyright (C) AstroGrid. All rights reserved.
 *
 * This software is published under the terms of the AstroGrid 
 * Software License version 1.2, a copy of which has been included 
 * with this distribution in the LICENSE.txt file.  
 *
**/
package org.astrogrid.adql ;

import java.io.StringReader;
import java.io.StringWriter;

import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import java.io.InputStream;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * @author jl99
 *
 */
public class AdqlTransformer {
    
    protected static final Log log = LogFactory.getLog( AdqlTransformer.class ) ;
     
    private Transformer textTransformer ;
        
    public static Source getFullTextStyleSource( String styleSheetName ) {
        InputStream is = AdqlTransformer.class.getClassLoader().getResourceAsStream( styleSheetName ) ;
        return new StreamSource( is ) ;
    }
    
    /**
     * 
     */
    public AdqlTransformer( String styleSheetName ) {
        try {
            textTransformer = TransformerFactory.newInstance().newTransformer( getFullTextStyleSource( styleSheetName ) );
        } catch( TransformerConfigurationException tce ) {
           // Error generated by the parser
           log.error( "\n** Transformer Factory error", tce ) ;       
        } 
        
    }
    
    private AdqlTransformer() {}
    
    private static void printStream( InputStream is ) {
        try {
            StringBuffer b = new StringBuffer() ;
            int c = is.read() ;
            while( c!= -1 ) {
                b.append( (char)c ) ;
                c = is.read() ;
            }
            log.error( b.toString() ) ;
        }
        catch( Exception ex ) {
            log.error( ex );
        }        
    }
    
    
    public synchronized String transformToAdqls( String adqlx, String spaceCharacter ) {
        StreamSource source = new StreamSource( new StringReader( adqlx ) ) ;
        StreamResult result = new StreamResult( new StringWriter() ) ;
        String retVal = "" ;
        try {
            textTransformer.setParameter( "spaceCharacter", spaceCharacter ) ;
            textTransformer.transform( source, result ) ;
            retVal = ((StringWriter)result.getWriter()).toString().trim() ; 
        }
        catch( Exception ex ) {
            log.error ( ex ) ;
        }
        return retVal ;
    }
    
    public String transformToAdqls( String adqlx ) {
        return transformToAdqls( adqlx, " " ) ;
    }

}// end of class AdqlTransformer
