/* Generated By: AdqlStoX.jjt,v 1.33.2.4 2006-12-19 14&JJTree: Do not edit this line. AST_BetweenPredicate.java */

package org.astrogrid.adql;

import org.apache.xmlbeans.XmlObject;
import org.astrogrid.adql.beans.BetweenPredType;
import org.astrogrid.adql.beans.ComparisonPredType;
import org.astrogrid.adql.beans.NotBetweenPredType;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_BetweenPredicate extends SimpleNode {
    
    private static Log log = LogFactory.getLog( AST_BetweenPredicate.class ) ;
    
    // This will end up as false if the construct is a NOT BETWEEN
    boolean between = true ;

    public AST_BetweenPredicate(AdqlStoX p, int id) {
        super(p, id);
        this.schemaType = BetweenPredType.type ;
    }

    public void setNot() {
        this.between = false ;
        this.setPositionType( NotBetweenPredType.type ) ;
    }

    public void buildXmlTree( XmlObject xo ) {
        if( log.isTraceEnabled() ) enterTrace( log, "AST_BetweenPredicate.buildXmlTree()" ) ;
        if( between ) {
            BetweenPredType bp = (BetweenPredType)xo.changeType( BetweenPredType.type ) ;
            children[0].buildXmlTree( bp.addNewArg() ) ; 
            children[1].buildXmlTree( bp.addNewArg() ) ;
            children[2].buildXmlTree( bp.addNewArg() ) ;
            this.generatedObject = bp ;
        } 
        else {
            NotBetweenPredType nbp = (NotBetweenPredType)xo.changeType( NotBetweenPredType.type ) ;
            children[0].buildXmlTree( nbp.addNewArg() ) ; 
            children[1].buildXmlTree( nbp.addNewArg() ) ;
            children[2].buildXmlTree( nbp.addNewArg() ) ;
            this.generatedObject = nbp ;
        }
        super.buildXmlTree( (XmlObject)this.generatedObject ) ;
        if( log.isTraceEnabled() ) exitTrace( log, "AST_BetweenPredicate.buildXmlTree()" ) ;
    }
}
