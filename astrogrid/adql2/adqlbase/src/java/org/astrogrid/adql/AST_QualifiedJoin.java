/* Generated By: AdqlStoX.jjt,v 1.33.2.4 2006-12-19 14&JJTree: Do not edit this line. AST_QualifiedJoin.java */

package org.astrogrid.adql;

import org.astrogrid.adql.beans.JoinTableType;
import org.astrogrid.adql.beans.FromTableType;
import org.astrogrid.adql.beans.JoinTableQualifierType;
import org.astrogrid.adql.beans.ArrayOfFromTableType;
import org.apache.xmlbeans.XmlObject; 
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_QualifiedJoin extends SimpleNode {
    
    private static Log log = LogFactory.getLog( AST_QualifiedJoin.class ) ;

    public AST_QualifiedJoin(AdqlStoX p, int id) {
        super(p, id);
    }
     
    public void buildXmlTree( XmlObject xo ) {
        if( log.isTraceEnabled() ) enterTrace( log, "AST_QualifiedJoin.buildXmlTree()" ) ;
        JoinTableType jtType = buildXmlTree( xo, children[0], (AST_JoinPart)children[1] ) ;
        setGeneratedObject( jtType ) ;
        super.buildXmlTree( jtType ) ;
        if( log.isTraceEnabled() ) exitTrace( log, "AST_QualifiedJoin.buildXmlTree()" ) ;
    }
    
    public static JoinTableType buildXmlTree( XmlObject xo, FromTableType leftTable, AST_JoinPart joinPart ) {
        JoinTableType jtType = buildJoinBarTableArray( xo, joinPart) ; 
        setTableArray( jtType, leftTable, joinPart.getTableReference() ) ;
        return jtType ;
    }
    
    public static JoinTableType buildXmlTree( XmlObject xo, Node leftTableNode, AST_JoinPart joinPart ) {
        JoinTableType jtType = buildJoinBarTableArray( xo, joinPart) ; 
        setTableArray( jtType, leftTableNode, joinPart.getTableReference() ) ;
        return jtType ;
    }
    
    public static JoinTableType buildJoinBarTableArray( XmlObject xo, AST_JoinPart joinPart ) {
        JoinTableType jtType = (JoinTableType)xo.changeType( JoinTableType.type ) ; 
 
// The following corresponds to this syntax...
//      <qualified_join> ::=
//      <table_reference> [ NATURAL ] [ <join_type> ] JOIN
//      <table_reference> [ <join_specification> ]
       
        if( joinPart.isNatural() ) {
            jtType.setNaturalJoin( true ) ;             
            if( !joinPart.isJoinType() ) {
                jtType.setQualifier( JoinTableQualifierType.DEFAULT_INNER ) ;
            }
            else {
                setQualifier( jtType, joinPart.getJoinType() ) ;              
            }            
        }
        else { 
            jtType.setNaturalJoin( false ) ;
            if( joinPart.isJoinSpecification() ) {
                setJoinSpec( jtType, joinPart.getJoinSpecification() ) ;
            } 
            if( !joinPart.isJoinType() ) {
                jtType.setQualifier( JoinTableQualifierType.DEFAULT_INNER ) ;                             
            }
            else {
                setQualifier( jtType, joinPart.getJoinType() ) ;
            }           
        }
        return jtType ;
    }
    
    
    
    private static void setQualifier( JoinTableType jtType, Node qualifierNode ) {
        qualifierNode.buildXmlTree( JoinTableQualifierType.Factory.newInstance() ) ;
        jtType.xsetQualifier( (JoinTableQualifierType)qualifierNode.getGeneratedObject() ) ;
    }
    
    private static void setTableArray( JoinTableType jtType, Node tab1Node, Node tab2Node ) {
        ArrayOfFromTableType tableArray = jtType.addNewTables() ;
        FromTableType[] fttArray = new FromTableType[2] ;
        tab1Node.buildXmlTree( tableArray.addNewFromTableType() ) ;
        tab2Node.buildXmlTree( tableArray.addNewFromTableType() ) ;
        fttArray[0] = (FromTableType)tab1Node.getGeneratedObject() ;
        fttArray[1] = (FromTableType)tab2Node.getGeneratedObject() ;          
        tableArray.setFromTableTypeArray( fttArray ) ;     
    }
    
    private static void setTableArray( JoinTableType jtType, FromTableType tab1, Node tab2Node ) {
        ArrayOfFromTableType tableArray = jtType.addNewTables() ;
        FromTableType[] fttArray = new FromTableType[2] ;
        tab2Node.buildXmlTree( tableArray.addNewFromTableType() ) ;
        fttArray[0] = tab1 ;
        fttArray[1] = (FromTableType)tab2Node.getGeneratedObject() ;          
        tableArray.setFromTableTypeArray( fttArray ) ;     
    }
    
    private static void setJoinSpec( JoinTableType jtType, Node joinSpec ) {
        joinSpec.buildXmlTree( jtType.addNewJoinSpecification() ) ;
    }

}
