/* Generated By: AdqlStoX.jjt,v 1.2 2008/09/08 15&JJTree&JavaCC: Do not edit this line. AdqlStoXTokenManager.java */
package org.astrogrid.adql ;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;
import java.util.HashSet ;
import java.util.ArrayList ;
import java.util.List ;
import org.astrogrid.adql.beans.* ;
import org.astrogrid.adql.AdqlParser.SyntaxOption;

public class AdqlStoXTokenManager implements AdqlStoXConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L)
            return 77;
         if ((active0 & 0x20000L) != 0L)
            return 3;
         if ((active0 & 0x80000L) != 0L)
            return 78;
         if ((active0 & 0x800L) != 0L)
            return 79;
         if ((active0 & 0x3f000000000000L) != 0L || (active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 317;
            return 17;
         }
         if ((active0 & 0xb0L) != 0L)
            return 80;
         if ((active0 & 0x100L) != 0L)
            return 81;
         if ((active1 & 0xff8000000000000L) != 0L || (active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 317;
            return 37;
         }
         if ((active0 & 0x400000L) != 0L || (active4 & 0x40000000000000L) != 0L)
            return 27;
         if ((active0 & 0x40000L) != 0L)
            return 76;
         if ((active0 & 0xffc0fffe00000000L) != 0L || (active1 & 0xf007ffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xffc00000ffffffffL) != 0L || (active4 & 0x7000fdbfeff7ff7L) != 0L)
         {
            jjmatchedKind = 317;
            return 82;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 12;
         if ((active3 & 0x3fc00000000000L) != 0L)
         {
            jjmatchedKind = 317;
            return 44;
         }
         if ((active3 & 0x3fff00000000L) != 0L || (active4 & 0x800002400000008L) != 0L || (active5 & 0x3000L) != 0L)
         {
            jjmatchedKind = 317;
            return 33;
         }
         return -1;
      case 1:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 1;
            }
            return 36;
         }
         if ((active3 & 0x1c00000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 1;
            }
            return 43;
         }
         if ((active0 & 0x203c0000000000L) != 0L || (active1 & 0xc000000000000000L) != 0L || (active2 & 0x338600000fffc0L) != 0L || (active3 & 0x8000000000L) != 0L || (active4 & 0x400068004000000L) != 0L || (active5 & 0x3000L) != 0L)
            return 82;
         if ((active0 & 0xffdfc3fe00000000L) != 0L || (active1 & 0x3ff7ffffffffffffL) != 0L || (active2 & 0xffcc79fffff0003fL) != 0L || (active3 & 0xfffe007fffffffffL) != 0L || (active4 & 0xb00097bfbffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 1;
            }
            return 82;
         }
         if ((active3 & 0x3f0000000000L) != 0L || (active4 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 1;
            }
            return 32;
         }
         return -1;
      case 2:
         if ((active0 & 0xffd3504400000000L) != 0L || (active1 & 0xae77f9ffff7fffffL) != 0L || (active2 & 0xfdee79fc7fd89fbfL) != 0L || (active3 & 0xfcfedf7fa1efffffL) != 0L || (active4 & 0xf000783796f7ff7L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 2;
            }
            return 82;
         }
         if ((active0 & 0xc8bba00000000L) != 0L || (active1 & 0x1180060000800000L) != 0L || (active2 & 0x200040380236000L) != 0L || (active3 & 0x30000005e100000L) != 0L || (active4 & 0x87882908008L) != 0L)
            return 82;
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 2;
            }
            return 35;
         }
         if ((active3 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 2;
            }
            return 42;
         }
         if ((active3 & 0x200000000000L) != 0L || (active4 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 2;
            }
            return 83;
         }
         return -1;
      case 3:
         if ((active3 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 3;
            }
            return 41;
         }
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 3;
            }
            return 83;
         }
         if ((active0 & 0x7b10000000000000L) != 0L || (active1 & 0x8c00c18380400000L) != 0L || (active2 & 0x619000a920008L) != 0L || (active3 & 0xdc10307c00a01030L) != 0L || (active4 & 0x78120000016L) != 0L)
            return 82;
         if ((active0 & 0x8000000000000L) != 0L || (active4 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 3;
            }
            return 47;
         }
         if ((active0 & 0x84c3506600000000L) != 0L || (active1 & 0x2377387c7f3fffffL) != 0L || (active2 & 0xfde860fe7549dfb7L) != 0L || (active3 & 0x23eecf03bd4fefcfL) != 0L || (active4 & 0xf000006596f7fe1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 3;
            }
            return 82;
         }
         return -1;
      case 4:
         if ((active0 & 0x8001004000000000L) != 0L || (active1 & 0x27800000000a001L) != 0L || (active2 & 0x60009874000603L) != 0L || (active3 & 0x20ec400101000401L) != 0L || (active4 & 0x700000209080001L) != 0L)
            return 82;
         if ((active4 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active3 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 4;
            }
            return 40;
         }
         if ((active0 & 0x54c2502600000000L) != 0L || (active1 & 0x2107b87f7f3f5ffeL) != 0L || (active2 & 0xfd8870660149d9b4L) != 0L || (active3 & 0x13028f72bc4febceL) != 0L || (active4 & 0x450677fe0L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 4;
            }
            return 82;
         }
         if ((active4 & 0x40080000000L) != 0L)
            return 47;
         if ((active0 & 0x2008000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 4;
            }
            return 47;
         }
         return -1;
      case 5:
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x2001386040204030L) != 0L || (active2 & 0x88100600001004L) != 0L || (active3 & 0x8280000002e208L) != 0L || (active4 & 0x40001800L) != 0L)
            return 82;
         if ((active0 & 0x54c2502200000000L) != 0L || (active1 & 0x106801f3f1f1fceL) != 0L || (active2 & 0xfd0020600149c9b0L) != 0L || (active3 & 0x13000f72bc4d09c6L) != 0L || (active4 & 0x410676660L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 5;
            }
            return 82;
         }
         if ((active4 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active4 & 0x180L) != 0L)
            return 47;
         if ((active3 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 5;
            }
            return 39;
         }
         if ((active0 & 0x2008000000000000L) != 0L || (active2 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 5;
            }
            return 47;
         }
         return -1;
      case 6:
         if ((active0 & 0x4c2000000000000L) != 0L || (active1 & 0x10480000e1f08c4L) != 0L || (active2 & 0xa400204001004000L) != 0L || (active3 & 0x3010000040d0000L) != 0L || (active4 & 0x10606000L) != 0L)
            return 82;
         if ((active4 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2008000000000000L) != 0L || (active2 & 0x400000000000L) != 0L || (active3 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 6;
            }
            return 47;
         }
         if ((active0 & 0x5000502200000000L) != 0L || (active1 & 0x2201f3100170aL) != 0L || (active2 & 0x59000020004989b0L) != 0L || (active3 & 0x10000f72384009c6L) != 0L || (active4 & 0x400070660L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 6;
            }
            return 82;
         }
         return -1;
      case 7:
         if ((active0 & 0x80002200000000L) != 0L || (active1 & 0x2001120000402L) != 0L || (active2 & 0x4900002000410010L) != 0L || (active3 & 0x1000010018400980L) != 0L || (active4 & 0x400060260L) != 0L)
            return 82;
         if ((active4 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x5000500000000000L) != 0L || (active1 & 0x200e11001388L) != 0L || (active2 & 0x10000000000889a0L) != 0L || (active3 & 0xe7220000046L) != 0L || (active4 & 0x10400L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 7;
            return 82;
         }
         if ((active0 & 0x2008000000000000L) != 0L || (active1 & 0x1e0000L) != 0L || (active2 & 0x400000000000L) != 0L || (active3 & 0x80080000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 7;
            return 47;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0xe11001380L) != 0L || (active2 & 0x8800L) != 0L || (active3 & 0xa0000000042L) != 0L || (active4 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 8;
            }
            return 82;
         }
         if ((active0 & 0x5000100000000000L) != 0L || (active1 & 0x200000000008L) != 0L || (active2 & 0x10000000000801a0L) != 0L || (active3 & 0x41220000004L) != 0L || (active4 & 0x400L) != 0L)
            return 82;
         if ((active4 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2008000000000000L) != 0L || (active1 & 0x1e0000L) != 0L || (active2 & 0x400000000000L) != 0L || (active3 & 0x6080080000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 8;
            }
            return 47;
         }
         return -1;
      case 9:
         if ((active1 & 0xa11000380L) != 0L || (active2 & 0x8000L) != 0L || (active3 & 0x42L) != 0L || (active4 & 0x10000L) != 0L)
            return 82;
         if ((active0 & 0x6000000000000000L) != 0L || (active1 & 0x1e0000L) != 0L || (active2 & 0x400000000000L) != 0L || (active3 & 0x6080080000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 9;
            }
            return 47;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 47;
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x400001000L) != 0L || (active2 & 0x800L) != 0L || (active3 & 0xa0000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 9;
            }
            return 82;
         }
         return -1;
      case 10:
         if ((active1 & 0x400000200L) != 0L || (active2 & 0x800L) != 0L || (active3 & 0xa0000000000L) != 0L)
            return 82;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x1e0000L) != 0L || (active2 & 0x400000000000L) != 0L || (active3 & 0x6000080000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 10;
            return 47;
         }
         if ((active0 & 0x2000000000000000L) != 0L || (active3 & 0x80000000L) != 0L)
            return 47;
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 10;
            return 82;
         }
         return -1;
      case 11:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 11;
            }
            return 82;
         }
         if ((active1 & 0x1e0000L) != 0L || (active2 & 0x400000000000L) != 0L || (active3 & 0x80000L) != 0L)
            return 47;
         if ((active0 & 0x4000000000000000L) != 0L || (active3 & 0x6000000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 317;
               jjmatchedPos = 11;
            }
            return 47;
         }
         return -1;
      case 12:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x1000L) != 0L)
            return 82;
         if ((active3 & 0x2000000000L) != 0L)
            return 47;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x80000L) != 0L || (active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 12;
            return 47;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x80000L) != 0L || (active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 13;
            return 47;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 14;
            return 47;
         }
         if ((active3 & 0x4000000000L) != 0L)
            return 47;
         return -1;
      case 15:
         if ((active0 & 0x4000000000000000L) != 0L)
            return 47;
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 15;
            return 47;
         }
         return -1;
      case 16:
         if ((active1 & 0x80000L) != 0L)
            return 47;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 7, 80);
      case 10:
         return jjStartNfaWithStates_0(0, 5, 80);
      case 13:
         return jjStartNfaWithStates_0(0, 6, 77);
      case 32:
         return jjStartNfaWithStates_0(0, 4, 80);
      case 34:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 36:
         return jjStopAtPos(0, 302);
      case 37:
         return jjStopAtPos(0, 9);
      case 38:
         return jjStopAtPos(0, 10);
      case 39:
         return jjStartNfaWithStates_0(0, 11, 79);
      case 40:
         return jjStopAtPos(0, 12);
      case 41:
         return jjStopAtPos(0, 13);
      case 42:
         return jjStopAtPos(0, 14);
      case 43:
         return jjStopAtPos(0, 15);
      case 44:
         return jjStopAtPos(0, 16);
      case 45:
         return jjStartNfaWithStates_0(0, 17, 3);
      case 46:
         return jjStartNfaWithStates_0(0, 18, 76);
      case 47:
         return jjStartNfaWithStates_0(0, 19, 78);
      case 58:
         return jjStopAtPos(0, 20);
      case 59:
         return jjStopAtPos(0, 21);
      case 60:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40000000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 23);
      case 62:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x80000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 25);
      case 91:
         return jjStopAtPos(0, 31);
      case 93:
         return jjStopAtPos(0, 32);
      case 94:
         return jjStopAtPos(0, 29);
      case 95:
         return jjStopAtPos(0, 26);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xfffe00000000L, 0x0L, 0x0L, 0x0L, 0x78000100010L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3f000000000000L, 0x0L, 0x0L, 0x0L, 0x8000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffc0000000000000L, 0x3fffffL, 0x0L, 0x0L, 0x1000050002411e0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffffc00000L, 0x0L, 0x0L, 0x420000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ff0000000000L, 0x0L, 0x0L, 0x802000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff8000000000000L, 0x0L, 0x0L, 0x1000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf000000000000000L, 0x3L, 0x0L, 0x200000000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xcL, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffff0L, 0x0L, 0x10000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fc00000L, 0x0L, 0x82000600L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfc0000000L, 0x0L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ff000000000L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ffc00000000000L, 0x0L, 0x400000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfe00000000000000L, 0xfL, 0xc084000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1ff0L, 0x310000800L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xffffe000L, 0x860000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fff00000000L, 0x800002400000008L, 0x3000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fc00000000000L, 0x0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7c0000000000000L, 0x80000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf800000000000000L, 0x1L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4L, 0x0L);
      case 123:
         return jjStopAtPos(0, 300);
      case 124:
         return jjStartNfaWithStates_0(0, 28, 12);
      case 125:
         return jjStopAtPos(0, 301);
      case 126:
         return jjStopAtPos(0, 30);
      default :
         return jjMoveNfa_0(11, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 61:
         if ((active4 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 310);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 311);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c0000000000000L, active1, 0x8000000c00000L, active2, 0x6000070c0c00004L, active3, 0x3c0000100000000L, active4, 0x82110000200L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0x408000000000L, active3, 0x6000L, active4, 0x10000000000L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0x10100003ff000000L, active2, 0x10007200000L, active3, 0x2001f83f0L, active4, 0x600822L, active5, 0L);
      case 70:
      case 102:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 175, 82);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xf800000000000000L, active1, 0L, active2, 0L, active3, 0x3800000400000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 282, 82);
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000L, active1, 0x20001c00000000L, active2, 0x308000000L, active3, 0x4400007800200400L, active4, 0x800000800021000L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000L, active1, 0x2040010000000001L, active2, 0L, active3, 0L, active4, 0x1002000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0x400000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L, active1, 0x60000000000L, active2, 0x200000003ff80L, active3, 0x1c00000000000L, active4, 0x10000L, active5, 0L);
      case 79:
      case 111:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x8380006000003ffeL, active2, 0x800040c30100008L, active3, 0x8000000000801800L, active4, 0x528a0cc5ccL, active5, 0x3000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc000000000000L, active3, 0x6000001000000L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1e000000L, active4, 0x60000000L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x40000800000c000L, active2, 0xf020000000000003L, active3, 0x3f0000000007L, active4, 0x700000400000011L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0x80000000000L, active2, 0x80000L, active3, 0x38000000000000L, active4, 0x8000000000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x60000000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x8000000003f0000L, active2, 0xc0380000000000L, active3, 0x60000008L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L, active2, 0x100000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7f00000000000L, active2, 0L, active3, 0L, active4, 0x800000L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 82);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x3000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x7800000000000000L, active1, 0x401000002L, active2, 0x1000001L, active3, 0x80f0001400030L, active4, 0x60000000002L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x120000008L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x380006000000L, active2, 0x10000000L, active3, 0x18000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 82);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 82);
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 185, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L, active2, 0x20000400000080L, active3, 0x2000000000000L, active4, 0x400000010000000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0xc00000004000L, active2, 0x7104000000000010L, active3, 0x3c10000400000000L, active4, 0x10L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x38000000L, active2, 0x2000000L, active3, 0x40L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 82);
         else if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0x80400800L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0x2000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L, active2, 0x8000000000100100L, active3, 0x20d00000000003L, active4, 0x8000280001L, active5, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0x1000000000000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x80800004000001cL, active2, 0x2180000000000L, active3, 0xc000001c020880L, active4, 0x6000L, active5, 0L);
      case 77:
      case 109:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 222, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000020L, active2, 0x201000000020L, active3, 0x7a00800000L, active4, 0x800000000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 291, 82);
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 293, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xfc0L, active2, 0xa00400200L, active3, 0L, active4, 0x100040424L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2440008000008001L, active2, 0x80002L, active3, 0x4L, active4, 0x3000100010001c0L, active5, 0L);
      case 80:
      case 112:
         if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 259, 82);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 279, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0x4000000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1200000003f1000L, active2, 0x400000000000000L, active3, 0x8300000000004000L, active4, 0x20001000L, active5, 0L);
      case 83:
      case 115:
         if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 292, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0x3c0100200000000L, active1, 0x11b80000000L, active2, 0x800000000809800L, active3, 0x800c0100L, active4, 0x20000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 124, 82);
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 170, 82);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 212, 82);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 294, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0x41a404400000000L, active1, 0x8016000000400000L, active2, 0xc8406040034000L, active3, 0x4000000000000000L, active4, 0x10200L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200004000002000L, active2, 0x8L, active3, 0x200000000000L, active4, 0x640000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000004L, active3, 0x200L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0x1000L, active4, 0x8000000L, active5, 0L);
      case 88:
      case 120:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 159, 82);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 271, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 82);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 82);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 149, 82);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 260, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x40082008004000L, active2, 0x8010000000L, active3, 0x2000000000080L, active4, 0x40000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000004000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x3000L);
      case 67:
      case 99:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80c0000000000000L, active1, 0x10800b00000000L, active2, 0x1000000040000000L, active3, 0x100000005000004L, active4, 0x1000L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 196, 82);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 288, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 82);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 82);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 82);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 82);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 213, 82);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 215, 82);
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 237, 82);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 258, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x104000000000L, active1, 0x102300070000000L, active2, 0x60601024015a20L, active3, 0x4007008022040L, active4, 0xc00000008010000L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L, active2, 0x400000L, active3, 0x8000000000000L, active4, 0x400L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 82);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 254, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000400000000L, active1, 0x2000000L, active2, 0x808002000000084L, active3, 0x10000000000L, active4, 0x10002a00L, active5, 0L);
      case 75:
      case 107:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 255, 82);
         break;
      case 76:
      case 108:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 82);
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 197, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x500000eL, active2, 0x100000080000L, active3, 0x100400808L, active4, 0x200000L, active5, 0L);
      case 77:
      case 109:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 82);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 236, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 82);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 178, 82);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 226, 82);
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 295, 82);
         else if ((active4 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 297;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000020c0L, active2, 0x11L, active3, 0x10210e0000000000L, active4, 0x40600080000L, active5, 0L);
      case 79:
      case 111:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 82);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000000L, active1, 0L, active2, 0L, active3, 0x40000000c201L, active4, 0x1000000L, active5, 0L);
      case 80:
      case 112:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2080000000000000L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 82);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 244, 82);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 257, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x7000000000000000L, active1, 0x40000001f1000L, active2, 0x100000000000000L, active3, 0x2000000000000000L, active4, 0x4001c0L, active5, 0L);
      case 83:
      case 115:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 204, 82);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 296, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x29000000208301L, active2, 0x4000000000000000L, active3, 0x300c0000L, active4, 0x100000000000000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 82);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 82);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 153, 82);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 168, 82);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 285, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000400L, active2, 0x400000800008100L, active3, 0x80010100L, active4, 0x60021L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L, active2, 0x4600000402L, active3, 0xc0000000000000L, active4, 0x200000000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0x2L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 250, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 177, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0x4000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000000000L, active5, 0L);
      case 48:
         if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 287, 47);
         break;
      case 50:
         if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 298, 47);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x50c0000000000000L, active1, 0x200400000400000cL, active2, 0xa000000000080000L, active3, 0L, active4, 0x10060000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L, active2, 0x80L, active3, 0x20000L, active4, 0x400000000L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 121, 82);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 289, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L, active4, 0x1c0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 82);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 82);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 216, 82);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 224, 82);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 243, 82);
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 253, 82);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 256, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x400001f18c2L, active2, 0x4000000000008000L, active3, 0x1080000080000004L, active4, 0x400000L, active5, 0x3000L);
      case 71:
      case 103:
         if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 245, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0x4000L, active5, 0L);
      case 72:
      case 104:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 82);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 82);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100003000000420L, active2, 0x1400100001000100L, active3, 0x2000000000d000aL, active4, 0x200400L, active5, 0L);
      case 75:
      case 107:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 154, 82);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 156, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x408000200000000L, active1, 0x4001000000L, active2, 0x100000400000000L, active3, 0x10000404000L, active4, 0x1000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000010L, active2, 0L, active3, 0x2000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 82);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 238, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L, active2, 0x804L, active3, 0x8000L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400400000000L, active1, 0x800200000L, active2, 0x8002000000000L, active3, 0x1000204000000L, active4, 0x800L, active5, 0L);
      case 80:
      case 112:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x380000000000L, active2, 0L, active3, 0L, active4, 0x200000000002000L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 82);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 137, 82);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 82);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 167, 82);
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 182, 82);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 192, 82);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 242, 82);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 280, 82);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 283, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0x2000330000000L, active2, 0x204000011000L, active3, 0x8000140L, active4, 0x400000040010020L, active5, 0L);
      case 83:
      case 115:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 164, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xe1000000000L, active4, 0x100000000000000L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 82);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 82);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 82);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 82);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 138, 82);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 202, 82);
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 275, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000040004300L, active2, 0x800400200000010L, active3, 0x2000030000080L, active4, 0x200L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800008000000L, active2, 0x80000000400000L, active3, 0x800000000000L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x6000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x700000000000000L, active5, 0x3000L);
      case 49:
         if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 263, 47);
         break;
      case 50:
         if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 264, 47);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 205, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x2000000L, active2, 0x500004000400180L, active3, 0x100020010000800L, active4, 0x400000000L, active5, 0L);
      case 67:
      case 99:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 195, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x5000000000000000L, active1, 0x40000000000c0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 207, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000000000000L, active1, 0L, active2, 0L, active3, 0x4000004L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 82);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 82);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 82);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 82);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 161, 82);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 162, 82);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 201, 82);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 239, 82);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 241, 82);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 268, 82);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 286, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000000000L, active1, 0L, active2, 0x4000L, active3, 0x40L, active4, 0x400000L, active5, 0L);
      case 70:
      case 102:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 172, 82);
         break;
      case 71:
      case 103:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x300000000L, active2, 0x800200000000030L, active3, 0x10000400180L, active4, 0x40000L, active5, 0L);
      case 76:
      case 108:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 125, 82);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 206, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x8000000L, active2, 0L, active3, 0xc0000000002L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 82);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 82);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 82);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 179, 82);
         else if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 267, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20018001f0400L, active2, 0x2001000000L, active3, 0x200000000000000L, active4, 0x10220000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x401000000L, active2, 0L, active3, 0x60000d0000L, active4, 0x4020L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x34000b00L, active2, 0xe000000000008000L, active3, 0x228000000L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 82);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 247, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1002L, active2, 0x1000000000000800L, active3, 0L, active4, 0x12040L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 82);
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 140, 82);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 183, 82);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 209, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0xa0000000000cL, active2, 0x80000L, active3, 0x1000000000L, active4, 0x400L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0x1000000000000000L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000010000300L, active2, 0x2000010020L, active3, 0xc1200000000L, active4, 0L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0x600000000000000L, active5, 0L);
      case 67:
      case 99:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 173, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1001000002L, active2, 0L, active3, 0x20000000900L, active4, 0x20000L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 82);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 82);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 82);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 189, 82);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 218, 82);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 269, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0x2080000000000000L, active1, 0x40020000000L, active2, 0L, active3, 0x1000000000000002L, active4, 0x10000L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 82);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 152, 82);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 249, 82);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 277, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x500000000000L, active1, 0x200000000008L, active2, 0x1000000000080800L, active3, 0x20000000L, active4, 0x20L, active5, 0x3000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000000000L, active5, 0L);
      case 76:
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 82);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 166, 82);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 186, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000000100L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 82);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 82);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 208, 82);
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 240, 82);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 270, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x800000000L, active2, 0L, active3, 0x16000480040L, active4, 0x40000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0x8000000L, active4, 0x800000000000000L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200001000L, active2, 0x100000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 142, 82);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 248, 82);
         break;
      case 83:
      case 115:
         if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 278, 82);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 284, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 82);
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 82);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 114, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0x5000002200000000L, active1, 0x1e0080L, active2, 0x90L, active3, 0x10000000L, active4, 0x400000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0x4L, active4, 0x400L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x80L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 191, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1e0000L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(7, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0x10000L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 82);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 93, 82);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 261, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 82);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 82);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 82);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 82);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 96, 82);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 150, 82);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 190, 82);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 199, 82);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 220, 82);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 265, 82);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 273, 82);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 290, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0x5000000000000000L, active1, 0x800000000L, active2, 0x400000008000L, active3, 0x6000000000L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 232, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0x2L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x380L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 75:
      case 107:
         if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 203, 82);
         break;
      case 76:
      case 108:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 82);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 144, 82);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 165, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L, active5, 0x3000L);
      case 78:
      case 110:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 187, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0x20000000L, active4, 0x800000000000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0x200000001008L, active2, 0x1000000000080080L, active3, 0L, active4, 0x100000000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 219, 82);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 252, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000004L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 184, 82);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 262, 82);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 274, 82);
         break;
      case 84:
      case 116:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 100, 82);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 200, 82);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 214, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x600000000L, active2, 0x820L, active3, 0xe0000000000L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 132, 82);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStopAtPos(7, 313);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStopAtPos(7, 314);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x6000000000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 133, 82);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 194, 82);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 234, 82);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 266, 82);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStopAtPos(8, 315);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x42L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 221, 82);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000L, active2, 0x800L, active3, 0xa0000000000L, active4, 0x100000000000000L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 82);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 82);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 82);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 147, 82);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 188, 82);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1300L, active2, 0x400000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000080L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 228, 82);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x3000L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 135, 82);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0x10c0000L, active2, 0L, active3, 0L, active4, 0x10000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 136, 82);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 225, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 88, 82);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 92, 82);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 51, 47);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xc0000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x3000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(9, 71, 82);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStopAtPos(9, 312);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xa0000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 97, 82);
         break;
      case 83:
      case 115:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 193, 82);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 198, 82);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 272, 82);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 99, 82);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 143, 82);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000400000000000L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, 0L, active5);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 139, 82);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0x80000L, active5, 0x3000L);
      case 72:
      case 104:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 61, 47);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active1, 0x1000L, active2, 0L, active3, 0x4000000000L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xc0000L, active2, 0L, active3, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 233, 82);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 235, 82);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 223, 47);
         break;
      case 83:
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 73, 82);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 98, 82);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L, active2, 0x400000000000L, active3, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, 0L, active5);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 47);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0x80000L, active2, 0L, active3, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 174, 47);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active5, 0x3000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0x4000000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 84, 47);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(11, 211, 47);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, 0L, active5);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x3000L);
      case 71:
      case 103:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(12, 76, 82);
         break;
      case 78:
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 46, 82);
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000000L, active1, 0L, active3, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 229, 47);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000L, active3, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x4000000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L, active3, 0L, active5);
      return 13;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000000L, active1, 0L, active3, 0L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active5, 0x3000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000L, active3, 0x4000000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, active3, 0L, active5);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000L, active3, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 230, 47);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L, active1, 0L, active3, 0L, active5, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, active3, 0L, active5);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old3, long active3, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, old3, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L, 0L, 0L, active5);
      return 15;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active5, 0x3000L);
      case 72:
      case 104:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 62, 47);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L, 0L, 0L, active5);
      return 16;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active5, 0x3000L);
      case 80:
      case 112:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(16, 83, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old5, long active5)
{
   if (((active1 &= old1) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, 0L, active5);
      return 17;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa18_0(active5, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa18_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, 0L, active5);
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_0(active5, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa19_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
      return 19;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa20_0(active5, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa20_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
      return 20;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa21_0(active5, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa21_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
      return 21;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa22_0(active5, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa22_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
      return 22;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa23_0(active5, 0x1000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa23_0(active5, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa23_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, 0L, 0L, 0L, active5);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa24_0(active5, 0x1000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa24_0(active5, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa24_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, 0L, 0L, 0L, active5);
      return 24;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa25_0(active5, 0x2000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa25_0(active5, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa25_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, 0L, 0L, 0L, active5);
      return 25;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa26_0(active5, 0x2000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa26_0(active5, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa26_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, 0L, 0L, 0L, active5);
      return 26;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa27_0(active5, 0x2000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa27_0(active5, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa27_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, 0L, 0L, 0L, active5);
      return 27;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa28_0(active5, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa28_0(active5, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa28_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, 0L, 0L, 0L, active5);
      return 28;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa29_0(active5, 0x2000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa29_0(active5, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa29_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, 0L, 0L, 0L, 0L, active5);
      return 29;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa30_0(active5, 0x2000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa30_0(active5, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa30_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, 0L, 0L, 0L, 0L, active5);
      return 30;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa31_0(active5, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa31_0(active5, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa31_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, 0L, 0L, 0L, 0L, active5);
      return 31;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa32_0(active5, 0x2000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa32_0(active5, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa32_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, 0L, 0L, 0L, 0L, active5);
      return 32;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active5 & 0x1000L) != 0L)
            return jjStopAtPos(32, 332);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa33_0(active5, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa33_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, 0L, 0L, 0L, 0L, 0L, active5);
      return 33;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa34_0(active5, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa34_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, 0L, 0L, 0L, 0L, 0L, active5);
      return 34;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa35_0(active5, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, active5);
}
private final int jjMoveStringLiteralDfa35_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, 0L, 0L, 0L, 0L, 0L, active5);
      return 35;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active5 & 0x2000L) != 0L)
            return jjStopAtPos(35, 333);
         break;
      default :
         break;
   }
   return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, active5);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 77;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 47:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 77:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 47)
                     jjCheckNAdd(5);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 10)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 83:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 44:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  else if (curChar == 39)
                     jjCheckNAdd(18);
                  break;
               case 79:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 39)
                  {
                     if (kind > 303)
                        kind = 303;
                  }
                  break;
               case 80:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 47)
                     jjCheckNAdd(5);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 78:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 47)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddStates(4, 9);
                  }
                  break;
               case 82:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 40:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 324)
                        kind = 324;
                     jjCheckNAdd(75);
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 330)
                        kind = 330;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 66);
                  break;
               case 81:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 34)
                  {
                     if (kind > 318)
                        kind = 318;
                  }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 322)
                        kind = 322;
                     jjCheckNAddStates(10, 15);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 46)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(5, 52);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 42:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 0:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 1:
                  if (curChar == 10)
                     jjCheckNAddStates(0, 3);
                  break;
               case 2:
                  if (curChar == 13)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar != 45)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(4, 9);
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar != 47)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(4, 9);
                  break;
               case 6:
                  if (curChar == 47)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(4, 9);
                  break;
               case 8:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 3);
                  break;
               case 9:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(1, 10);
                  break;
               case 10:
                  if (curChar != 10)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 3);
                  break;
               case 13:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 303)
                     kind = 303;
                  break;
               case 18:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 39 && kind > 304)
                     kind = 304;
                  break;
               case 20:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 306)
                     kind = 306;
                  jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 39)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 39 && kind > 306)
                     kind = 306;
                  break;
               case 27:
                  if (curChar == 62 && kind > 309)
                     kind = 309;
                  break;
               case 28:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 61 && kind > 309)
                     kind = 309;
                  break;
               case 30:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 48:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar == 34 && kind > 318)
                     kind = 318;
                  break;
               case 51:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(5, 52);
                  break;
               case 52:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 42)
                     jjCheckNAddStates(19, 21);
                  break;
               case 55:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 54);
                  break;
               case 56:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 54);
                  break;
               case 57:
                  if (curChar != 47)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(22, 24);
                  break;
               case 58:
                  if (curChar == 47)
                     jjCheckNAdd(52);
                  break;
               case 59:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(58);
                  break;
               case 60:
                  if (curChar != 10)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(58);
                  break;
               case 61:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAddStates(10, 15);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 64:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjCheckNAdd(69);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 324)
                     kind = 324;
                  jjCheckNAddTwoStates(70, 71);
                  break;
               case 71:
                  if (curChar != 46)
                     break;
                  if (kind > 324)
                     kind = 324;
                  jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 324)
                     kind = 324;
                  jjCheckNAdd(72);
                  break;
               case 73:
                  if (curChar == 46)
                     jjCheckNAddStates(16, 18);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 66);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 324)
                     kind = 324;
                  jjCheckNAdd(75);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 316)
                        kind = 316;
                  }
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 316)
                        kind = 316;
                  }
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  break;
               case 79:
               case 14:
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 81:
               case 49:
                  jjCheckNAddTwoStates(49, 50);
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAdd(47);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 317)
                        kind = 317;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 7:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(4, 9);
                  break;
               case 12:
                  if (curChar == 124 && kind > 27)
                     kind = 27;
                  break;
               case 16:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 21:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 306)
                     kind = 306;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L && kind > 316)
                     kind = 316;
                  break;
               case 34:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 38:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 45:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjCheckNAdd(47);
                  break;
               case 53:
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
               case 56:
                  jjCheckNAddTwoStates(56, 54);
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 79:
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 81:
               case 49:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(4, 9);
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
               case 56:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(56, 54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 77 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   0, 2, 4, 6, 0, 4, 6, 7, 8, 9, 63, 64, 66, 69, 70, 71, 
   74, 75, 76, 54, 55, 57, 58, 59, 61, 63, 64, 66, 25, 26, 67, 68, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\42\42", "\45", "\46", "\47", 
"\50", "\51", "\52", "\53", "\54", "\55", "\56", "\57", "\72", "\73", "\74", "\75", 
"\76", "\77", "\137", null, "\174", "\136", "\176", "\133", "\135", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\173", 
"\175", "\44", null, null, null, null, null, null, null, "\74\75", "\76\75", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0x7fe5ffffffffffffL, 0x3c1eL, 
};
static final long[] jjtoSkip = {
   0xf2L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[77];
private final int[] jjstateSet = new int[154];
protected char curChar;
public AdqlStoXTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AdqlStoXTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 77; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 331)
   {
      jjmatchedKind = 331;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
