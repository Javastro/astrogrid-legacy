/* Generated By: AdqlStoX.jjt,v 1.15 2006/10/02 09&JJTree: Do not edit this line. SimpleNode.java */

package org.astrogrid.adql;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.SchemaType;
import org.astrogrid.adql.beans.SelectionListType;
// import org.astrogrid.adql.beans.LinkedListType;
import org.astrogrid.adql.beans.UnaryExprType;
import org.astrogrid.adql.beans.AtomType;
import org.astrogrid.adql.beans.LiteralType;
import org.astrogrid.adql.beans.RealType;
import org.astrogrid.adql.beans.IntegerType;

public abstract class SimpleNode implements Node {
    
  private static Log log = LogFactory.getLog( SimpleNode.class ) ;
      
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected AdqlStoX adqlstox;
  protected Object generatedObject = null ;
  protected String elementName ;
  protected SchemaType schemaType ;
  
  protected Token firstToken, lastToken;
  
  public SimpleNode( AdqlStoX p, int i ) {
    this.id = i ;
    adqlstox = p;
  }

  public void jjtOpen() {}

  public void jjtClose() {}
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return AdqlStoXTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump( String prefix ) {
    log.debug( toString( prefix ) ) ;
    if (children != null) {
        for (int i = 0; i < children.length; ++i) {
            SimpleNode n = (SimpleNode)children[i];
            if (n != null) {
                n.dump(prefix + " ");
            }
        }
    }
  }

  public Object getGeneratedObject() {
    return generatedObject;
}


public void setGeneratedObject( Object generatedObject ) {
    this.generatedObject = generatedObject ;
}

public void buildXmlTree( XmlObject xo ) {
    writeCommentsForChildren() ;
};

public void buildXmlTree() {
    ;
}

public Token getFirstToken() {
    return firstToken;
}

public void setFirstToken(Token firstToken) {
    this.firstToken = firstToken;
}

public Token getLastToken() {
    return lastToken;
}

public void setLastToken(Token lastToken) {
    this.lastToken = lastToken;
}

public boolean isCommentPresent() {
    // It has to be an XmlObject to be relevant (it could be a String!)
    // The special token may not exist and if it does it must be of
    // kind COMMENT (otherwise why are we trying to write a comment?).
    if( generatedObject instanceof XmlObject 
        &&
        firstToken.specialToken != null ) {
              
        if( firstToken.specialToken.kind == AdqlStoXConstants.COMMENT ) {
            // There is at least one exception where it would be nonsensical
            // to record the presence of a comment. The only one at 
            // present is the SelectionListType, since it has no visual
            // cue in Adql/s...
            if( generatedObject instanceof SelectionListType )
                return false ;
            
            return true ;
        }
        
    }
    return false ;
}

public void writeCommentsForChildren() {
    //
    // Attempt to write comments for this node's children...
    if( children != null ) {
        SimpleNode node = null ;
        for( int i=0; i<children.length; i++ ) {
            node = (SimpleNode)children[i] ;
            if( node.isCommentPresent() ) {
                if( this.isCommentPresent() ) {
                    //
                    // Check to see that they are not the same comment...
                    if( node.firstToken.specialToken.image.equals( this.firstToken.specialToken.image ) )
                        continue ;
                }
                //
                // OK. We have a genuine comment to write for this child...
                node.writeComment( (XmlObject)this.generatedObject ) ;
            }
        }
    }
}

public void writeComment( XmlObject parent ) {
    if( log.isTraceEnabled() ) { enterTrace( log, "writeComment()"); }
   
    XmlCursor cursor = null ;
    try {
        XmlObject xo = null ;
        XmlObject go = (XmlObject)this.generatedObject ;
        cursor = go.newCursor() ;
        String comment = firstToken.specialToken.image ;
        if( log.isDebugEnabled() ) {
            log.debug( "go.schemaType: " + go.schemaType().getName() ) ;
            log.debug( "comment.length(): " + comment.length() ) ;
            log.debug( "Writing comment: " + comment ) ;
            log.debug( go.toString() ) ;
        }  
        
//        if( !cursor.toChild(0) ) {
//            cursor.toEndToken() ;
//        }

        Token tmpToken = firstToken.specialToken ;
        while( tmpToken.specialToken != null ) tmpToken = tmpToken.specialToken;
          // The above line walks back the special token chain until it
          // reaches the first special token after the previous regular
          // token.
        while (tmpToken != null) {
            cursor.insertComment( adqlstox.parser.prepareComment( tmpToken.image ) ) ;
          tmpToken = tmpToken.next;
        }
      
    }
    catch( Exception ex ) {
        log.debug( "Problem encountered whilst writing a comment.", ex ) ;
    }
    finally {
        if( cursor != null )
            cursor.dispose();
    }

    if( log.isTraceEnabled() ) { exitTrace( log, "writeComment()" ) ; }   
}

public Tracker getTracker() {
    return adqlstox.tracker ;
}

protected void pushPosition() {
    if( elementName != null ) {
        if( schemaType != null ) {
            adqlstox.tracker.push( elementName, schemaType ) ;
        }
        else {
            adqlstox.tracker.push( elementName ) ;
        }
    }
    else {
        if( log.isDebugEnabled() ) {
            log.debug( "pushPosition() invoked where elementName null" ) ;
        }
        if( schemaType != null ) {
            adqlstox.tracker.setType( schemaType ) ;
        }
    }
}

protected void pushPosition( String elementName, SchemaType type ) {
    this.elementName = elementName ;
    this.schemaType = type ;
    pushPosition() ;
}

protected void pushPosition( String elementName ) {
    this.elementName = elementName ;
    pushPosition() ;
}

protected void popPosition( String elementName ) {
    if( elementName != null ) {
        Tracker.Part part = adqlstox.tracker.peek() ;
        if( part == null)
            return ;
        String name = part.getElement() ;
        if( name.equals( elementName ) ) {
            adqlstox.tracker.pop() ;  
        }
        else if( log.isDebugEnabled() ) {
            log.debug( "popPosition() out of synch. Stack: [" + name + "] Request: [" + elementName + "]" ) ;
        }            
    }
}

protected void popPosition() {   
    adqlstox.tracker.pop() ;  
}

protected void setPositionType( SchemaType schemaType ) {
    this.schemaType = schemaType ;
    adqlstox.tracker.setType( schemaType ) ;
}

protected Double unpackNumericLiteral( final XmlObject source ) {   
    Double retVal = null ;
    XmlObject tmp = source ;
    
    int sign = +1 ;
    if( source instanceof UnaryExprType ) {
        UnaryExprType uet = ((UnaryExprType)source) ;
        if( uet.getOper().toString().equals( "-" ) ) {
            sign = -1 ;
        }
        tmp = uet.getArg() ;
    }
    else {
        tmp = source ;
    }
    
    if( tmp instanceof AtomType ) {
        LiteralType lt = ((AtomType)tmp).getLiteral() ;

        if(  lt instanceof IntegerType ) {          
            retVal = new Double( ((IntegerType)lt).getValue() * sign ) ;
        }
        else if( lt instanceof RealType ) {
            retVal = new Double( ((RealType)lt).getValue() * sign ) ;
        }
    }
   
    return retVal ;
}

public void enterTrace( Log log, String entry ) {
    log.trace( adqlstox.parser.getIndent().toString() + "enter: " + entry ) ;
    adqlstox.parser.indentPlus() ;
}

public void exitTrace( Log log, String entry ) {
    adqlstox.parser.indentMinus() ;
    log.trace( adqlstox.parser.getIndent().toString() + "exit : " + entry ) ;
}
  
} // end of class SimpleNode

