/* Generated By: AdqlStoX.jjt,v 1.33.2.4 2006-12-19 14&JJTree: Do not edit this line. AST_NumericValueExpression.java */

package org.astrogrid.adql;

import org.astrogrid.adql.beans.BinaryExprType;
import org.astrogrid.adql.beans.BinaryOperatorType;
import org.apache.xmlbeans.XmlObject ;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_NumericValueExpression extends SimpleNode {
 
    private static Log log = LogFactory.getLog( AST_NumericValueExpression.class ) ;
   
    Token binaryOpToken = null ;
    
    public AST_NumericValueExpression(AdqlStoX p, int id) {
        super(p, id);
    }
    
    public void setOperator( Token binaryOpToken, String elementName ) {       
        this.binaryOpToken = binaryOpToken ;
        pushPosition( elementName, BinaryExprType.type ) ;
        Tracker t = getTracker() ;
        //
        // Adjust the child count. 
        // As a binary operation, it already has one child...
        Tracker.Part p = t.peek() ;
        if( p != null) {
            p.setChildCount( 1 ) ;       
        }

        //
        // Keep the current element but change its type to operator...
        t.setType( BinaryExprType.type ) ;
    }
    
    public boolean isSetOperator() {
        return binaryOpToken != null ;
    }
    
    public void buildXmlTree( XmlObject xo ) {   
        if( log.isTraceEnabled() ) enterTrace( log, "AST_NumericValueExpression.buildXmlTree()" ) ; 
        int childCount = jjtGetNumChildren() ;
        StringBuffer buffer = null ;
        if( log.isDebugEnabled() ) {
            buffer = new StringBuffer() ;
            buffer
                .append( "childCount: ") 
                .append( childCount ) ;         
        }
        
        if( isSetOperator() == false ) {
            children[0].buildXmlTree( xo ) ;
            this.generatedObject = children[0].getGeneratedObject() ;
        }
        else {
            BinaryExprType beType = (BinaryExprType)xo.changeType( BinaryExprType.type ) ;
            beType.setOper( BinaryOperatorType.Enum.forString( binaryOpToken.image ) ) ;
            if( log.isDebugEnabled() ) {
                buffer
                    .append( "\nbinaryOpToken: " )
                    .append( binaryOpToken.image ) ;
            }     
            for( int i=0; i<childCount; i++ ) {
                children[i].buildXmlTree( beType.addNewArg() ) ;
                if( log.isDebugEnabled() ) {
                    buffer
                        .append( "\narg " ) 
                        .append( i )
                        .append( ": \n" )
                        .append( beType.getArgArray(i) ) ;
                }
            }
            this.generatedObject = beType ;
        }
        super.buildXmlTree( (XmlObject)this.generatedObject ) ;
//        if( log.isDebugEnabled() ) {
//            log.debug( buffer.toString() ) ;
//        }
        if( log.isTraceEnabled() ) exitTrace( log, "AST_NumericValueExpression.buildXmlTree()" ) ; 
        
    }

}
