/* Generated By: AdqlStoX.jjt,v 1.49.2.18 2008/07/04 09&JJTree: Do not edit this line. AST_BitStringLiteral.java */

package org.astrogrid.adql;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.xmlbeans.XmlObject;
import org.astrogrid.adql.beans.AtomType;
import org.astrogrid.adql.beans.BitStringType;
import org.astrogrid.adql.beans.HexStringType;

public class AST_BitStringLiteral extends SimpleNode {
    
    private static Log log = LogFactory.getLog( AST_BitStringLiteral.class ) ;

  public AST_BitStringLiteral(AdqlStoX p, int id) {
    super(p, id);
  }
  
  public void buildXmlTree( XmlObject xo ) {
      if( log.isTraceEnabled() ) enterTrace( log, "AST_BitStringLiteral.buildXmlTree()" ) ;
      
      AtomType at = (AtomType)xo.changeType( AtomType.type ) ;
      
      // Examples of a bit string literal:
      // B'1010' or b'1010' 
      //
      // Jeff: I had allowed for 1010 being a binary string literal but
      // have not found a good way to disambiguite it from a normal numeric.
      // For example, it confuses "select TOP 1000 from etc"
      //
      // Examples of a hex string literal:
      // X'00A100FFFF' or x'00a100fff' or x00a100ffff
      //
      String image = getFirstToken().image.toUpperCase() ; 
      if( image.startsWith( "B" ) ) {
          BitStringType bst = BitStringType.Factory.newInstance() ;
          bst.setValue( image.substring( 2, image.length()-1 ) ) ;
          at.setLiteral( bst ) ;
      }
      else if( image.startsWith( "X" ) ) {
          HexStringType bst = HexStringType.Factory.newInstance() ;
          bst.setValue( image.substring( 2, image.length()-1 ) ) ;
          at.setLiteral( bst ) ;
      }
      else if( image.startsWith( "0X" ) ) {
          HexStringType bst = HexStringType.Factory.newInstance() ;
          bst.setValue( image.substring( 2 ) ) ;
          at.setLiteral( bst ) ;
      }
      
      if( log.isDebugEnabled() ) {
          log.debug( "at.getLiteral(): " + at.getLiteral() ) ;
      }
      this.setGeneratedObject( at ) ;
      super.buildXmlTree(at) ;
      if( log.isTraceEnabled() ) exitTrace( log, "AST_BitStringLiteral.buildXmlTree()" ) ;
  }

}
