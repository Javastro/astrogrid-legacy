/* Generated By: AdqlStoX.jjt,v 1.49.2.18 2008/07/04 09&JJTree: Do not edit this line. AST_BitFactor.java */

package org.astrogrid.adql;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.xmlbeans.XmlObject;
import org.astrogrid.adql.beans.BinaryExprType;
import org.astrogrid.adql.beans.BinaryOperatorType;

public class AST_BitFactor extends SimpleNode {
    
    private static Log log = LogFactory.getLog( AST_BitFactor.class ) ;
    
    String operator ;
    
    public void setOperator( String operator ) {
        this.operator = operator ;
    }

  public AST_BitFactor(AdqlStoX p, int id) {
    super(p, id);
  }
  
public void buildXmlTree( XmlObject xo ) {
    if( log.isTraceEnabled() ) enterTrace( log, "AST_BitTerm.buildXmlTree()" ) ; 
    int childCount = jjtGetNumChildren() ;
    StringBuffer buffer = null ;
    if( log.isDebugEnabled() ) {
        buffer = new StringBuffer() ;
        buffer
            .append( "childCount: ") 
            .append( childCount ) ;         
    }
    if( operator == null ) {
        children[0].buildXmlTree( xo ) ;
        this.generatedObject = children[0].getGeneratedObject() ;
        if( log.isDebugEnabled() ) {
            buffer
                .append( "\n setOperator() is false. " )
                .append( "\n generatedObject set to one of " + this.generatedObject.getClass() )
                .append( "\n generatedObjec.toString(): " + this.generatedObject.toString() );
        }
    }
    else {
        BinaryExprType beType = (BinaryExprType)xo.changeType( BinaryExprType.type ) ;
        beType.setOper( BinaryOperatorType.Enum.forString( this.operator ) ) ;
        if( log.isDebugEnabled() ) {
            buffer
                .append( "\nbinaryOpToken: " )
                .append( this.operator ) ;
        }
        for( int i=0; i<childCount; i++ ) {
            children[i].buildXmlTree( beType.addNewArg() ) ;
            if( log.isDebugEnabled() ) {
                buffer
                    .append( "\narg" ) 
                    .append( i )
                    .append( ": \n" )
                    .append( beType.getArgArray(i) ) ;
            }
        }
        setGeneratedObject( beType ) ;
    }
    
    if( log.isDebugEnabled() ) {
        log.debug( buffer.toString() ) ;
    }
    super.buildXmlTree( (XmlObject)this.generatedObject ) ;
    if( log.isTraceEnabled() ) exitTrace( log, "AST_BitTerm.buildXmlTree()" ) ; 
}

}
