<?xml version="1.0"?>
<!-- extension maven script -->
<project  xmlns:j="jelly:core"  xmlns:jsl="jelly:jsl" xmlns:jxml="jelly:xml">

        <goal name="astrogrid-deploy-site">
            <echo message="Please deploy the site docs from the base aggregate project"/>
        </goal>

        <goal name="astrogrid-deploy-artifact" prereqs="dist:deploy-bin,publish-beta-jnlp">
                <echo>Published JNLP as Beta. After installation testing run
                'maven publish-jnlp' on this project to publish the release version
                </echo>
        </goal>
        <goal name="astrogrid-build-artifact" prereqs="dist:build-bin,beta,release,jnlp"/>

<!-- publishing goals -->

<goal name="publish-jnlp" 
      description="Publish the release configuration of this JNLP at the release URL"
      prereqs="release,jnlp,site:sshdeploy" />
<goal name="publish-beta-jnlp" 
      description="Publish the beta configuration of this JNLP at the beta URL"
      prereqs="beta,release,jnlp,site:sshdeploy"/>
<goal name="publish-alpha-jnlp" 
      description="Publish the alpha configuration of this JNLP at the alpha url"
      prereqs="alpha,release,jnlp,site:sshdeploy"/>

<!-- zap values in pom, to adjust publish location -->
<goal name="release">
        <j:set var="_dir" value="/var/www/software/jnlp/${subPath}${pom.artifactId}/"/>
        ${pom.setSiteDirectory(_dir)}
        <echo>Publish location set to ${pom.siteDirectory}</echo>
</goal>

<goal name="beta">
        <j:set var="subPath" value="beta/" />
        <j:set var="jnlpVersion" value=" (BETA)" />
</goal>

<goal name="alpha">
        <j:set var="subPath" value="alpha/" />
        <j:set var="jnlpVersion" value=" (ALPHA)" />
</goal>


<!-- set up dist to do what we want -->
        <!-- remove artificial jar, but add in dependencies -->
        <postGoal name="dist:prepare-bin-filesystem">
                <j:if test="${keepProjectJars!='true'}">
                    <delete>
                        <fileset dir="${maven.dist.bin.assembly.dir}">
                                <include name="*.jar" />
                        </fileset>
                    </delete>
                </j:if>
                <j:forEach var="lib" items="${pom.artifacts}">
                        <j:set var="dep" value="${lib.dependency}"/>
                                <j:if test="${dep.getProperty('dist.bundle')=='true'}">
                                        <copy todir="${maven.dist.bin.assembly.dir}" file="${lib.path}"/>
                                </j:if>
                </j:forEach>
         </postGoal>


	 
<!-- set up jnlp - remove artifical jar, sign jars, munge jnlp -->
        <postGoal name="jnlp:generate-jnlp">
                <j:if test="${keepProjectJars.getValue()!='true'}">
                    <delete>
                        <fileset dir="${maven.jnlp.dir}">
                                <include name="${pom.artifactId}*.jar" />
                        </fileset>
                    </delete>
                </j:if>
		<copy todir="${maven.jnlp.dir}">
			<fileset dir="${basedir}/src/webapp" />
		</copy>
                <!-- sign jars by hand - as maven jnlp task is flakey - todo - check whether maven task is still a problem -->
                <signjar alias="astrogrid" storepass="qwertyuiop">
                        <fileset dir="${maven.jnlp.dir}">
                                <include name="*.jar" />
                        </fileset>
                </signjar>		
		<attainGoal name="define-stylesheet" />
                <attainGoal name="patch-jnlp" />
        </postGoal>

  <goal name="define-stylesheet">
	  <!-- override this to use an alternate stylesheet -->
	  <echo>defining stylesheet for core CDK</echo>
	<jsl:stylesheet var="patch">
		<jsl:template match="jar[starts-with(@href,'astrogrid-cdk-')]"> <!-- gah- ${pom.artifactId} won't work here -->
		</jsl:template>
		<jsl:template match="jar[not(starts-with(@href,'astrogrid-cdk-')]">
			<jxml:copyOf select="." />
		</jsl:template>
		<jsl:template match="information|security|application-desc|component-desc|property"> <!-- deliberately omitted j2se - as an extension descriptor shouldn't specify this -->
			<jxml:copyOf select="." />
		</jsl:template>
		<jsl:template match="jnlp|resources|@*">
			<jxml:copy>
				<jsl:applyTemplates select="@* | node()" />
			</jxml:copy>
		</jsl:template>
             </jsl:stylesheet>	
     </goal>
     
        <goal name="patch-jnlp">
                <echo>Patching JNLP file</echo>
                <!-- remove dependency on dummy jar - as breaks jnlp
                a bit convoluted - as template priorities, and jxml:if appears to be broken ..
                and there's a barrier between jelly variables and expressions in jsl..
                upshot is that the stylesheet becomes more brittle - need to watch it.
                -->
             ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}

             <!-- read in original jnlp -->
             <jxml:parse var="originalJNLP" xml="file://${maven.jnlp.dir}/${pom.artifactId}.jnlp" />
             <!-- apply stylesheet -->
             <j:file name="${maven.jnlp.dir}/${pom.artifactId}.jnlp">
                <jsl:style stylesheet="${patch}" select="$originalJNLP" />
             </j:file>
        </goal>


</project>
