#!/usr/bin/env groovy
/**
  copy files between local file system, myspace, stdin, stdout, and remote URLs
*/

import org.apache.commons.cli.HelpFormatter;

class Vocp extends org.astrogrid.ui.script.commandline.CommandlineApplication {

static void main(String[] args) {
        (new Vocp()).run(args)
}

void doIt() {
if (line.hasOption "h") {
  displayHelp()
  System.exit(0)
}

src = expandReference(line.getArgs()[0])
dest = expandReference(line.getArgs()[1])

if (dest.startsWith("ivo://") && src.startsWith("ivo://")) { // its a remotve move..
   client = astrogrid.createVoSpaceClient user
   client.copy(src,dest)
}
else if (dest.startsWith("ivo://") && isRemoteURL(src)) {//if dest is an ivorn, can use an optimal method
   client = astrogrid.createVoSpaceClient user
  client.putUrl(src.toURL(),dest,false)
}
else { // have to pipe it ourselves.
  is = null
  os = null
  if (src == "-") {
        is = System.in
  } else {
    is = astrogrid.ioHelper.getExternalValue(src).read()
  }

  if (dest == "-") {
        os =  System.out
  } else {
     os = astrogrid.ioHelper.getExternalValue(dest).write()
  }

  is.withStream{ iss |
        os.withStream{ oss |
                astrogrid.ioHelper.bufferedPipe(iss,oss)
                }
        }
}

}

void displayHelp() {
        (new HelpFormatter()).printHelp(
<<<DOC
vocp [options] <src-file> <dest-file>
where src, dest may be any of
http://... a http resource
ftp://...  a ftp resource
ivo://...  a myspace resource
file:/...  a file resource
-          standard input / output.
vocp also supports an abridged notation for myspace locations, in the form
#/fred/path - equivalent to ivo://default-community/fred#/fred/path

anything else is interpreted as a local file path

VOCP will use the most efficient method of moving data from src to dest - i.e.
if both are remote, no data will pass through this client.

NB: writing to http:// and ftp:// urls is likely to fail.
DOC
,o)
}
String expandReference(s) { // make this the full form of whatever it is.
   if (["ivo://","http://","file:/","ftp://","-"].any{s.startsWith(it)}) {
        return s;
   }
   if (s.startsWith "#") {
        return mkFull(s).toString()
   }
   // assume to be file.
   return (new java.io.File(s)).toURL().toString()
}

boolean isRemoteURL(src) {
  return ["http://","ftp://"].any{src.startsWith(it)}
}


}
