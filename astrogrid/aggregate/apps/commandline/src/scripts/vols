#!/usr/bin/env groovy
import org.apache.axis.utils.XMLUtils
import org.apache.commons.cli.*
import org.astrogrid.ui.script.*;


/**inefficient implementation at the moment - hamstrung by current myspace implementation
 */
// setup commandline options
class Vols {
Options o = new Options()

Vols() {
o.addOption("l","long",false,"long format")
o.addOption("1","one-per-line",false,"list one file per line")
o.addOption("d","directory",false,"list directory instead of contents")
o.addOption("F","classify",false,"append indicator to entries")
o.addOption("Q","quote-name",false,"enclose entry names in double quotes")
o.addOption("R","recursive",false,"list subdirectories recursively")

 .addOption("u","user",true,"username (optional)")
 .addOption("p","password",true,"password (optional)")
 .addOption("c","community",true,"community (optional)")

og = new OptionGroup()
['F','Q'].each{og.addOption(o.getOption(it))}
o.addOptionGroup(og)
}

astrogrid;
user;
account;
homeIvorn;
userIvorn;
password;
line;
static void main(String[] args) {
        new Vols().run(args)
}
void run(args) {
parser = new PosixParser()
try {// catch all exceptio handler.

line = parser.parse(o,args)
login(line)
location = astrogrid.createTreeClient(userIvorn,password).root
//now need to iterate down fragments of the ivorn..
ivorn =  mkFull(line.args.length > 0 ? line.args[0] : homeIvorn.toString())
if (ivorn.path != homeIvorn.path) {
        throw new IllegalArgumentException("Cannot view another user's directory")
}

path = ivorn.fragment.tokenize("/").reverse()
path.pop() // gets rid of the root.
path.reverse().each {name |
	   location = location.childNodes.find{it.name == name}
}


formatter = mkFormatter()

if (line.hasOption("R") && location.isContainer()) {
        recurse(location,formatter)
} else {
        display(location,formatter)
}

} catch (Exception e) { // catch all, for better reporting.
        println("An Error occurred :" + e.class.name)
        println(e.message)        
        displayHelp()
        System.exit(-1)
}
}
void displayHelp() {
        (new HelpFormatter()).printHelp(
<<<DOC
vols [options] <resource>
  do a 'ls' on a myspace resource owned by the current user
  if resource is unspecified, defaults to users' homedir in myspace.
  resource may be given in full ivo://.. form, or abridged #... form

DOC
,o)
}

Object mkFull(s) { // make this the full form of myspace reference.
   u = null;
   if (s.startsWith "ivo://") {
        return astrogrid.objectBuilder.newIvorn(s)
   }
   tok = s.tokenize("/").reverse();
   if (s.startsWith "#/") {
       tok.pop()// skip junk
        u = tok.pop()
        return astrogrid.objectBuilder.newIvorn(account.community,u,s.substring 1)
   } else  if (s.startsWith "#") { // error tolerant, of not qute correct syntax
        u = tok.pop().substring 1        
        return astrogrid.objectBuilder.newIvorn(account.community,u,"/" + s.substring(1))
   } else { // assume to be something else, and pass thru
     return s
   }
}

void login(line) {
u=null
if (line.hasOption "u") {
        u = line.getOptionValue "user"
}

p=null
if (line.hasOption "p") {
        p = line.getOptionValue "password"
}
comm=null
if (line.hasOption "c") {
        comm = line.getOptionValue "community"
}
  env = LoginFactory.login(u,comm,p);
  astrogrid = env.astrogrid;
  user = env.user
  account = env.account
  homeIvorn = env.homeIvorn
  userIvorn = env.userIvorn
  password = env.password
}



Object mkFormatter() {
  formatter = {file | file.name}
  if (line.hasOption "F") {
        formatter = {file | file.name + (file.isContainer()?"/":"")}
  }
  if (line.hasOption "Q") {
        formatter = {file | '"' + file.name + '"'}
  }


  if (line.hasOption "l") {
        return {file | "${(file.isContainer()? '<dir>' : file.mimeType).padRight(40)}\t${formatter(file)}" }
  } else {
        return formatter
  }
}

void display(location,formatter) {
        if (location.isContainer() && !line.hasOption("d")) {
                if (!line.hasOption("1")) {
                        int count = 0;
                        location.childNodes.each{
                                if (++count % 3 == 0) {
                                        println(formatter(it))
                                } else {
                                        print(formatter(it).padRight(20) + " ")                                        
                                }
                        }
                        if (count %3 != 0) {
	                        println("")
	                    }
                } else {
                        location.childNodes.each {println(formatter(it))}
                }
        } else {
        println formatter(location)
        }
}

void recurse(location,formatter) {
        println(location.name + ":")
        display(location,formatter)
        println("")
        location.childNodes.findAll{it.isContainer()}.each{recurse(it,formatter)}
}

}