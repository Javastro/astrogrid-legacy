#!/usr/bin/env groovy
/**
list a directory / file in myspace
*/
import org.apache.commons.cli.HelpFormatter;

/**inefficient implementation at the moment - hamstrung by current myspace implementation
 */
// setup commandline options
class Vols extends org.astrogrid.ui.script.commandline.CommandlineApplication{

Vols() {
o.addOption("l","long",false,"long format")
o.addOption("1","one-per-line",false,"list one file per line")
o.addOption("d","directory",false,"list directory instead of contents")
o.addOption("F","classify",false,"append indicator to entries")
o.addOption("Q","quote-name",false,"enclose entry names in double quotes")
o.addOption("R","recursive",false,"list subdirectories recursively")


['F','Q'].each{og.addOption(o.getOption(it))}
o.addOptionGroup(og)
}


static void main(String[] args) {
        new Vols().run(args)
}
void doIt() {
location = astrogrid.createTreeClient(userIvorn,password).root
//now need to iterate down fragments of the ivorn..
ivorn =  mkFull(line.args.length > 0 ? line.args[0] : homeIvorn.toString())

path = ivorn.fragment.tokenize("/").reverse()
path.pop() // gets rid of the root.
path.reverse().each {name |
           location = location.childNodes.find{it.name == name}
}


formatter = mkFormatter()

if (line.hasOption("R") && location.isContainer()) {
        recurse(location,formatter)
} else {
        display(location,formatter)
}

}
void displayHelp() {
        (new HelpFormatter()).printHelp(
<<<DOC
vols [options] <resource>
  do a 'ls' on a myspace resource owned by the current user
  if resource is unspecified, defaults to users' homedir in myspace.
  resource may be given in full ivo://.. form, or abridged #... form

DOC
,o)
}


Object mkFormatter() {
  formatter = {file | file.name}
  if (line.hasOption "F") {
        formatter = {file | file.name + (file.isContainer()?"/":"")}
  }
  if (line.hasOption "Q") {
        formatter = {file | '"' + file.name + '"'}
  }


  if (line.hasOption "l") {
        return {file | "${(file.isContainer()? '<dir>' : file.mimeType).padRight(40)}\t${formatter(file)}" }
  } else {
        return formatter
  }
}

void display(location,formatter) {
        if (location.isContainer() && !line.hasOption("d")) {
                if (!line.hasOption("1")) {
                        int count = 0;
                        location.childNodes.each{
                                if (++count % 3 == 0) {
                                        println(formatter(it))
                                } else {
                                        print(formatter(it).padRight(20) + " ")
                                }
                        }
                        if (count %3 != 0) {
                                println("")
                            }
                } else {
                        location.childNodes.each {println(formatter(it))}
                }
        } else {
        println formatter(location)
        }
}

void recurse(location,formatter) {
        println(location.name + ":")
        display(location,formatter)
        println("")
        location.childNodes.findAll{it.isContainer()}.each{recurse(it,formatter)}
}

}