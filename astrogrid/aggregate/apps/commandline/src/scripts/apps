#!/usr/bin/env groovy
/** commandline interface to the application list.

*/
import org.apache.axis.utils.XMLUtils
import org.exolab.castor.xml.Marshaller
import org.astrogrid.workflow.beans.v1.Tool
import org.apache.commons.cli.HelpFormatter;


class Apps extends org.astrogrid.ui.script.commandline.CommandlineApplication {
// setup commandline options
Apps() {
o.addOption("l","list",false,"List names of registered applications (default)")
 .addOption("L","fullList",false,"List info of each registered application")
 .addOption("Q","reg",true,"Return full registry entry for an application")
 .addOption("q","query",true,"Return information for an application")
 .addOption("t","tool",true,"Return a template tool document for an application")
 .addOption("i","interface",true,"Specify interface of the application to work with (optional, only valid with 't', falls back to default)")
 .addOption("v","validate",true,"Validate a tool document (on stdin ) against an application description")

['l','L','q','Q','t','h',"v"].each{og.addOption(o.getOption it)}
o.addOptionGroup og
}

static void main(String[] args) {
        (new Apps()).run(args);
}

void doIt() {
reg = astrogrid.workflowManager.toolRegistry

if (line.hasOption("l") || og.selected == null) {
        reg.listApplications().each { println(it) }
}

else if (line.hasOption "L") {
        reg.listUIApplications().each{
             println(it.name +"\t" + it.getUIName() +  "\t" + it.interfaceNames.toList()) }
}

else if (line.hasOption "Q") {
        descr = reg.getDescriptionFor(line.getOptionValue "Q")
        XMLUtils.PrettyElementToStream(descr.originalVODescription,System.out)
}

else if (line.hasOption "t") {
    appName = line.getOptionValue "t"
        descr = reg.getDescriptionFor(appName)
        tool = null;
        if (line.hasOption "i") {
         toolName = line.getOptionValue "i"
         iface = descr.interfaces.get_interface().find{it.name == toolName}
         if (iface == null) {
          throw new IllegalArgumentException("Cannot find interface named " + toolName + " in application " + appName)
         }
         tool = descr.createToolFromInterface(iface)
        } else {
          tool = descr.createToolFromDefaultInterface()
        }
    doc = XMLUtils.newDocument()
    Marshaller.marshal(tool,doc)
    XMLUtils.DocumentToStream(doc,System.out)
    println ""
}

else if (line.hasOption "v") {
  appName = line.getOptionValue "v"
  descr = reg.getDescriptionFor appName
  input = System.in.newReader()
  tool = Tool.unmarshalTool input
  try {
          descr.validate(tool)
  } catch (Exception e) {
          println("Validation failed: ")
          println(e.getMessage())
          System.exit(-1)
          }
}

else if (line.hasOption "q") {
        descr= reg.getDescriptionFor(line.getOptionValue "q")
/*
        resource = new XmlParser(false,true).parseText(
                XMLUtils.ElementToString(descr.originalVODescription))
        println(resource["${vr}:VODescription"])
*/

        vr = "http://www.ivoa.net/xml/VOResource/v0.9"
        println "Application: ${descr.name}"
        println( descr.originalVODescription.getElementsByTagNameNS(vr,"Description").item(0).firstChild.nodeValue)
        descr.parameters.parameter.each { param |
           println "Parameter: ${param.UI_Name}"
           println param.UI_Description.content
           ["name","type","subType","units","acceptEncodings","defaultValue","UCD","optionList"].each{ prop |
                if (param[prop] != null) {
                println "\t ${prop} : ${param[prop]}"
                }
           }
       }
       descr.interfaces.get_interface().each { iface |
        println "Interface: ${iface.name}"
        println "Inputs"
        iface.input.pref.each { p |
          println "\t ${p.ref} max: ${p.maxoccurs}, min: ${p.minoccurs}"
        }
        println "Outputs"
        iface.output.pref.each { p |
          println "\t ${p.ref} max: ${p.maxoccurs}, min: ${p.minoccurs}"
        }
       }
}




else {
        displayHelp()
}

}
void displayHelp() {
        (new HelpFormatter()).printHelp(
<<<DOC
apps <options>
query registry of applications, build template tools documents from applications, validate tool documents against registry.
DOC,
o)
}



}



