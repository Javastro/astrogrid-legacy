#!/usr/bin/env groovy
/** commandline interface to the jes server


*/
import org.astrogrid.workflow.beans.v1.execution.JobURN
import org.astrogrid.workflow.beans.v1.Workflow
import org.apache.axis.utils.XMLUtils
import org.exolab.castor.xml.Marshaller
import org.apache.commons.cli.*

import org.astrogrid.ui.script.*;



class Jes {

JobURN mkJobURN(string) {
  urn = new JobURN()
  urn.content=string
  return urn
}

// setup commandline options

Options o = (new Options())
OptionGroup og = new OptionGroup()
Jes() {
 o.addOption("l","list",false,"List jobs (default)")
 .addOption("L","fullList",false,"List full details of jobs")
 .addOption("j","job",true,"Query jes for details of specified job")
 .addOption("J","getJob",true,"Retreive workflow transcript for specified job")
 .addOption("C","cancel",true,"Cancel specified job")
 .addOption("d","delete",true,"Delete specified job")
 .addOption("s","submit",true,"Submit a job")
 .addOption("h","help",false,"Display this help")

 .addOption("u","user",true,"username (optional)")
 .addOption("p","password",true,"password (optional)")
 .addOption("c","community",true,"community (optional)")

['l','L','j','J','C','d','s','h'].each{og.addOption(o.getOption(it))}
o.addOptionGroup(og)
}

astrogrid;
user;
account;
homeIvorn;
userIvorn;



static void main(String[] args) {
    (new Jes()).run(args)
}

void run(args){
try {// catch all exceptio handler.

parser = new PosixParser()
line = parser.parse(o,args)
login line
jm = astrogrid.workflowManager.jobExecutionService

if (line.hasOption("l") || og.selected == null) {
        jm.listJobs(account).each{
                println it.jobId.content
        }
}

else if (line.hasOption "L") {//inefficient work-around, as full summary list isn't working.
        for (j in jm.listJobs(account)) { // for some reason, internal iterators break here..
                wf = jm.readJob j.jobId
                er = wf.jobExecutionRecord
                println(wf.name + "\t" + er.status + "\t" + er.startTime + "\t" + er.finishTime + "\t" + j.jobId.content )
        }
}

else if (line.hasOption "j" ) {
        // inefficient work-around. later will extract this info from summary list.
        wf = jm.readJob(mkJobURN(line.getOptionValue "j"))
                er = wf.jobExecutionRecord
                println(wf.name + "\t" + er.status + "\t" + er.startTime + "\t" + er.finishTime + "\t" + er.jobId.content )
}


else if (line.hasOption "J") {
        wf = jm.readJob(mkJobURN(line.getOptionValue "J"))
        doc = XMLUtils.newDocument()
        Marshaller.marshal(wf,doc)
        XMLUtils.DocumentToStream(doc,System.out)
}

else if (line.hasOption "C") {
        jm.cancelJob(mkJobURN(line.getOptionValue "C"))
}

else if (line.hasOption "d") {
        jm.deleteJob(mkJobURN(line.getOptionValue "d" ))
}

else if (line.hasOption "s") {
        input = line.getOptionValue("s") == "-" ? System.in : new java.io.File(line.getOptionValue "s" )
        wf = Workflow.unmarshalWorkflow input.newReader()
        result = jm.submitWorkflow wf
        println result.content
}

else {
        displayHelp()
}

} catch (Throwable e) { // catch all, for better reporting.
        println("An Error occurred :" + e.class.name)
        println e.message
        displayHelp()
        System.exit(-1)
}
}

void displayHelp() {
        (new HelpFormatter()).printHelp(
<<<DOC
jes <options>
list / submit / query / cancel / delete jobs in the job server.
DOC
,o)
}


void login(line) {
u=null
if (line.hasOption "u") {
        u = line.getOptionValue "user"
}

p=null
if (line.hasOption "p") {
        p = line.getOptionValue "password"
}
comm=null
if (line.hasOption "c") {
        comm = line.getOptionValue "community"
}
  env = LoginFactory.login(u,comm,p);
  astrogrid = env.astrogrid;
  user = env.user
  account = env.account
  homeIvorn = env.homeIvorn
  userIvorn = env.userIvorn

}
}