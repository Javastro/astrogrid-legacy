<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <author email="Noel.Winstanley@manchester.ac.uk">Noel Winstanley</author>

    <title>Astrogrid Commandline Script Interface and Tools</title>
  </properties>

  <body>
	<section name="Commandline Scripting and Tools">
   <p>
	This project integrates the <a href="http://groovy.codehaus.org/">Groovy Interpreter</a> distribution with the Astrogrid client-side scripting libraries.
	(which are also available separately in the <a href="http://software.astrogrid.org/cdk.html">Astrogrid Scripting CDK</a>). This package provides everything needed to 
	develop and execute Groovy scripts that interact with Astrogrid through it's scripting interface.
	The Astrogrid scripting interface consists of a set of objects, documented in the<a href="http://www.astrogrid.org/maven/docs/HEAD/jes/api-reference.html">Workflow Userguide</a>		
	</p><p>
	This project contains configuration files, documentation, and a set of sample groovy scripts.
	The samples illustrate what can be acheived though the scripting interface, and are also useful in their own right as commandline utilities to 
	interact with myspace, jes and registry services.
   </p>
   </section>

	<section name="Installation Instructions"><p>
		To install the script interpeters, do the following.
		<ul>
			<li>Unzip  / Untar this package somewhere</li>
			<li>Set the environment variable <code>GROOVY_HOME</code> to point to the root of the unzipped package</li>
			<li>chmod a+x the shell scripts in <code>${GROOVY_HOME}/bin</code></li>
			<li>add <code>${GROOVY_HOME}/bin</code> to your path</li>
			<li>Check the astrogrid configuration (following section)</li>
		</ul>
		Refer to the original groovy documentation (<code>${GROOVY_HOME}/groovy-docs</code>) for further details.
		</p>
		<p>
			To then install the commandline utilities / samples
			<ul>
				<li>chmod a+x the groovy scripts in <code>${GROOVY_HOME}/astrogrid-tools</code></li>
				<li>EITHER add <code>${GROOVY_HOME}/astrogrid-tools</code> to your path, or copy the groovy scripts to a directory on your path</li>
			</ul>
	</p></section>

    <section name="Configuration"><p>
    All astrogrid components use a common configuration system.
    This allows properties to be set using either JNDI (if available), a configuration file, or System properties.
    The simplest method is to have a file named <code>astrogrid.properties</code> on the classpath.
    See the <a href="http://www.astrogrid.org/maven/docs/HEAD/common/apidocs/org/astrogrid/config/package-summary.html">javadoc</a>
    for further details.
	</p>
<p>
	This package is configured by an <code>astrogrid.properties</code> file in the <code>conf</code> directory.
    It should contain the following keys
    <dl>
    <dt><code>org.astrogrid.community.ident</code></dt>
        <dd>The identifier of the local community. For example <code>org.astrogrid.release</code></dd>
    <dt><code>org.astrogrid.registry.query.endpoint</code></dt>
        <dd>Endpoint of the registry query service. For example
        <code>http://katatjuta.star.le.ac.uk:8080/astrogrid-registry-SNAPSHOT/services/RegistryQuery</code></dd>
    <dt><code>org.astrogrid.registry.admin.endpoint</code></dt>
        <dd>Endpoint of the registry admin service. For example
        <code>http://katatjuta.star.le.ac.uk:8080/astrogrid-registry-SNAPSHOT/services/RegistryAdmin</code></dd>
    <dt><code>jes.job.controller.endpoint</code></dt>
        <dd>The endpoint of the jes server for this community. For example
        <code>http://katatjuta.star.le.ac.uk:8080/astrogrid-jes-SNAPSHOT/services/JobControllerService</code>		
        </dd>		
	<dt><code>org.astrogrid.community.default.vospace</code></dt>
		<dd>Registry key for default myspace service for this community. E.g. <code>ivo://org.astrogrid.release/myspace</code></dd>
	<dt><code>username</code></dt>
	<dd>name of default user to connect as</dd>
	<dt><code>password</code></dt>
	<dd>password for default user</dd>
    </dl>
    </p></section>
   
	<section name="Interfaces to Astrogrid Scripting">
		<p>
		This project provides the following applications for intepreting scripts
		</p>
		<subsection name="Interactive Console"><p>
			<code>${GROOVY_HOME}/bin/jesConsole</code> is an interactive GUI commandline-interpreter for Groovy code. On startup,
			the user needs to provide a username and password. Once logged into Astrogrid, the interpreter is initialized with the astrogrid scripting
			objects. For example, to list all registered applications, type</p>
			<source>
astrogrid.workflowManager.toolRegistry.listApplications()				
			</source>
		</subsection>
		
		<subsection name="Standard Groovy Shell."><p>
			The astrogrid scripting objects can also be accessed from the standard interactive groovy shell 
				<code>${GROOVY_HOME}/bin/groovysh</code>.
			In this case it is necessary to programatically log into astrogrid, using the following code. Username, community and password are all strings, 
			which if null, will fallback to the corresponding properties in the system configuration. Exceptions are thown if login fails.</p>
			<source>
agenv = org.astrogrid.ui.script.LoginFactory.login(username,community,password);				
			</source>
			<p>If login is successful a bean is returned that contains fields for each of the astrogrid scripting objects.</p>
		</subsection>
		
		<subsection name="Script Interpreter"><p>
			<code>${GROOVY_HOME}/bin/groovy</code> is the standard groovy script interpreter - this executes script files. On unix, the following 
			may be used as the first line of an executable script to specify which interpreter to use to execute it</p>
			 <source><![CDATA[
#!/usr/bin/env groovy			 
			 ]]></source>
			 <p>Scripts need to programmatically log into astrogrid in the same way as for the standard groovy shell. See the commandline utility
				scripts for examples
			</p></subsection>
	</section>
   <section name="Commandline Utilities"><p>
		There is a set of sample commandline utilities in the <code>astrogrid-tools</code> directory. These can be used as templates
		when writing new scripts. Furthermore, they may be used as-is to interact with astrogrid services - and could be linked together by bash / batch / perl
		scripts as needed. 
		</p><p>
		All the scripts take optional parameters to specify username, community and password. If any of these are not provided, the script will
		fall back to the properties set in the installation's configuration (see later section).
		Call any of the scripts with <code>--help</code> to display usage information.
		</p><p>
			Typing myspace locations is a tedious business - the scripts that interact with myspace (vocp, vols,vorm,vomv,vomkdir) allow
			ivo:// references to be written in a non-standard abridged notation - the <code>ivo://community/user</code> portion can be omitted, and 
			it will be filled in from the user information.						
		</p>

		<subsection name="vocp"><p>
			Copy files to and from myspace, http:, ftp: and file: locations. Can be used to retrieve data from remote servers, and also upload 
			data to these servers. 						
		</p>
		<source><![CDATA[
usage: vocp <options> <src-file> <dest-file>
            where src, dest may be any of
            http://... a http resource
            ftp://...  a ftp resource
            ivo://...  a myspace resource
            file:/...  a file resource
            -          standard input / output.
            vocp also supports an abridged notation for myspace locations, in the form
            #/fred/path - equivalent to ivo://default-community/fred#/fred/path
            anything else is interpreted as a local file path
            VOCP will the most efficient method of moving data from src to dest - i.e.
            if both are remote, no data will pass through this client.
            NB: writing to http:// and ftp:// urls is likely to fail at present.
 -c,--community <arg>   community (optional)
 -p,--password <arg>    password (optional)
 -u,--user <arg>        username (optional)		
		]]></source>
		</subsection>
		
		<subsection name="vols"><p>
			List contents of a myspace directory / details about a myspace file.
		</p>
		<source><![CDATA[
usage: vols <options> resource
            do a 'ls' on a myspace resource owned by the current user
 -1,--one-per-line      list one file per line
 -Q,--quote-name        enclose entry names in double quotes
 -F,--classify          append indicator to entries
 -R,--recursive         list subdirectories recursively
 -c,--community <arg>   community (optional)
 -d,--directory         list directory instead of contents
 -l,--long              long format
 -p,--password <arg>    password (optional)
 -u,--user <arg>        username (optional)
]]></source>		
		</subsection>		
				
		<subsection name="vomv"><p>
			Move a file from location to another within myspace.
		</p><source><![CDATA[
usage: vomv <options> src dest
            move a myspace resource to a new location in myspace.
 -c,--community <arg>   community (optional)
 -p,--password <arg>    password (optional)
 -u,--user <arg>        username (optional)		
	]]></source>
	</subsection>
		
		<subsection name="vorm"><p>
			Delete a myspace file. Note that to delete a myspace direcory, it must be empty
		</p>
		<source><![CDATA[
usage: vorm <options> <resource>
            remove a myspace resource
 -c,--community <arg>   community (optional)
 -p,--password <arg>    password (optional)
 -u,--user <arg>        username (optional)		
		]]></source>
		</subsection>

		<subsection name="vomkdir"><p>
			Create a new directory in myspace
		</p>
		<source><![CDATA[
usage: vomkdir <options> resource
               make a directory in myspace.
 -c,--community <arg>   community (optional)
 -p,--password <arg>    password (optional)
 -u,--user <arg>        username (optional)
		]]></source>		
		</subsection>
		
		<subsection name="reg"><p>
			Query the registry in various ways. There's more that could be added to this utility, but I don't know all the ins and outs of the registry
			delegate.
		</p>
		<source><![CDATA[
usage: reg <options>
           query the registry
 -c,--community <arg>   community (optional)
 -i,--identfier <arg>   Ask registry about an identifier
 -l,--list              List identifiers of records in registry
 -p,--password <arg>    password (optional)
 -q,--query <arg>       Run a quey against the registry
 -r,--resolve <arg>     Resolve identifier to endpoint
 -u,--user <arg>        username (optional)
 -x,--registry          Ask about the registry itself		
		]]></source>
		</subsection>
		
		<subsection name="apps"><p>
			Query the registry about available cea applications.
		</p>
		<source><![CDATA[
usage: apps <options>
            query list of registered applications
 -L,--fullList          List info of each registered application
 -Q,--reg <arg>         Return full registry entry for an application
 -c,--community <arg>   community (optional)
 -h,--help              Display this help.
 -l,--list              List names of registered applications
 -p,--password <arg>    password (optional)
 -q,--query <arg>       Return information for an application
 -u,--user <arg>        username (optional)
		]]></source>		
		</subsection>
				
		<subsection name="jes"><p>
			Manage jobs on a JES server.
		</p>
		<source><![CDATA[
usage: jes <options>
           manage jobs in a job server.
 -C,--cancel <arg>      Cancel specified job
 -J,--getJob <arg>      Retreive workflow transcript for specified job
 -L,--fullList          List full details of jobs
 -c,--community <arg>   community (optional)
 -d,--delete <arg>      Delete specified job
 -h,--help              Display this help
 -j,--job <arg>         Query jes for details of specified job
 -l,--list              List jobs
 -p,--password <arg>    password (optional)
 -s,--submit <arg>      Submit a job
 -u,--user <arg>        username (optional)
		]]></source>
		</subsection>
	 
	</section>
	
  
	
  </body>
</document>

