# This is the name of the software product you aim to build.
# It gets embedded in the names of the jar and gar files.
# The build will fail if you don't set this.
# You should makes sure that this name doesn't clash with
# any other grid-service packages you intend to deploy to the
# same service container.
product.name=ag-ogsa-echo

# This is the version-number of your product.
# It gets embedded in the names of the jar and gar files.
# The build will work if you leave this blank.  However,
# you should set this before releasing the product as it
# makes easier the later management of jars of code.
product.version=0.0.0

# This is the subdirectory where some built bits of your product will be kept.
# It should normally be the same as the project name, discussed above.
# A sub-directory of this name will be created in the schema directories of
# your build tree and of the tree in the OGSA installation.  This
# sub-direcctory name will also be embedded in the URL to which your service
# is deployed.  You should therefore make this name unique among all
# AstroGrid services.
product.subdirectory=echo

# This is the name for your service.
# It will be embedded in various places in the generated WSDL;
# will be embedded in the name of the generated WSDL file; and
# will be embedded in the URL of your service.
service.name=EchoService

# This is the name for the factory service that will create instances of
# your service.  It gets embedded in the URL of that factory.
factory.name=EchoFactory

# This is the XML namespace for your service.
# It's used in generating the WSDL.
# It must be globally unique.
service.xml.namespace.uri=http://echo.ogsa.astrogrid.org/

# This is the name of the Java package in which the interface code
# for your service will be declared, especially the code generated
# automatically by the build.  Your product can use other packages
# as well, but this is the package that is exposed to OGSA when
# your service is deployed into the service container.
service.java.package=org.astrogrid.ogsa.echo

# This is the name of the class declaring the interface for the
# application-specific port in your service.  The build assumes
# that you have only one such port.  The interface class must be
# in the package named by service.java.package, above.
port.interface.java.class=EchoPortType

# This is the name of the class implementing the interface declared
# by port.interface.java.class, above.
service.java.class=EchoPortImpl
