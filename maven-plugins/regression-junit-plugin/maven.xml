<?xml version="1.0"?>
<!-- 
/*
    Copyright Astrogrid (C) 2004.
 */
 -->
<project xmlns:j="jelly:core" xmlns:jsl="jelly:jsl" xmlns:jxml="jelly:xml" xmlns:maven="jelly:maven" xmlns:util="jelly:util" xmlns:deploy="deploy" xmlns:test-plugin="test">
<!-- extra reports - full junit report, annotated with regression info.-->
<postGoal name="maven-junit-report-plugin:report">
        <attainGoal name="full-junit-report" />
        <attainGoal name="produce-baseline-summary" />
        <attainGoal name="annotate-report" />
        <attainGoal name="style-full-report" />
</postGoal>
<goal name="full-junit-report">
        <mkdir dir="${basedir}/target/docs/junit-full" />
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <junitreport todir="${basedir}/target">
                <fileset dir="${basedir}/target/test-reports">
                        <include name="TEST-*.xml" />
                </fileset>
        </junitreport>
</goal>

<goal name="style-full-report">
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <style basedir="${basedir}/target/" destdir="${basedir}/target/docs/junit-full" style="${basedir}/build/junit-frames.xsl">
                <include name="TESTS-TestSuites-Annotated.xml" />
                <param name="output.dir" expression="${basedir}/target/docs/junit-full" />
        </style>

</goal>


<goal name="produce-baseline-summary" description="generate summary test report, which could be used as a baseline for future tests">
       ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
       <!-- define summarizing stylesheet inline - handy!-->
        <jsl:stylesheet var="summarize" >
                <jsl:template match="/">
                        <testsuites>
                        <baseline-summary>
                                <baseline-name>GeneratedSummary</baseline-name>
                                <baseline-description>to fill in</baseline-description>
                                <j:new var="now" className="java.util.Date" />
                                <when>${now}</when>
                                <j:invokeStatic var="where" className="java.net.InetAddress" method="getLocalHost" />
                                <where>${where}</where>
                                <j:invokeStatic var="who" className="java.lang.System" method="getProperty">
                                        <j:arg value="user.name" />
                                </j:invokeStatic>
                                <who>${who}</who>
                                <project-name>auto-integration</project-name>
                                <project-version>${pom.currentVersion}</project-version>
                                <total-tests><jxml:expr select="sum(//testsuite/@tests)" /></total-tests>
                                <total-errors><jxml:expr select="sum(//testsuite/@errors) + sum(//testsuite/@failures)"/></total-errors>
                        </baseline-summary>
                        <jsl:applyTemplates select="//testsuite" />
                        </testsuites>
                </jsl:template>

                <jsl:template match="testsuite">
                        <jxml:element name="testsuite">
                              <jxml:attribute name="name"><jxml:expr select="@name"/></jxml:attribute>
                             <jxml:attribute name="package"><jxml:expr select="@package"/></jxml:attribute>
                             <jxml:attribute name="tests"><jxml:expr select="@tests"/></jxml:attribute>
                             <jxml:attribute name="failures"><jxml:expr select="@failures + @errors"/></jxml:attribute>
                             <jsl:applyTemplates select="testcase" />
                        </jxml:element>
                </jsl:template>

                <jsl:template match="testcase">
                        <jxml:element name="testcase">
                                <jxml:attribute name="name"><jxml:expr select="@name" /></jxml:attribute>
                                <jxml:attribute name="failure"><jxml:expr select="count(failure) + count(error)" /></jxml:attribute>
                        </jxml:element>
                </jsl:template>
        </jsl:stylesheet>
        <echo>Producing summary from current test results</echo>
        <!-- read in input file -->
        <jxml:parse var="allSuites" xml="target/TESTS-TestSuites.xml"/>
        <!-- apply stylesheet -->
        <j:file name="${basedir}/target/regression-baseline-summary.xml"><!-- add date here -->
         <jsl:style stylesheet="${summarize}" select="$allSuites" />
        </j:file>
</goal>



<goal name="annotate-report" description="add details from saved baseines into current test results">
        <echo>annotating test report with previous baselines</echo>
        <!-- take a copy to start -->
        <copy file="${basedir}/target/TESTS-TestSuites.xml" tofile="${basedir}/target/TESTS-TestSuites-Annotated.xml" overwrite="true"/>
        <fileScanner var="files">
                <fileset dir="${basedir}/baselines">
                        <include name="*.xml" />
                </fileset>
        </fileScanner>
        <j:forEach var="baselineFile" items="${files.iterator()}">
                <echo>Merging baseline ${baselineFile}</echo>
                <!-- parse this document in -->
                <!-- read in baseline file -->
                <jxml:parse var="baseline" xml="${baselineFile}" />

                <j:set var="baselineName"><jxml:expr select="$baseline/testsuites/baseline-summary/baseline-name" /></j:set>
                <echo>Baseline '${baselineName}' defined in ${baselineFile}</echo>
                <!-- define stylesheet -->
                <jsl:stylesheet var="annotate">
                        <jsl:template match="testsuites">
                                <jxml:copy select=".">
                                        <jxml:copyOf select="$baseline/testsuites/baseline-summary" />
                                        <jsl:applyTemplates select="testsuite|baseline-summary"/>
                                </jxml:copy>
                        </jsl:template>
                        <jsl:template match="testsuite">
                                <jxml:copy select=".">
                                        <jxml:set var="currentSuite" select="." />
                                        <jxml:set var="suiteSummary" select="$baseline/testsuites/testsuite[@name=$currentSuite/@name and @package=$currentSuite/@package" />

                                          <jxml:element name="baseline">
                                                <jxml:attribute name="name">${baselineName}</jxml:attribute>
                                                <jxml:attribute name="tests"><jxml:expr select="$suiteSummary/@tests"/></jxml:attribute>
                                                <jxml:attribute name="failures"><jxml:expr select="$suiteSummary/@failures"/></jxml:attribute>
                                          </jxml:element>
                                        <jsl:applyTemplates select="testcase|baseline|properties|system-err|system-out"/>
                                </jxml:copy>
                        </jsl:template>
                        <jsl:template match="testcase">
                                <jxml:copy select=".">
                                        <jxml:set var="currentTest" select="." />
                                        <jxml:set var="testSummary" select="$suiteSummary/testcase[@name=$currentTest/@name]"/>
                                        <jxml:element name="baseline">
                                                <jxml:attribute name="name">${baselineName}</jxml:attribute>
                                                <jxml:attribute name="failure"><jxml:expr select="$testSummary/@failure"/></jxml:attribute>
                                        </jxml:element>
                                        <jsl:applyTemplates select="error|failure|baseline"/>
                                </jxml:copy>
                        </jsl:template>

                        <jsl:template match="properties|error|failure|system-out|system-err|baseline|baseline-summary"><!-- pass through.. -->
                                <jxml:copyOf select="." />
                        </jsl:template>
                </jsl:stylesheet>
                <!-- read in intput file -->
                <jxml:parse var="allSuites" xml="target/TESTS-TestSuites-Annotated.xml" />
                <!-- apply stylesheet -->
                <j:file name="${basedir}/target/processed-TESTS-TestSuites-Annotated.xml">
                        <jsl:style stylesheet="${annotate}" select="$allSuites" />
                </j:file>
                <!-- move new file back to original copy -->
                <move file="${basedir}/target/processed-TESTS-TestSuites-Annotated.xml"
                        tofile="${basedir}/target/TESTS-TestSuites-Annotated.xml" overwrite="true"/>
        </j:forEach>
</goal>
    
    <goal name="regression:regression-report">
        <attainGoal name="regression:full-junit-report" />
        <attainGoal name="regression:produce-baseline-summary" />
        <attainGoal name="regression:annotate-report" />
        <attainGoal name="regression:style-full-report" />
    </goal>
    
    <goal name="regression:full-junit-report">
        <!--Ensure that test's variables are loaded.  This is just a dummy call, otherwise maven:get won't work -->
        <test-plugin:dependency-handle/> 
        <maven:get var="test.reportsDirectory" plugin="maven-test-plugin" property="maven.test.reportsDirectory"/>
        <echo message="Creating full junit report in ${maven.build.dir} from test reports in ${test.reportsDirectory}"/>
        <mkdir dir="${maven.regression.reportsDirectory}" /> 
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')} 
        <junitreport todir="${maven.build.dir}"> 
            <fileset  dir="${test.reportsDirectory}"> 
                <include name="TEST-*.xml" /> 
            </fileset> 
        </junitreport> 
    </goal>
    
    <goal name="regression:produce-baseline-summary" description="generate summary test report, which could be used as a baseline for future tests">
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')} <!-- define summarizing stylesheet inline - handy!-->
         <jsl:stylesheet var="summarize" > 
            <jsl:template match="/"> 
                <testsuites> 
                    <baseline-summary> 
                        <baseline-name>GeneratedSummary</baseline-name> 
                        <baseline-description>to fill in</baseline-description> 
                        <j:new var="now" className="java.util.Date" /> 
                        <when>${now}</when> 
                        <j:invokeStatic var="where" className="java.net.InetAddress" method="getLocalHost" /> 
                        <where>${where}</where>
                        <j:invokeStatic var="who" className="java.lang.System" method="getProperty"> 
                            <j:arg value="user.name" /> 
                        </j:invokeStatic> 
                        <who>${who}</who> 
                        <project-name>auto-integration</project-name> 
                        <project-version>${pom.currentVersion}</project-version> 
                        <total-tests>
                            <jxml:expr select="sum(//testsuite/@tests)" />
                        </total-tests> 
                        <total-errors>
                            <jxml:expr select="sum(//testsuite/@errors) + sum(//testsuite/@failures)"/>
                        </total-errors> 
                    </baseline-summary> 
                    <jsl:applyTemplates select="//testsuite" /> 
                </testsuites> 
             </jsl:template> 
             
             <jsl:template match="testsuite"> 
                <jxml:element name="testsuite"> 
                    <jxml:attribute name="name">
                        <jxml:expr select="@name"/>
                    </jxml:attribute> 
                    <jxml:attribute name="package">
                        <jxml:expr select="@package"/>
                    </jxml:attribute> 
                    <jxml:attribute name="tests">
                        <jxml:expr select="@tests"/>
                    </jxml:attribute> 
                    <jxml:attribute name="failures">
                        <jxml:expr select="@failures + @errors"/>
                    </jxml:attribute> 
                    <jsl:applyTemplates select="testcase" /> 
                 </jxml:element> 
              </jsl:template> 
              
              <jsl:template match="testcase"> 
                <jxml:element name="testcase"> 
                    <jxml:attribute name="name">
                        <jxml:expr select="@name" />
                    </jxml:attribute> 
                    <jxml:attribute name="failure">
                        <jxml:expr select="count(failure) + count(error)" />
                    </jxml:attribute> 
                </jxml:element> 
              </jsl:template> 
         </jsl:stylesheet> 
            
         <echo>Producing summary from current test results ${maven.regression.junitreport} to ${maven.regression.baselinesummary}</echo> 
         <!-- read in input file --> 
         <jxml:parse var="allSuites" xml="file:///${maven.build.dir}/${maven.regression.junitreport}"/> 
            <!-- apply stylesheet -->
         <j:file name="${maven.build.dir}/${maven.regression.baselinesummary}">
            <!-- add date here -->
         <jsl:style stylesheet="${summarize}" select="$allSuites" /> </j:file> 
    </goal>

    <goal name="regression:annotate-report" description="add details from saved baseines into current test results">
        <echo>annotating test report with previous baselines</echo>
        <!-- take a copy to start -->
        <copy file="${maven.build.dir}/${maven.regression.junitreport}" 
            tofile="${maven.build.dir}/${maven.regression.junitreportannotated}" 
            overwrite="true"/>
        <fileScanner var="files">
            <fileset dir="${basedir}/baselines">
                <include name="*.xml" />
            </fileset>
        </fileScanner>
        <j:forEach var="baselineFile" items="${files.iterator()}">
            <echo>Merging baseline ${baselineFile}</echo>
            <!-- parse this document in -->
            <!-- read in baseline file -->
            <jxml:parse var="baseline" xml="${baselineFile}" />
            <j:set var="baselineName">
                <jxml:expr select="$baseline/testsuites/baseline-summary/baseline-name" />
            </j:set>
            <echo>Baseline '${baselineName}' defined in ${baselineFile}</echo>
            <!-- define stylesheet -->
            <jsl:stylesheet var="annotate">
                <jsl:template match="testsuites">
                    <jxml:copy select=".">
                        <jxml:copyOf select="$baseline/testsuites/baseline-summary"/>
                        <jsl:applyTemplates select="testsuite|baseline-summary"/>
                    </jxml:copy>
                </jsl:template>
                
                <jsl:template match="testsuite">
                    <jxml:copy select=".">
                        <jxml:set var="currentSuite" select="." />
                        <jxml:set var="suiteSummary" 
                            select="$baseline/testsuites/testsuite[@name=$currentSuite/@name and @package=$currentSuite/@package" 
                            />
                        <jxml:element name="baseline">
                            <jxml:attribute name="name">${baselineName}</jxml:attribute>
                            <jxml:attribute name="tests">
                                <jxml:expr select="$suiteSummary/@tests"/>
                            </jxml:attribute>
                            <jxml:attribute name="failures">
                                <jxml:expr select="$suiteSummary/@failures"/>
                            </jxml:attribute>
                        </jxml:element>
                        <jsl:applyTemplates select="testcase|baseline|properties|system-err|system-out"/>
                    </jxml:copy>
                </jsl:template>
            
                <jsl:template match="testcase">
                    <jxml:copy select=".">
                        <jxml:set var="currentTest" select="." />
                        <jxml:set var="testSummary" 
                            select="$suiteSummary/testcase[@name=$currentTest/@name]"/>
                        <jxml:element name="baseline">
                            <jxml:attribute name="name">${baselineName}</jxml:attribute>
                            <jxml:attribute name="failure">
                                <jxml:expr select="$testSummary/@failure"/>
                            </jxml:attribute>
                        </jxml:element>
                        <jsl:applyTemplates select="error|failure|baseline"/>
                    </jxml:copy>
                </jsl:template>
            
                <jsl:template match="properties|error|failure|system-out|system-err|baseline|baseline-summary">
                    <!-- pass through.. -->
                    <jxml:copyOf select="." />
                </jsl:template>
            </jsl:stylesheet>
            <!-- read in intput file -->
            <jxml:parse var="allSuites" xml="file:///${maven.build.dir}/${maven.regression.junitreportannotated}"/>
            <!-- apply stylesheet -->
            <j:file name="${basedir}/target/processed-TESTS-TestSuites-Annotated.xml">
                <jsl:style stylesheet="${annotate}" select="$allSuites" />
            </j:file>
            <!-- move new file back to original copy -->
            <move file="${maven.build.dir}/processed-TESTS-TestSuites-Annotated.xml" 
                  tofile="${maven.build.dir}/${maven.regression.junitreportannotated}" 
                  overwrite="true"/>
        </j:forEach>
    </goal>
    
    <goal name="regression:style-full-report"> 
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')} 
        <style basedir="${maven.build.dir}"  destdir="${maven.regression.reportsDirectory}" style="${basedir}/plugin-resources/junit-frames.xsl"> <!--TODO fix me-->
            <include name="${maven.regression.junitreportannotated}" /> 
            <param name="output.dir" expression="${maven.regression.reportsDirectory}" /> 
        </style> 
    </goal>
        
 
    <goal name="showme" prereqs="test:compile">
        <echo message="${plugin.resources}"/>
    </goal>
</project>