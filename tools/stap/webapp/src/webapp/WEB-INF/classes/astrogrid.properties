# ASTROGRID.PROPERTIES FILE FOR SIMPLE TIME ACCESS WEB SERVICE
# This properties file described configuration elements for any
# AstroGrid STAP web service, including solar image and time series
# data that will appear in HelioScope or VOEvent data that can be
# searched through the new AstroScope tool.

#Full path and file to the registry metadata properties file.  By default 
#uses the one located here in the same 
#directory as where the webapp was installed. (WEB-INF/classes)
#NOTE: If using STAP web service for VOEvent packets, set at least 
# one reg.metadata.subject entry to "voevent" inside regmetadata.properties.
#regproperties.file.location=regmetadata.properties

#property set for referencing the dataset access service.
stapsearch.service.astrogrid_dsa=org.astrogrid.stapsearch.impl.astrogrid_dsa.StapSearch

#jdbc.driver=
#jdbc.user=
#jdbc.password=
#jdbc.url=

#This property is used to convert the requested datetime to a 
#particular format to be used on the sql query (you get to make the sql query in a property below).
#Also remember you can typically make it in a pattern you desire and use varius sql functions if needed. 
#Here are all the possible patterns:
#milliseconds - takes the date&time and convert it to milliseconds. --"the current time as UTC milliseconds from the epoch."
#Letter 	Date or Time Component 	Presentation 	Examples
#G 	            Era designator 	       Text         	AD
#y 	                 Year 	           Year       	1996; 96
#M               Month in year 	  	   Month     	July; Jul; 07
#w 	             Week in year 	       Number       	27
#W 	             Week in month         Number        	2
#D 	             Day in year           Number 	       189
#d 	             Day in month 	       Number 	       10
#F 	             Day of week in month  Number     	    2
#E 	             Day in week     	   Text    	     Tuesday; Tue
#a 	             Am/pm marker    	   Text 	       PM
#H 	             Hour in day (0-23)    Number      	   0
#k 	             Hour in day (1-24)    Number 	       24
#K 	             Hour in am/pm (0-11)  Number 	       0
#h 	             Hour in am/pm (1-12)  Number 	      12
#m 	             Minute in hour 	   Number         30
#s 	             Second in minute 	   Number 	      55
#S               Millisecond 	       Number 	       978
#z 	             Time zone 	           General time zone 	Pacific Standard Time; PST; GMT-08:00
#Z 	             Time zone        	   RFC 822 time zone 	-0800

#if not set the default is yyyy-MM-dd HH:mm:ss which is a typical xml datetime and several db's
#are able to use this format for comparing.
#convert.time.format=yyyy-MM-dd HH:mm:ss

#you can put a hardcoded value or more typically col.{columnname} for selecting from the table.
#results.dataid=
#start and end are almost always from a column in the db and might be the same ex: col.DATE_OBS
#results.start=
#results.end=
#results.accessref=
#results.provider=
#results.description=
#results.descriptionURL=
#results.instrumentID=

#The above results are mandatory to be shown on the responding votable, but you may wish to display
#more columns to the user.  Currently the way to do this is to define a property called
#results.more.x (where x is a number starting with 0 and must go in sequence).  And the value of
#that property must be a | delimited text define:
#'Votable Column name|Votable datatype|VOtable description of column|VOtable unit description|VOTable UCD|db columnname'
#e.g.:
#results.more.0=WaveLength|Double|Wave Length description|Angstrom||col.WAVELNTH
#results.more.1=ExposureTime|Int|Exposure Time|||col.EXPTime
#results.more.2=Comment|String|Comment about this Image|||This is a hard coded comment.

#accessref is a reference of how to get to the data via a public url. There are times the db
#only has id or various other reference numbers but not the full url stored for grabbing the data
#publicly.  Use this next property to prepend any text. 
#You may wish to concat info on your full sql syntax property below, meaning you can leave this property
#commented out. 
#e.g. http://www.mydatafetch/cgi-bin/fetch.pl?
#accessref.prepend=

#put a full sql statement here. Many databases are different on how it stores the information.
#it could be in one table or many joined by various keys.  Also you may wish to use various
#functions for your date&time or concats for descriptions or accessref.
#So here you have the ability to do that, you can put in any sql you like.
#Just be sure of 3 things.
#a.) Column names in the select matches the col.{name} defined in the 'results.' properties above,
#you may wish 'AS' in the sql to make sure it matches the col.{name} normally not needed but using sql functions or table joins with similiar column names may require it.
#b.) put __start__ and __end__ in the where clause for the dates/times that are being requested
#c.)objective of accessref is to be a full public url for access by a external client
#either use prepend property or sql function (like concat) or both to obtain that.

#Be sure to use quotation marks ' or " if needed.  My advise is to do the query on your database first.
#Then fill in the full.sql.syntax
#e.g.1- Select dataid, description, accessref, date_obs, instrument from mytable where date_obs >= "__start__" and date_obs <= "__end__"
#e.g.2- Select a.dataid, b.description, a.accessref, b.date_obs, b.instrument from a, b where a.ID = b.ID and b.date_obs >= __start__ and b.date_obs <= __end__
#e.g.3- Select dataid, description, CONCAT('http://www.mydatafetc/cgi=bin/fetch.pl?',accessrefid,'&',otherid) AS accessrefcolumnname, date_obs, instrument from mytable where date_obs >= __start__ and date_obs <= __end__ 
#full.sql.syntax=
#You can include both full.sql.syntax and full.sql.syntax.pos - the latter
#permits a cone search on ra, dec, and size as well as a time query.
#e.g.4- Select ivorn, url, start, stop, concept, name, contactname, contactemail, params, refs, ra, dc from gcn where start >= '__start__' and stop <= '__end__' and ra <= __ra__ + __size__ and ra >= __ra__ - __size__ and dc <= __dec__ + __size__ and dc >= __dec__ - __size__ and (2 * asin(sqrt((sin((__dec__ - dc)/2)*sin((__dec__ - dc)/2)) + (cos(__dec__) * cos(dc) * sin((__ra__ - ra)/2) * sin((__ra__ - ra)/2)  ))) < __size__)
#full.sql.syntax.pos=
#By default it tries to look at the extension (after the '.') if any in the access reference column to
#determine the format if it does not then the format.default is used.
format.default=TIME_SERIES
format.ending.cdf=TIME_SERIES-CDF
format.ending.txt=TIME_SERIES-ASCII
format.ending.vot=TIME_SERIES-VOT
format.ending.fits=FITS
format.ending.gif=GRAPHICS
format.ending.jpg=GRAPHICS

#Solar services connecting to the cdaw and vso web services. No need to use leave this commented out,
#because MSSL (part of UCL-University of College London) is using it.
#stapsearch.service.cdaw=org.astrogrid.stapsearch.impl.cdaw.SolarSearch
#stapsearch.service.vso=org.astrogrid.stapsearch.impl.vso.SolarSearch
##change this to your search servlet such as
##http://msslxv.mssl.ucl.ac.uk:8080/solarsearch/SolarSearch
#service.fetch.url=http://localhost:8080/solarsearch/SolarFetch