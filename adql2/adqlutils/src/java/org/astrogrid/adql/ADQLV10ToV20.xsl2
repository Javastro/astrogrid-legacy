<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0"
		xmlns:ad1="http://www.ivoa.net/xml/ADQL/v1.0"
		xmlns:ad2="http://www.ivoa.net/xml/v2.0/adql"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		exclude-result-prefixes="ad1"  >
	
	<!-- 
		Stylesheet to convert ADQL/x v1.0 to ADQL/x v2.0
		Version 1.0 - first release - July 3, 2007
		Jeff Lusted - University of Leicester
		jl99@star.le.ac.uk
	 -->
	
    <xsl:output method="xml" encoding="UTF-8" indent="yes"/>   	
    
  	<xsl:param name="ad1Prefix" select="'v1'"/>
    <xsl:param name="ad2Prefix" select="'adql'"/>
    <xsl:param name="xsiPrefix" select="'xsi'"/>
    
    <xsl:param name="ad1NS" select="'http://www.ivoa.net/xml/ADQL/v1.0'" />
    <xsl:param name="ad2NS" select="'http://www.ivoa.net/xml/v2.0/adql'" />
    <xsl:param name="xsiNS" select="'http://www.w3.org/2001/XMLSchema-instance'"/>
    
    <!--+
        | Identity template that ensures everything gets copied.
        | We override this to change specific differences between versions.
        +--> 
    <xsl:template match="@*|node()">
        <xsl:copy>
	       <xsl:apply-templates select="@*|node()"/>
	    </xsl:copy>
	</xsl:template>
	
	<!--+
        | Sponge category for any elements that do not require change
        | apart from the namespace and prefix change.
        +-->
	<xsl:template match="*[ namespace-uri() = $ad1NS ]">
        <xsl:element name="{$ad2Prefix}:{local-name()}" namespace="{$ad2NS}">	     	
			<xsl:apply-templates select="@*|node()"/>	
		</xsl:element> 
	</xsl:template>
    
    <!--xsl:template match="ad1:Select | ad1:selection | ad1:Selection">
        <xsl:element name="{$ad2Prefix}:{local-name()}" namespace="{$ad2NS}">	
            <xsl:apply-templates select="@*"/>       	
			<xsl:apply-templates select="ad1:OrderBy"/>
		</xsl:element> 
	</xsl:template>
	
	<xsl:template match="ad1:OrderBy">
        <xsl:element name="{$ad2Prefix}:{local-name()}" namespace="{$ad2NS}">	 
            <xsl:apply-templates select="@*"/>      	
			<xsl:apply-templates select="ad1:Item"/>		
		</xsl:element> 
	</xsl:template>
	
	<xsl:template match="ad1:Item">
        <xsl:element name="{$ad2Prefix}:{local-name()}" namespace="{$ad2NS}">	
            <xsl:apply-templates select="@*"/>     	
			<xsl:apply-templates select="ad1:Expression"/>	
		</xsl:element> 
	</xsl:template-->
	
	<!--+
        | Expression within OrderBy needs have column name only,
        | so we drop Table and Archive...
        +--> 
	<xsl:template match="ad1:OrderBy/ad1:Item/ad1:Expression">
        <xsl:element name="{$ad2Prefix}:{local-name()}" namespace="{$ad2NS}">
            <xsl:for-each select="@*">
            	<xsl:choose>
			    	<xsl:when test="local-name() = 'Table'"/>
			    	<xsl:when test="local-name() = 'Archive'"/>
					<xsl:otherwise>
						<xsl:apply-templates select="."/> 
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>	
		</xsl:element> 
	</xsl:template>
	
	<!--+
        | Joins are now more complex. A simple condition is no longer sufficient structure...
        +
      <adql:JoinSpecification xsi:type="adql:joinConditionType">
        <adql:Condition xsi:type="adql:comparisonPredType" Comparison="=">
          <adql:Arg xsi:type="adql:columnReferenceType" Name="id" Table="s"/>
          <adql:Arg xsi:type="adql:columnReferenceType" Name="id" Table="o"/>
        </adql:Condition>
      </adql:JoinSpecification>
        -->        
	<xsl:template match="ad1:From/ad1:Table[substring-after(@xsi:type, ':') = 'joinTableType']/ad1:Condition | ad1:From/ad1:Table[@xsi:type = 'joinTableType']/ad1:Condition">
       <xsl:element name="{$ad2Prefix}:JoinSpecification" namespace="{$ad2NS}">
            <xsl:attribute name="{$xsiPrefix}:type" namespace="{$xsiNS}">
                <xsl:value-of select="$ad2Prefix" />
			 	<xsl:text>:joinConditionType</xsl:text>
			</xsl:attribute>
            <xsl:element name="{$ad2Prefix}:Condition" namespace="{$ad2NS}">
                <xsl:attribute name="{$xsiPrefix}:type" namespace="{$xsiNS}">
                    <xsl:value-of select="$ad2Prefix" />
			 	    <xsl:text>:comparisonPredType</xsl:text>
			    </xsl:attribute>
			    <xsl:apply-templates select="@*"/> 
            	<xsl:apply-templates select="node()"/>            	
            </xsl:element>	
        </xsl:element> 
	</xsl:template>

	   
	<!--+
        | Template for type attributes belonging to Schema-instance.
        +--> 
    <xsl:template match="@xsi:type">
		<xsl:attribute name="{local-name()}" namespace="{$xsiNS}">
			<xsl:choose>
				<!-- correction of a typo -->
			    <xsl:when test="substring-after( . , ':' ) = 'jointTableQualifierType'">
			 	    <xsl:value-of select="$ad2Prefix" />
			 	    <xsl:text>:joinTableQualifierType</xsl:text>
			 	</xsl:when>
			 	<!-- change the prefix for ADQL version 1 to version 2 -->
			 	<xsl:when test="substring-before( . , ':' ) = $ad1Prefix">
			 	    <xsl:value-of select="$ad2Prefix" />
			 	    <xsl:text>:</xsl:text>
			 		<xsl:value-of select="substring-after( . , ':' )" />
			 	</xsl:when>
			 	<!-- copy anything else as is -->
				<xsl:otherwise>
					<xsl:value-of select="." />
				</xsl:otherwise>
			</xsl:choose>
		</xsl:attribute>
	</xsl:template>
		
</xsl:stylesheet>

