/* Generated By: AdqlStoX.jjt,v 1.10 2007/07/13 15&JJTree: Do not edit this line. AST_STCNumericValueExpression.java */

package org.astrogrid.adql;

import org.astrogrid.adql.beans.BinaryExprType;
import org.astrogrid.adql.beans.InclusiveSearchType;
import org.astrogrid.adql.beans.ExclusiveSearchType;
import org.astrogrid.adql.beans.UnaryExprType;
import org.astrogrid.adql.beans.UnaryOperatorType;

import org.astrogrid.stc.beans.Double1Type;

import org.apache.xmlbeans.XmlObject ;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_STCNumericValueExpression extends SimpleNode {
  
    private static Log log = LogFactory.getLog( AST_STCNumericValueExpression.class ) ;

    private int sign = +1 ;
  
  public AST_STCNumericValueExpression(AdqlStoX p, int id) {
    super(p, id);
  }
  
  public void setSign( int sign ) {
      this.sign = sign ;
  }
  
  public int getSign() {
      return sign ;
  }
  
  public void buildXmlTree( XmlObject xo ) {
      if( log.isTraceEnabled() ) enterTrace( log, "AST_STCNumericValueExpression.buildXmlTree()" ) ; 
      
      Double1Type d1t = (Double1Type)xo ;
//      if( isSetSign() ) {
//          UnaryExprType ueType = (UnaryExprType)xo.changeType( UnaryExprType.type) ;
//          ueType.setOper( UnaryOperatorType.Enum.forString( signToken.image ) ) ;  
//          children[1].buildXmlTree( ueType.addNewArg() ) ;
//          this.generatedObject = children[1].getGeneratedObject() ;
//      }
//      else {
//          children[0].buildXmlTree( xo ) ;
//          this.generatedObject = children[0].getGeneratedObject() ;
//      }
      d1t.
      super.buildXmlTree(xo) ;
      if( log.isTraceEnabled() ) exitTrace( log, "AST_STCNumericValueExpression.buildXmlTree()" ) ; 
  }
  

}
