/* Generated By: AdqlStoX.jjt,v 1.13 2007/07/17 16&JJTree: Do not edit this line. AST_CircleLatLon.java */

package org.astrogrid.adql;

import org.apache.xmlbeans.XmlObject;
import org.astrogrid.adql.beans.LinkedListType;
import org.astrogrid.adql.beans.ScalarExpressionType;

import org.astrogrid.stc.beans.*;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_CircleLatLon extends SimpleNode {
    
    private static Log log = LogFactory.getLog( AST_CircleLatLon.class ) ;

    public AST_CircleLatLon( AdqlStoX p, int id ) { 
        super(p, id);
    }

    public void buildXmlTree( XmlObject xo ) {
        if( log.isTraceEnabled() ) enterTrace( log, "AST_CircleLatLon.buildXmlTree()" ) ; 
        getTracker().setType( CircleType.type ) ;
        //
        // We know this is a LatLon circle type, else why are we here.
        // So set the appropriate astro coord system...
        AST_RegionPredicate.setAstroCoordSystem_LatLon( this ) ;
        //
        // "Create" the appropriate circle type using XmlBeans magic.
        // Give it a center and a radius.
        // This seems obvious, but there are some doubts over center for other
        // circle types (see especially Cartesian)...
        CircleType circle = (CircleType)xo.changeType( CircleType.type ) ;
        Double2Type center = circle.addNewCenter() ;
        //
        // Get the linked element list, used by the predicate
        // to hold references to ADQL elements which are not literals.
        LinkedListType llt = this.getCurrentLinkedElementList() ;
        //
        // The first child is latitude.
        // We add a linked element which may later be removed.
        // Then we get the child node to build the latitude parameter.
        ScalarExpressionType setLat = llt.addNewLinkedElement() ;
        children[0].buildXmlTree( setLat ) ;
        setLat = (ScalarExpressionType)children[0].getGeneratedObject() ;
        //
        // Create the latitude portion of the center.
        // We then attempt to unpack the value as a numeric literal.
        // IF the return value is not null, it was a literal, in which
        // case we can remove the linked element, for the value will 
        // be in situ in the region type.
        // IF the value is null, then the reference was to a column
        // reference or complex expression ( sin, square etc ).
        Double1Type d1tLat = center.addNewC1() ;
        Double d = this.unpackNumericLiteral( setLat ) ;
        if( d != null ) {
            // Literal...
            d1tLat.setDoubleValue( d.doubleValue() ) ;
            llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
        }
        else {
            // Column reference or complex expression...
            String uid = this.formUniqueID() ;
            setLat.setId( uid ) ;
            d1tLat.setIdref( uid ) ;
        }
        //
        // The second child is longitude.
        // (See comments above for latitude).
        ScalarExpressionType setLon = llt.addNewLinkedElement() ;
        children[1].buildXmlTree( setLon ) ;
        setLon = (ScalarExpressionType)children[1].getGeneratedObject() ;

        Double1Type d1tLon = center.addNewC2() ;
        d = this.unpackNumericLiteral( setLon ) ;
        if( d != null ) {
            d1tLon.setDoubleValue( d.doubleValue() ) ;
            llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
        }
        else {
            String uid = this.formUniqueID() ;
            setLon.setId( uid ) ;
            d1tLon.setIdref( uid ) ;;
        }
        //
        // The third child is radius. 
        // (See comments above for latitude).
        Double1Type d1tRad = circle.addNewRadius() ;
        ScalarExpressionType setRadius = llt.addNewLinkedElement() ;
        children[2].buildXmlTree( setRadius ) ;
        setRadius = (ScalarExpressionType)children[2].getGeneratedObject() ;     
        d = this.unpackNumericLiteral( setRadius ) ;
        if( d != null ) {
            d1tRad.setDoubleValue( d.doubleValue() ) ;
            llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
        } else {
            String uid = this.formUniqueID() ;
            setRadius.setId( uid ) ;
            d1tRad.setIdref( uid ) ;
        }
        this.generatedObject = circle ;
        super.buildXmlTree(circle) ;
        if( log.isTraceEnabled() ) exitTrace( log, "AST_CircleLatLon.buildXmlTree()" ) ; 
    }

}
