/* Generated By: AdqlStoX.jjt,v 1.33.2.4 2006-12-19 14&JJTree: Do not edit this line. AST_Select.java */

package org.astrogrid.adql;

import org.astrogrid.adql.beans.* ;
import org.apache.xmlbeans.XmlObject ;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_Select extends SimpleNode {
    
    private static Log log = LogFactory.getLog( AST_Select.class ) ;
    
    public AST_Select(AdqlStoX p, int id) {
        super(p, id);
        this.elementName = AdqlCompiler.SELECT_ELEMENT ;
        this.schemaType = SelectType.type ;
    }
    
    public void buildXmlTree( XmlObject xo ) {
        if( log.isTraceEnabled() ) enterTrace( log, "AST_Select.buildXmlTree()" ) ; 
        SelectType st = (SelectType)xo ;     
        this.generatedObject = st ;
        int childCount = jjtGetNumChildren() ;
        for( int i=0; i<childCount; i++ ) {
            if( children[i] instanceof AST_Allow ) {
                children[i].buildXmlTree( st.addNewAllow() ) ;
            }
            else if( children[i] instanceof AST_Restrict ) {
                children[i].buildXmlTree( st.addNewRestrict() ) ;
            }
            else if( children[i] instanceof AST_SelectionList ) {
                children[i].buildXmlTree( st.addNewSelectionList() ) ;
            }
            else if( children[i] instanceof AST_From ) {
                children[i].buildXmlTree( st.addNewFrom() ) ;
            }
            else if( children[i] instanceof AST_Where ) {
                children[i].buildXmlTree( st.addNewWhere() ) ;
            }
            else if( children[i] instanceof AST_GroupBy ) {
                children[i].buildXmlTree( st.addNewGroupBy() ) ;
            }
            else if( children[i] instanceof AST_Having ) {
                children[i].buildXmlTree( st.addNewHaving() ) ;
            }
            else if( children[i] instanceof AST_OrderByClause ) {
                children[i].buildXmlTree( st.addNewOrderBy() ) ;
            }
            else {
                if( log.isDebugEnabled() ) {
                    log.warn( "Select has an invalid sub clause attached of class " + children[1].getClass() ) ; 
                }
            }
        }
        super.buildXmlTree(xo) ;
        if( log.isTraceEnabled() ) exitTrace( log, "AST_Select.buildXmlTree()" ) ; 
    }

}
