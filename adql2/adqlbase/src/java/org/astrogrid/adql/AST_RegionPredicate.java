/* Generated By: AdqlStoX.jjt,v 1.10 2007/07/13 15&JJTree: Do not edit this line. AST_RegionPredicate.java */

package org.astrogrid.adql;

import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.SchemaParticle; 
import org.apache.xmlbeans.QNameSet; 
import javax.xml.namespace.QName;

import org.astrogrid.adql.beans.LikePredType;
import org.astrogrid.adql.beans.RegionSearchType;
import org.astrogrid.adql.beans.NotInRegionSearchType;
import org.astrogrid.adql.beans.LinkedListType;
import org.astrogrid.stc.beans.*;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_RegionPredicate extends SimpleNode {

    private static Log log = LogFactory.getLog( AST_RegionPredicate.class ) ;
    
    private boolean in = true ;
    
  public AST_RegionPredicate(AdqlStoX p, int id) {
    super(p, id);
  }
  
  public void setIn( boolean in ) {
      this.in = in ;
  }
  
  public void buildXmlTree( XmlObject xo ) {
      if( log.isTraceEnabled() ) enterTrace( log, "AST_RegionPredicate.buildXmlTree()" ) ; 
      RegionSearchType rst ;   
      //
      // The predicate is either IN or NOT IN ...
      if( in ) {
          getTracker().setType( RegionSearchType.type ) ;
          rst = (RegionSearchType)xo.changeType( RegionSearchType.type ) ;
      }
      else {
          getTracker().setType( NotInRegionSearchType.type ) ;
          rst = (NotInRegionSearchType)xo.changeType( NotInRegionSearchType.type ) ;
      }
      this.generatedObject = rst ;
      //
      // Create a default astro coordinate system with 
      // a space reference frame. The latter will be filled
      // out according to the child region type...
      AstroCoordSystemType acst = rst.addNewAstroCoordSystem() ;
      acst.addNewSpaceFrame().addNewSpaceRefFrame() ;    
      //
      // The linked element list will be used to create 
      // the corresponding ADQL types that are not literals...
      LinkedListType llt = rst.addNewLinkedElements() ;
      this.setCurrentLinkedElementList( llt ) ; 
      //
      // The child nodes will fill out the appropriate
      // point and region details. The assumption made here
      // is that the point and the region share the same
      // astro coordinate system and space frame reference.
      // Jeff: Of course, I could be wrong.
      children[0].buildXmlTree( rst.addNewPoint() ) ;
      children[1].buildXmlTree( rst.addNewRegion() ) ; 
      //
      // Form a unique linking ID for the astro coordinate system
      // and set the id and its refid so the link between it and the region
      // can be made...
      String uid = this.formUniqueID( "AstroCoordSystem" ) ;
      ( (RegionType)children[1].getGeneratedObject() ).setCoordSystemId( uid ) ;
      acst.setId( uid ) ;
      //
      // If all the region parameters are literals (ie: there are no column
      // references or complex expressions), then there is no point in 
      // maintaining the list of linked elements, so we remove it...
      if( llt.sizeOfLinkedElementArray() == 0 ) {
          rst.unsetLinkedElements() ;
          llt = null ;
      }

      super.buildXmlTree(rst) ;
      if( log.isTraceEnabled() ) exitTrace( log, "AST_RegionPredicate.buildXmlTree()" ) ; 
  }
  
  protected static void setAstroCoordSystem_J2000( Node node ) {
      RegionSearchType rst = findRegionSearchType( node ) ;
      SpaceFrameType sft = rst.getAstroCoordSystem().getSpaceFrame() ;    
      CoordRefFrameType crf = sft.getSpaceRefFrame() ;
      QName qName = new QName( CoordRefFrameType.type.getName().getNamespaceURI(), "FK5") ;
      FkType srf = (FkType)crf.substitute( qName , FkType.type ) ;
      srf.setEquinox( "J2000" ) ;     
      sft.setSpaceRefFrame( srf ) ;
  }
  
  protected static void setAstroCoordSystem_LatLon( Node node) {
      RegionSearchType rst = findRegionSearchType( node ) ;
      SpaceFrameType sft = rst.getAstroCoordSystem().getSpaceFrame() ;    
      CoordRefFrameType crf = sft.getSpaceRefFrame() ;
  }
  
  protected static void setAstroCoordSystem_Cartesian( Node node ) {
      RegionSearchType rst = findRegionSearchType( node ) ;
      SpaceFrameType sft = rst.getAstroCoordSystem().getSpaceFrame() ;    
      CoordRefFrameType crf = sft.getSpaceRefFrame() ;
  }
  
  private static RegionSearchType findRegionSearchType( Node node ) {
      Node parentNode = node.jjtGetParent() ;
      while( parentNode != null ) {
          if( parentNode instanceof AST_RegionPredicate ) { 
              return (RegionSearchType) ( (AST_RegionPredicate)parentNode ).getGeneratedObject() ;
          }
      }
      return null ;
  }
}
