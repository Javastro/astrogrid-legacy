/* Generated By: AdqlStoX.jjt,v 1.18 2007/07/25 12&JJTree: Do not edit this line. AST_PolygonJ2000.java */

package org.astrogrid.adql;

import org.apache.xmlbeans.XmlObject;
import org.astrogrid.adql.beans.LinkedListType;
import org.astrogrid.adql.beans.ScalarExpressionType;
import org.astrogrid.stc.beans.*;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_PolygonJ2000 extends SimpleNode {
    
  private static Log log = LogFactory.getLog( AST_PolygonJ2000.class ) ;

  public AST_PolygonJ2000(AdqlStoX p, int id) {
    super(p, id) ;
  }
  
  public void buildXmlTree( XmlObject xo ) {
      if( log.isTraceEnabled() ) enterTrace( log, "AST_PolygonJ2000.buildXmlTree()" ) ; 
      getTracker().setType( PolygonType.type ) ;
     
      //
      // "Create" the appropriate polygon type using XmlBeans magic.
      PolygonType p = (PolygonType)xo.changeType( PolygonType.type ) ;   
      this.generatedObject = p ;
      //
      // We know this is a J2000 Polygon type, else why are we here.
      // So set the appropriate astro coord system...
      AST_RegionPredicate.setAstroCoordSystem_J2000( this ) ;
      //
      // Get the linked element list, used by the predicate
      // to hold references to ADQL elements which are not literals.
      LinkedListType llt = this.getCurrentLinkedElementList() ;
   
 
      //
      // Construct vertices...
      int childCount = jjtGetNumChildren() ;
      for( int i=0; i<childCount; i=i+2 ) {
          VertexType vt = p.addNewVertex() ;
          Double2Type vtpos = vt.addNewPosition() ;         
          //
          // The first child of a pair is the first coordinate.
          // We add a linked element which may later be removed.
          // Then we get the child node to build the coordinate.
          ScalarExpressionType coord1 = llt.addNewLinkedElement() ;
          children[i].buildXmlTree( coord1 ) ;
          coord1 = (ScalarExpressionType)children[i].getGeneratedObject() ;
          //
          // Create the first coordinate.
          // We then attempt to unpack the value as a numeric literal.
          // IF the return value is not null, it was a literal, in which
          // case we can remove the linked element, for the value will 
          // be in situ in the region type.
          // IF the value is null, then the reference was to a column
          // reference or complex expression ( sin, square etc ).
          Double1Type d1tCoord1 = vtpos.addNewC1() ;
          Double d = this.unpackNumericLiteral( coord1 ) ;
          if( d != null ) {
              // Literal...
              d1tCoord1.setDoubleValue( d.doubleValue() ) ;
              llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
          }
          else {
              // Column reference or complex expression...
              String uid = this.formUniqueID() ;
              coord1.setId( uid ) ;
              d1tCoord1.setIdref( uid ) ;
          }
          //
          // Create the second coordinate in the pair.
          // (See comments above for first coordinate).
          ScalarExpressionType coord2 = llt.addNewLinkedElement() ;
          children[i+1].buildXmlTree( coord2 ) ;
          coord2 = (ScalarExpressionType)children[i+1].getGeneratedObject() ;
          
          Double1Type d1tCoord2 = vtpos.addNewC1() ;
          d = this.unpackNumericLiteral( coord2 ) ;
          if( d != null ) {
              d1tCoord2.setDoubleValue( d.doubleValue() ) ;
              llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
          }
          else {
              String uid = this.formUniqueID() ;
              coord2.setId( uid ) ;
              d1tCoord2.setIdref( uid ) ;;
          }
                    
      } // end for on Construct vertices
           
      super.buildXmlTree(p) ;
      if( log.isTraceEnabled() ) exitTrace( log, "AST_PolygonJ2000.buildXmlTree()" ) ; 
  }

}

