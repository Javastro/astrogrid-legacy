/* Generated By: AdqlStoX.jjt,v 1.34.2.32 2007/05/21 17&JJTree: Do not edit this line. AST_UserDefinedFunction.java */

package org.astrogrid.adql;

import org.apache.xmlbeans.XmlObject;
import org.astrogrid.adql.beans.UserDefinedFunctionType ;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;
import org.astrogrid.adql.metadata.*;


public class AST_UserDefinedFunction extends SimpleNode {
    
    private static Log log = LogFactory.getLog( AST_UserDefinedFunction.class ) ;

    private String name ;
    private int[] cardinality ;
    
  public AST_UserDefinedFunction(AdqlStoX p, int id) {
    super(p, id);
  }
  
  public void setFunctionName( String name ) throws ParseException {
      String defaultPrefix = this.parser.compiler.getDefaultUserDefinedFunctionPrefix() ;     
      if( name.startsWith( defaultPrefix ) == false ) {
         Container metadata = this.parser.compiler.getMetadata() ;
         Function function = metadata.getFunction(name) ;
         if( function == null ) {
             throw new ParseException( "User Defined Functions must begin with \"" + defaultPrefix + "\" " +
                                       "or be known to the system via a metadata call. " ) ;
         }
         cardinality = function.getCardinality() ;        
      }
      else {
         cardinality = new int[] { -1, -1 } ;
      }      
      this.name = name ;
  }
  
  
  /* (non-Javadoc)
 * @see org.astrogrid.adql.SimpleNode#jjtClose()
 */
public void jjtClose() {
    int childCount = jjtGetNumChildren() ;
    if( log.isDebugEnabled() ) {
        log.debug( "childCount: [" + childCount + "] cardinality: [" 
                  + cardinality[0] + "," + cardinality[1] + "]" ) ;
    }
    if( cardinality[0] > childCount 
        ||
        ( cardinality[1] < childCount && cardinality[1] != -1 ) ) {
            // throw new ParseException( "User defined function has incorrect number of parameters. " ) ;
    }
    super.jjtClose();
}

public void buildXmlTree( XmlObject xo ) {   
      if( log.isTraceEnabled() ) enterTrace( log, "AST_UserDefinedFunction.buildXmlTree()" ) ; 
      getTracker().setType( UserDefinedFunctionType.type ) ;
      int childCount = jjtGetNumChildren() ;
      
      StringBuffer buffer = null ;
      if( log.isDebugEnabled() ) {
          buffer = new StringBuffer() ;
          buffer
              .append( "childCount: ") 
              .append( childCount ) ;         
      }
      
      if( name != null ) {
          UserDefinedFunctionType udf = (UserDefinedFunctionType)xo.changeType( UserDefinedFunctionType.type ) ; 
          udf.setName( name ) ;
          if( log.isDebugEnabled() ) {
              buffer
                  .append( "\nUser Defined Function name: " )
                  .append( this.name ) ;
          }     
          for( int i=0; i<childCount; i++ ) {
              children[i].buildXmlTree( udf.addNewParams() ) ;
              if( log.isDebugEnabled() ) {
                  buffer
                      .append( "\narg" ) 
                      .append( i )
                      .append( ": \n" )
                      .append( udf.getParamsArray(i) ) ;
              }
          }
          this.generatedObject = udf ;
      }
      super.buildXmlTree( (XmlObject)this.generatedObject ) ;
      if( log.isDebugEnabled() ) {
          log.debug( buffer.toString() ) ;
      }
      if( log.isTraceEnabled() ) exitTrace( log, "AST_UserDefinedFunction.buildXmlTree()" ) ; 
      
  }

}
