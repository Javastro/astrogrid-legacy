/* Generated By: AdqlStoX.jjt,v 1.18 2007/07/25 12&JJTree: Do not edit this line. AST_BoxJ2000.java */

package org.astrogrid.adql;

import org.apache.xmlbeans.XmlObject;
import org.astrogrid.adql.beans.LinkedListType;
import org.astrogrid.adql.beans.ScalarExpressionType;
import org.astrogrid.stc.beans.*;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_BoxJ2000 extends SimpleNode {
    
  private static Log log = LogFactory.getLog( AST_BoxJ2000.class ) ;

  public AST_BoxJ2000(AdqlStoX p, int id) {
    super(p, id) ;
    setPositionType( BoxType.type ) ;
  }
  
  public void buildXmlTree( XmlObject xo ) {
      if( log.isTraceEnabled() ) enterTrace( log, "AST_BoxJ2000.buildXmlTree()" ) ; 
      //
      // "Create" the appropriate polygon type using XmlBeans magic.
      BoxType bt = (BoxType)xo.changeType( BoxType.type ) ;
      this.generatedObject = bt ;    
      //
      // We know this is a J2000 Box type, else why are we here.
      // So set the appropriate astro coord system...
      AST_RegionPredicate.setAstroCoordSystem_J2000( this ) ;
      //
      // Get the linked element list, used by the predicate
      // to hold references to ADQL elements which are not literals.
      LinkedListType llt = this.getCurrentLinkedElementList() ;
      //
      // First we deal with the center of the box...
      Double2Type center = bt.addNewCenter() ;
      //
      // The first child is coord_one.
      // We add a linked element which may later be removed.
      // Then we get the child node to build the coord_one parameter.
      ScalarExpressionType coord1 = llt.addNewLinkedElement() ;
      children[0].buildXmlTree( coord1 ) ;
      coord1 = (ScalarExpressionType)children[0].getGeneratedObject() ;
      //
      // Create the coord_one portion of the center.
      // We then attempt to unpack the value as a numeric literal.
      // IF the return value is not null, it was a literal, in which
      // case we can remove the linked element, for the value will 
      // be in situ in the region type.
      // IF the value is null, then the reference was to a column
      // reference or complex expression ( sin, square etc ).
      Double1Type d1tCoord1 = center.addNewC1() ;
      Double d = this.unpackNumericLiteral( coord1 ) ;
      if( d != null ) {
          // Literal...
          d1tCoord1.setDoubleValue( d.doubleValue() ) ;
          llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
      }
      else {
          // Column reference or complex expression...
          String uid = this.formUniqueID() ;
          coord1.setId( uid ) ;
          d1tCoord1.setIdref( uid ) ;
      }
      //
      // Create the coord_two portion of the center.
      // The second child is coord_two.
      // (See comments above for coord_one).
      ScalarExpressionType coord2 = llt.addNewLinkedElement() ;
      children[1].buildXmlTree( coord2 ) ;
      coord2 = (ScalarExpressionType)children[1].getGeneratedObject() ;
      
      Double1Type d1tCoord2 = center.addNewC2() ;
      d = this.unpackNumericLiteral( coord2 ) ;
      if( d != null ) {
          d1tCoord2.setDoubleValue( d.doubleValue() ) ;
          llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
      }
      else {
          String uid = this.formUniqueID() ;
          coord2.setId( uid ) ;
          d1tCoord2.setIdref( uid ) ;;
      }
      //
      // Having finished with the center, we now deal with the size of the box.
      Double2Type size = bt.addNewSize() ;
      //
      // The third child is length.
      // We add a linked element which may later be removed.
      // Then we get the child node to build the length parameter.
      ScalarExpressionType length = llt.addNewLinkedElement() ;
      children[2].buildXmlTree( length ) ;
      length = (ScalarExpressionType)children[2].getGeneratedObject() ;
      //
      // Create the length portion of the size.
      // We then attempt to unpack the value as a numeric literal.
      // IF the return value is not null, it was a literal, in which
      // case we can remove the linked element, for the value will 
      // be in situ in the region type.
      // IF the value is null, then the reference was to a column
      // reference or complex expression ( sin, square etc ).
      Double1Type d1tLength = size.addNewC1() ;
      d = this.unpackNumericLiteral( length ) ;
      if( d != null ) {
          // Literal...
          d1tLength.setDoubleValue( d.doubleValue() ) ;
          llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
      }
      else {
          // Column reference or complex expression...
          String uid = this.formUniqueID() ;
          length.setId( uid ) ;
          d1tLength.setIdref( uid ) ;
      }
      //
      // Create the breadth portion of the size.
      // The fourth child is breadth.
      // (See comments above for length).
      ScalarExpressionType breadth = llt.addNewLinkedElement() ;
      children[3].buildXmlTree( breadth ) ;
      breadth = (ScalarExpressionType)children[3].getGeneratedObject() ;
      
      Double1Type d1tBreadth = size.addNewC2() ;
      d = this.unpackNumericLiteral( breadth ) ;
      if( d != null ) {
          d1tBreadth.setDoubleValue( d.doubleValue() ) ;
          llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
      }
      else {
          String uid = this.formUniqueID() ;
          breadth.setId( uid ) ;
          d1tBreadth.setIdref( uid ) ;;
      }          
      super.buildXmlTree( bt ) ;
      if( log.isTraceEnabled() ) exitTrace( log, "AST_BoxJ2000.buildXmlTree()" ) ; 
  }

}
