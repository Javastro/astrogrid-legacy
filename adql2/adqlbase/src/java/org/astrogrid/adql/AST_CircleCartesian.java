/* Generated By: AdqlStoX.jjt,v 1.13 2007/07/17 16&JJTree: Do not edit this line. AST_CircleCartesian.java */

package org.astrogrid.adql;

import org.apache.xmlbeans.XmlObject;
import org.astrogrid.adql.beans.AtomType;
import org.astrogrid.adql.beans.IntegerType;
import org.astrogrid.adql.beans.LiteralType;
import org.astrogrid.adql.beans.RealType;
import org.astrogrid.adql.beans.StringType;
import org.astrogrid.adql.beans.RegionSearchType;
import org.astrogrid.adql.beans.LinkedListType;
import org.astrogrid.adql.beans.ScalarExpressionType;

import org.astrogrid.stc.beans.*;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_CircleCartesian extends SimpleNode {
 
    private static Log log = LogFactory.getLog( AST_CircleCartesian.class ) ;
    
  public AST_CircleCartesian(AdqlStoX p, int id) {
    super(p, id);
  }

  public void buildXmlTree( XmlObject xo ) {
      if( log.isTraceEnabled() ) enterTrace( log, "AST_CircleCartesian.buildXmlTree()" ) ; 
      getTracker().setType( CircleType.type ) ;
     
      //
      //
      // We know this is a circle type, else why are we here ...
      CircleType circle = (CircleType)xo.changeType( CircleType.type ) ;
      this.generatedObject = circle ;
      //
      // We know this is a J2000 circle type, else why are we here.
      // So set the appropriate astro coord system...
      AST_RegionPredicate.setAstroCoordSystem_Cartesian( this ) ;
      //
      // Give it a center and a radius.
      // This seems obvious, but I'm not understanding how
      // x, y and z coords relate to the center!
      Double2Type center = circle.addNewCenter() ;

      //
      // Get the linked element list, used by the predicate
      // to hold references to ADQL elements which are not literals.
      //
      LinkedListType llt = this.getCurrentLinkedElementList() ;      
      //
      // The first child is x-coord.
     
      
      //
      // The second child is y-coord.

      
      //
      // The third child is z-coord.
      
  
      //
      // The forth child is radius. 
      Double1Type d1tRad = circle.addNewRadius() ;
      ScalarExpressionType setRadius = llt.addNewLinkedElement() ;
      children[2].buildXmlTree( setRadius ) ;
      setRadius = (ScalarExpressionType)children[2].getGeneratedObject() ;     
      Double d = this.unpackNumericLiteral( setRadius ) ;
      if( d != null ) {
          d1tRad.setDoubleValue( d.doubleValue() ) ;
          llt.removeLinkedElement( llt.sizeOfLinkedElementArray()-1 ) ;
      } else {
          String uid = this.formUniqueID() ;
          setRadius.setId( uid ) ;
          d1tRad.setIdref( uid ) ;
      }
      super.buildXmlTree(circle) ;
      if( log.isTraceEnabled() ) exitTrace( log, "AST_CircleCartesian.buildXmlTree()" ) ; 
  }
  
}
