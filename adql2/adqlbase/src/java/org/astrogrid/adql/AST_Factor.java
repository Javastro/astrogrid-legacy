/* Generated By: AdqlStoX.jjt,v 1.33.2.4 2006-12-19 14&JJTree: Do not edit this line. AST_Factor.java */

package org.astrogrid.adql;

import org.astrogrid.adql.beans.BinaryExprType;
import org.astrogrid.adql.beans.UnaryExprType;
import org.astrogrid.adql.beans.UnaryOperatorType;
import org.apache.xmlbeans.XmlObject; 
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;

public class AST_Factor extends SimpleNode {
    
    private static Log log = LogFactory.getLog( AST_Factor.class ) ;
    
    private Token signToken ;

    public AST_Factor(AdqlStoX p, int id) {
        super(p, id);
    }
    
    public void setSign( Token t ) {
        signToken = t ;
        getTracker().setType( BinaryExprType.type ) ;
        getTracker().push( AdqlCompiler.ARG_ELEMENT ) ;
    }
    
    public boolean isSetSign() {
        return signToken != null ;
    }

//    public Object generatedObject() {
//        int childCount = jjtGetNumChildren() ;
//        UnaryExprType ueType = null ;
//        ScalarExpressionType numericPrimary = null ;
//        Object child = null ;
//        for( int i=0; i<childCount; i++ ) {
//            child = children[i].generateObject() ;
//            if( child instanceof String ) {
//                ueType = UnaryExprType.Factory.newInstance() ;
//                ueType.setOper( UnaryOperatorType.Enum.forString( (String)child ) ) ;    
//            }
//            else {
//                numericPrimary = (ScalarExpressionType)child ; 
//            }
//        }
//        if( ueType != null ) {
//            ueType.setArg( numericPrimary ) ; 
//            this.generatedObject = ueType ;
//        }
//        else {
//            this.generatedObject = numericPrimary ;
//        }       
//        return super.generateObject() ;
//    }
    
    public void jjtClose() {
        if( isSetSign() ) {
            getTracker().pop() ;
        }
    }
    
    public void buildXmlTree( XmlObject xo ) {
        if( log.isTraceEnabled() ) enterTrace( log, "AST_Factor.buildXmlTree()" ) ; 
        if( isSetSign() ) {
            UnaryExprType ueType = (UnaryExprType)xo.changeType( UnaryExprType.type) ;
            ueType.setOper( UnaryOperatorType.Enum.forString( signToken.image ) ) ;  
            children[1].buildXmlTree( ueType.addNewArg() ) ;
            this.generatedObject = children[1].getGeneratedObject() ;
        }
        else {
            children[0].buildXmlTree( xo ) ;
            this.generatedObject = children[0].getGeneratedObject() ;
        }
        super.buildXmlTree(xo) ;
        if( log.isTraceEnabled() ) exitTrace( log, "AST_Factor.buildXmlTree()" ) ; 
    }
  
}
