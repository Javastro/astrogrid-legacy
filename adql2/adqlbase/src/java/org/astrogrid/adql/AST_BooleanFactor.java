/* Generated By: AdqlStoX.jjt,v 1.33.2.4 2006-12-19 14&JJTree: Do not edit this line. AST_BooleanFactor.java */

package org.astrogrid.adql;

import org.astrogrid.adql.beans.InverseSearchType ;
import org.astrogrid.adql.beans.UnionSearchType;
import org.apache.xmlbeans.XmlObject ;
import org.apache.commons.logging.Log ;
import org.apache.commons.logging.LogFactory ;


public class AST_BooleanFactor extends SimpleNode {

    private static Log log = LogFactory.getLog( AST_Select.class ) ;
    
    private boolean bInverse = false ;

    public AST_BooleanFactor(AdqlStoX p, int id) {
        super(p, id);
    }

    public void setInverse() {
        bInverse = true ;
        pushPosition( AdqlCompiler.CONDITION_ELEMENT, InverseSearchType.type ) ;
//        Tracker t = getTracker() ;
//        //
//        // The NOT is replacing a current element, so
//        // we remember the current element, which we will
//        // use to create a sub element below the NOT...
//        Tracker.Part p = t.peek() ;
//        String element = p.getElement() ;
//        //
//        // Keep the current element but change its type to NOT...
//        t.setType( InverseSearchType.type ) ;
//        //
//        // Create the sub element below it...
//        // (Effectively, the NOT has pushed this below)
//        t.push( element ) ;
    }
    
    public boolean isInverse() {
        return bInverse ;
    }
    
    public void buildXmlTree( XmlObject xo ) {
        if( log.isTraceEnabled() ) enterTrace( log, "AST_BooleanFactor.buildXmlTree()" ) ; 
        if( bInverse ) {
            InverseSearchType is = (InverseSearchType)xo.changeType( InverseSearchType.type ) ;
            children[0].buildXmlTree( is.addNewCondition() ) ;
            this.generatedObject = is ;
        }
        else {
            children[0].buildXmlTree( xo ) ;
            this.generatedObject = children[0].getGeneratedObject() ; 
        }
        super.buildXmlTree( (XmlObject)this.generatedObject ) ;
        if( log.isTraceEnabled() ) exitTrace( log, "AST_BooleanFactor.buildXmlTree()" ) ; 
    }

}
